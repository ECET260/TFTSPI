
TFTSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000506c  08015e28  08015e28  00025e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae94  0801ae94  00030260  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae94  0801ae94  0002ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae9c  0801ae9c  00030260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae9c  0801ae9c  0002ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aea0  0801aea0  0002aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0801aea4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030260  2**0
                  CONTENTS
 10 .bss          0001e538  20000260  20000260  00030260  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001e798  2001e798  00030260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028326  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b95  00000000  00000000  000585b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0005d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0005e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277e8  00000000  00000000  0005f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c450  00000000  00000000  000870f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e827f  00000000  00000000  000a3548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  0018b7c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006774  00000000  00000000  0018b888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015e0c 	.word	0x08015e0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	08015e0c 	.word	0x08015e0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f5c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f60:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f68:	e000      	b.n	8000f6c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f6a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 ffed 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f8e3 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 faa7 	bl	80014f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fa2:	f000 f9bd 	bl	8001320 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000fa6:	f000 f9e9 	bl	800137c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000faa:	f000 fa15 	bl	80013d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000fae:	f009 fb0b 	bl	800a5c8 <MX_USB_HOST_Init>
  MX_DMA_Init();
 8000fb2:	f000 fa7d 	bl	80014b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fb6:	f000 f93f 	bl	8001238 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000fba:	f000 fa43 	bl	8001444 <MX_SPI2_Init>
  MX_CRC_Init();
 8000fbe:	f000 f99b 	bl	80012f8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  GUI_Init();
 8000fc2:	f00a fb9f 	bl	800b704 <GUI_Init>

  GUI_SetBkColor(GUI_BLUE);
 8000fc6:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8000fca:	f00a fa36 	bl	800b43a <GUI_SetBkColor>
  GUI_Clear();
 8000fce:	f00a fb3f 	bl	800b650 <GUI_Clear>
  GUI_SetFont(&GUI_Font32B_ASCII);
 8000fd2:	4854      	ldr	r0, [pc, #336]	; (8001124 <main+0x194>)
 8000fd4:	f00a fa38 	bl	800b448 <GUI_SetFont>
  GUI_SetColor(GUI_YELLOW);
 8000fd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fdc:	f00a fa2f 	bl	800b43e <GUI_SetColor>

#ifdef ILI9341
  GUI_DispStringHCenterAt("ECET260", 160, 50);
 8000fe0:	2232      	movs	r2, #50	; 0x32
 8000fe2:	21a0      	movs	r1, #160	; 0xa0
 8000fe4:	4850      	ldr	r0, [pc, #320]	; (8001128 <main+0x198>)
 8000fe6:	f00a fd57 	bl	800ba98 <GUI_DispStringHCenterAt>
  GUI_DispStringHCenterAt("Mel Dundas", 160, 100);
 8000fea:	2264      	movs	r2, #100	; 0x64
 8000fec:	21a0      	movs	r1, #160	; 0xa0
 8000fee:	484f      	ldr	r0, [pc, #316]	; (800112c <main+0x19c>)
 8000ff0:	f00a fd52 	bl	800ba98 <GUI_DispStringHCenterAt>
  GUI_SetFont(&GUI_Font20B_ASCII);
  GUI_DispStringHCenterAt("ECET260", 80, 20);
  GUI_DispStringHCenterAt("Mel Dundas", 80, 50);
#endif
  //GUI_SetFont(&GUI_FontD24x32);
  GUI_SetFont(&GUI_Font32B_1);
 8000ff4:	484e      	ldr	r0, [pc, #312]	; (8001130 <main+0x1a0>)
 8000ff6:	f00a fa27 	bl	800b448 <GUI_SetFont>
  GUI_SetColor(GUI_WHITE);
 8000ffa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000ffe:	f00a fa1e 	bl	800b43e <GUI_SetColor>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_DMA(&hadc1, dataArray, 200);
 8001002:	22c8      	movs	r2, #200	; 0xc8
 8001004:	494b      	ldr	r1, [pc, #300]	; (8001134 <main+0x1a4>)
 8001006:	484c      	ldr	r0, [pc, #304]	; (8001138 <main+0x1a8>)
 8001008:	f001 f88e 	bl	8002128 <HAL_ADC_Start_DMA>

  while (1)
  {


	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800100c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001010:	484a      	ldr	r0, [pc, #296]	; (800113c <main+0x1ac>)
 8001012:	f002 faaa 	bl	800356a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101a:	f001 f81d 	bl	8002058 <HAL_Delay>

	  thermValue = 0;
 800101e:	4b48      	ldr	r3, [pc, #288]	; (8001140 <main+0x1b0>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	  tempValue = 0;
 8001024:	4b47      	ldr	r3, [pc, #284]	; (8001144 <main+0x1b4>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]

	  for(int i=0;i<200;i+=2)
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	e00b      	b.n	8001048 <main+0xb8>
	  {
		  thermValue += dataArray[i];
 8001030:	4a40      	ldr	r2, [pc, #256]	; (8001134 <main+0x1a4>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <main+0x1b0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4413      	add	r3, r2
 800103e:	4a40      	ldr	r2, [pc, #256]	; (8001140 <main+0x1b0>)
 8001040:	6013      	str	r3, [r2, #0]
	  for(int i=0;i<200;i+=2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3302      	adds	r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2bc7      	cmp	r3, #199	; 0xc7
 800104c:	ddf0      	ble.n	8001030 <main+0xa0>
	  }

	  for(int i=1;i<200;i+=2)
 800104e:	2301      	movs	r3, #1
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	e00b      	b.n	800106c <main+0xdc>
	  {
		  tempValue +=dataArray[i];
 8001054:	4a37      	ldr	r2, [pc, #220]	; (8001134 <main+0x1a4>)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <main+0x1b4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4413      	add	r3, r2
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <main+0x1b4>)
 8001064:	6013      	str	r3, [r2, #0]
	  for(int i=1;i<200;i+=2)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3302      	adds	r3, #2
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2bc7      	cmp	r3, #199	; 0xc7
 8001070:	ddf0      	ble.n	8001054 <main+0xc4>
	  }

	  thermistorTemperature = approximateTemperatureFloat(thermValue /= 100);
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <main+0x1b0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a34      	ldr	r2, [pc, #208]	; (8001148 <main+0x1b8>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	095b      	lsrs	r3, r3, #5
 800107e:	4a30      	ldr	r2, [pc, #192]	; (8001140 <main+0x1b0>)
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <main+0x1b0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fb62 	bl	8001750 <approximateTemperatureFloat>
 800108c:	eef0 7a40 	vmov.f32	s15, s0
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <main+0x1bc>)
 8001092:	edc3 7a00 	vstr	s15, [r3]
	  dieTemperature = GetDieTemp(tempValue /= 100);
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <main+0x1b4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <main+0x1b8>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	095b      	lsrs	r3, r3, #5
 80010a2:	4a28      	ldr	r2, [pc, #160]	; (8001144 <main+0x1b4>)
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <main+0x1b4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fb7c 	bl	80017a8 <GetDieTemp>
 80010b0:	eef0 7a40 	vmov.f32	s15, s0
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <main+0x1c0>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]

	  printf("Thermistor value: %ld, Temp: %0.1f", thermValue, thermistorTemperature );
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <main+0x1b0>)
 80010bc:	681c      	ldr	r4, [r3, #0]
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <main+0x1bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa40 	bl	8000548 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4621      	mov	r1, r4
 80010ce:	4821      	ldr	r0, [pc, #132]	; (8001154 <main+0x1c4>)
 80010d0:	f012 fd34 	bl	8013b3c <iprintf>
	  printf("    Die value: %ld, Die Temp: %0.1f\n", tempValue, dieTemperature);
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <main+0x1b4>)
 80010d6:	681c      	ldr	r4, [r3, #0]
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <main+0x1c0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4621      	mov	r1, r4
 80010e8:	481b      	ldr	r0, [pc, #108]	; (8001158 <main+0x1c8>)
 80010ea:	f012 fd27 	bl	8013b3c <iprintf>

	  sprintf(dataOut, "%0.1f %cC", thermistorTemperature, 176);
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <main+0x1bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	21b0      	movs	r1, #176	; 0xb0
 80010fe:	9100      	str	r1, [sp, #0]
 8001100:	4916      	ldr	r1, [pc, #88]	; (800115c <main+0x1cc>)
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <main+0x1d0>)
 8001104:	f012 fd42 	bl	8013b8c <siprintf>
#ifdef ILI9488
	  GUI_DispStringHCenterAt(dataOut, 240,  200);
#elif defined  ST7735
	  GUI_DispStringHCenterAt(dataOut, 80,  80);
#else
	  GUI_DispStringHCenterAt(dataOut, 160,  180);
 8001108:	22b4      	movs	r2, #180	; 0xb4
 800110a:	21a0      	movs	r1, #160	; 0xa0
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <main+0x1d0>)
 800110e:	f00a fcc3 	bl	800ba98 <GUI_DispStringHCenterAt>
#endif
	  GUI_Exec();
 8001112:	f00a f93d 	bl	800b390 <GUI_Exec>

	  GUI_Delay(200);
 8001116:	20c8      	movs	r0, #200	; 0xc8
 8001118:	f00a fd5c 	bl	800bbd4 <GUI_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800111c:	f009 fa7a 	bl	800a614 <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001120:	e774      	b.n	800100c <main+0x7c>
 8001122:	bf00      	nop
 8001124:	08018280 	.word	0x08018280
 8001128:	08015e28 	.word	0x08015e28
 800112c:	08015e30 	.word	0x08015e30
 8001130:	080162d0 	.word	0x080162d0
 8001134:	2001d9dc 	.word	0x2001d9dc
 8001138:	2001dd58 	.word	0x2001dd58
 800113c:	40020c00 	.word	0x40020c00
 8001140:	200004a4 	.word	0x200004a4
 8001144:	200004a8 	.word	0x200004a8
 8001148:	51eb851f 	.word	0x51eb851f
 800114c:	200004ac 	.word	0x200004ac
 8001150:	200004b0 	.word	0x200004b0
 8001154:	08015e3c 	.word	0x08015e3c
 8001158:	08015e60 	.word	0x08015e60
 800115c:	08015e88 	.word	0x08015e88
 8001160:	2001de00 	.word	0x2001de00

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	2230      	movs	r2, #48	; 0x30
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f011 ffc6 	bl	8013104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <SystemClock_Config+0xcc>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <SystemClock_Config+0xcc>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b25      	ldr	r3, [pc, #148]	; (8001230 <SystemClock_Config+0xcc>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <SystemClock_Config+0xd0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <SystemClock_Config+0xd0>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <SystemClock_Config+0xd0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011d8:	23a8      	movs	r3, #168	; 0xa8
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e0:	2307      	movs	r3, #7
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fd2d 	bl	8005c48 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f4:	f000 fb30 	bl	8001858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001204:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2105      	movs	r1, #5
 8001216:	4618      	mov	r0, r3
 8001218:	f004 ff8e 	bl	8006138 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001222:	f000 fb19 	bl	8001858 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	; 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <MX_ADC1_Init+0xb4>)
 800124c:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <MX_ADC1_Init+0xb8>)
 800124e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001252:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001256:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <MX_ADC1_Init+0xb4>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001260:	2201      	movs	r2, #1
 8001262:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001266:	2201      	movs	r2, #1
 8001268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_ADC1_Init+0xb4>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_ADC1_Init+0xb4>)
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <MX_ADC1_Init+0xbc>)
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001286:	2202      	movs	r2, #2
 8001288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <MX_ADC1_Init+0xb4>)
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_ADC1_Init+0xb4>)
 8001294:	2201      	movs	r2, #1
 8001296:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001298:	4814      	ldr	r0, [pc, #80]	; (80012ec <MX_ADC1_Init+0xb4>)
 800129a:	f000 ff01 	bl	80020a0 <HAL_ADC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 fad8 	bl	8001858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012a8:	230b      	movs	r3, #11
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80012b0:	2305      	movs	r3, #5
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <MX_ADC1_Init+0xb4>)
 80012ba:	f001 f863 	bl	8002384 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012c4:	f000 fac8 	bl	8001858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012c8:	2310      	movs	r3, #16
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_ADC1_Init+0xb4>)
 80012d6:	f001 f855 	bl	8002384 <HAL_ADC_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012e0:	f000 faba 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2001dd58 	.word	0x2001dd58
 80012f0:	40012000 	.word	0x40012000
 80012f4:	0f000001 	.word	0x0f000001

080012f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_CRC_Init+0x20>)
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <MX_CRC_Init+0x24>)
 8001300:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_CRC_Init+0x20>)
 8001304:	f001 fbef 	bl	8002ae6 <HAL_CRC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800130e:	f000 faa3 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2001dd50 	.word	0x2001dd50
 800131c:	40023000 	.word	0x40023000

08001320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_I2C1_Init+0x50>)
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <MX_I2C1_Init+0x54>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_I2C1_Init+0x50>)
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_I2C1_Init+0x58>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_I2C1_Init+0x50>)
 800133e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	; (8001370 <MX_I2C1_Init+0x50>)
 800135e:	f003 fe8f 	bl	8005080 <HAL_I2C_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001368:	f000 fa76 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2001dcfc 	.word	0x2001dcfc
 8001374:	40005400 	.word	0x40005400
 8001378:	000186a0 	.word	0x000186a0

0800137c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2S3_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <MX_I2S3_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_I2S3_Init+0x50>)
 8001388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_I2S3_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_I2S3_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_I2S3_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_I2S3_Init+0x50>)
 80013a2:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <MX_I2S3_Init+0x58>)
 80013a4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_I2S3_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <MX_I2S3_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_I2S3_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_I2S3_Init+0x50>)
 80013ba:	f003 ffa5 	bl	8005308 <HAL_I2S_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2S3_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 fa48 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2001de68 	.word	0x2001de68
 80013d0:	40003c00 	.word	0x40003c00
 80013d4:	00017700 	.word	0x00017700

080013d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_SPI1_Init+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <MX_SPI1_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI1_Init+0x64>)
 800140c:	2208      	movs	r2, #8
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI1_Init+0x64>)
 8001424:	220a      	movs	r2, #10
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_SPI1_Init+0x64>)
 800142a:	f005 f9ad 	bl	8006788 <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001434:	f000 fa10 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2001de10 	.word	0x2001de10
 8001440:	40013000 	.word	0x40013000

08001444 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_SPI2_Init+0x64>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_SPI2_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001454:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_SPI2_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI2_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001478:	2220      	movs	r2, #32
 800147a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_SPI2_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_SPI2_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001490:	220a      	movs	r2, #10
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_SPI2_Init+0x64>)
 8001496:	f005 f977 	bl	8006788 <HAL_SPI_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014a0:	f000 f9da 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2001d984 	.word	0x2001d984
 80014ac:	40003800 	.word	0x40003800

080014b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_DMA_Init+0x3c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <MX_DMA_Init+0x3c>)
 80014c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_DMA_Init+0x3c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2038      	movs	r0, #56	; 0x38
 80014d8:	f001 facf 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014dc:	2038      	movs	r0, #56	; 0x38
 80014de:	f001 fae8 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	4b84      	ldr	r3, [pc, #528]	; (800171c <MX_GPIO_Init+0x22c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a83      	ldr	r2, [pc, #524]	; (800171c <MX_GPIO_Init+0x22c>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b81      	ldr	r3, [pc, #516]	; (800171c <MX_GPIO_Init+0x22c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	4b7d      	ldr	r3, [pc, #500]	; (800171c <MX_GPIO_Init+0x22c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a7c      	ldr	r2, [pc, #496]	; (800171c <MX_GPIO_Init+0x22c>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b7a      	ldr	r3, [pc, #488]	; (800171c <MX_GPIO_Init+0x22c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b76      	ldr	r3, [pc, #472]	; (800171c <MX_GPIO_Init+0x22c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a75      	ldr	r2, [pc, #468]	; (800171c <MX_GPIO_Init+0x22c>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b73      	ldr	r3, [pc, #460]	; (800171c <MX_GPIO_Init+0x22c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <MX_GPIO_Init+0x22c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a6e      	ldr	r2, [pc, #440]	; (800171c <MX_GPIO_Init+0x22c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b6c      	ldr	r3, [pc, #432]	; (800171c <MX_GPIO_Init+0x22c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b68      	ldr	r3, [pc, #416]	; (800171c <MX_GPIO_Init+0x22c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a67      	ldr	r2, [pc, #412]	; (800171c <MX_GPIO_Init+0x22c>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b65      	ldr	r3, [pc, #404]	; (800171c <MX_GPIO_Init+0x22c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b61      	ldr	r3, [pc, #388]	; (800171c <MX_GPIO_Init+0x22c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a60      	ldr	r2, [pc, #384]	; (800171c <MX_GPIO_Init+0x22c>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b5e      	ldr	r3, [pc, #376]	; (800171c <MX_GPIO_Init+0x22c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2188      	movs	r1, #136	; 0x88
 80015b2:	485b      	ldr	r0, [pc, #364]	; (8001720 <MX_GPIO_Init+0x230>)
 80015b4:	f001 ffc0 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	4859      	ldr	r0, [pc, #356]	; (8001724 <MX_GPIO_Init+0x234>)
 80015be:	f001 ffbb 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_CS_Pin|TFT_RESET_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2130      	movs	r1, #48	; 0x30
 80015c6:	4857      	ldr	r0, [pc, #348]	; (8001724 <MX_GPIO_Init+0x234>)
 80015c8:	f001 ffb6 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_BL_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2103      	movs	r1, #3
 80015d0:	4855      	ldr	r0, [pc, #340]	; (8001728 <MX_GPIO_Init+0x238>)
 80015d2:	f001 ffb1 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015d6:	2200      	movs	r2, #0
 80015d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80015dc:	4853      	ldr	r0, [pc, #332]	; (800172c <MX_GPIO_Init+0x23c>)
 80015de:	f001 ffab 	bl	8003538 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|TOUCH_CS_Pin;
 80015e2:	2388      	movs	r3, #136	; 0x88
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4849      	ldr	r0, [pc, #292]	; (8001720 <MX_GPIO_Init+0x230>)
 80015fa:	f001 fe01 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin TFT_CS_Pin TFT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|TFT_CS_Pin|TFT_RESET_Pin;
 80015fe:	2331      	movs	r3, #49	; 0x31
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4843      	ldr	r0, [pc, #268]	; (8001724 <MX_GPIO_Init+0x234>)
 8001616:	f001 fdf3 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800161a:	2308      	movs	r3, #8
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162a:	2305      	movs	r3, #5
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	483b      	ldr	r0, [pc, #236]	; (8001724 <MX_GPIO_Init+0x234>)
 8001636:	f001 fde3 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800163a:	2301      	movs	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800163e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4838      	ldr	r0, [pc, #224]	; (8001730 <MX_GPIO_Init+0x240>)
 8001650:	f001 fdd6 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_DC_Pin TFT_BL_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_BL_Pin;
 8001654:	2303      	movs	r3, #3
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	482f      	ldr	r0, [pc, #188]	; (8001728 <MX_GPIO_Init+0x238>)
 800166c:	f001 fdc8 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001670:	2304      	movs	r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_GPIO_Init+0x238>)
 8001684:	f001 fdbc 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4820      	ldr	r0, [pc, #128]	; (8001720 <MX_GPIO_Init+0x230>)
 800169e:	f001 fdaf 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80016a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016b4:	2305      	movs	r3, #5
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	481a      	ldr	r0, [pc, #104]	; (8001728 <MX_GPIO_Init+0x238>)
 80016c0:	f001 fd9e 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80016c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4813      	ldr	r0, [pc, #76]	; (800172c <MX_GPIO_Init+0x23c>)
 80016de:	f001 fd8f 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016e2:	2320      	movs	r3, #32
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_GPIO_Init+0x23c>)
 80016f6:	f001 fd83 	bl	8003200 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_GPIO_Init+0x230>)
 8001710:	f001 fd76 	bl	8003200 <HAL_GPIO_Init>

}
 8001714:	bf00      	nop
 8001716:	3730      	adds	r7, #48	; 0x30
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40021000 	.word	0x40021000
 8001724:	40020800 	.word	0x40020800
 8001728:	40020400 	.word	0x40020400
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40020000 	.word	0x40020000

08001734 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fbfe 	bl	8000f40 <ITM_SendChar>

	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <approximateTemperatureFloat>:
 * @param   The result of an ADC conversion (analogRead) in the range 0 to 4095
 * @return  Temperature in °C (+/- 3.994 °C)
 */

float  approximateTemperatureFloat(unsigned int analogReadValue)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return -0.0732166185636231*analogReadValue+295.737217355;
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7fe fed3 	bl	8000504 <__aeabi_ui2d>
 800175e:	a30e      	add	r3, pc, #56	; (adr r3, 8001798 <approximateTemperatureFloat+0x48>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe ff48 	bl	80005f8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	a30b      	add	r3, pc, #44	; (adr r3, 80017a0 <approximateTemperatureFloat+0x50>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe fd89 	bl	800028c <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff fa11 	bl	8000ba8 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	ee07 3a90 	vmov	s15, r3
}
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	064124cc 	.word	0x064124cc
 800179c:	bfb2be53 	.word	0xbfb2be53
 80017a0:	a46cdc4c 	.word	0xa46cdc4c
 80017a4:	40727bcb 	.word	0x40727bcb

080017a8 <GetDieTemp>:
//
//
//}

float GetDieTemp(uint32_t reading)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
//	– Avg_Slope = average slope of the temperature vs. V SENSE curve (given in mV/°C
//	or µV/°C)
// V 25 = 0.76V from DS8626 Datasheet
// Avg Slope = 2.5mV/°C

	float Vsense = reading * 3.0 /4095;
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7fe fea7 	bl	8000504 <__aeabi_ui2d>
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <GetDieTemp+0xa8>)
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001838 <GetDieTemp+0x90>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7ff f83d 	bl	800084c <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff f9e5 	bl	8000ba8 <__aeabi_d2f>
 80017de:	4603      	mov	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]
	float temp = (Vsense - 0.76)/0.0025 + 25;
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7fe feb0 	bl	8000548 <__aeabi_f2d>
 80017e8:	a315      	add	r3, pc, #84	; (adr r3, 8001840 <GetDieTemp+0x98>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fd4b 	bl	8000288 <__aeabi_dsub>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	a313      	add	r3, pc, #76	; (adr r3, 8001848 <GetDieTemp+0xa0>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7ff f824 	bl	800084c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <GetDieTemp+0xac>)
 8001812:	f7fe fd3b 	bl	800028c <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9c3 	bl	8000ba8 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	60bb      	str	r3, [r7, #8]

	return temp;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	ee07 3a90 	vmov	s15, r3

}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	00000000 	.word	0x00000000
 800183c:	40affe00 	.word	0x40affe00
 8001840:	851eb852 	.word	0x851eb852
 8001844:	3fe851eb 	.word	0x3fe851eb
 8001848:	47ae147b 	.word	0x47ae147b
 800184c:	3f647ae1 	.word	0x3f647ae1
 8001850:	40080000 	.word	0x40080000
 8001854:	40390000 	.word	0x40390000

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018a2:	2007      	movs	r0, #7
 80018a4:	f001 f8de 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_ADC_MspInit+0xec>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d160      	bne.n	8001998 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_ADC_MspInit+0xf0>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <HAL_ADC_MspInit+0xf0>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_ADC_MspInit+0xf0>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_ADC_MspInit+0xf0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <HAL_ADC_MspInit+0xf0>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <HAL_ADC_MspInit+0xf0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = Thermistor_Pin;
 800190e:	2302      	movs	r3, #2
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4821      	ldr	r0, [pc, #132]	; (80019a8 <HAL_ADC_MspInit+0xf4>)
 8001922:	f001 fc6d 	bl	8003200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001928:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <HAL_ADC_MspInit+0xfc>)
 800192a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001944:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001954:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001966:	2204      	movs	r2, #4
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 800196c:	2203      	movs	r2, #3
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 800197e:	f001 f8cf 	bl	8002b20 <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001988:	f7ff ff66 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <HAL_ADC_MspInit+0xf8>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020800 	.word	0x40020800
 80019ac:	2001dda0 	.word	0x2001dda0
 80019b0:	40026410 	.word	0x40026410

080019b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <HAL_CRC_MspInit+0x3c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10d      	bne.n	80019e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_CRC_MspInit+0x40>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_CRC_MspInit+0x40>)
 80019d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_CRC_MspInit+0x40>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023000 	.word	0x40023000
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_I2C_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12c      	bne.n	8001a74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a3c:	2312      	movs	r3, #18
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	480c      	ldr	r0, [pc, #48]	; (8001a84 <HAL_I2C_MspInit+0x8c>)
 8001a54:	f001 fbd4 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a66:	6413      	str	r3, [r2, #64]	; 0x40
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_I2C_MspInit+0x88>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020400 	.word	0x40020400

08001a88 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08e      	sub	sp, #56	; 0x38
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_I2S_MspInit+0xf0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d15a      	bne.n	8001b6e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001abc:	2332      	movs	r3, #50	; 0x32
 8001abe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 fd1d 	bl	8006508 <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ad4:	f7ff fec0 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_I2S_MspInit+0xf4>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <HAL_I2S_MspInit+0xf8>)
 8001b48:	f001 fb5a 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b4c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b66:	4619      	mov	r1, r3
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <HAL_I2S_MspInit+0xfc>)
 8001b6a:	f001 fb49 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3738      	adds	r7, #56	; 0x38
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40003c00 	.word	0x40003c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020800 	.word	0x40020800

08001b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_SPI_MspInit+0x144>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d13c      	bne.n	8001c24 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	4b48      	ldr	r3, [pc, #288]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_CLK_Pin;
 8001be2:	2320      	movs	r3, #32
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TFT_CLK_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4835      	ldr	r0, [pc, #212]	; (8001cd4 <HAL_SPI_MspInit+0x14c>)
 8001bfe:	f001 faff 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_MISO_Pin|TFT_MOSI_Pin;
 8001c02:	23c0      	movs	r3, #192	; 0xc0
 8001c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c12:	2305      	movs	r3, #5
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	482d      	ldr	r0, [pc, #180]	; (8001cd4 <HAL_SPI_MspInit+0x14c>)
 8001c1e:	f001 faef 	bl	8003200 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c22:	e04f      	b.n	8001cc4 <HAL_SPI_MspInit+0x13c>
  else if(hspi->Instance==SPI2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <HAL_SPI_MspInit+0x150>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14a      	bne.n	8001cc4 <HAL_SPI_MspInit+0x13c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_SPI_MspInit+0x148>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_MISO_Pin;
 8001c82:	2304      	movs	r3, #4
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c92:	2305      	movs	r3, #5
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOUCH_MISO_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480f      	ldr	r0, [pc, #60]	; (8001cdc <HAL_SPI_MspInit+0x154>)
 8001c9e:	f001 faaf 	bl	8003200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_CLK_Pin|TOUCH_MOSI_Pin;
 8001ca2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cb4:	2305      	movs	r3, #5
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4808      	ldr	r0, [pc, #32]	; (8001ce0 <HAL_SPI_MspInit+0x158>)
 8001cc0:	f001 fa9e 	bl	8003200 <HAL_GPIO_Init>
}
 8001cc4:	bf00      	nop
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40003800 	.word	0x40003800
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d30:	f000 f972 	bl	8002018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <SysTick_Handler+0x18>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a02      	ldr	r2, [pc, #8]	; (8001d44 <SysTick_Handler+0x18>)
 8001d3c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2001def8 	.word	0x2001def8

08001d48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA2_Stream0_IRQHandler+0x10>)
 8001d4e:	f000 ffed 	bl	8002d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2001dda0 	.word	0x2001dda0

08001d5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <OTG_FS_IRQHandler+0x10>)
 8001d62:	f001 fe87 	bl	8003a74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2001e2d4 	.word	0x2001e2d4

08001d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
	return 1;
 8001d74:	2301      	movs	r3, #1
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_kill>:

int _kill(int pid, int sig)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d8a:	f011 f959 	bl	8013040 <__errno>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2216      	movs	r2, #22
 8001d92:	601a      	str	r2, [r3, #0]
	return -1;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_exit>:

void _exit (int status)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffe7 	bl	8001d80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001db2:	e7fe      	b.n	8001db2 <_exit+0x12>

08001db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e00a      	b.n	8001ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dc6:	f3af 8000 	nop.w
 8001dca:	4601      	mov	r1, r0
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	60ba      	str	r2, [r7, #8]
 8001dd2:	b2ca      	uxtb	r2, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbf0      	blt.n	8001dc6 <_read+0x12>
	}

return len;
 8001de4:	687b      	ldr	r3, [r7, #4]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e009      	b.n	8001e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fc93 	bl	8001734 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf1      	blt.n	8001e00 <_write+0x12>
	}
	return len;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_close>:

int _close(int file)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <_isatty>:

int _isatty(int file)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	return 1;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <_sbrk+0x5c>)
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <_sbrk+0x60>)
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <_sbrk+0x64>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <_sbrk+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec0:	f011 f8be 	bl	8013040 <__errno>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e009      	b.n	8001ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <_sbrk+0x64>)
 8001ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20020000 	.word	0x20020000
 8001ef0:	00000400 	.word	0x00000400
 8001ef4:	200004b4 	.word	0x200004b4
 8001ef8:	2001e798 	.word	0x2001e798

08001efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SystemInit+0x20>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <SystemInit+0x20>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f26:	490e      	ldr	r1, [pc, #56]	; (8001f60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f3c:	4c0b      	ldr	r4, [pc, #44]	; (8001f6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f4a:	f7ff ffd7 	bl	8001efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f011 f87d 	bl	801304c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f52:	f7ff f81d 	bl	8000f90 <main>
  bx  lr    
 8001f56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8001f64:	0801aea4 	.word	0x0801aea4
  ldr r2, =_sbss
 8001f68:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8001f6c:	2001e798 	.word	0x2001e798

08001f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_Init+0x40>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_Init+0x40>)
 8001f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_Init+0x40>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_Init+0x40>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f000 fd61 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f000 f808 	bl	8001fb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa8:	f7ff fc5c 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_InitTick+0x54>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_InitTick+0x58>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fd79 	bl	8002ace <HAL_SYSTICK_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00e      	b.n	8002004 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d80a      	bhi.n	8002002 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fec:	2200      	movs	r2, #0
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f000 fd41 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_InitTick+0x5c>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000064 	.word	0x20000064
 8002010:	2000006c 	.word	0x2000006c
 8002014:	20000068 	.word	0x20000068

08002018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000006c 	.word	0x2000006c
 800203c:	2001deb0 	.word	0x2001deb0

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	2001deb0 	.word	0x2001deb0

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffde 	bl	8002040 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000006c 	.word	0x2000006c

080020a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e033      	b.n	800211e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fbf8 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e6:	f023 0302 	bic.w	r3, r3, #2
 80020ea:	f043 0202 	orr.w	r2, r3, #2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fa68 	bl	80025c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
 800210e:	e001      	b.n	8002114 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Start_DMA+0x1e>
 8002142:	2302      	movs	r3, #2
 8002144:	e0e9      	b.n	800231a <HAL_ADC_Start_DMA+0x1f2>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d018      	beq.n	800218e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800216c:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <HAL_ADC_Start_DMA+0x1fc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6d      	ldr	r2, [pc, #436]	; (8002328 <HAL_ADC_Start_DMA+0x200>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9a      	lsrs	r2, r3, #18
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3b01      	subs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219c:	d107      	bne.n	80021ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	f040 80a1 	bne.w	8002300 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fc:	d106      	bne.n	800220c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f023 0206 	bic.w	r2, r3, #6
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
 800220a:	e002      	b.n	8002212 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221a:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_ADC_Start_DMA+0x204>)
 800221c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4a43      	ldr	r2, [pc, #268]	; (8002330 <HAL_ADC_Start_DMA+0x208>)
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_ADC_Start_DMA+0x20c>)
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_ADC_Start_DMA+0x210>)
 8002234:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800223e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800224e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	334c      	adds	r3, #76	; 0x4c
 800226a:	4619      	mov	r1, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f000 fd04 	bl	8002c7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12a      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_ADC_Start_DMA+0x214>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d015      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x18e>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_ADC_Start_DMA+0x218>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_Start_DMA+0x178>
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_ADC_Start_DMA+0x204>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_ADC_Start_DMA+0x21c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d136      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_ADC_Start_DMA+0x204>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d130      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d129      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e020      	b.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_ADC_Start_DMA+0x214>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d11b      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d114      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	e00b      	b.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000064 	.word	0x20000064
 8002328:	431bde83 	.word	0x431bde83
 800232c:	40012300 	.word	0x40012300
 8002330:	080027c1 	.word	0x080027c1
 8002334:	0800287b 	.word	0x0800287b
 8002338:	08002897 	.word	0x08002897
 800233c:	40012000 	.word	0x40012000
 8002340:	40012100 	.word	0x40012100
 8002344:	40012200 	.word	0x40012200

08002348 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1c>
 800239c:	2302      	movs	r3, #2
 800239e:	e105      	b.n	80025ac <HAL_ADC_ConfigChannel+0x228>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d925      	bls.n	80023fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68d9      	ldr	r1, [r3, #12]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	3b1e      	subs	r3, #30
 80023c6:	2207      	movs	r2, #7
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68d9      	ldr	r1, [r3, #12]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4403      	add	r3, r0
 80023ee:	3b1e      	subs	r3, #30
 80023f0:	409a      	lsls	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	e022      	b.n	8002442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	2207      	movs	r2, #7
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	4603      	mov	r3, r0
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4403      	add	r3, r0
 8002438:	409a      	lsls	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b06      	cmp	r3, #6
 8002448:	d824      	bhi.n	8002494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b05      	subs	r3, #5
 800245c:	221f      	movs	r2, #31
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4618      	mov	r0, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b05      	subs	r3, #5
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
 8002492:	e04c      	b.n	800252e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d824      	bhi.n	80024e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b23      	subs	r3, #35	; 0x23
 80024ae:	221f      	movs	r2, #31
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43da      	mvns	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	400a      	ands	r2, r1
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b23      	subs	r3, #35	; 0x23
 80024d8:	fa00 f203 	lsl.w	r2, r0, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
 80024e4:	e023      	b.n	800252e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b41      	subs	r3, #65	; 0x41
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b41      	subs	r3, #65	; 0x41
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_ADC_ConfigChannel+0x234>)
 8002530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_ADC_ConfigChannel+0x238>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d109      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1cc>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b12      	cmp	r3, #18
 8002542:	d105      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_ADC_ConfigChannel+0x238>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d123      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x21e>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d003      	beq.n	800256a <HAL_ADC_ConfigChannel+0x1e6>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b11      	cmp	r3, #17
 8002568:	d11b      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d111      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_ADC_ConfigChannel+0x240>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	0c9a      	lsrs	r2, r3, #18
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002594:	e002      	b.n	800259c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40012300 	.word	0x40012300
 80025bc:	40012000 	.word	0x40012000
 80025c0:	20000064 	.word	0x20000064
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d0:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <ADC_Init+0x1f0>)
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	021a      	lsls	r2, r3, #8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	4a58      	ldr	r2, [pc, #352]	; (80027bc <ADC_Init+0x1f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e00f      	b.n	80026c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0202 	bic.w	r2, r2, #2
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7e1b      	ldrb	r3, [r3, #24]
 80026e0:	005a      	lsls	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01b      	beq.n	800272c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002702:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002712:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	3b01      	subs	r3, #1
 8002720:	035a      	lsls	r2, r3, #13
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	e007      	b.n	800273c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	3b01      	subs	r3, #1
 8002758:	051a      	lsls	r2, r3, #20
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800277e:	025a      	lsls	r2, r3, #9
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	029a      	lsls	r2, r3, #10
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40012300 	.word	0x40012300
 80027bc:	0f000001 	.word	0x0f000001

080027c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d13c      	bne.n	8002854 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d12b      	bne.n	800284c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d127      	bne.n	800284c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002814:	2b00      	cmp	r3, #0
 8002816:	d119      	bne.n	800284c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0220 	bic.w	r2, r2, #32
 8002826:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff fd7b 	bl	8002348 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002852:	e00e      	b.n	8002872 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fd85 	bl	8002370 <HAL_ADC_ErrorCallback>
}
 8002866:	e004      	b.n	8002872 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fd67 	bl	800235c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff fd5a 	bl	8002370 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <__NVIC_SetPriorityGrouping>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff29 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff3e 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff31 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e00e      	b.n	8002b16 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	795b      	ldrb	r3, [r3, #5]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe ff53 	bl	80019b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff fa88 	bl	8002040 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e099      	b.n	8002c70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5c:	e00f      	b.n	8002b7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5e:	f7ff fa6f 	bl	8002040 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d908      	bls.n	8002b7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e078      	b.n	8002c70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e8      	bne.n	8002b5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <HAL_DMA_Init+0x158>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	4313      	orrs	r3, r2
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d117      	bne.n	8002c42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa6f 	bl	8003108 <DMA_CheckFifoParam>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e016      	b.n	8002c70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa26 	bl	800309c <DMA_CalcBaseAndBitshift>
 8002c50:	4603      	mov	r3, r0
 8002c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	223f      	movs	r2, #63	; 0x3f
 8002c5a:	409a      	lsls	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	f010803f 	.word	0xf010803f

08002c7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_Start_IT+0x26>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e040      	b.n	8002d24 <HAL_DMA_Start_IT+0xa8>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d12f      	bne.n	8002d16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f9b8 	bl	8003040 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	223f      	movs	r2, #63	; 0x3f
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0216 	orr.w	r2, r2, #22
 8002cea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0208 	orr.w	r2, r2, #8
 8002d02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e005      	b.n	8002d22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d38:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <HAL_DMA_IRQHandler+0x258>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a92      	ldr	r2, [pc, #584]	; (8002f88 <HAL_DMA_IRQHandler+0x25c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2208      	movs	r2, #8
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	2208      	movs	r2, #8
 8002d86:	409a      	lsls	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d012      	beq.n	8002dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	2201      	movs	r2, #1
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0202 	orr.w	r2, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2204      	movs	r2, #4
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2210      	movs	r2, #16
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d043      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d03c      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2210      	movs	r2, #16
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d018      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d024      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
 8002e5a:	e01f      	b.n	8002e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01b      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
 8002e6c:	e016      	b.n	8002e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0208 	bic.w	r2, r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 808e 	beq.w	8002fca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8086 	beq.w	8002fca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d136      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0216 	bic.w	r2, r2, #22
 8002ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_DMA_IRQHandler+0x1da>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	223f      	movs	r2, #63	; 0x3f
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07d      	beq.n	8003036 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
        }
        return;
 8002f42:	e078      	b.n	8003036 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d108      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d030      	beq.n	8002fca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e02b      	b.n	8002fca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
 8002f82:	e022      	b.n	8002fca <HAL_DMA_IRQHandler+0x29e>
 8002f84:	20000064 	.word	0x20000064
 8002f88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10f      	bne.n	8002fba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0210 	bic.w	r2, r2, #16
 8002fa8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d032      	beq.n	8003038 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d022      	beq.n	8003024 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2205      	movs	r2, #5
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d307      	bcc.n	8003012 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f2      	bne.n	8002ff6 <HAL_DMA_IRQHandler+0x2ca>
 8003010:	e000      	b.n	8003014 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003012:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	e000      	b.n	8003038 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003036:	bf00      	nop
    }
  }
}
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop

08003040 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800305c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d108      	bne.n	8003080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800307e:	e007      	b.n	8003090 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3b10      	subs	r3, #16
 80030ac:	4a14      	ldr	r2, [pc, #80]	; (8003100 <DMA_CalcBaseAndBitshift+0x64>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <DMA_CalcBaseAndBitshift+0x68>)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	d909      	bls.n	80030de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030d2:	f023 0303 	bic.w	r3, r3, #3
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	659a      	str	r2, [r3, #88]	; 0x58
 80030dc:	e007      	b.n	80030ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	aaaaaaab 	.word	0xaaaaaaab
 8003104:	0801aaac 	.word	0x0801aaac

08003108 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11f      	bne.n	8003162 <DMA_CheckFifoParam+0x5a>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d856      	bhi.n	80031d6 <DMA_CheckFifoParam+0xce>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <DMA_CheckFifoParam+0x28>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003141 	.word	0x08003141
 8003134:	08003153 	.word	0x08003153
 8003138:	08003141 	.word	0x08003141
 800313c:	080031d7 	.word	0x080031d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d046      	beq.n	80031da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003150:	e043      	b.n	80031da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800315a:	d140      	bne.n	80031de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e03d      	b.n	80031de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316a:	d121      	bne.n	80031b0 <DMA_CheckFifoParam+0xa8>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d837      	bhi.n	80031e2 <DMA_CheckFifoParam+0xda>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <DMA_CheckFifoParam+0x70>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	08003189 	.word	0x08003189
 800317c:	0800318f 	.word	0x0800318f
 8003180:	08003189 	.word	0x08003189
 8003184:	080031a1 	.word	0x080031a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      break;
 800318c:	e030      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d025      	beq.n	80031e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319e:	e022      	b.n	80031e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031a8:	d11f      	bne.n	80031ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ae:	e01c      	b.n	80031ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d903      	bls.n	80031be <DMA_CheckFifoParam+0xb6>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d003      	beq.n	80031c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031bc:	e018      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      break;
 80031c2:	e015      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      break;
 80031d4:	e00b      	b.n	80031ee <DMA_CheckFifoParam+0xe6>
      break;
 80031d6:	bf00      	nop
 80031d8:	e00a      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e008      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      break;
 80031de:	bf00      	nop
 80031e0:	e006      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      break;
 80031e2:	bf00      	nop
 80031e4:	e004      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      break;
 80031e6:	bf00      	nop
 80031e8:	e002      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
    }
  } 
  
  return status; 
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop

08003200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e16b      	b.n	80034f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 815a 	bne.w	80034ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d005      	beq.n	8003252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324e:	2b02      	cmp	r3, #2
 8003250:	d130      	bne.n	80032b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 0201 	and.w	r2, r3, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d017      	beq.n	80032f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d123      	bne.n	8003344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220f      	movs	r2, #15
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	69b9      	ldr	r1, [r7, #24]
 8003340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0203 	and.w	r2, r3, #3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80b4 	beq.w	80034ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	4b60      	ldr	r3, [pc, #384]	; (800350c <HAL_GPIO_Init+0x30c>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	4a5f      	ldr	r2, [pc, #380]	; (800350c <HAL_GPIO_Init+0x30c>)
 8003390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003394:	6453      	str	r3, [r2, #68]	; 0x44
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_GPIO_Init+0x30c>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a2:	4a5b      	ldr	r2, [pc, #364]	; (8003510 <HAL_GPIO_Init+0x310>)
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	220f      	movs	r2, #15
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a52      	ldr	r2, [pc, #328]	; (8003514 <HAL_GPIO_Init+0x314>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02b      	beq.n	8003426 <HAL_GPIO_Init+0x226>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a51      	ldr	r2, [pc, #324]	; (8003518 <HAL_GPIO_Init+0x318>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d025      	beq.n	8003422 <HAL_GPIO_Init+0x222>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_GPIO_Init+0x31c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01f      	beq.n	800341e <HAL_GPIO_Init+0x21e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4f      	ldr	r2, [pc, #316]	; (8003520 <HAL_GPIO_Init+0x320>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d019      	beq.n	800341a <HAL_GPIO_Init+0x21a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4e      	ldr	r2, [pc, #312]	; (8003524 <HAL_GPIO_Init+0x324>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_GPIO_Init+0x216>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <HAL_GPIO_Init+0x328>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00d      	beq.n	8003412 <HAL_GPIO_Init+0x212>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4c      	ldr	r2, [pc, #304]	; (800352c <HAL_GPIO_Init+0x32c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <HAL_GPIO_Init+0x20e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4b      	ldr	r2, [pc, #300]	; (8003530 <HAL_GPIO_Init+0x330>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_GPIO_Init+0x20a>
 8003406:	2307      	movs	r3, #7
 8003408:	e00e      	b.n	8003428 <HAL_GPIO_Init+0x228>
 800340a:	2308      	movs	r3, #8
 800340c:	e00c      	b.n	8003428 <HAL_GPIO_Init+0x228>
 800340e:	2306      	movs	r3, #6
 8003410:	e00a      	b.n	8003428 <HAL_GPIO_Init+0x228>
 8003412:	2305      	movs	r3, #5
 8003414:	e008      	b.n	8003428 <HAL_GPIO_Init+0x228>
 8003416:	2304      	movs	r3, #4
 8003418:	e006      	b.n	8003428 <HAL_GPIO_Init+0x228>
 800341a:	2303      	movs	r3, #3
 800341c:	e004      	b.n	8003428 <HAL_GPIO_Init+0x228>
 800341e:	2302      	movs	r3, #2
 8003420:	e002      	b.n	8003428 <HAL_GPIO_Init+0x228>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_GPIO_Init+0x228>
 8003426:	2300      	movs	r3, #0
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	f002 0203 	and.w	r2, r2, #3
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	4093      	lsls	r3, r2
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003438:	4935      	ldr	r1, [pc, #212]	; (8003510 <HAL_GPIO_Init+0x310>)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003446:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_GPIO_Init+0x334>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800346a:	4a32      	ldr	r2, [pc, #200]	; (8003534 <HAL_GPIO_Init+0x334>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003470:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_GPIO_Init+0x334>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003494:	4a27      	ldr	r2, [pc, #156]	; (8003534 <HAL_GPIO_Init+0x334>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_GPIO_Init+0x334>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_GPIO_Init+0x334>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_GPIO_Init+0x334>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e8:	4a12      	ldr	r2, [pc, #72]	; (8003534 <HAL_GPIO_Init+0x334>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	f67f ae90 	bls.w	800321c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	40013800 	.word	0x40013800
 8003514:	40020000 	.word	0x40020000
 8003518:	40020400 	.word	0x40020400
 800351c:	40020800 	.word	0x40020800
 8003520:	40020c00 	.word	0x40020c00
 8003524:	40021000 	.word	0x40021000
 8003528:	40021400 	.word	0x40021400
 800352c:	40021800 	.word	0x40021800
 8003530:	40021c00 	.word	0x40021c00
 8003534:	40013c00 	.word	0x40013c00

08003538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003548:	787b      	ldrb	r3, [r7, #1]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003554:	e003      	b.n	800355e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	041a      	lsls	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	619a      	str	r2, [r3, #24]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800357c:	887a      	ldrh	r2, [r7, #2]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4013      	ands	r3, r2
 8003582:	041a      	lsls	r2, r3, #16
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43d9      	mvns	r1, r3
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	400b      	ands	r3, r1
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	619a      	str	r2, [r3, #24]
}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800359e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a0:	b08f      	sub	sp, #60	; 0x3c
 80035a2:	af0a      	add	r7, sp, #40	; 0x28
 80035a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e054      	b.n	800365a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f007 f85a 	bl	800a684 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2203      	movs	r2, #3
 80035d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 fee4 	bl	80073bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	687e      	ldr	r6, [r7, #4]
 80035fc:	466d      	mov	r5, sp
 80035fe:	f106 0410 	add.w	r4, r6, #16
 8003602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800360e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003612:	1d33      	adds	r3, r6, #4
 8003614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003616:	6838      	ldr	r0, [r7, #0]
 8003618:	f003 fe5e 	bl	80072d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fedb 	bl	80073de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	687e      	ldr	r6, [r7, #4]
 8003630:	466d      	mov	r5, sp
 8003632:	f106 0410 	add.w	r4, r6, #16
 8003636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003642:	e885 0003 	stmia.w	r5, {r0, r1}
 8003646:	1d33      	adds	r3, r6, #4
 8003648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	f004 f842 	bl	80076d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003662 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003662:	b590      	push	{r4, r7, lr}
 8003664:	b089      	sub	sp, #36	; 0x24
 8003666:	af04      	add	r7, sp, #16
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	4608      	mov	r0, r1
 800366c:	4611      	mov	r1, r2
 800366e:	461a      	mov	r2, r3
 8003670:	4603      	mov	r3, r0
 8003672:	70fb      	strb	r3, [r7, #3]
 8003674:	460b      	mov	r3, r1
 8003676:	70bb      	strb	r3, [r7, #2]
 8003678:	4613      	mov	r3, r2
 800367a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_HCD_HC_Init+0x28>
 8003686:	2302      	movs	r3, #2
 8003688:	e076      	b.n	8003778 <HAL_HCD_HC_Init+0x116>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	333d      	adds	r3, #61	; 0x3d
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3338      	adds	r3, #56	; 0x38
 80036b2:	787a      	ldrb	r2, [r7, #1]
 80036b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	3340      	adds	r3, #64	; 0x40
 80036c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036c6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3339      	adds	r3, #57	; 0x39
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	333f      	adds	r3, #63	; 0x3f
 80036e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80036ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	78ba      	ldrb	r2, [r7, #2]
 80036f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f6:	b2d0      	uxtb	r0, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	212c      	movs	r1, #44	; 0x2c
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	4413      	add	r3, r2
 8003702:	333a      	adds	r3, #58	; 0x3a
 8003704:	4602      	mov	r2, r0
 8003706:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800370c:	2b00      	cmp	r3, #0
 800370e:	da09      	bge.n	8003724 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	333b      	adds	r3, #59	; 0x3b
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e008      	b.n	8003736 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	333b      	adds	r3, #59	; 0x3b
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	333c      	adds	r3, #60	; 0x3c
 8003744:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003748:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	787c      	ldrb	r4, [r7, #1]
 8003750:	78ba      	ldrb	r2, [r7, #2]
 8003752:	78f9      	ldrb	r1, [r7, #3]
 8003754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4623      	mov	r3, r4
 8003766:	f004 f92f 	bl	80079c8 <USB_HC_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}

08003780 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_HCD_HC_Halt+0x1e>
 800379a:	2302      	movs	r3, #2
 800379c:	e00f      	b.n	80037be <HAL_HCD_HC_Halt+0x3e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 fb6b 	bl	8007e8a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	70fb      	strb	r3, [r7, #3]
 80037da:	460b      	mov	r3, r1
 80037dc:	70bb      	strb	r3, [r7, #2]
 80037de:	4613      	mov	r3, r2
 80037e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	333b      	adds	r3, #59	; 0x3b
 80037f0:	78ba      	ldrb	r2, [r7, #2]
 80037f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	333f      	adds	r3, #63	; 0x3f
 8003802:	787a      	ldrb	r2, [r7, #1]
 8003804:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003806:	7c3b      	ldrb	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d112      	bne.n	8003832 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3342      	adds	r3, #66	; 0x42
 800381a:	2203      	movs	r2, #3
 800381c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	333d      	adds	r3, #61	; 0x3d
 800382c:	7f3a      	ldrb	r2, [r7, #28]
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e008      	b.n	8003844 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	212c      	movs	r1, #44	; 0x2c
 8003838:	fb01 f303 	mul.w	r3, r1, r3
 800383c:	4413      	add	r3, r2
 800383e:	3342      	adds	r3, #66	; 0x42
 8003840:	2202      	movs	r2, #2
 8003842:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003844:	787b      	ldrb	r3, [r7, #1]
 8003846:	2b03      	cmp	r3, #3
 8003848:	f200 80c6 	bhi.w	80039d8 <HAL_HCD_HC_SubmitRequest+0x210>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003865 	.word	0x08003865
 8003858:	080039c5 	.word	0x080039c5
 800385c:	080038c9 	.word	0x080038c9
 8003860:	08003947 	.word	0x08003947
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003864:	7c3b      	ldrb	r3, [r7, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	f040 80b8 	bne.w	80039dc <HAL_HCD_HC_SubmitRequest+0x214>
 800386c:	78bb      	ldrb	r3, [r7, #2]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 80b4 	bne.w	80039dc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003874:	8b3b      	ldrh	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3355      	adds	r3, #85	; 0x55
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3355      	adds	r3, #85	; 0x55
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	212c      	movs	r1, #44	; 0x2c
 80038a6:	fb01 f303 	mul.w	r3, r1, r3
 80038aa:	4413      	add	r3, r2
 80038ac:	3342      	adds	r3, #66	; 0x42
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038b2:	e093      	b.n	80039dc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3342      	adds	r3, #66	; 0x42
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
      break;
 80038c6:	e089      	b.n	80039dc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038c8:	78bb      	ldrb	r3, [r7, #2]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11d      	bne.n	800390a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3355      	adds	r3, #85	; 0x55
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3342      	adds	r3, #66	; 0x42
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038f4:	e073      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3342      	adds	r3, #66	; 0x42
 8003904:	2202      	movs	r2, #2
 8003906:	701a      	strb	r2, [r3, #0]
      break;
 8003908:	e069      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3354      	adds	r3, #84	; 0x54
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	3342      	adds	r3, #66	; 0x42
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
      break;
 8003930:	e055      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3342      	adds	r3, #66	; 0x42
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]
      break;
 8003944:	e04b      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003946:	78bb      	ldrb	r3, [r7, #2]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11d      	bne.n	8003988 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3355      	adds	r3, #85	; 0x55
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3342      	adds	r3, #66	; 0x42
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003972:	e034      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3342      	adds	r3, #66	; 0x42
 8003982:	2202      	movs	r2, #2
 8003984:	701a      	strb	r2, [r3, #0]
      break;
 8003986:	e02a      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3354      	adds	r3, #84	; 0x54
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3342      	adds	r3, #66	; 0x42
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
      break;
 80039ae:	e016      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3342      	adds	r3, #66	; 0x42
 80039be:	2202      	movs	r2, #2
 80039c0:	701a      	strb	r2, [r3, #0]
      break;
 80039c2:	e00c      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3342      	adds	r3, #66	; 0x42
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
      break;
 80039d6:	e002      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039dc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	3344      	adds	r3, #68	; 0x44
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	8b3a      	ldrh	r2, [r7, #24]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	202c      	movs	r0, #44	; 0x2c
 80039f8:	fb00 f303 	mul.w	r3, r0, r3
 80039fc:	440b      	add	r3, r1
 80039fe:	334c      	adds	r3, #76	; 0x4c
 8003a00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3360      	adds	r3, #96	; 0x60
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3350      	adds	r3, #80	; 0x50
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3339      	adds	r3, #57	; 0x39
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3361      	adds	r3, #97	; 0x61
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	222c      	movs	r2, #44	; 0x2c
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	3338      	adds	r3, #56	; 0x38
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	18d1      	adds	r1, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	f004 f8be 	bl	8007be4 <USB_HC_StartXfer>
 8003a68:	4603      	mov	r3, r0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop

08003a74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 fde1 	bl	8007652 <USB_GetMode>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 80f6 	bne.w	8003c84 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f003 fdc5 	bl	800762c <USB_ReadInterrupts>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80ec 	beq.w	8003c82 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f003 fdbc 	bl	800762c <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003abe:	d104      	bne.n	8003aca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f003 fdac 	bl	800762c <USB_ReadInterrupts>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ade:	d104      	bne.n	8003aea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f003 fd9c 	bl	800762c <USB_ReadInterrupts>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afe:	d104      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 fd8c 	bl	800762c <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d103      	bne.n	8003b26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2202      	movs	r2, #2
 8003b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 fd7e 	bl	800762c <USB_ReadInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b3a:	d11c      	bne.n	8003b76 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b56:	2110      	movs	r1, #16
 8003b58:	6938      	ldr	r0, [r7, #16]
 8003b5a:	f003 fc8d 	bl	8007478 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b5e:	6938      	ldr	r0, [r7, #16]
 8003b60:	f003 fcae 	bl	80074c0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 fe66 	bl	800783c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f006 fe05 	bl	800a780 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fd56 	bl	800762c <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b8a:	d102      	bne.n	8003b92 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 fa03 	bl	8004f98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 fd48 	bl	800762c <USB_ReadInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d106      	bne.n	8003bb4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f006 fdce 	bl	800a748 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fd37 	bl	800762c <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d101      	bne.n	8003bcc <HAL_HCD_IRQHandler+0x158>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_HCD_IRQHandler+0x15a>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d012      	beq.n	8003bf8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0210 	bic.w	r2, r2, #16
 8003be0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f906 	bl	8004df4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0210 	orr.w	r2, r2, #16
 8003bf6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f003 fd15 	bl	800762c <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c0c:	d13a      	bne.n	8003c84 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 f928 	bl	8007e68 <USB_HC_ReadInterrupt>
 8003c18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e025      	b.n	8003c6c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d018      	beq.n	8003c66 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4a:	d106      	bne.n	8003c5a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8ab 	bl	8003dae <HCD_HC_IN_IRQHandler>
 8003c58:	e005      	b.n	8003c66 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fcc6 	bl	80045f2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d3d4      	bcc.n	8003c20 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c7e:	615a      	str	r2, [r3, #20]
 8003c80:	e000      	b.n	8003c84 <HAL_HCD_IRQHandler+0x210>
      return;
 8003c82:	bf00      	nop
    }
  }
}
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_HCD_Start+0x16>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e013      	b.n	8003cc8 <HAL_HCD_Start+0x3e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 fe28 	bl	8007904 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fb6e 	bl	800739a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_HCD_Stop+0x16>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e00d      	b.n	8003d02 <HAL_HCD_Stop+0x32>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f004 fa22 	bl	800813c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 fdca 	bl	80078b0 <USB_ResetPort>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3360      	adds	r3, #96	; 0x60
 8003d40:	781b      	ldrb	r3, [r3, #0]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3350      	adds	r3, #80	; 0x50
 8003d68:	681b      	ldr	r3, [r3, #0]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 fe0e 	bl	80079a4 <USB_GetCurrentFrame>
 8003d88:	4603      	mov	r3, r0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f003 fde9 	bl	8007976 <USB_GetHostSpeed>
 8003da4:	4603      	mov	r3, r0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d119      	bne.n	8003e12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	461a      	mov	r2, r3
 8003dec:	2304      	movs	r3, #4
 8003dee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	60d3      	str	r3, [r2, #12]
 8003e10:	e101      	b.n	8004016 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e28:	d12b      	bne.n	8003e82 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	3361      	adds	r3, #97	; 0x61
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f004 f805 	bl	8007e8a <USB_HC_Halt>
 8003e80:	e0c9      	b.n	8004016 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d109      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	6093      	str	r3, [r2, #8]
 8003eaa:	e0b4      	b.n	8004016 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d133      	bne.n	8003f2a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3361      	adds	r3, #97	; 0x61
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f00:	461a      	mov	r2, r3
 8003f02:	2310      	movs	r3, #16
 8003f04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f12:	461a      	mov	r2, r3
 8003f14:	2308      	movs	r3, #8
 8003f16:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 ffb1 	bl	8007e8a <USB_HC_Halt>
 8003f28:	e075      	b.n	8004016 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d134      	bne.n	8003fac <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3361      	adds	r3, #97	; 0x61
 8003f70:	2208      	movs	r2, #8
 8003f72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	461a      	mov	r2, r3
 8003f82:	2310      	movs	r3, #16
 8003f84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f92:	461a      	mov	r2, r3
 8003f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f003 ff70 	bl	8007e8a <USB_HC_Halt>
 8003faa:	e034      	b.n	8004016 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b80      	cmp	r3, #128	; 0x80
 8003fc0:	d129      	bne.n	8004016 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	3361      	adds	r3, #97	; 0x61
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 ff43 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402c:	d122      	bne.n	8004074 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	0151      	lsls	r1, r2, #5
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	440a      	add	r2, r1
 8004044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f003 ff16 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004070:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004072:	e2ba      	b.n	80045ea <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	f040 811b 	bne.w	80042c2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d019      	beq.n	80040c8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3348      	adds	r3, #72	; 0x48
 80040a2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80040b6:	1ad2      	subs	r2, r2, r3
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	202c      	movs	r0, #44	; 0x2c
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	440b      	add	r3, r1
 80040c4:	3350      	adds	r3, #80	; 0x50
 80040c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	212c      	movs	r1, #44	; 0x2c
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3361      	adds	r3, #97	; 0x61
 80040d6:	2201      	movs	r2, #1
 80040d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	335c      	adds	r3, #92	; 0x5c
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2301      	movs	r3, #1
 80040fc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	333f      	adds	r3, #63	; 0x3f
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	333f      	adds	r3, #63	; 0x3f
 8004120:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004122:	2b02      	cmp	r3, #2
 8004124:	d121      	bne.n	800416a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	440a      	add	r2, r1
 800413c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004140:	f043 0302 	orr.w	r3, r3, #2
 8004144:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f003 fe9a 	bl	8007e8a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	461a      	mov	r2, r3
 8004164:	2310      	movs	r3, #16
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	e066      	b.n	8004238 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	212c      	movs	r1, #44	; 0x2c
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	333f      	adds	r3, #63	; 0x3f
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d127      	bne.n	80041ce <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	0151      	lsls	r1, r2, #5
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	440a      	add	r2, r1
 8004194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800419c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3360      	adds	r3, #96	; 0x60
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	b2d9      	uxtb	r1, r3
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	202c      	movs	r0, #44	; 0x2c
 80041ba:	fb00 f303 	mul.w	r3, r0, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3360      	adds	r3, #96	; 0x60
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f006 fae8 	bl	800a79c <HAL_HCD_HC_NotifyURBChange_Callback>
 80041cc:	e034      	b.n	8004238 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	333f      	adds	r3, #63	; 0x3f
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d12a      	bne.n	8004238 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3360      	adds	r3, #96	; 0x60
 80041f0:	2201      	movs	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	212c      	movs	r1, #44	; 0x2c
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3354      	adds	r3, #84	; 0x54
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f083 0301 	eor.w	r3, r3, #1
 8004208:	b2d8      	uxtb	r0, r3
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	3354      	adds	r3, #84	; 0x54
 8004218:	4602      	mov	r2, r0
 800421a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	b2d9      	uxtb	r1, r3
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	202c      	movs	r0, #44	; 0x2c
 8004226:	fb00 f303 	mul.w	r3, r0, r3
 800422a:	4413      	add	r3, r2
 800422c:	3360      	adds	r3, #96	; 0x60
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f006 fab2 	bl	800a79c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d12b      	bne.n	8004298 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3348      	adds	r3, #72	; 0x48
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	202c      	movs	r0, #44	; 0x2c
 8004256:	fb00 f202 	mul.w	r2, r0, r2
 800425a:	440a      	add	r2, r1
 800425c:	3240      	adds	r2, #64	; 0x40
 800425e:	8812      	ldrh	r2, [r2, #0]
 8004260:	fbb3 f3f2 	udiv	r3, r3, r2
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 81be 	beq.w	80045ea <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3354      	adds	r3, #84	; 0x54
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	f083 0301 	eor.w	r3, r3, #1
 8004282:	b2d8      	uxtb	r0, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	212c      	movs	r1, #44	; 0x2c
 800428a:	fb01 f303 	mul.w	r3, r1, r3
 800428e:	4413      	add	r3, r2
 8004290:	3354      	adds	r3, #84	; 0x54
 8004292:	4602      	mov	r2, r0
 8004294:	701a      	strb	r2, [r3, #0]
}
 8004296:	e1a8      	b.n	80045ea <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	212c      	movs	r1, #44	; 0x2c
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	3354      	adds	r3, #84	; 0x54
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f083 0301 	eor.w	r3, r3, #1
 80042ac:	b2d8      	uxtb	r0, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3354      	adds	r3, #84	; 0x54
 80042bc:	4602      	mov	r2, r0
 80042be:	701a      	strb	r2, [r3, #0]
}
 80042c0:	e193      	b.n	80045ea <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	f040 8106 	bne.w	80044e6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f4:	f023 0302 	bic.w	r3, r3, #2
 80042f8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3361      	adds	r3, #97	; 0x61
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d109      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3360      	adds	r3, #96	; 0x60
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e0c9      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3361      	adds	r3, #97	; 0x61
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d109      	bne.n	800434a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3360      	adds	r3, #96	; 0x60
 8004344:	2205      	movs	r2, #5
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	e0b5      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3361      	adds	r3, #97	; 0x61
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b06      	cmp	r3, #6
 800435c:	d009      	beq.n	8004372 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	3361      	adds	r3, #97	; 0x61
 800436c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800436e:	2b08      	cmp	r3, #8
 8004370:	d150      	bne.n	8004414 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	335c      	adds	r3, #92	; 0x5c
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	202c      	movs	r0, #44	; 0x2c
 800438a:	fb00 f303 	mul.w	r3, r0, r3
 800438e:	440b      	add	r3, r1
 8004390:	335c      	adds	r3, #92	; 0x5c
 8004392:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	212c      	movs	r1, #44	; 0x2c
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	4413      	add	r3, r2
 80043a0:	335c      	adds	r3, #92	; 0x5c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d912      	bls.n	80043ce <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	212c      	movs	r1, #44	; 0x2c
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	335c      	adds	r3, #92	; 0x5c
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3360      	adds	r3, #96	; 0x60
 80043c8:	2204      	movs	r2, #4
 80043ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043cc:	e073      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3360      	adds	r3, #96	; 0x60
 80043dc:	2202      	movs	r2, #2
 80043de:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043f6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043fe:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440c:	461a      	mov	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004412:	e050      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	3361      	adds	r3, #97	; 0x61
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d122      	bne.n	800446e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	212c      	movs	r1, #44	; 0x2c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	3360      	adds	r3, #96	; 0x60
 8004436:	2202      	movs	r2, #2
 8004438:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004450:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004458:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e023      	b.n	80044b6 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	3361      	adds	r3, #97	; 0x61
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b07      	cmp	r3, #7
 8004480:	d119      	bne.n	80044b6 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	335c      	adds	r3, #92	; 0x5c
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	202c      	movs	r0, #44	; 0x2c
 800449a:	fb00 f303 	mul.w	r3, r0, r3
 800449e:	440b      	add	r3, r1
 80044a0:	335c      	adds	r3, #92	; 0x5c
 80044a2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3360      	adds	r3, #96	; 0x60
 80044b2:	2204      	movs	r2, #4
 80044b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	2302      	movs	r3, #2
 80044c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	b2d9      	uxtb	r1, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	202c      	movs	r0, #44	; 0x2c
 80044d2:	fb00 f303 	mul.w	r3, r0, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3360      	adds	r3, #96	; 0x60
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f006 f95c 	bl	800a79c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044e4:	e081      	b.n	80045ea <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d176      	bne.n	80045ea <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	333f      	adds	r3, #63	; 0x3f
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b03      	cmp	r3, #3
 800450e:	d121      	bne.n	8004554 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	212c      	movs	r1, #44	; 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	335c      	adds	r3, #92	; 0x5c
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	440a      	add	r2, r1
 8004538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800453c:	f043 0302 	orr.w	r3, r3, #2
 8004540:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f003 fc9c 	bl	8007e8a <USB_HC_Halt>
 8004552:	e041      	b.n	80045d8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	333f      	adds	r3, #63	; 0x3f
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	333f      	adds	r3, #63	; 0x3f
 8004576:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004578:	2b02      	cmp	r3, #2
 800457a:	d12d      	bne.n	80045d8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	335c      	adds	r3, #92	; 0x5c
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d120      	bne.n	80045d8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3361      	adds	r3, #97	; 0x61
 80045a4:	2203      	movs	r2, #3
 80045a6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f003 fc59 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	461a      	mov	r2, r3
 80045e6:	2310      	movs	r3, #16
 80045e8:	6093      	str	r3, [r2, #8]
}
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b088      	sub	sp, #32
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d119      	bne.n	8004656 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	461a      	mov	r2, r3
 8004630:	2304      	movs	r3, #4
 8004632:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	4413      	add	r3, r2
 800463c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	440a      	add	r2, r1
 800464a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800464e:	f043 0302 	orr.w	r3, r3, #2
 8004652:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004654:	e3ca      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b20      	cmp	r3, #32
 800466a:	d13e      	bne.n	80046ea <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	2320      	movs	r3, #32
 800467c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	212c      	movs	r1, #44	; 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	333d      	adds	r3, #61	; 0x3d
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	f040 83ac 	bne.w	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	212c      	movs	r1, #44	; 0x2c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	333d      	adds	r3, #61	; 0x3d
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	3360      	adds	r3, #96	; 0x60
 80046b4:	2202      	movs	r2, #2
 80046b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 fbd1 	bl	8007e8a <USB_HC_Halt>
}
 80046e8:	e380      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004700:	d122      	bne.n	8004748 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	4413      	add	r3, r2
 800470a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	440a      	add	r2, r1
 8004718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f003 fbac 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	461a      	mov	r2, r3
 8004740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004744:	6093      	str	r3, [r2, #8]
}
 8004746:	e351      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d150      	bne.n	8004800 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	335c      	adds	r3, #92	; 0x5c
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d111      	bne.n	80047aa <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	333d      	adds	r3, #61	; 0x3d
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a4:	461a      	mov	r2, r3
 80047a6:	2340      	movs	r3, #64	; 0x40
 80047a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f003 fb58 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e6:	461a      	mov	r2, r3
 80047e8:	2301      	movs	r3, #1
 80047ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3361      	adds	r3, #97	; 0x61
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
}
 80047fe:	e2f5      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d13c      	bne.n	8004890 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	3361      	adds	r3, #97	; 0x61
 8004824:	2204      	movs	r2, #4
 8004826:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	333d      	adds	r3, #61	; 0x3d
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	335c      	adds	r3, #92	; 0x5c
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	440a      	add	r2, r1
 8004862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004866:	f043 0302 	orr.w	r3, r3, #2
 800486a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f003 fb07 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	4413      	add	r3, r2
 8004884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004888:	461a      	mov	r2, r3
 800488a:	2340      	movs	r3, #64	; 0x40
 800488c:	6093      	str	r3, [r2, #8]
}
 800488e:	e2ad      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d12a      	bne.n	80048fc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b2:	461a      	mov	r2, r3
 80048b4:	2308      	movs	r3, #8
 80048b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d2:	f043 0302 	orr.w	r3, r3, #2
 80048d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f003 fad1 	bl	8007e8a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	212c      	movs	r1, #44	; 0x2c
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	3361      	adds	r3, #97	; 0x61
 80048f6:	2205      	movs	r2, #5
 80048f8:	701a      	strb	r2, [r3, #0]
}
 80048fa:	e277      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b10      	cmp	r3, #16
 8004910:	d150      	bne.n	80049b4 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	212c      	movs	r1, #44	; 0x2c
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	4413      	add	r3, r2
 800491e:	335c      	adds	r3, #92	; 0x5c
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	2203      	movs	r2, #3
 8004934:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	333d      	adds	r3, #61	; 0x3d
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d112      	bne.n	8004970 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	212c      	movs	r1, #44	; 0x2c
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	333c      	adds	r3, #60	; 0x3c
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	212c      	movs	r1, #44	; 0x2c
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	4413      	add	r3, r2
 800496a:	333d      	adds	r3, #61	; 0x3d
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	440a      	add	r2, r1
 8004986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800498a:	f043 0302 	orr.w	r3, r3, #2
 800498e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f003 fa75 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	461a      	mov	r2, r3
 80049ae:	2310      	movs	r3, #16
 80049b0:	6093      	str	r3, [r2, #8]
}
 80049b2:	e21b      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d174      	bne.n	8004ab4 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d121      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	212c      	movs	r1, #44	; 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	3361      	adds	r3, #97	; 0x61
 80049e0:	2206      	movs	r2, #6
 80049e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049fe:	f043 0302 	orr.w	r3, r3, #2
 8004a02:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f003 fa3b 	bl	8007e8a <USB_HC_Halt>
 8004a14:	e044      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	212c      	movs	r1, #44	; 0x2c
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	4413      	add	r3, r2
 8004a22:	335c      	adds	r3, #92	; 0x5c
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	202c      	movs	r0, #44	; 0x2c
 8004a2e:	fb00 f303 	mul.w	r3, r0, r3
 8004a32:	440b      	add	r3, r1
 8004a34:	335c      	adds	r3, #92	; 0x5c
 8004a36:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	335c      	adds	r3, #92	; 0x5c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d920      	bls.n	8004a8e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	335c      	adds	r3, #92	; 0x5c
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	212c      	movs	r1, #44	; 0x2c
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	3360      	adds	r3, #96	; 0x60
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	b2d9      	uxtb	r1, r3
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	202c      	movs	r0, #44	; 0x2c
 8004a7a:	fb00 f303 	mul.w	r3, r0, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3360      	adds	r3, #96	; 0x60
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f005 fe88 	bl	800a79c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a8c:	e008      	b.n	8004aa0 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	3360      	adds	r3, #96	; 0x60
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	461a      	mov	r2, r3
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	6093      	str	r3, [r2, #8]
}
 8004ab2:	e19b      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aca:	d134      	bne.n	8004b36 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae6:	f043 0302 	orr.w	r3, r3, #2
 8004aea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 f9c7 	bl	8007e8a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3361      	adds	r3, #97	; 0x61
 8004b30:	2208      	movs	r2, #8
 8004b32:	701a      	strb	r2, [r3, #0]
}
 8004b34:	e15a      	b.n	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	f040 814f 	bne.w	8004dec <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b68:	f023 0302 	bic.w	r3, r3, #2
 8004b6c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	3361      	adds	r3, #97	; 0x61
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d17d      	bne.n	8004c7e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3360      	adds	r3, #96	; 0x60
 8004b90:	2201      	movs	r2, #1
 8004b92:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	212c      	movs	r1, #44	; 0x2c
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	333f      	adds	r3, #63	; 0x3f
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d00a      	beq.n	8004bbe <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	212c      	movs	r1, #44	; 0x2c
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	333f      	adds	r3, #63	; 0x3f
 8004bb6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	f040 8100 	bne.w	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d113      	bne.n	8004bee <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	212c      	movs	r1, #44	; 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3355      	adds	r3, #85	; 0x55
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	f083 0301 	eor.w	r3, r3, #1
 8004bda:	b2d8      	uxtb	r0, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3355      	adds	r3, #85	; 0x55
 8004bea:	4602      	mov	r2, r0
 8004bec:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	f040 80e3 	bne.w	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	212c      	movs	r1, #44	; 0x2c
 8004bfe:	fb01 f303 	mul.w	r3, r1, r3
 8004c02:	4413      	add	r3, r2
 8004c04:	334c      	adds	r3, #76	; 0x4c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80d8 	beq.w	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	334c      	adds	r3, #76	; 0x4c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	202c      	movs	r0, #44	; 0x2c
 8004c24:	fb00 f202 	mul.w	r2, r0, r2
 8004c28:	440a      	add	r2, r1
 8004c2a:	3240      	adds	r2, #64	; 0x40
 8004c2c:	8812      	ldrh	r2, [r2, #0]
 8004c2e:	4413      	add	r3, r2
 8004c30:	3b01      	subs	r3, #1
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	202c      	movs	r0, #44	; 0x2c
 8004c38:	fb00 f202 	mul.w	r2, r0, r2
 8004c3c:	440a      	add	r2, r1
 8004c3e:	3240      	adds	r2, #64	; 0x40
 8004c40:	8812      	ldrh	r2, [r2, #0]
 8004c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80b5 	beq.w	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3355      	adds	r3, #85	; 0x55
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2d8      	uxtb	r0, r3
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	212c      	movs	r1, #44	; 0x2c
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	4413      	add	r3, r2
 8004c76:	3355      	adds	r3, #85	; 0x55
 8004c78:	4602      	mov	r2, r0
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e09f      	b.n	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	3361      	adds	r3, #97	; 0x61
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d109      	bne.n	8004ca6 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3360      	adds	r3, #96	; 0x60
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e08b      	b.n	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	212c      	movs	r1, #44	; 0x2c
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3361      	adds	r3, #97	; 0x61
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d109      	bne.n	8004cce <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3360      	adds	r3, #96	; 0x60
 8004cc8:	2202      	movs	r2, #2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	e077      	b.n	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	212c      	movs	r1, #44	; 0x2c
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	3361      	adds	r3, #97	; 0x61
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d109      	bne.n	8004cf6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3360      	adds	r3, #96	; 0x60
 8004cf0:	2205      	movs	r2, #5
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e063      	b.n	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	3361      	adds	r3, #97	; 0x61
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d009      	beq.n	8004d1e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3361      	adds	r3, #97	; 0x61
 8004d18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d14f      	bne.n	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	335c      	adds	r3, #92	; 0x5c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	202c      	movs	r0, #44	; 0x2c
 8004d36:	fb00 f303 	mul.w	r3, r0, r3
 8004d3a:	440b      	add	r3, r1
 8004d3c:	335c      	adds	r3, #92	; 0x5c
 8004d3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	335c      	adds	r3, #92	; 0x5c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d912      	bls.n	8004d7a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	212c      	movs	r1, #44	; 0x2c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	335c      	adds	r3, #92	; 0x5c
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	212c      	movs	r1, #44	; 0x2c
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	4413      	add	r3, r2
 8004d72:	3360      	adds	r3, #96	; 0x60
 8004d74:	2204      	movs	r2, #4
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e021      	b.n	8004dbe <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	3360      	adds	r3, #96	; 0x60
 8004d88:	2202      	movs	r2, #2
 8004d8a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004da2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	461a      	mov	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2302      	movs	r3, #2
 8004dce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	b2d9      	uxtb	r1, r3
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	202c      	movs	r0, #44	; 0x2c
 8004dda:	fb00 f303 	mul.w	r3, r0, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	3360      	adds	r3, #96	; 0x60
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f005 fcd8 	bl	800a79c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004dec:	bf00      	nop
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	0c5b      	lsrs	r3, r3, #17
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e28:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d004      	beq.n	8004e3a <HCD_RXQLVL_IRQHandler+0x46>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	f000 80a9 	beq.w	8004f8a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e38:	e0aa      	b.n	8004f90 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a6 	beq.w	8004f8e <HCD_RXQLVL_IRQHandler+0x19a>
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	212c      	movs	r1, #44	; 0x2c
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3344      	adds	r3, #68	; 0x44
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 809b 	beq.w	8004f8e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	3350      	adds	r3, #80	; 0x50
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	202c      	movs	r0, #44	; 0x2c
 8004e72:	fb00 f303 	mul.w	r3, r0, r3
 8004e76:	440b      	add	r3, r1
 8004e78:	334c      	adds	r3, #76	; 0x4c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d87a      	bhi.n	8004f76 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	212c      	movs	r1, #44	; 0x2c
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	4413      	add	r3, r2
 8004e90:	3344      	adds	r3, #68	; 0x44
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	b292      	uxth	r2, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f002 fb6f 	bl	800757c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3344      	adds	r3, #68	; 0x44
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	202c      	movs	r0, #44	; 0x2c
 8004eb8:	fb00 f303 	mul.w	r3, r0, r3
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3344      	adds	r3, #68	; 0x44
 8004ec0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	3350      	adds	r3, #80	; 0x50
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	202c      	movs	r0, #44	; 0x2c
 8004edc:	fb00 f303 	mul.w	r3, r0, r3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3350      	adds	r3, #80	; 0x50
 8004ee4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	0cdb      	lsrs	r3, r3, #19
 8004ef6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004efa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3340      	adds	r3, #64	; 0x40
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d13c      	bne.n	8004f8e <HCD_RXQLVL_IRQHandler+0x19a>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d039      	beq.n	8004f8e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f30:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f38:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	461a      	mov	r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3354      	adds	r3, #84	; 0x54
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f083 0301 	eor.w	r3, r3, #1
 8004f60:	b2d8      	uxtb	r0, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	212c      	movs	r1, #44	; 0x2c
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3354      	adds	r3, #84	; 0x54
 8004f70:	4602      	mov	r2, r0
 8004f72:	701a      	strb	r2, [r3, #0]
      break;
 8004f74:	e00b      	b.n	8004f8e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	212c      	movs	r1, #44	; 0x2c
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	3360      	adds	r3, #96	; 0x60
 8004f84:	2204      	movs	r2, #4
 8004f86:	701a      	strb	r2, [r3, #0]
      break;
 8004f88:	e001      	b.n	8004f8e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f8e:	bf00      	nop
  }
}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fc4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d10b      	bne.n	8004fe8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f005 fbc2 	bl	800a764 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f043 0302 	orr.w	r3, r3, #2
 8004fe6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d132      	bne.n	8005058 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b04      	cmp	r3, #4
 8005002:	d126      	bne.n	8005052 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d113      	bne.n	8005034 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005016:	d106      	bne.n	8005026 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2102      	movs	r1, #2
 800501e:	4618      	mov	r0, r3
 8005020:	f002 fc0c 	bl	800783c <USB_InitFSLSPClkSel>
 8005024:	e011      	b.n	800504a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2101      	movs	r1, #1
 800502c:	4618      	mov	r0, r3
 800502e:	f002 fc05 	bl	800783c <USB_InitFSLSPClkSel>
 8005032:	e00a      	b.n	800504a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d106      	bne.n	800504a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005042:	461a      	mov	r2, r3
 8005044:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005048:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f005 fbb4 	bl	800a7b8 <HAL_HCD_PortEnabled_Callback>
 8005050:	e002      	b.n	8005058 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f005 fbbe 	bl	800a7d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b20      	cmp	r3, #32
 8005060:	d103      	bne.n	800506a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005070:	461a      	mov	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6013      	str	r3, [r2, #0]
}
 8005076:	bf00      	nop
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e12b      	b.n	80052ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc fca6 	bl	80019f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2224      	movs	r2, #36	; 0x24
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050e4:	f001 f9fc 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 80050e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4a81      	ldr	r2, [pc, #516]	; (80052f4 <HAL_I2C_Init+0x274>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d807      	bhi.n	8005104 <HAL_I2C_Init+0x84>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a80      	ldr	r2, [pc, #512]	; (80052f8 <HAL_I2C_Init+0x278>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	bf94      	ite	ls
 80050fc:	2301      	movls	r3, #1
 80050fe:	2300      	movhi	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e006      	b.n	8005112 <HAL_I2C_Init+0x92>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a7d      	ldr	r2, [pc, #500]	; (80052fc <HAL_I2C_Init+0x27c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	bf94      	ite	ls
 800510c:	2301      	movls	r3, #1
 800510e:	2300      	movhi	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0e7      	b.n	80052ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4a78      	ldr	r2, [pc, #480]	; (8005300 <HAL_I2C_Init+0x280>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	0c9b      	lsrs	r3, r3, #18
 8005124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a6a      	ldr	r2, [pc, #424]	; (80052f4 <HAL_I2C_Init+0x274>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d802      	bhi.n	8005154 <HAL_I2C_Init+0xd4>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	3301      	adds	r3, #1
 8005152:	e009      	b.n	8005168 <HAL_I2C_Init+0xe8>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	4a69      	ldr	r2, [pc, #420]	; (8005304 <HAL_I2C_Init+0x284>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	099b      	lsrs	r3, r3, #6
 8005166:	3301      	adds	r3, #1
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	430b      	orrs	r3, r1
 800516e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800517a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	495c      	ldr	r1, [pc, #368]	; (80052f4 <HAL_I2C_Init+0x274>)
 8005184:	428b      	cmp	r3, r1
 8005186:	d819      	bhi.n	80051bc <HAL_I2C_Init+0x13c>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1e59      	subs	r1, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	fbb1 f3f3 	udiv	r3, r1, r3
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	f640 73fc 	movw	r3, #4092	; 0xffc
 800519c:	400b      	ands	r3, r1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_I2C_Init+0x138>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1e59      	subs	r1, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b0:	3301      	adds	r3, #1
 80051b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b6:	e051      	b.n	800525c <HAL_I2C_Init+0x1dc>
 80051b8:	2304      	movs	r3, #4
 80051ba:	e04f      	b.n	800525c <HAL_I2C_Init+0x1dc>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d111      	bne.n	80051e8 <HAL_I2C_Init+0x168>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	1e58      	subs	r0, r3, #1
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6859      	ldr	r1, [r3, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	440b      	add	r3, r1
 80051d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d6:	3301      	adds	r3, #1
 80051d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e012      	b.n	800520e <HAL_I2C_Init+0x18e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	1e58      	subs	r0, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	0099      	lsls	r1, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fe:	3301      	adds	r3, #1
 8005200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_I2C_Init+0x196>
 8005212:	2301      	movs	r3, #1
 8005214:	e022      	b.n	800525c <HAL_I2C_Init+0x1dc>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10e      	bne.n	800523c <HAL_I2C_Init+0x1bc>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1e58      	subs	r0, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	440b      	add	r3, r1
 800522c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005230:	3301      	adds	r3, #1
 8005232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	e00f      	b.n	800525c <HAL_I2C_Init+0x1dc>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1e58      	subs	r0, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	0099      	lsls	r1, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005252:	3301      	adds	r3, #1
 8005254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	6809      	ldr	r1, [r1, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800528a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6911      	ldr	r1, [r2, #16]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d2      	ldr	r2, [r2, #12]
 8005296:	4311      	orrs	r1, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	430b      	orrs	r3, r1
 800529e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	000186a0 	.word	0x000186a0
 80052f8:	001e847f 	.word	0x001e847f
 80052fc:	003d08ff 	.word	0x003d08ff
 8005300:	431bde83 	.word	0x431bde83
 8005304:	10624dd3 	.word	0x10624dd3

08005308 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e128      	b.n	800556c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a90      	ldr	r2, [pc, #576]	; (8005574 <HAL_I2S_Init+0x26c>)
 8005332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fc fba7 	bl	8001a88 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005350:	f023 030f 	bic.w	r3, r3, #15
 8005354:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2202      	movs	r2, #2
 800535c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d060      	beq.n	8005428 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800536e:	2310      	movs	r3, #16
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e001      	b.n	8005378 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b20      	cmp	r3, #32
 800537e:	d802      	bhi.n	8005386 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005386:	2001      	movs	r0, #1
 8005388:	f001 f9a0 	bl	80066cc <HAL_RCCEx_GetPeriphCLKFreq>
 800538c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005396:	d125      	bne.n	80053e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d010      	beq.n	80053c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	461a      	mov	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	3305      	adds	r3, #5
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e01f      	b.n	8005402 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	3305      	adds	r3, #5
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	e00e      	b.n	8005402 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	3305      	adds	r3, #5
 8005400:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	4a5c      	ldr	r2, [pc, #368]	; (8005578 <HAL_I2S_Init+0x270>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	e003      	b.n	8005430 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005428:	2302      	movs	r3, #2
 800542a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d902      	bls.n	800543c <HAL_I2S_Init+0x134>
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2bff      	cmp	r3, #255	; 0xff
 800543a:	d907      	bls.n	800544c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005440:	f043 0210 	orr.w	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e08f      	b.n	800556c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	ea42 0103 	orr.w	r1, r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	430a      	orrs	r2, r1
 800545e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800546a:	f023 030f 	bic.w	r3, r3, #15
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6851      	ldr	r1, [r2, #4]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6892      	ldr	r2, [r2, #8]
 8005476:	4311      	orrs	r1, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68d2      	ldr	r2, [r2, #12]
 800547c:	4311      	orrs	r1, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6992      	ldr	r2, [r2, #24]
 8005482:	430a      	orrs	r2, r1
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800548e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d161      	bne.n	800555c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a38      	ldr	r2, [pc, #224]	; (800557c <HAL_I2S_Init+0x274>)
 800549c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a37      	ldr	r2, [pc, #220]	; (8005580 <HAL_I2S_Init+0x278>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d101      	bne.n	80054ac <HAL_I2S_Init+0x1a4>
 80054a8:	4b36      	ldr	r3, [pc, #216]	; (8005584 <HAL_I2S_Init+0x27c>)
 80054aa:	e001      	b.n	80054b0 <HAL_I2S_Init+0x1a8>
 80054ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	4932      	ldr	r1, [pc, #200]	; (8005580 <HAL_I2S_Init+0x278>)
 80054b8:	428a      	cmp	r2, r1
 80054ba:	d101      	bne.n	80054c0 <HAL_I2S_Init+0x1b8>
 80054bc:	4a31      	ldr	r2, [pc, #196]	; (8005584 <HAL_I2S_Init+0x27c>)
 80054be:	e001      	b.n	80054c4 <HAL_I2S_Init+0x1bc>
 80054c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80054c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80054c8:	f023 030f 	bic.w	r3, r3, #15
 80054cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2b      	ldr	r2, [pc, #172]	; (8005580 <HAL_I2S_Init+0x278>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_I2S_Init+0x1d4>
 80054d8:	4b2a      	ldr	r3, [pc, #168]	; (8005584 <HAL_I2S_Init+0x27c>)
 80054da:	e001      	b.n	80054e0 <HAL_I2S_Init+0x1d8>
 80054dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e0:	2202      	movs	r2, #2
 80054e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <HAL_I2S_Init+0x278>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <HAL_I2S_Init+0x1ea>
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <HAL_I2S_Init+0x27c>)
 80054f0:	e001      	b.n	80054f6 <HAL_I2S_Init+0x1ee>
 80054f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005502:	d003      	beq.n	800550c <HAL_I2S_Init+0x204>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800550c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e001      	b.n	8005518 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005522:	4313      	orrs	r3, r2
 8005524:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800552c:	4313      	orrs	r3, r2
 800552e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005536:	4313      	orrs	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	897b      	ldrh	r3, [r7, #10]
 800553c:	4313      	orrs	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005544:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <HAL_I2S_Init+0x278>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_I2S_Init+0x24c>
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <HAL_I2S_Init+0x27c>)
 8005552:	e001      	b.n	8005558 <HAL_I2S_Init+0x250>
 8005554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005558:	897a      	ldrh	r2, [r7, #10]
 800555a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3720      	adds	r7, #32
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	0800567f 	.word	0x0800567f
 8005578:	cccccccd 	.word	0xcccccccd
 800557c:	08005795 	.word	0x08005795
 8005580:	40003800 	.word	0x40003800
 8005584:	40003400 	.word	0x40003400

08005588 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10e      	bne.n	8005618 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005608:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff ffb8 	bl	8005588 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	b292      	uxth	r2, r2
 8005634:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	1c9a      	adds	r2, r3, #2
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10e      	bne.n	8005676 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005666:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff ff93 	bl	800559c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b086      	sub	sp, #24
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b04      	cmp	r3, #4
 8005698:	d13a      	bne.n	8005710 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d109      	bne.n	80056b8 <I2S_IRQHandler+0x3a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d102      	bne.n	80056b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ffb4 	bl	8005620 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d126      	bne.n	8005710 <I2S_IRQHandler+0x92>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d11f      	bne.n	8005710 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	f043 0202 	orr.w	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ff50 	bl	80055b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b03      	cmp	r3, #3
 800571a:	d136      	bne.n	800578a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d109      	bne.n	800573a <I2S_IRQHandler+0xbc>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005730:	2b80      	cmp	r3, #128	; 0x80
 8005732:	d102      	bne.n	800573a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7ff ff45 	bl	80055c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b08      	cmp	r3, #8
 8005742:	d122      	bne.n	800578a <I2S_IRQHandler+0x10c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b20      	cmp	r3, #32
 8005750:	d11b      	bne.n	800578a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005760:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	f043 0204 	orr.w	r2, r3, #4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ff13 	bl	80055b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4aa2      	ldr	r2, [pc, #648]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80057ae:	4ba2      	ldr	r3, [pc, #648]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057b0:	e001      	b.n	80057b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80057b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a9b      	ldr	r2, [pc, #620]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80057cc:	4b9a      	ldr	r3, [pc, #616]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057ce:	e001      	b.n	80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80057d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e0:	d004      	beq.n	80057ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 8099 	bne.w	800591e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d107      	bne.n	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f925 	bl	8005a50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9c8 	bl	8005bb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d13a      	bne.n	80058a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d035      	beq.n	80058a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a7e      	ldr	r2, [pc, #504]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800583e:	4b7e      	ldr	r3, [pc, #504]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005840:	e001      	b.n	8005846 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4979      	ldr	r1, [pc, #484]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800584e:	428b      	cmp	r3, r1
 8005850:	d101      	bne.n	8005856 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005852:	4b79      	ldr	r3, [pc, #484]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005854:	e001      	b.n	800585a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800585a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800585e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800586e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	f043 0202 	orr.w	r2, r3, #2
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fe88 	bl	80055b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	f040 80be 	bne.w	8005a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80b8 	beq.w	8005a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a59      	ldr	r2, [pc, #356]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80058d2:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80058d4:	e001      	b.n	80058da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80058d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4954      	ldr	r1, [pc, #336]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80058e2:	428b      	cmp	r3, r1
 80058e4:	d101      	bne.n	80058ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80058e6:	4b54      	ldr	r3, [pc, #336]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80058e8:	e001      	b.n	80058ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80058ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058f4:	2300      	movs	r3, #0
 80058f6:	60bb      	str	r3, [r7, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	f043 0204 	orr.w	r2, r3, #4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fe4a 	bl	80055b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800591c:	e084      	b.n	8005a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	d107      	bne.n	8005938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8be 	bl	8005ab4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d107      	bne.n	8005952 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8fd 	bl	8005b4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d12f      	bne.n	80059bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02a      	beq.n	80059bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005974:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d101      	bne.n	8005984 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005982:	e001      	b.n	8005988 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4929      	ldr	r1, [pc, #164]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005990:	428b      	cmp	r3, r1
 8005992:	d101      	bne.n	8005998 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005994:	4b28      	ldr	r3, [pc, #160]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005996:	e001      	b.n	800599c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800599c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fdfa 	bl	80055b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d131      	bne.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d02c      	beq.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d101      	bne.n	80059de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80059da:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80059dc:	e001      	b.n	80059e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80059de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4912      	ldr	r1, [pc, #72]	; (8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80059ea:	428b      	cmp	r3, r1
 80059ec:	d101      	bne.n	80059f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80059f0:	e001      	b.n	80059f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80059f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a0a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	f043 0204 	orr.w	r2, r3, #4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fdc5 	bl	80055b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a26:	e000      	b.n	8005a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a28:	bf00      	nop
}
 8005a2a:	bf00      	nop
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40003800 	.word	0x40003800
 8005a38:	40003400 	.word	0x40003400

08005a3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	1c99      	adds	r1, r3, #2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6251      	str	r1, [r2, #36]	; 0x24
 8005a62:	881a      	ldrh	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d113      	bne.n	8005aaa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ffc9 	bl	8005a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	1c99      	adds	r1, r3, #2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6251      	str	r1, [r2, #36]	; 0x24
 8005ac6:	8819      	ldrh	r1, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <I2SEx_TxISR_I2SExt+0x90>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <I2SEx_TxISR_I2SExt+0x22>
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <I2SEx_TxISR_I2SExt+0x94>)
 8005ad4:	e001      	b.n	8005ada <I2SEx_TxISR_I2SExt+0x26>
 8005ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ada:	460a      	mov	r2, r1
 8005adc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d121      	bne.n	8005b3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <I2SEx_TxISR_I2SExt+0x90>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <I2SEx_TxISR_I2SExt+0x50>
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <I2SEx_TxISR_I2SExt+0x94>)
 8005b02:	e001      	b.n	8005b08 <I2SEx_TxISR_I2SExt+0x54>
 8005b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	490d      	ldr	r1, [pc, #52]	; (8005b44 <I2SEx_TxISR_I2SExt+0x90>)
 8005b10:	428b      	cmp	r3, r1
 8005b12:	d101      	bne.n	8005b18 <I2SEx_TxISR_I2SExt+0x64>
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <I2SEx_TxISR_I2SExt+0x94>)
 8005b16:	e001      	b.n	8005b1c <I2SEx_TxISR_I2SExt+0x68>
 8005b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff81 	bl	8005a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40003800 	.word	0x40003800
 8005b48:	40003400 	.word	0x40003400

08005b4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68d8      	ldr	r0, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	1c99      	adds	r1, r3, #2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005b64:	b282      	uxth	r2, r0
 8005b66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d113      	bne.n	8005ba8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff ff4a 	bl	8005a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <I2SEx_RxISR_I2SExt+0x90>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d101      	bne.n	8005bc6 <I2SEx_RxISR_I2SExt+0x16>
 8005bc2:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <I2SEx_RxISR_I2SExt+0x94>)
 8005bc4:	e001      	b.n	8005bca <I2SEx_RxISR_I2SExt+0x1a>
 8005bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bca:	68d8      	ldr	r0, [r3, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	1c99      	adds	r1, r3, #2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005bd6:	b282      	uxth	r2, r0
 8005bd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d121      	bne.n	8005c36 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <I2SEx_RxISR_I2SExt+0x90>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d101      	bne.n	8005c00 <I2SEx_RxISR_I2SExt+0x50>
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <I2SEx_RxISR_I2SExt+0x94>)
 8005bfe:	e001      	b.n	8005c04 <I2SEx_RxISR_I2SExt+0x54>
 8005c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	490d      	ldr	r1, [pc, #52]	; (8005c40 <I2SEx_RxISR_I2SExt+0x90>)
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	d101      	bne.n	8005c14 <I2SEx_RxISR_I2SExt+0x64>
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <I2SEx_RxISR_I2SExt+0x94>)
 8005c12:	e001      	b.n	8005c18 <I2SEx_RxISR_I2SExt+0x68>
 8005c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c1c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d106      	bne.n	8005c36 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff03 	bl	8005a3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40003800 	.word	0x40003800
 8005c44:	40003400 	.word	0x40003400

08005c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e264      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d075      	beq.n	8005d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c66:	4ba3      	ldr	r3, [pc, #652]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d00c      	beq.n	8005c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c72:	4ba0      	ldr	r3, [pc, #640]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d112      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c7e:	4b9d      	ldr	r3, [pc, #628]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c8a:	d10b      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c8c:	4b99      	ldr	r3, [pc, #612]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d05b      	beq.n	8005d50 <HAL_RCC_OscConfig+0x108>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d157      	bne.n	8005d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e23f      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d106      	bne.n	8005cbc <HAL_RCC_OscConfig+0x74>
 8005cae:	4b91      	ldr	r3, [pc, #580]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a90      	ldr	r2, [pc, #576]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e01d      	b.n	8005cf8 <HAL_RCC_OscConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x98>
 8005cc6:	4b8b      	ldr	r3, [pc, #556]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a8a      	ldr	r2, [pc, #552]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	4b88      	ldr	r3, [pc, #544]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a87      	ldr	r2, [pc, #540]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e00b      	b.n	8005cf8 <HAL_RCC_OscConfig+0xb0>
 8005ce0:	4b84      	ldr	r3, [pc, #528]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a83      	ldr	r2, [pc, #524]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4b81      	ldr	r3, [pc, #516]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a80      	ldr	r2, [pc, #512]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d013      	beq.n	8005d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fc f99e 	bl	8002040 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d08:	f7fc f99a 	bl	8002040 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b64      	cmp	r3, #100	; 0x64
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e204      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1a:	4b76      	ldr	r3, [pc, #472]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0xc0>
 8005d26:	e014      	b.n	8005d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d28:	f7fc f98a 	bl	8002040 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d30:	f7fc f986 	bl	8002040 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b64      	cmp	r3, #100	; 0x64
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e1f0      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d42:	4b6c      	ldr	r3, [pc, #432]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0xe8>
 8005d4e:	e000      	b.n	8005d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d063      	beq.n	8005e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d5e:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d6a:	4b62      	ldr	r3, [pc, #392]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d11c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d76:	4b5f      	ldr	r3, [pc, #380]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d116      	bne.n	8005db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d82:	4b5c      	ldr	r3, [pc, #368]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <HAL_RCC_OscConfig+0x152>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d001      	beq.n	8005d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e1c4      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9a:	4b56      	ldr	r3, [pc, #344]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	4952      	ldr	r1, [pc, #328]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dae:	e03a      	b.n	8005e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d020      	beq.n	8005dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db8:	4b4f      	ldr	r3, [pc, #316]	; (8005ef8 <HAL_RCC_OscConfig+0x2b0>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fc f93f 	bl	8002040 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dc6:	f7fc f93b 	bl	8002040 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e1a5      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd8:	4b46      	ldr	r3, [pc, #280]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de4:	4b43      	ldr	r3, [pc, #268]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4940      	ldr	r1, [pc, #256]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
 8005df8:	e015      	b.n	8005e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfa:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <HAL_RCC_OscConfig+0x2b0>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fc f91e 	bl	8002040 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e08:	f7fc f91a 	bl	8002040 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e184      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1a:	4b36      	ldr	r3, [pc, #216]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d030      	beq.n	8005e94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d016      	beq.n	8005e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e3a:	4b30      	ldr	r3, [pc, #192]	; (8005efc <HAL_RCC_OscConfig+0x2b4>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fc f8fe 	bl	8002040 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e48:	f7fc f8fa 	bl	8002040 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e164      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5a:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x200>
 8005e66:	e015      	b.n	8005e94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e68:	4b24      	ldr	r3, [pc, #144]	; (8005efc <HAL_RCC_OscConfig+0x2b4>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e6e:	f7fc f8e7 	bl	8002040 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e76:	f7fc f8e3 	bl	8002040 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e14d      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e88:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80a0 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10f      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ec2:	4b0c      	ldr	r3, [pc, #48]	; (8005ef4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x2b8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d121      	bne.n	8005f22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ede:	4b08      	ldr	r3, [pc, #32]	; (8005f00 <HAL_RCC_OscConfig+0x2b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a07      	ldr	r2, [pc, #28]	; (8005f00 <HAL_RCC_OscConfig+0x2b8>)
 8005ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eea:	f7fc f8a9 	bl	8002040 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef0:	e011      	b.n	8005f16 <HAL_RCC_OscConfig+0x2ce>
 8005ef2:	bf00      	nop
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	42470000 	.word	0x42470000
 8005efc:	42470e80 	.word	0x42470e80
 8005f00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f04:	f7fc f89c 	bl	8002040 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e106      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f16:	4b85      	ldr	r3, [pc, #532]	; (800612c <HAL_RCC_OscConfig+0x4e4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d106      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2f0>
 8005f2a:	4b81      	ldr	r3, [pc, #516]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a80      	ldr	r2, [pc, #512]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	e01c      	b.n	8005f72 <HAL_RCC_OscConfig+0x32a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d10c      	bne.n	8005f5a <HAL_RCC_OscConfig+0x312>
 8005f40:	4b7b      	ldr	r3, [pc, #492]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a7a      	ldr	r2, [pc, #488]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	4b78      	ldr	r3, [pc, #480]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a77      	ldr	r2, [pc, #476]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	e00b      	b.n	8005f72 <HAL_RCC_OscConfig+0x32a>
 8005f5a:	4b75      	ldr	r3, [pc, #468]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4a74      	ldr	r2, [pc, #464]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70
 8005f66:	4b72      	ldr	r3, [pc, #456]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	4a71      	ldr	r2, [pc, #452]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f6c:	f023 0304 	bic.w	r3, r3, #4
 8005f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7a:	f7fc f861 	bl	8002040 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f80:	e00a      	b.n	8005f98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fc f85d 	bl	8002040 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e0c5      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	4b65      	ldr	r3, [pc, #404]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ee      	beq.n	8005f82 <HAL_RCC_OscConfig+0x33a>
 8005fa4:	e014      	b.n	8005fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa6:	f7fc f84b 	bl	8002040 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fac:	e00a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fae:	f7fc f847 	bl	8002040 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e0af      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc4:	4b5a      	ldr	r3, [pc, #360]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ee      	bne.n	8005fae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd6:	4b56      	ldr	r3, [pc, #344]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a55      	ldr	r2, [pc, #340]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 809b 	beq.w	8006122 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fec:	4b50      	ldr	r3, [pc, #320]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d05c      	beq.n	80060b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d141      	bne.n	8006084 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006000:	4b4c      	ldr	r3, [pc, #304]	; (8006134 <HAL_RCC_OscConfig+0x4ec>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006006:	f7fc f81b 	bl	8002040 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800600e:	f7fc f817 	bl	8002040 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e081      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006020:	4b43      	ldr	r3, [pc, #268]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	019b      	lsls	r3, r3, #6
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	3b01      	subs	r3, #1
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	061b      	lsls	r3, r3, #24
 8006050:	4937      	ldr	r1, [pc, #220]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8006052:	4313      	orrs	r3, r2
 8006054:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006056:	4b37      	ldr	r3, [pc, #220]	; (8006134 <HAL_RCC_OscConfig+0x4ec>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fb fff0 	bl	8002040 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006064:	f7fb ffec 	bl	8002040 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e056      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006076:	4b2e      	ldr	r3, [pc, #184]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x41c>
 8006082:	e04e      	b.n	8006122 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006084:	4b2b      	ldr	r3, [pc, #172]	; (8006134 <HAL_RCC_OscConfig+0x4ec>)
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608a:	f7fb ffd9 	bl	8002040 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006092:	f7fb ffd5 	bl	8002040 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e03f      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f0      	bne.n	8006092 <HAL_RCC_OscConfig+0x44a>
 80060b0:	e037      	b.n	8006122 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e032      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <HAL_RCC_OscConfig+0x4e8>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d028      	beq.n	800611e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d121      	bne.n	800611e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d11a      	bne.n	800611e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060ee:	4013      	ands	r3, r2
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d111      	bne.n	800611e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	085b      	lsrs	r3, r3, #1
 8006106:	3b01      	subs	r3, #1
 8006108:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800610a:	429a      	cmp	r2, r3
 800610c:	d107      	bne.n	800611e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d001      	beq.n	8006122 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40007000 	.word	0x40007000
 8006130:	40023800 	.word	0x40023800
 8006134:	42470060 	.word	0x42470060

08006138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0cc      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800614c:	4b68      	ldr	r3, [pc, #416]	; (80062f0 <HAL_RCC_ClockConfig+0x1b8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d90c      	bls.n	8006174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b65      	ldr	r3, [pc, #404]	; (80062f0 <HAL_RCC_ClockConfig+0x1b8>)
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b63      	ldr	r3, [pc, #396]	; (80062f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0b8      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0304 	and.w	r3, r3, #4
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800618c:	4b59      	ldr	r3, [pc, #356]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a58      	ldr	r2, [pc, #352]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a4:	4b53      	ldr	r3, [pc, #332]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4a52      	ldr	r2, [pc, #328]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	494d      	ldr	r1, [pc, #308]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d044      	beq.n	8006258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d107      	bne.n	80061e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d6:	4b47      	ldr	r3, [pc, #284]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d119      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e07f      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d003      	beq.n	80061f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d107      	bne.n	8006206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f6:	4b3f      	ldr	r3, [pc, #252]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e06f      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006206:	4b3b      	ldr	r3, [pc, #236]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e067      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 0203 	bic.w	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4934      	ldr	r1, [pc, #208]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	4313      	orrs	r3, r2
 8006226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006228:	f7fb ff0a 	bl	8002040 <HAL_GetTick>
 800622c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	e00a      	b.n	8006246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006230:	f7fb ff06 	bl	8002040 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f241 3288 	movw	r2, #5000	; 0x1388
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e04f      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006246:	4b2b      	ldr	r3, [pc, #172]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 020c 	and.w	r2, r3, #12
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	429a      	cmp	r2, r3
 8006256:	d1eb      	bne.n	8006230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006258:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <HAL_RCC_ClockConfig+0x1b8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d20c      	bcs.n	8006280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006266:	4b22      	ldr	r3, [pc, #136]	; (80062f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800626e:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d001      	beq.n	8006280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e032      	b.n	80062e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4916      	ldr	r1, [pc, #88]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062aa:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	490e      	ldr	r1, [pc, #56]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062be:	f000 f821 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80062c2:	4602      	mov	r2, r0
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	490a      	ldr	r1, [pc, #40]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 80062d0:	5ccb      	ldrb	r3, [r1, r3]
 80062d2:	fa22 f303 	lsr.w	r3, r2, r3
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_RCC_ClockConfig+0x1c8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fb fe6a 	bl	8001fb8 <HAL_InitTick>

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	40023c00 	.word	0x40023c00
 80062f4:	40023800 	.word	0x40023800
 80062f8:	0801aa94 	.word	0x0801aa94
 80062fc:	20000064 	.word	0x20000064
 8006300:	20000068 	.word	0x20000068

08006304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	2300      	movs	r3, #0
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800631c:	4b67      	ldr	r3, [pc, #412]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	2b08      	cmp	r3, #8
 8006326:	d00d      	beq.n	8006344 <HAL_RCC_GetSysClockFreq+0x40>
 8006328:	2b08      	cmp	r3, #8
 800632a:	f200 80bd 	bhi.w	80064a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_RCC_GetSysClockFreq+0x34>
 8006332:	2b04      	cmp	r3, #4
 8006334:	d003      	beq.n	800633e <HAL_RCC_GetSysClockFreq+0x3a>
 8006336:	e0b7      	b.n	80064a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006338:	4b61      	ldr	r3, [pc, #388]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800633a:	60bb      	str	r3, [r7, #8]
       break;
 800633c:	e0b7      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800633e:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006340:	60bb      	str	r3, [r7, #8]
      break;
 8006342:	e0b4      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006344:	4b5d      	ldr	r3, [pc, #372]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800634c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800634e:	4b5b      	ldr	r3, [pc, #364]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d04d      	beq.n	80063f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800635a:	4b58      	ldr	r3, [pc, #352]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	099b      	lsrs	r3, r3, #6
 8006360:	461a      	mov	r2, r3
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	f240 10ff 	movw	r0, #511	; 0x1ff
 800636a:	f04f 0100 	mov.w	r1, #0
 800636e:	ea02 0800 	and.w	r8, r2, r0
 8006372:	ea03 0901 	and.w	r9, r3, r1
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	014b      	lsls	r3, r1, #5
 8006384:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006388:	0142      	lsls	r2, r0, #5
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	ebb0 0008 	subs.w	r0, r0, r8
 8006392:	eb61 0109 	sbc.w	r1, r1, r9
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	018b      	lsls	r3, r1, #6
 80063a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063a4:	0182      	lsls	r2, r0, #6
 80063a6:	1a12      	subs	r2, r2, r0
 80063a8:	eb63 0301 	sbc.w	r3, r3, r1
 80063ac:	f04f 0000 	mov.w	r0, #0
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	00d9      	lsls	r1, r3, #3
 80063b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063ba:	00d0      	lsls	r0, r2, #3
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	eb12 0208 	adds.w	r2, r2, r8
 80063c4:	eb43 0309 	adc.w	r3, r3, r9
 80063c8:	f04f 0000 	mov.w	r0, #0
 80063cc:	f04f 0100 	mov.w	r1, #0
 80063d0:	0259      	lsls	r1, r3, #9
 80063d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80063d6:	0250      	lsls	r0, r2, #9
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	f7fa fc2e 	bl	8000c48 <__aeabi_uldivmod>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4613      	mov	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e04a      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f6:	4b31      	ldr	r3, [pc, #196]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	099b      	lsrs	r3, r3, #6
 80063fc:	461a      	mov	r2, r3
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006406:	f04f 0100 	mov.w	r1, #0
 800640a:	ea02 0400 	and.w	r4, r2, r0
 800640e:	ea03 0501 	and.w	r5, r3, r1
 8006412:	4620      	mov	r0, r4
 8006414:	4629      	mov	r1, r5
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	014b      	lsls	r3, r1, #5
 8006420:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006424:	0142      	lsls	r2, r0, #5
 8006426:	4610      	mov	r0, r2
 8006428:	4619      	mov	r1, r3
 800642a:	1b00      	subs	r0, r0, r4
 800642c:	eb61 0105 	sbc.w	r1, r1, r5
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	018b      	lsls	r3, r1, #6
 800643a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800643e:	0182      	lsls	r2, r0, #6
 8006440:	1a12      	subs	r2, r2, r0
 8006442:	eb63 0301 	sbc.w	r3, r3, r1
 8006446:	f04f 0000 	mov.w	r0, #0
 800644a:	f04f 0100 	mov.w	r1, #0
 800644e:	00d9      	lsls	r1, r3, #3
 8006450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006454:	00d0      	lsls	r0, r2, #3
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	1912      	adds	r2, r2, r4
 800645c:	eb45 0303 	adc.w	r3, r5, r3
 8006460:	f04f 0000 	mov.w	r0, #0
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	0299      	lsls	r1, r3, #10
 800646a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800646e:	0290      	lsls	r0, r2, #10
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f7fa fbe2 	bl	8000c48 <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4613      	mov	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	3301      	adds	r3, #1
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	60bb      	str	r3, [r7, #8]
      break;
 80064a6:	e002      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064aa:	60bb      	str	r3, [r7, #8]
      break;
 80064ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ae:	68bb      	ldr	r3, [r7, #8]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
 80064c0:	00f42400 	.word	0x00f42400
 80064c4:	007a1200 	.word	0x007a1200

080064c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ce:	681b      	ldr	r3, [r3, #0]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000064 	.word	0x20000064

080064e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064e4:	f7ff fff0 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 80064e8:	4602      	mov	r2, r0
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	0a9b      	lsrs	r3, r3, #10
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	4903      	ldr	r1, [pc, #12]	; (8006504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f6:	5ccb      	ldrb	r3, [r1, r3]
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40023800 	.word	0x40023800
 8006504:	0801aaa4 	.word	0x0801aaa4

08006508 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d105      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800652c:	2b00      	cmp	r3, #0
 800652e:	d035      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006530:	4b62      	ldr	r3, [pc, #392]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006536:	f7fb fd83 	bl	8002040 <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800653c:	e008      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800653e:	f7fb fd7f 	bl	8002040 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e0b0      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006550:	4b5b      	ldr	r3, [pc, #364]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f0      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	019a      	lsls	r2, r3, #6
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	071b      	lsls	r3, r3, #28
 8006568:	4955      	ldr	r1, [pc, #340]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006570:	4b52      	ldr	r3, [pc, #328]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006576:	f7fb fd63 	bl	8002040 <HAL_GetTick>
 800657a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800657e:	f7fb fd5f 	bl	8002040 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e090      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006590:	4b4b      	ldr	r3, [pc, #300]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8083 	beq.w	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	4a43      	ldr	r2, [pc, #268]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ba:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065c6:	4b3f      	ldr	r3, [pc, #252]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a3e      	ldr	r2, [pc, #248]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065d2:	f7fb fd35 	bl	8002040 <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065da:	f7fb fd31 	bl	8002040 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e062      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065ec:	4b35      	ldr	r3, [pc, #212]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065f8:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006600:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02f      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d028      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006616:	4b2a      	ldr	r3, [pc, #168]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006620:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006626:	4b28      	ldr	r3, [pc, #160]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800662c:	4a24      	ldr	r2, [pc, #144]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006632:	4b23      	ldr	r3, [pc, #140]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d114      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800663e:	f7fb fcff 	bl	8002040 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006644:	e00a      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006646:	f7fb fcfb 	bl	8002040 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	f241 3288 	movw	r2, #5000	; 0x1388
 8006654:	4293      	cmp	r3, r2
 8006656:	d901      	bls.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e02a      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665c:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ee      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006674:	d10d      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006676:	4b12      	ldr	r3, [pc, #72]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	490d      	ldr	r1, [pc, #52]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800668c:	4313      	orrs	r3, r2
 800668e:	608b      	str	r3, [r1, #8]
 8006690:	e005      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006698:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800669c:	6093      	str	r3, [r2, #8]
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066aa:	4905      	ldr	r1, [pc, #20]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	42470068 	.word	0x42470068
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40007000 	.word	0x40007000
 80066c8:	42470e40 	.word	0x42470e40

080066cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d13e      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80066ea:	4b23      	ldr	r3, [pc, #140]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d12f      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006700:	4b1e      	ldr	r3, [pc, #120]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006702:	617b      	str	r3, [r7, #20]
          break;
 8006704:	e02f      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006706:	4b1c      	ldr	r3, [pc, #112]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006712:	d108      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006714:	4b18      	ldr	r3, [pc, #96]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800671c:	4a18      	ldr	r2, [pc, #96]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	e007      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006726:	4b14      	ldr	r3, [pc, #80]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800672e:	4a15      	ldr	r2, [pc, #84]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006730:	fbb2 f3f3 	udiv	r3, r2, r3
 8006734:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673c:	099b      	lsrs	r3, r3, #6
 800673e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800674c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006750:	0f1b      	lsrs	r3, r3, #28
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	fbb2 f3f3 	udiv	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]
          break;
 800675e:	e002      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
          break;
 8006764:	bf00      	nop
        }
      }
      break;
 8006766:	bf00      	nop
    }
  }
  return frequency;
 8006768:	697b      	ldr	r3, [r7, #20]
}
 800676a:	4618      	mov	r0, r3
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40023800 	.word	0x40023800
 800677c:	00bb8000 	.word	0x00bb8000
 8006780:	007a1200 	.word	0x007a1200
 8006784:	00f42400 	.word	0x00f42400

08006788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e07b      	b.n	8006892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d108      	bne.n	80067b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067aa:	d009      	beq.n	80067c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	61da      	str	r2, [r3, #28]
 80067b2:	e005      	b.n	80067c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fb f9d4 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006844:	ea42 0103 	orr.w	r1, r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	0c1b      	lsrs	r3, r3, #16
 800685e:	f003 0104 	and.w	r1, r3, #4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	f003 0210 	and.w	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b088      	sub	sp, #32
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_SPI_Transmit+0x22>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e126      	b.n	8006b0a <HAL_SPI_Transmit+0x270>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c4:	f7fb fbbc 	bl	8002040 <HAL_GetTick>
 80068c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d002      	beq.n	80068e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068da:	2302      	movs	r3, #2
 80068dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068de:	e10b      	b.n	8006af8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_SPI_Transmit+0x52>
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068f0:	e102      	b.n	8006af8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2203      	movs	r2, #3
 80068f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	88fa      	ldrh	r2, [r7, #6]
 8006910:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006938:	d10f      	bne.n	800695a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d007      	beq.n	8006978 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006980:	d14b      	bne.n	8006a1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0xf6>
 800698a:	8afb      	ldrh	r3, [r7, #22]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d13e      	bne.n	8006a0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	881a      	ldrh	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	1c9a      	adds	r2, r3, #2
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069b4:	e02b      	b.n	8006a0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d112      	bne.n	80069ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80069e8:	e011      	b.n	8006a0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ea:	f7fb fb29 	bl	8002040 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d803      	bhi.n	8006a02 <HAL_SPI_Transmit+0x168>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d102      	bne.n	8006a08 <HAL_SPI_Transmit+0x16e>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d102      	bne.n	8006a0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a0c:	e074      	b.n	8006af8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1ce      	bne.n	80069b6 <HAL_SPI_Transmit+0x11c>
 8006a18:	e04c      	b.n	8006ab4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_Transmit+0x18e>
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d140      	bne.n	8006aaa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a4e:	e02c      	b.n	8006aaa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d113      	bne.n	8006a86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a84:	e011      	b.n	8006aaa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a86:	f7fb fadb 	bl	8002040 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d803      	bhi.n	8006a9e <HAL_SPI_Transmit+0x204>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d102      	bne.n	8006aa4 <HAL_SPI_Transmit+0x20a>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aa8:	e026      	b.n	8006af8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1cd      	bne.n	8006a50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fbcb 	bl	8007254 <SPI_EndRxTxTransaction>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e000      	b.n	8006af8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b088      	sub	sp, #32
 8006b16:	af02      	add	r7, sp, #8
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	603b      	str	r3, [r7, #0]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2e:	d112      	bne.n	8006b56 <HAL_SPI_Receive+0x44>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10e      	bne.n	8006b56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b40:	88fa      	ldrh	r2, [r7, #6]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f8f1 	bl	8006d34 <HAL_SPI_TransmitReceive>
 8006b52:	4603      	mov	r3, r0
 8006b54:	e0ea      	b.n	8006d2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_SPI_Receive+0x52>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e0e3      	b.n	8006d2c <HAL_SPI_Receive+0x21a>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b6c:	f7fb fa68 	bl	8002040 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d002      	beq.n	8006b84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b7e:	2302      	movs	r3, #2
 8006b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b82:	e0ca      	b.n	8006d1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_SPI_Receive+0x7e>
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b94:	e0c1      	b.n	8006d1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	88fa      	ldrh	r2, [r7, #6]
 8006bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bdc:	d10f      	bne.n	8006bfe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d007      	beq.n	8006c1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d162      	bne.n	8006cea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c24:	e02e      	b.n	8006c84 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d115      	bne.n	8006c60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f103 020c 	add.w	r2, r3, #12
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	7812      	ldrb	r2, [r2, #0]
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c5e:	e011      	b.n	8006c84 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c60:	f7fb f9ee 	bl	8002040 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d803      	bhi.n	8006c78 <HAL_SPI_Receive+0x166>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c76:	d102      	bne.n	8006c7e <HAL_SPI_Receive+0x16c>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c82:	e04a      	b.n	8006d1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1cb      	bne.n	8006c26 <HAL_SPI_Receive+0x114>
 8006c8e:	e031      	b.n	8006cf4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d113      	bne.n	8006cc6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	1c9a      	adds	r2, r3, #2
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc4:	e011      	b.n	8006cea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc6:	f7fb f9bb 	bl	8002040 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d803      	bhi.n	8006cde <HAL_SPI_Receive+0x1cc>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SPI_Receive+0x1d2>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ce8:	e017      	b.n	8006d1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1cd      	bne.n	8006c90 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fa45 	bl	8007188 <SPI_EndRxTransaction>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
 8006d16:	e000      	b.n	8006d1a <HAL_SPI_Receive+0x208>
  }

error :
 8006d18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d42:	2301      	movs	r3, #1
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_SPI_TransmitReceive+0x26>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e18a      	b.n	8007070 <HAL_SPI_TransmitReceive+0x33c>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d62:	f7fb f96d 	bl	8002040 <HAL_GetTick>
 8006d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d78:	887b      	ldrh	r3, [r7, #2]
 8006d7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d00f      	beq.n	8006da4 <HAL_SPI_TransmitReceive+0x70>
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d8a:	d107      	bne.n	8006d9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <HAL_SPI_TransmitReceive+0x68>
 8006d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d003      	beq.n	8006da4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006da2:	e15b      	b.n	800705c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <HAL_SPI_TransmitReceive+0x82>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <HAL_SPI_TransmitReceive+0x82>
 8006db0:	887b      	ldrh	r3, [r7, #2]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006dbc:	e14e      	b.n	800705c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d003      	beq.n	8006dd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2205      	movs	r2, #5
 8006dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	887a      	ldrh	r2, [r7, #2]
 8006de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	887a      	ldrh	r2, [r7, #2]
 8006de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	887a      	ldrh	r2, [r7, #2]
 8006dfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d007      	beq.n	8006e26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d178      	bne.n	8006f22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x10a>
 8006e38:	8b7b      	ldrh	r3, [r7, #26]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d166      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	881a      	ldrh	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	1c9a      	adds	r2, r3, #2
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e62:	e053      	b.n	8006f0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d11b      	bne.n	8006eaa <HAL_SPI_TransmitReceive+0x176>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d016      	beq.n	8006eaa <HAL_SPI_TransmitReceive+0x176>
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d113      	bne.n	8006eaa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e86:	881a      	ldrh	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	1c9a      	adds	r2, r3, #2
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d119      	bne.n	8006eec <HAL_SPI_TransmitReceive+0x1b8>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d014      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	1c9a      	adds	r2, r3, #2
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eec:	f7fb f8a8 	bl	8002040 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d807      	bhi.n	8006f0c <HAL_SPI_TransmitReceive+0x1d8>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d003      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f0a:	e0a7      	b.n	800705c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1a6      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x130>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1a1      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x130>
 8006f20:	e07c      	b.n	800701c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_TransmitReceive+0x1fc>
 8006f2a:	8b7b      	ldrh	r3, [r7, #26]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d16b      	bne.n	8007008 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f56:	e057      	b.n	8007008 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d11c      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x26c>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d017      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x26c>
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d114      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	330c      	adds	r3, #12
 8006f80:	7812      	ldrb	r2, [r2, #0]
 8006f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d119      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x2ae>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d014      	beq.n	8006fe2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fe2:	f7fb f82d 	bl	8002040 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d803      	bhi.n	8006ffa <HAL_SPI_TransmitReceive+0x2c6>
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d102      	bne.n	8007000 <HAL_SPI_TransmitReceive+0x2cc>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007006:	e029      	b.n	800705c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1a2      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x224>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d19d      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800701c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f917 	bl	8007254 <SPI_EndRxTxTransaction>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d006      	beq.n	800703a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007038:	e010      	b.n	800705c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	e000      	b.n	800705c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800705a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800706c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007070:	4618      	mov	r0, r3
 8007072:	3730      	adds	r7, #48	; 0x30
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007088:	f7fa ffda 	bl	8002040 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4413      	add	r3, r2
 8007096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007098:	f7fa ffd2 	bl	8002040 <HAL_GetTick>
 800709c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800709e:	4b39      	ldr	r3, [pc, #228]	; (8007184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	015b      	lsls	r3, r3, #5
 80070a4:	0d1b      	lsrs	r3, r3, #20
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ae:	e054      	b.n	800715a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d050      	beq.n	800715a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070b8:	f7fa ffc2 	bl	8002040 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d902      	bls.n	80070ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d13d      	bne.n	800714a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070e6:	d111      	bne.n	800710c <SPI_WaitFlagStateUntilTimeout+0x94>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f0:	d004      	beq.n	80070fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fa:	d107      	bne.n	800710c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800710a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007114:	d10f      	bne.n	8007136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e017      	b.n	800717a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	3b01      	subs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d19b      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000064 	.word	0x20000064

08007188 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719c:	d111      	bne.n	80071c2 <SPI_EndRxTransaction+0x3a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a6:	d004      	beq.n	80071b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b0:	d107      	bne.n	80071c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ca:	d12a      	bne.n	8007222 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d4:	d012      	beq.n	80071fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff ff49 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02d      	beq.n	8007248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f0:	f043 0220 	orr.w	r2, r3, #32
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e026      	b.n	800724a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	2101      	movs	r1, #1
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff ff36 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01a      	beq.n	8007248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e013      	b.n	800724a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	2101      	movs	r1, #1
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff ff23 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	f043 0220 	orr.w	r2, r3, #32
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e000      	b.n	800724a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007260:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <SPI_EndRxTxTransaction+0x7c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <SPI_EndRxTxTransaction+0x80>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0d5b      	lsrs	r3, r3, #21
 800726c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727e:	d112      	bne.n	80072a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	2180      	movs	r1, #128	; 0x80
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff fef4 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729a:	f043 0220 	orr.w	r2, r3, #32
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e00f      	b.n	80072c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072bc:	2b80      	cmp	r3, #128	; 0x80
 80072be:	d0f2      	beq.n	80072a6 <SPI_EndRxTxTransaction+0x52>
 80072c0:	e000      	b.n	80072c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80072c2:	bf00      	nop
  }

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000064 	.word	0x20000064
 80072d4:	165e9f81 	.word	0x165e9f81

080072d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072d8:	b084      	sub	sp, #16
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	f107 001c 	add.w	r0, r7, #28
 80072e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d122      	bne.n	8007336 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d105      	bne.n	800732a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9a0 	bl	8007670 <USB_CoreReset>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
 8007334:	e01a      	b.n	800736c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f994 	bl	8007670 <USB_CoreReset>
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800734c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	639a      	str	r2, [r3, #56]	; 0x38
 800735e:	e005      	b.n	800736c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10b      	bne.n	800738a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f043 0206 	orr.w	r2, r3, #6
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007396:	b004      	add	sp, #16
 8007398:	4770      	bx	lr

0800739a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f043 0201 	orr.w	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f023 0201 	bic.w	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d115      	bne.n	800742c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800740c:	2001      	movs	r0, #1
 800740e:	f7fa fe23 	bl	8002058 <HAL_Delay>
      ms++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f91a 	bl	8007652 <USB_GetMode>
 800741e:	4603      	mov	r3, r0
 8007420:	2b01      	cmp	r3, #1
 8007422:	d01e      	beq.n	8007462 <USB_SetCurrentMode+0x84>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b31      	cmp	r3, #49	; 0x31
 8007428:	d9f0      	bls.n	800740c <USB_SetCurrentMode+0x2e>
 800742a:	e01a      	b.n	8007462 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d115      	bne.n	800745e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800743e:	2001      	movs	r0, #1
 8007440:	f7fa fe0a 	bl	8002058 <HAL_Delay>
      ms++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f901 	bl	8007652 <USB_GetMode>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <USB_SetCurrentMode+0x84>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b31      	cmp	r3, #49	; 0x31
 800745a:	d9f0      	bls.n	800743e <USB_SetCurrentMode+0x60>
 800745c:	e001      	b.n	8007462 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e005      	b.n	800746e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b32      	cmp	r3, #50	; 0x32
 8007466:	d101      	bne.n	800746c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	019b      	lsls	r3, r3, #6
 800748a:	f043 0220 	orr.w	r2, r3, #32
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	4a08      	ldr	r2, [pc, #32]	; (80074bc <USB_FlushTxFifo+0x44>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e006      	b.n	80074b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b20      	cmp	r3, #32
 80074ac:	d0f1      	beq.n	8007492 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	00030d40 	.word	0x00030d40

080074c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2210      	movs	r2, #16
 80074d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3301      	adds	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	4a08      	ldr	r2, [pc, #32]	; (80074fc <USB_FlushRxFifo+0x3c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d901      	bls.n	80074e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e006      	b.n	80074f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d0f1      	beq.n	80074d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	00030d40 	.word	0x00030d40

08007500 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007500:	b480      	push	{r7}
 8007502:	b089      	sub	sp, #36	; 0x24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4611      	mov	r1, r2
 800750c:	461a      	mov	r2, r3
 800750e:	460b      	mov	r3, r1
 8007510:	71fb      	strb	r3, [r7, #7]
 8007512:	4613      	mov	r3, r2
 8007514:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800751e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d123      	bne.n	800756e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007526:	88bb      	ldrh	r3, [r7, #4]
 8007528:	3303      	adds	r3, #3
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800752e:	2300      	movs	r3, #0
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e018      	b.n	8007566 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	031a      	lsls	r2, r3, #12
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	4413      	add	r3, r2
 800753c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007540:	461a      	mov	r2, r3
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3301      	adds	r3, #1
 8007552:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	3301      	adds	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	3301      	adds	r3, #1
 800755e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	3301      	adds	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	429a      	cmp	r2, r3
 800756c:	d3e2      	bcc.n	8007534 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3724      	adds	r7, #36	; 0x24
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800757c:	b480      	push	{r7}
 800757e:	b08b      	sub	sp, #44	; 0x2c
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	089b      	lsrs	r3, r3, #2
 8007596:	b29b      	uxth	r3, r3
 8007598:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	623b      	str	r3, [r7, #32]
 80075a6:	e014      	b.n	80075d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	3301      	adds	r3, #1
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	3301      	adds	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	3301      	adds	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	3301      	adds	r3, #1
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	3301      	adds	r3, #1
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d3e6      	bcc.n	80075a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075da:	8bfb      	ldrh	r3, [r7, #30]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01e      	beq.n	800761e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ea:	461a      	mov	r2, r3
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007600:	b2da      	uxtb	r2, r3
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	701a      	strb	r2, [r3, #0]
      i++;
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	3301      	adds	r3, #1
 800760a:	623b      	str	r3, [r7, #32]
      pDest++;
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	3301      	adds	r3, #1
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007612:	8bfb      	ldrh	r3, [r7, #30]
 8007614:	3b01      	subs	r3, #1
 8007616:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007618:	8bfb      	ldrh	r3, [r7, #30]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1ea      	bne.n	80075f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007620:	4618      	mov	r0, r3
 8007622:	372c      	adds	r7, #44	; 0x2c
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4013      	ands	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007644:	68fb      	ldr	r3, [r7, #12]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 0301 	and.w	r3, r3, #1
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <USB_CoreReset+0x60>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d901      	bls.n	800768c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e01a      	b.n	80076c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	daf3      	bge.n	800767c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f043 0201 	orr.w	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <USB_CoreReset+0x60>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d901      	bls.n	80076b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e006      	b.n	80076c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d0f1      	beq.n	80076a4 <USB_CoreReset+0x34>

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	00030d40 	.word	0x00030d40

080076d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076d4:	b084      	sub	sp, #16
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	f107 001c 	add.w	r0, r7, #28
 80076e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076f0:	461a      	mov	r2, r3
 80076f2:	2300      	movs	r3, #0
 80076f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007722:	2b00      	cmp	r3, #0
 8007724:	d018      	beq.n	8007758 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10a      	bne.n	8007742 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800773a:	f043 0304 	orr.w	r3, r3, #4
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	e014      	b.n	800776c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007750:	f023 0304 	bic.w	r3, r3, #4
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	e009      	b.n	800776c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007766:	f023 0304 	bic.w	r3, r3, #4
 800776a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800776c:	2110      	movs	r1, #16
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fe82 	bl	8007478 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fea3 	bl	80074c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e015      	b.n	80077ac <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4413      	add	r3, r2
 8007788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800778c:	461a      	mov	r2, r3
 800778e:	f04f 33ff 	mov.w	r3, #4294967295
 8007792:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d3e5      	bcc.n	8007780 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f04f 32ff 	mov.w	r2, #4294967295
 80077c0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a13      	ldr	r2, [pc, #76]	; (8007828 <USB_HostInit+0x154>)
 80077da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a13      	ldr	r2, [pc, #76]	; (800782c <USB_HostInit+0x158>)
 80077e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80077e4:	e009      	b.n	80077fa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a10      	ldr	r2, [pc, #64]	; (8007830 <USB_HostInit+0x15c>)
 80077f0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a0f      	ldr	r2, [pc, #60]	; (8007834 <USB_HostInit+0x160>)
 80077f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d105      	bne.n	800780c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f043 0210 	orr.w	r2, r3, #16
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	4b09      	ldr	r3, [pc, #36]	; (8007838 <USB_HostInit+0x164>)
 8007812:	4313      	orrs	r3, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007824:	b004      	add	sp, #16
 8007826:	4770      	bx	lr
 8007828:	01000200 	.word	0x01000200
 800782c:	00e00300 	.word	0x00e00300
 8007830:	00600080 	.word	0x00600080
 8007834:	004000e0 	.word	0x004000e0
 8007838:	a3200008 	.word	0xa3200008

0800783c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800785a:	f023 0303 	bic.w	r3, r3, #3
 800785e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007874:	4313      	orrs	r3, r2
 8007876:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d107      	bne.n	800788e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007884:	461a      	mov	r2, r3
 8007886:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800788a:	6053      	str	r3, [r2, #4]
 800788c:	e009      	b.n	80078a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d106      	bne.n	80078a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800789a:	461a      	mov	r2, r3
 800789c:	f241 7370 	movw	r3, #6000	; 0x1770
 80078a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80078e0:	2064      	movs	r0, #100	; 0x64
 80078e2:	f7fa fbb9 	bl	8002058 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078f4:	200a      	movs	r0, #10
 80078f6:	f7fa fbaf 	bl	8002058 <HAL_Delay>

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007928:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <USB_DriveVbus+0x44>
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d106      	bne.n	8007948 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007946:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007952:	d109      	bne.n	8007968 <USB_DriveVbus+0x64>
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007966:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	0c5b      	lsrs	r3, r3, #17
 8007994:	f003 0303 	and.w	r3, r3, #3
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	b29b      	uxth	r3, r3
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	70fb      	strb	r3, [r7, #3]
 80079da:	460b      	mov	r3, r1
 80079dc:	70bb      	strb	r3, [r7, #2]
 80079de:	4613      	mov	r3, r2
 80079e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f6:	461a      	mov	r2, r3
 80079f8:	f04f 33ff 	mov.w	r3, #4294967295
 80079fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d87e      	bhi.n	8007b04 <USB_HC_Init+0x13c>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USB_HC_Init+0x44>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007ac7 	.word	0x08007ac7
 8007a14:	08007a1d 	.word	0x08007a1d
 8007a18:	08007a89 	.word	0x08007a89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8007a2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007a30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da10      	bge.n	8007a5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	78fa      	ldrb	r2, [r7, #3]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a56:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007a58:	e057      	b.n	8007b0a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d051      	beq.n	8007b0a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007a66:	78fb      	ldrb	r3, [r7, #3]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a84:	60d3      	str	r3, [r2, #12]
      break;
 8007a86:	e040      	b.n	8007b0a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a94:	461a      	mov	r2, r3
 8007a96:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da34      	bge.n	8007b0e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	0151      	lsls	r1, r2, #5
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	440a      	add	r2, r1
 8007aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ac4:	e023      	b.n	8007b0e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f240 2325 	movw	r3, #549	; 0x225
 8007ad8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ada:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	da17      	bge.n	8007b12 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	78fa      	ldrb	r2, [r7, #3]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007afc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b00:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b02:	e006      	b.n	8007b12 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	77fb      	strb	r3, [r7, #31]
      break;
 8007b08:	e004      	b.n	8007b14 <USB_HC_Init+0x14c>
      break;
 8007b0a:	bf00      	nop
 8007b0c:	e002      	b.n	8007b14 <USB_HC_Init+0x14c>
      break;
 8007b0e:	bf00      	nop
 8007b10:	e000      	b.n	8007b14 <USB_HC_Init+0x14c>
      break;
 8007b12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	2101      	movs	r1, #1
 8007b24:	fa01 f303 	lsl.w	r3, r1, r3
 8007b28:	6939      	ldr	r1, [r7, #16]
 8007b2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007b3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da03      	bge.n	8007b4e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e001      	b.n	8007b52 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff ff0f 	bl	8007976 <USB_GetHostSpeed>
 8007b58:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d106      	bne.n	8007b70 <USB_HC_Init+0x1a8>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d003      	beq.n	8007b70 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e001      	b.n	8007b74 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b74:	787b      	ldrb	r3, [r7, #1]
 8007b76:	059b      	lsls	r3, r3, #22
 8007b78:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b7c:	78bb      	ldrb	r3, [r7, #2]
 8007b7e:	02db      	lsls	r3, r3, #11
 8007b80:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b84:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b8a:	049b      	lsls	r3, r3, #18
 8007b8c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b90:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b98:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	0159      	lsls	r1, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	440b      	add	r3, r1
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bb0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d10f      	bne.n	8007bda <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	78fa      	ldrb	r2, [r7, #3]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bd8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3720      	adds	r7, #32
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08c      	sub	sp, #48	; 0x30
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c00:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d02d      	beq.n	8007c6a <USB_HC_StartXfer+0x86>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d129      	bne.n	8007c6a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d117      	bne.n	8007c4c <USB_HC_StartXfer+0x68>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	79db      	ldrb	r3, [r3, #7]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <USB_HC_StartXfer+0x48>
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	79db      	ldrb	r3, [r3, #7]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d10f      	bne.n	8007c4c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	6a3a      	ldr	r2, [r7, #32]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10b      	bne.n	8007c6a <USB_HC_StartXfer+0x86>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	795b      	ldrb	r3, [r3, #5]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d107      	bne.n	8007c6a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fa2f 	bl	80080c4 <USB_DoPing>
      return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e0f8      	b.n	8007e5c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d018      	beq.n	8007ca4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	8912      	ldrh	r2, [r2, #8]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	8912      	ldrh	r2, [r2, #8]
 8007c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c86:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c88:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c8a:	8b7b      	ldrh	r3, [r7, #26]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d90b      	bls.n	8007ca8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007c90:	8b7b      	ldrh	r3, [r7, #26]
 8007c92:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	8912      	ldrh	r2, [r2, #8]
 8007c9a:	fb02 f203 	mul.w	r2, r2, r3
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	611a      	str	r2, [r3, #16]
 8007ca2:	e001      	b.n	8007ca8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	8912      	ldrh	r2, [r2, #8]
 8007cb6:	fb02 f203 	mul.w	r2, r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	611a      	str	r2, [r3, #16]
 8007cbe:	e003      	b.n	8007cc8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cd2:	04d9      	lsls	r1, r3, #19
 8007cd4:	4b63      	ldr	r3, [pc, #396]	; (8007e64 <USB_HC_StartXfer+0x280>)
 8007cd6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cd8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	7a9b      	ldrb	r3, [r3, #10]
 8007cde:	075b      	lsls	r3, r3, #29
 8007ce0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ce4:	69f9      	ldr	r1, [r7, #28]
 8007ce6:	0148      	lsls	r0, r1, #5
 8007ce8:	6a39      	ldr	r1, [r7, #32]
 8007cea:	4401      	add	r1, r0
 8007cec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cf0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cf2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	68d9      	ldr	r1, [r3, #12]
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0a:	460a      	mov	r2, r1
 8007d0c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf0c      	ite	eq
 8007d1e:	2301      	moveq	r3, #1
 8007d20:	2300      	movne	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	6a3a      	ldr	r2, [r7, #32]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d44:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	7e7b      	ldrb	r3, [r7, #25]
 8007d56:	075b      	lsls	r3, r3, #29
 8007d58:	69f9      	ldr	r1, [r7, #28]
 8007d5a:	0148      	lsls	r0, r1, #5
 8007d5c:	6a39      	ldr	r1, [r7, #32]
 8007d5e:	4401      	add	r1, r0
 8007d60:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007d64:	4313      	orrs	r3, r2
 8007d66:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d7e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	78db      	ldrb	r3, [r3, #3]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d004      	beq.n	8007d92 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	e003      	b.n	8007d9a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d98:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007da0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dae:	461a      	mov	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e04e      	b.n	8007e5c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	78db      	ldrb	r3, [r3, #3]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d149      	bne.n	8007e5a <USB_HC_StartXfer+0x276>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d045      	beq.n	8007e5a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	79db      	ldrb	r3, [r3, #7]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d830      	bhi.n	8007e38 <USB_HC_StartXfer+0x254>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <USB_HC_StartXfer+0x1f8>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007ded 	.word	0x08007ded
 8007de0:	08007e11 	.word	0x08007e11
 8007de4:	08007ded 	.word	0x08007ded
 8007de8:	08007e11 	.word	0x08007e11
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	3303      	adds	r3, #3
 8007df2:	089b      	lsrs	r3, r3, #2
 8007df4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007df6:	8afa      	ldrh	r2, [r7, #22]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d91c      	bls.n	8007e3c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f043 0220 	orr.w	r2, r3, #32
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e0e:	e015      	b.n	8007e3c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	3303      	adds	r3, #3
 8007e16:	089b      	lsrs	r3, r3, #2
 8007e18:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e1a:	8afa      	ldrh	r2, [r7, #22]
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d90a      	bls.n	8007e40 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e36:	e003      	b.n	8007e40 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007e38:	bf00      	nop
 8007e3a:	e002      	b.n	8007e42 <USB_HC_StartXfer+0x25e>
        break;
 8007e3c:	bf00      	nop
 8007e3e:	e000      	b.n	8007e42 <USB_HC_StartXfer+0x25e>
        break;
 8007e40:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	68d9      	ldr	r1, [r3, #12]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	785a      	ldrb	r2, [r3, #1]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	2000      	movs	r0, #0
 8007e52:	9000      	str	r0, [sp, #0]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff fb53 	bl	8007500 <USB_WritePacket>
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3728      	adds	r7, #40	; 0x28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	1ff80000 	.word	0x1ff80000

08007e68 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	b29b      	uxth	r3, r3
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b089      	sub	sp, #36	; 0x24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	0c9b      	lsrs	r3, r3, #18
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	0fdb      	lsrs	r3, r3, #31
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d104      	bne.n	8007ee4 <USB_HC_Halt+0x5a>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e0e8      	b.n	80080b6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <USB_HC_Halt+0x66>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d173      	bne.n	8007fd8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f0e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 80cb 	bne.w	80080b4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d143      	bne.n	8007fb2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f48:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	0151      	lsls	r1, r2, #5
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	440a      	add	r2, r1
 8007f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f88:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f96:	d81d      	bhi.n	8007fd4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fae:	d0ec      	beq.n	8007f8a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fb0:	e080      	b.n	80080b4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fd0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fd2:	e06f      	b.n	80080b4 <USB_HC_Halt+0x22a>
            break;
 8007fd4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fd6:	e06d      	b.n	80080b4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ff6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d143      	bne.n	8008090 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	4413      	add	r3, r2
 8008010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	440a      	add	r2, r1
 800801e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008022:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008026:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	440a      	add	r2, r1
 800803e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008046:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	4413      	add	r3, r2
 8008050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	440a      	add	r2, r1
 800805e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008062:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008066:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3301      	adds	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008074:	d81d      	bhi.n	80080b2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	4413      	add	r3, r2
 800807e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808c:	d0ec      	beq.n	8008068 <USB_HC_Halt+0x1de>
 800808e:	e011      	b.n	80080b4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	0151      	lsls	r1, r2, #5
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	440a      	add	r2, r1
 80080a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	e000      	b.n	80080b4 <USB_HC_Halt+0x22a>
          break;
 80080b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3724      	adds	r7, #36	; 0x24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
	...

080080c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80080d8:	2301      	movs	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	04da      	lsls	r2, r3, #19
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <USB_DoPing+0x74>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	015a      	lsls	r2, r3, #5
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800810c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008114:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	1ff80000 	.word	0x1ff80000

0800813c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff f935 	bl	80073bc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008152:	2110      	movs	r1, #16
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff f98f 	bl	8007478 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff f9b0 	bl	80074c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	e01f      	b.n	80081a6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800817c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008184:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800818c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819a:	461a      	mov	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3301      	adds	r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b0f      	cmp	r3, #15
 80081aa:	d9dc      	bls.n	8008166 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80081ac:	2300      	movs	r3, #0
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	e034      	b.n	800821c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e6:	461a      	mov	r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	3301      	adds	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081f8:	d80c      	bhi.n	8008214 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4413      	add	r3, r2
 8008202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800820c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008210:	d0ec      	beq.n	80081ec <USB_StopHost+0xb0>
 8008212:	e000      	b.n	8008216 <USB_StopHost+0xda>
        break;
 8008214:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	3301      	adds	r3, #1
 800821a:	613b      	str	r3, [r7, #16]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b0f      	cmp	r3, #15
 8008220:	d9c7      	bls.n	80081b2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008228:	461a      	mov	r2, r3
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f04f 32ff 	mov.w	r2, #4294967295
 8008236:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff f8ae 	bl	800739a <USB_EnableGlobalInt>

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 800824c:	4904      	ldr	r1, [pc, #16]	; (8008260 <GUI_X_Config+0x18>)
 800824e:	4805      	ldr	r0, [pc, #20]	; (8008264 <GUI_X_Config+0x1c>)
 8008250:	f002 fe3c 	bl	800aecc <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8008254:	4804      	ldr	r0, [pc, #16]	; (8008268 <GUI_X_Config+0x20>)
 8008256:	f003 f9c3 	bl	800b5e0 <GUI_SetDefaultFont>
}
 800825a:	bf00      	nop
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	0001d4c0 	.word	0x0001d4c0
 8008264:	200004b8 	.word	0x200004b8
 8008268:	0801a14c 	.word	0x0801a14c

0800826c <LcdWriteReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
void LcdWriteReg(U8 Command) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);	//command mode
 8008276:	2200      	movs	r2, #0
 8008278:	2101      	movs	r1, #1
 800827a:	4806      	ldr	r0, [pc, #24]	; (8008294 <LcdWriteReg+0x28>)
 800827c:	f7fb f95c 	bl	8003538 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &Command, 1, 100);
 8008280:	1df9      	adds	r1, r7, #7
 8008282:	2364      	movs	r3, #100	; 0x64
 8008284:	2201      	movs	r2, #1
 8008286:	4804      	ldr	r0, [pc, #16]	; (8008298 <LcdWriteReg+0x2c>)
 8008288:	f7fe fb07 	bl	800689a <HAL_SPI_Transmit>

}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40020400 	.word	0x40020400
 8008298:	2001de10 	.word	0x2001de10

0800829c <LcdWriteData>:
*       LcdWriteData
*
* Function description:
*   Writes a value to a display register
*/
void LcdWriteData(U8 Data) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 80082a6:	2201      	movs	r2, #1
 80082a8:	2101      	movs	r1, #1
 80082aa:	4806      	ldr	r0, [pc, #24]	; (80082c4 <LcdWriteData+0x28>)
 80082ac:	f7fb f944 	bl	8003538 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &Data, 1, 100);
 80082b0:	1df9      	adds	r1, r7, #7
 80082b2:	2364      	movs	r3, #100	; 0x64
 80082b4:	2201      	movs	r2, #1
 80082b6:	4804      	ldr	r0, [pc, #16]	; (80082c8 <LcdWriteData+0x2c>)
 80082b8:	f7fe faef 	bl	800689a <HAL_SPI_Transmit>

}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40020400 	.word	0x40020400
 80082c8:	2001de10 	.word	0x2001de10

080082cc <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]

		HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 80082d6:	2201      	movs	r2, #1
 80082d8:	2101      	movs	r1, #1
 80082da:	4807      	ldr	r0, [pc, #28]	; (80082f8 <LcdWriteDataMultiple+0x2c>)
 80082dc:	f7fb f92c 	bl	8003538 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, pData, NumItems, 100);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	2364      	movs	r3, #100	; 0x64
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4804      	ldr	r0, [pc, #16]	; (80082fc <LcdWriteDataMultiple+0x30>)
 80082ea:	f7fe fad6 	bl	800689a <HAL_SPI_Transmit>

}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	40020400 	.word	0x40020400
 80082fc:	2001de10 	.word	0x2001de10

08008300 <LcdReadData>:
*       LcdReadData
*
* Function description:
*   Reads multiple values from a display register.
*/
U8 LcdReadData() {
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0

	  U8 tempData = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	71fb      	strb	r3, [r7, #7]

	  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 800830a:	2201      	movs	r2, #1
 800830c:	2101      	movs	r1, #1
 800830e:	4807      	ldr	r0, [pc, #28]	; (800832c <LcdReadData+0x2c>)
 8008310:	f7fb f912 	bl	8003538 <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, &tempData, 1, 100);
 8008314:	1df9      	adds	r1, r7, #7
 8008316:	2364      	movs	r3, #100	; 0x64
 8008318:	2201      	movs	r2, #1
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <LcdReadData+0x30>)
 800831c:	f7fe fbf9 	bl	8006b12 <HAL_SPI_Receive>

	  return tempData;
 8008320:	79fb      	ldrb	r3, [r7, #7]

}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40020400 	.word	0x40020400
 8008330:	2001de10 	.word	0x2001de10

08008334 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 800833e:	2201      	movs	r2, #1
 8008340:	2101      	movs	r1, #1
 8008342:	4807      	ldr	r0, [pc, #28]	; (8008360 <LcdReadDataMultiple+0x2c>)
 8008344:	f7fb f8f8 	bl	8003538 <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, pData, NumItems, 100);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	b29a      	uxth	r2, r3
 800834c:	2364      	movs	r3, #100	; 0x64
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4804      	ldr	r0, [pc, #16]	; (8008364 <LcdReadDataMultiple+0x30>)
 8008352:	f7fe fbde 	bl	8006b12 <HAL_SPI_Receive>

}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40020400 	.word	0x40020400
 8008364:	2001de10 	.word	0x2001de10

08008368 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b0a2      	sub	sp, #136	; 0x88
 800836c:	af02      	add	r7, sp, #8
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800836e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	605a      	str	r2, [r3, #4]
 8008378:	609a      	str	r2, [r3, #8]
 800837a:	60da      	str	r2, [r3, #12]
 800837c:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800837e:	463b      	mov	r3, r7
 8008380:	2268      	movs	r2, #104	; 0x68
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f00a febd 	bl	8013104 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, COLOR_CONVERSION, 0, 0);
 800838a:	2300      	movs	r3, #0
 800838c:	2200      	movs	r2, #0
 800838e:	4940      	ldr	r1, [pc, #256]	; (8008490 <LCD_X_Config+0x128>)
 8008390:	4840      	ldr	r0, [pc, #256]	; (8008494 <LCD_X_Config+0x12c>)
 8008392:	f003 fad9 	bl	800b948 <GUI_DEVICE_CreateAndLink>
 8008396:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8008398:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800839c:	21f0      	movs	r1, #240	; 0xf0
 800839e:	2000      	movs	r0, #0
 80083a0:	f004 fa32 	bl	800c808 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 80083a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80083a8:	21f0      	movs	r1, #240	; 0xf0
 80083aa:	2000      	movs	r0, #0
 80083ac:	f004 fa44 	bl	800c838 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = DISPLAY_ORIENTATION; //GUI_SWAP_XY | GUI_MIRROR_Y;
 80083b0:	2306      	movs	r3, #6
 80083b2:	673b      	str	r3, [r7, #112]	; 0x70

  //mel
  //Config.NumDummyReads = 1;  //needed for ili9341 shield

  GUIDRV_FlexColor_Config(pDevice, &Config);
 80083b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80083b8:	4619      	mov	r1, r3
 80083ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80083bc:	f004 fd3d 	bl	800ce3a <GUIDRV_FlexColor_Config>


  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 80083c0:	4b35      	ldr	r3, [pc, #212]	; (8008498 <LCD_X_Config+0x130>)
 80083c2:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 80083c4:	4b35      	ldr	r3, [pc, #212]	; (800849c <LCD_X_Config+0x134>)
 80083c6:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1 = LcdWriteDataMultiple;
 80083c8:	4b35      	ldr	r3, [pc, #212]	; (80084a0 <LCD_X_Config+0x138>)
 80083ca:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1   = LcdReadData;
 80083cc:	4b35      	ldr	r3, [pc, #212]	; (80084a4 <LCD_X_Config+0x13c>)
 80083ce:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1  = LcdReadDataMultiple;
 80083d0:	4b35      	ldr	r3, [pc, #212]	; (80084a8 <LCD_X_Config+0x140>)
 80083d2:	61fb      	str	r3, [r7, #28]

#ifdef ILI9488
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M24C0B8);

#else //ILI9341
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);
 80083d4:	4639      	mov	r1, r7
 80083d6:	4b35      	ldr	r3, [pc, #212]	; (80084ac <LCD_X_Config+0x144>)
 80083d8:	4a35      	ldr	r2, [pc, #212]	; (80084b0 <LCD_X_Config+0x148>)
 80083da:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80083dc:	f004 fd4b 	bl	800ce76 <GUIDRV_FlexColor_SetFunc>
#endif
  //
  // Display driver configuration
  //
 if (LCD_GetSwapXY()) {
 80083e0:	f004 f924 	bl	800c62c <LCD_GetSwapXY>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <LCD_X_Config+0x9c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 80083ea:	22f0      	movs	r2, #240	; 0xf0
 80083ec:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083f0:	2000      	movs	r0, #0
 80083f2:	f004 fa09 	bl	800c808 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 80083f6:	22f0      	movs	r2, #240	; 0xf0
 80083f8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083fc:	2000      	movs	r0, #0
 80083fe:	f004 fa1b 	bl	800c838 <LCD_SetVSizeEx>
 8008402:	e00b      	b.n	800841c <LCD_X_Config+0xb4>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8008404:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008408:	21f0      	movs	r1, #240	; 0xf0
 800840a:	2000      	movs	r0, #0
 800840c:	f004 f9fc 	bl	800c808 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8008410:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008414:	21f0      	movs	r1, #240	; 0xf0
 8008416:	2000      	movs	r0, #0
 8008418:	f004 fa0e 	bl	800c838 <LCD_SetVSizeEx>


#if (USE_TOUCH == 1)

#ifndef SHIELD
 	 pConfig.Orientation = GUI_SWAP_XY;
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <LCD_X_Config+0x14c>)
 800841e:	2204      	movs	r2, #4
 8008420:	611a      	str	r2, [r3, #16]
	 pConfig.Orientation = GUI_SWAP_XY | GUI_MIRROR_Y;		//shield XMAX on left
#endif
	 // - Orientation: Orientation of the touch screen if not the same as the physical orientation.
	 //                 A or-combination of the defines GUI_SWAP_XY, GUI_MIRROR_X and GUI_MIRROR_Y
	 //                 can be used.
	 pConfig.xLog0 = 0; 				// - xLog0      : Logical pixel value of horizontal reference point 0. Typically 0.
 8008422:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <LCD_X_Config+0x14c>)
 8008424:	2200      	movs	r2, #0
 8008426:	615a      	str	r2, [r3, #20]
	 pConfig.xLog1 = XSIZE_PHYS -1; 	// - xLog1      : Logical pixel value of horizontal reference point 1. Typically horizontal screen resolution -1.
 8008428:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <LCD_X_Config+0x14c>)
 800842a:	22ef      	movs	r2, #239	; 0xef
 800842c:	619a      	str	r2, [r3, #24]
	 pConfig.xPhys0 = TOUCH_LEFT;		// - xPhys0     : Physical AD value of horizontal reference point 0.
 800842e:	4b21      	ldr	r3, [pc, #132]	; (80084b4 <LCD_X_Config+0x14c>)
 8008430:	f240 723a 	movw	r2, #1850	; 0x73a
 8008434:	61da      	str	r2, [r3, #28]
	 pConfig.xPhys1 = TOUCH_RIGHT;		// - xPhys1     : Physical AD value of horizontal reference point 1.
 8008436:	4b1f      	ldr	r3, [pc, #124]	; (80084b4 <LCD_X_Config+0x14c>)
 8008438:	22a1      	movs	r2, #161	; 0xa1
 800843a:	621a      	str	r2, [r3, #32]
	 pConfig.yLog0 = 0;					// - yLog0      : Logical pixel value of vertical reference point 0. Typically 0.
 800843c:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <LCD_X_Config+0x14c>)
 800843e:	2200      	movs	r2, #0
 8008440:	625a      	str	r2, [r3, #36]	; 0x24
	 pConfig.yLog1 = YSIZE_PHYS - 1;	// - yLog1      : Logical pixel value of vertical reference point 1. Typically vertical screen resolution -1.
 8008442:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <LCD_X_Config+0x14c>)
 8008444:	f240 123f 	movw	r2, #319	; 0x13f
 8008448:	629a      	str	r2, [r3, #40]	; 0x28
	 pConfig.yPhys0 = TOUCH_TOP;		// - yPhys0     : Physical AD value of vertical reference point 0.
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <LCD_X_Config+0x14c>)
 800844c:	f240 7275 	movw	r2, #1909	; 0x775
 8008450:	62da      	str	r2, [r3, #44]	; 0x2c
	 pConfig.xPhys1 = TOUCH_BOTTOM;		// - yPhys1     : Physical AD value of vertical reference point 1.
 8008452:	4b18      	ldr	r3, [pc, #96]	; (80084b4 <LCD_X_Config+0x14c>)
 8008454:	2289      	movs	r2, #137	; 0x89
 8008456:	621a      	str	r2, [r3, #32]

	    // Set orientation of touch screen
	    //
	    GUI_TOUCH_SetOrientation(pConfig.Orientation);
 8008458:	4b16      	ldr	r3, [pc, #88]	; (80084b4 <LCD_X_Config+0x14c>)
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	4618      	mov	r0, r3
 800845e:	f003 fb55 	bl	800bb0c <GUI_TOUCH_SetOrientation>

	    //
	    // Calibrate touch screen
	    //
	    GUI_TOUCH_Calibrate(GUI_COORD_X, 0, WIDTH  - 1, TOUCH_LEFT, TOUCH_RIGHT);
 8008462:	23a1      	movs	r3, #161	; 0xa1
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	f240 733a 	movw	r3, #1850	; 0x73a
 800846a:	f240 123f 	movw	r2, #319	; 0x13f
 800846e:	2100      	movs	r1, #0
 8008470:	2000      	movs	r0, #0
 8008472:	f003 fb51 	bl	800bb18 <GUI_TOUCH_Calibrate>
	    GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, HEIGHT - 1, TOUCH_TOP,  TOUCH_BOTTOM);
 8008476:	2389      	movs	r3, #137	; 0x89
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	f240 7375 	movw	r3, #1909	; 0x775
 800847e:	22ef      	movs	r2, #239	; 0xef
 8008480:	2100      	movs	r1, #0
 8008482:	2001      	movs	r0, #1
 8008484:	f003 fb48 	bl	800bb18 <GUI_TOUCH_Calibrate>

#endif
}
 8008488:	bf00      	nop
 800848a:	3780      	adds	r7, #128	; 0x80
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	08015e98 	.word	0x08015e98
 8008494:	08016294 	.word	0x08016294
 8008498:	0800826d 	.word	0x0800826d
 800849c:	0800829d 	.word	0x0800829d
 80084a0:	080082cd 	.word	0x080082cd
 80084a4:	08008301 	.word	0x08008301
 80084a8:	08008335 	.word	0x08008335
 80084ac:	0800d549 	.word	0x0800d549
 80084b0:	0800d8dd 	.word	0x0800d8dd
 80084b4:	2001deb4 	.word	0x2001deb4

080084b8 <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d103      	bne.n	80084d2 <LCD_X_DisplayDriver+0x1a>
    // to be adapted by the customer...
    //
    // ...

#ifdef ILI9341
	 InitLCD_ILI9341();
 80084ca:	f000 f80b 	bl	80084e4 <InitLCD_ILI9341>
	 InitLCD_ILI9488();
#else
	 InitLCD_ILI9341(); //anything else
#endif

    return 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e003      	b.n	80084da <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	617b      	str	r3, [r7, #20]
  }
  return r;
 80084d8:	697b      	ldr	r3, [r7, #20]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <InitLCD_ILI9341>:

//ILI9341 specific functions

void InitLCD_ILI9341(void) {
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 80084e8:	2201      	movs	r2, #1
 80084ea:	2120      	movs	r1, #32
 80084ec:	48a3      	ldr	r0, [pc, #652]	; (800877c <InitLCD_ILI9341+0x298>)
 80084ee:	f7fb f823 	bl	8003538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 80084f2:	2201      	movs	r2, #1
 80084f4:	2101      	movs	r1, #1
 80084f6:	48a2      	ldr	r0, [pc, #648]	; (8008780 <InitLCD_ILI9341+0x29c>)
 80084f8:	f7fb f81e 	bl	8003538 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); 		//disable CS
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET); 		//enable CS
 80084fc:	2200      	movs	r2, #0
 80084fe:	2110      	movs	r1, #16
 8008500:	489e      	ldr	r0, [pc, #632]	; (800877c <InitLCD_ILI9341+0x298>)
 8008502:	f7fb f819 	bl	8003538 <HAL_GPIO_WritePin>


	/* Force reset */
	  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8008506:	2201      	movs	r2, #1
 8008508:	2120      	movs	r1, #32
 800850a:	489c      	ldr	r0, [pc, #624]	; (800877c <InitLCD_ILI9341+0x298>)
 800850c:	f7fb f814 	bl	8003538 <HAL_GPIO_WritePin>
	  HAL_Delay(30);
 8008510:	201e      	movs	r0, #30
 8008512:	f7f9 fda1 	bl	8002058 <HAL_Delay>
	  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);
 8008516:	2200      	movs	r2, #0
 8008518:	2120      	movs	r1, #32
 800851a:	4898      	ldr	r0, [pc, #608]	; (800877c <InitLCD_ILI9341+0x298>)
 800851c:	f7fb f80c 	bl	8003538 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8008520:	200a      	movs	r0, #10
 8008522:	f7f9 fd99 	bl	8002058 <HAL_Delay>
	  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8008526:	2201      	movs	r2, #1
 8008528:	2120      	movs	r1, #32
 800852a:	4894      	ldr	r0, [pc, #592]	; (800877c <InitLCD_ILI9341+0x298>)
 800852c:	f7fb f804 	bl	8003538 <HAL_GPIO_WritePin>


	/* Delay for RST response */
	HAL_Delay(200);
 8008530:	20c8      	movs	r0, #200	; 0xc8
 8008532:	f7f9 fd91 	bl	8002058 <HAL_Delay>

	/* Software reset */
	LcdWriteReg(ILI9341_RESET);
 8008536:	2001      	movs	r0, #1
 8008538:	f7ff fe98 	bl	800826c <LcdWriteReg>
	HAL_Delay(100);
 800853c:	2064      	movs	r0, #100	; 0x64
 800853e:	f7f9 fd8b 	bl	8002058 <HAL_Delay>

	LcdWriteReg(ILI9341_POWERA);
 8008542:	20cb      	movs	r0, #203	; 0xcb
 8008544:	f7ff fe92 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x39);
 8008548:	2039      	movs	r0, #57	; 0x39
 800854a:	f7ff fea7 	bl	800829c <LcdWriteData>
	LcdWriteData(0x2C);
 800854e:	202c      	movs	r0, #44	; 0x2c
 8008550:	f7ff fea4 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 8008554:	2000      	movs	r0, #0
 8008556:	f7ff fea1 	bl	800829c <LcdWriteData>
	LcdWriteData(0x34);
 800855a:	2034      	movs	r0, #52	; 0x34
 800855c:	f7ff fe9e 	bl	800829c <LcdWriteData>
	LcdWriteData(0x02);
 8008560:	2002      	movs	r0, #2
 8008562:	f7ff fe9b 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_POWERB);
 8008566:	20cf      	movs	r0, #207	; 0xcf
 8008568:	f7ff fe80 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00);
 800856c:	2000      	movs	r0, #0
 800856e:	f7ff fe95 	bl	800829c <LcdWriteData>
	LcdWriteData(0xC1);
 8008572:	20c1      	movs	r0, #193	; 0xc1
 8008574:	f7ff fe92 	bl	800829c <LcdWriteData>
	LcdWriteData(0x30);
 8008578:	2030      	movs	r0, #48	; 0x30
 800857a:	f7ff fe8f 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_DTCA);
 800857e:	20e8      	movs	r0, #232	; 0xe8
 8008580:	f7ff fe74 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x85);
 8008584:	2085      	movs	r0, #133	; 0x85
 8008586:	f7ff fe89 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 800858a:	2000      	movs	r0, #0
 800858c:	f7ff fe86 	bl	800829c <LcdWriteData>
	LcdWriteData(0x78);
 8008590:	2078      	movs	r0, #120	; 0x78
 8008592:	f7ff fe83 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_DTCB);
 8008596:	20ea      	movs	r0, #234	; 0xea
 8008598:	f7ff fe68 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00);
 800859c:	2000      	movs	r0, #0
 800859e:	f7ff fe7d 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 80085a2:	2000      	movs	r0, #0
 80085a4:	f7ff fe7a 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_POWER_SEQ);
 80085a8:	20ed      	movs	r0, #237	; 0xed
 80085aa:	f7ff fe5f 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x64);
 80085ae:	2064      	movs	r0, #100	; 0x64
 80085b0:	f7ff fe74 	bl	800829c <LcdWriteData>
	LcdWriteData(0x03);
 80085b4:	2003      	movs	r0, #3
 80085b6:	f7ff fe71 	bl	800829c <LcdWriteData>
	LcdWriteData(0x12);
 80085ba:	2012      	movs	r0, #18
 80085bc:	f7ff fe6e 	bl	800829c <LcdWriteData>
	LcdWriteData(0x81);
 80085c0:	2081      	movs	r0, #129	; 0x81
 80085c2:	f7ff fe6b 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_PRC);
 80085c6:	20f7      	movs	r0, #247	; 0xf7
 80085c8:	f7ff fe50 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x20);
 80085cc:	2020      	movs	r0, #32
 80085ce:	f7ff fe65 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_POWER1); //4.6V
 80085d2:	20c0      	movs	r0, #192	; 0xc0
 80085d4:	f7ff fe4a 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x23);
 80085d8:	2023      	movs	r0, #35	; 0x23
 80085da:	f7ff fe5f 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_POWER2);
 80085de:	20c1      	movs	r0, #193	; 0xc1
 80085e0:	f7ff fe44 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x10);
 80085e4:	2010      	movs	r0, #16
 80085e6:	f7ff fe59 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_VCOM1);
 80085ea:	20c5      	movs	r0, #197	; 0xc5
 80085ec:	f7ff fe3e 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x3E);		//vcomh 4.250V
 80085f0:	203e      	movs	r0, #62	; 0x3e
 80085f2:	f7ff fe53 	bl	800829c <LcdWriteData>
	LcdWriteData(0x28);		//vcoml -1.500V
 80085f6:	2028      	movs	r0, #40	; 0x28
 80085f8:	f7ff fe50 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_VCOM2);
 80085fc:	20c7      	movs	r0, #199	; 0xc7
 80085fe:	f7ff fe35 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x86);
 8008602:	2086      	movs	r0, #134	; 0x86
 8008604:	f7ff fe4a 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_MAC); //memory access control
 8008608:	2036      	movs	r0, #54	; 0x36
 800860a:	f7ff fe2f 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x48);	//48
 800860e:	2048      	movs	r0, #72	; 0x48
 8008610:	f7ff fe44 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_PIXEL_FORMAT);
 8008614:	203a      	movs	r0, #58	; 0x3a
 8008616:	f7ff fe29 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x55);	//rgb  16bits/pixel mcu 16bits/pixel
 800861a:	2055      	movs	r0, #85	; 0x55
 800861c:	f7ff fe3e 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_FRC); //Frame Rate Cntrol
 8008620:	20b1      	movs	r0, #177	; 0xb1
 8008622:	f7ff fe23 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00); //diva freq == fosc
 8008626:	2000      	movs	r0, #0
 8008628:	f7ff fe38 	bl	800829c <LcdWriteData>
	LcdWriteData(0x18);	//79Hz refresh
 800862c:	2018      	movs	r0, #24
 800862e:	f7ff fe35 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_DFC);//display function control
 8008632:	20b6      	movs	r0, #182	; 0xb6
 8008634:	f7ff fe1a 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x08);
 8008638:	2008      	movs	r0, #8
 800863a:	f7ff fe2f 	bl	800829c <LcdWriteData>
	LcdWriteData(0xA2); //normally white, gs - g1-g320, ss - s720-s1
 800863e:	20a2      	movs	r0, #162	; 0xa2
 8008640:	f7ff fe2c 	bl	800829c <LcdWriteData>
	LcdWriteData(0x27);
 8008644:	2027      	movs	r0, #39	; 0x27
 8008646:	f7ff fe29 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_3GAMMA_EN);
 800864a:	20f2      	movs	r0, #242	; 0xf2
 800864c:	f7ff fe0e 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00);
 8008650:	2000      	movs	r0, #0
 8008652:	f7ff fe23 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_COLUMN_ADDR);
 8008656:	202a      	movs	r0, #42	; 0x2a
 8008658:	f7ff fe08 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00);
 800865c:	2000      	movs	r0, #0
 800865e:	f7ff fe1d 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 8008662:	2000      	movs	r0, #0
 8008664:	f7ff fe1a 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 8008668:	2000      	movs	r0, #0
 800866a:	f7ff fe17 	bl	800829c <LcdWriteData>
	LcdWriteData(0xEF);
 800866e:	20ef      	movs	r0, #239	; 0xef
 8008670:	f7ff fe14 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_PAGE_ADDR);
 8008674:	202b      	movs	r0, #43	; 0x2b
 8008676:	f7ff fdf9 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00);
 800867a:	2000      	movs	r0, #0
 800867c:	f7ff fe0e 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 8008680:	2000      	movs	r0, #0
 8008682:	f7ff fe0b 	bl	800829c <LcdWriteData>
	LcdWriteData(0x01);
 8008686:	2001      	movs	r0, #1
 8008688:	f7ff fe08 	bl	800829c <LcdWriteData>
	LcdWriteData(0x3F);
 800868c:	203f      	movs	r0, #63	; 0x3f
 800868e:	f7ff fe05 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_GAMMA);
 8008692:	2026      	movs	r0, #38	; 0x26
 8008694:	f7ff fdea 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x01);
 8008698:	2001      	movs	r0, #1
 800869a:	f7ff fdff 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_PGAMMA);
 800869e:	20e0      	movs	r0, #224	; 0xe0
 80086a0:	f7ff fde4 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x0F);
 80086a4:	200f      	movs	r0, #15
 80086a6:	f7ff fdf9 	bl	800829c <LcdWriteData>
	LcdWriteData(0x31);
 80086aa:	2031      	movs	r0, #49	; 0x31
 80086ac:	f7ff fdf6 	bl	800829c <LcdWriteData>
	LcdWriteData(0x2B);
 80086b0:	202b      	movs	r0, #43	; 0x2b
 80086b2:	f7ff fdf3 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0C);
 80086b6:	200c      	movs	r0, #12
 80086b8:	f7ff fdf0 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0E);
 80086bc:	200e      	movs	r0, #14
 80086be:	f7ff fded 	bl	800829c <LcdWriteData>
	LcdWriteData(0x08);
 80086c2:	2008      	movs	r0, #8
 80086c4:	f7ff fdea 	bl	800829c <LcdWriteData>
	LcdWriteData(0x4E);
 80086c8:	204e      	movs	r0, #78	; 0x4e
 80086ca:	f7ff fde7 	bl	800829c <LcdWriteData>
	LcdWriteData(0xF1);
 80086ce:	20f1      	movs	r0, #241	; 0xf1
 80086d0:	f7ff fde4 	bl	800829c <LcdWriteData>
	LcdWriteData(0x37);
 80086d4:	2037      	movs	r0, #55	; 0x37
 80086d6:	f7ff fde1 	bl	800829c <LcdWriteData>
	LcdWriteData(0x07);
 80086da:	2007      	movs	r0, #7
 80086dc:	f7ff fdde 	bl	800829c <LcdWriteData>
	LcdWriteData(0x10);
 80086e0:	2010      	movs	r0, #16
 80086e2:	f7ff fddb 	bl	800829c <LcdWriteData>
	LcdWriteData(0x03);
 80086e6:	2003      	movs	r0, #3
 80086e8:	f7ff fdd8 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0E);
 80086ec:	200e      	movs	r0, #14
 80086ee:	f7ff fdd5 	bl	800829c <LcdWriteData>
	LcdWriteData(0x09);
 80086f2:	2009      	movs	r0, #9
 80086f4:	f7ff fdd2 	bl	800829c <LcdWriteData>
	LcdWriteData(0x00);
 80086f8:	2000      	movs	r0, #0
 80086fa:	f7ff fdcf 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_NGAMMA);
 80086fe:	20e1      	movs	r0, #225	; 0xe1
 8008700:	f7ff fdb4 	bl	800826c <LcdWriteReg>
	LcdWriteData(0x00);
 8008704:	2000      	movs	r0, #0
 8008706:	f7ff fdc9 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0E);
 800870a:	200e      	movs	r0, #14
 800870c:	f7ff fdc6 	bl	800829c <LcdWriteData>
	LcdWriteData(0x14);
 8008710:	2014      	movs	r0, #20
 8008712:	f7ff fdc3 	bl	800829c <LcdWriteData>
	LcdWriteData(0x03);
 8008716:	2003      	movs	r0, #3
 8008718:	f7ff fdc0 	bl	800829c <LcdWriteData>
	LcdWriteData(0x11);
 800871c:	2011      	movs	r0, #17
 800871e:	f7ff fdbd 	bl	800829c <LcdWriteData>
	LcdWriteData(0x07);
 8008722:	2007      	movs	r0, #7
 8008724:	f7ff fdba 	bl	800829c <LcdWriteData>
	LcdWriteData(0x31);
 8008728:	2031      	movs	r0, #49	; 0x31
 800872a:	f7ff fdb7 	bl	800829c <LcdWriteData>
	LcdWriteData(0xC1);
 800872e:	20c1      	movs	r0, #193	; 0xc1
 8008730:	f7ff fdb4 	bl	800829c <LcdWriteData>
	LcdWriteData(0x48);
 8008734:	2048      	movs	r0, #72	; 0x48
 8008736:	f7ff fdb1 	bl	800829c <LcdWriteData>
	LcdWriteData(0x08);
 800873a:	2008      	movs	r0, #8
 800873c:	f7ff fdae 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0F);
 8008740:	200f      	movs	r0, #15
 8008742:	f7ff fdab 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0C);
 8008746:	200c      	movs	r0, #12
 8008748:	f7ff fda8 	bl	800829c <LcdWriteData>
	LcdWriteData(0x31);
 800874c:	2031      	movs	r0, #49	; 0x31
 800874e:	f7ff fda5 	bl	800829c <LcdWriteData>
	LcdWriteData(0x36);
 8008752:	2036      	movs	r0, #54	; 0x36
 8008754:	f7ff fda2 	bl	800829c <LcdWriteData>
	LcdWriteData(0x0F);
 8008758:	200f      	movs	r0, #15
 800875a:	f7ff fd9f 	bl	800829c <LcdWriteData>
	LcdWriteReg(ILI9341_SLEEP_OUT);
 800875e:	2011      	movs	r0, #17
 8008760:	f7ff fd84 	bl	800826c <LcdWriteReg>

	HAL_Delay(100);
 8008764:	2064      	movs	r0, #100	; 0x64
 8008766:	f7f9 fc77 	bl	8002058 <HAL_Delay>

	LcdWriteReg(ILI9341_DISPLAY_ON);
 800876a:	2029      	movs	r0, #41	; 0x29
 800876c:	f7ff fd7e 	bl	800826c <LcdWriteReg>
	LcdWriteReg(ILI9341_GRAM);
 8008770:	202c      	movs	r0, #44	; 0x2c
 8008772:	f7ff fd7b 	bl	800826c <LcdWriteReg>
}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40020800 	.word	0x40020800
 8008780:	40020400 	.word	0x40020400

08008784 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <GUI_X_GetTime+0x14>)
 800878a:	681b      	ldr	r3, [r3, #0]
}
 800878c:	4618      	mov	r0, r3
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	2001def8 	.word	0x2001def8

0800879c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 80087a4:	4b09      	ldr	r3, [pc, #36]	; (80087cc <GUI_X_Delay+0x30>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	4413      	add	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 80087ae:	bf00      	nop
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <GUI_X_Delay+0x30>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dcf9      	bgt.n	80087b0 <GUI_X_Delay+0x14>
}
 80087bc:	bf00      	nop
 80087be:	bf00      	nop
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	2001def8 	.word	0x2001def8

080087d0 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087de:	b590      	push	{r4, r7, lr}
 80087e0:	b089      	sub	sp, #36	; 0x24
 80087e2:	af04      	add	r7, sp, #16
 80087e4:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80087e6:	2301      	movs	r3, #1
 80087e8:	2202      	movs	r2, #2
 80087ea:	2102      	movs	r1, #2
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc67 	bl	80090c0 <USBH_FindInterface>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2bff      	cmp	r3, #255	; 0xff
 80087fa:	d002      	beq.n	8008802 <USBH_CDC_InterfaceInit+0x24>
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d901      	bls.n	8008806 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008802:	2302      	movs	r3, #2
 8008804:	e13d      	b.n	8008a82 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fc3c 	bl	8009088 <USBH_SelectInterface>
 8008810:	4603      	mov	r3, r0
 8008812:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800881a:	2302      	movs	r3, #2
 800881c:	e131      	b.n	8008a82 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008824:	2050      	movs	r0, #80	; 0x50
 8008826:	f00a fc35 	bl	8013094 <malloc>
 800882a:	4603      	mov	r3, r0
 800882c:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800883e:	2302      	movs	r3, #2
 8008840:	e11f      	b.n	8008a82 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008842:	2250      	movs	r2, #80	; 0x50
 8008844:	2100      	movs	r1, #0
 8008846:	68b8      	ldr	r0, [r7, #8]
 8008848:	f00a fc5c 	bl	8013104 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	211a      	movs	r1, #26
 8008852:	fb01 f303 	mul.w	r3, r1, r3
 8008856:	4413      	add	r3, r2
 8008858:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b25b      	sxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	da15      	bge.n	8008890 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	211a      	movs	r1, #26
 800886a:	fb01 f303 	mul.w	r3, r1, r3
 800886e:	4413      	add	r3, r2
 8008870:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	211a      	movs	r1, #26
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	4413      	add	r3, r2
 8008886:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800888a:	881a      	ldrh	r2, [r3, #0]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 fe33 	bl	800a502 <USBH_AllocPipe>
 800889c:	4603      	mov	r3, r0
 800889e:	461a      	mov	r2, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	7819      	ldrb	r1, [r3, #0]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7858      	ldrb	r0, [r3, #1]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	8952      	ldrh	r2, [r2, #10]
 80088bc:	9202      	str	r2, [sp, #8]
 80088be:	2203      	movs	r2, #3
 80088c0:	9201      	str	r2, [sp, #4]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4623      	mov	r3, r4
 80088c6:	4602      	mov	r2, r0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fdeb 	bl	800a4a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f002 f8fa 	bl	800aad0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80088dc:	2300      	movs	r3, #0
 80088de:	2200      	movs	r2, #0
 80088e0:	210a      	movs	r1, #10
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fbec 	bl	80090c0 <USBH_FindInterface>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	2bff      	cmp	r3, #255	; 0xff
 80088f0:	d002      	beq.n	80088f8 <USBH_CDC_InterfaceInit+0x11a>
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d901      	bls.n	80088fc <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80088f8:	2302      	movs	r3, #2
 80088fa:	e0c2      	b.n	8008a82 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	211a      	movs	r1, #26
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	b25b      	sxtb	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	da16      	bge.n	8008942 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	211a      	movs	r1, #26
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008924:	781a      	ldrb	r2, [r3, #0]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	211a      	movs	r1, #26
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	4413      	add	r3, r2
 8008936:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800893a:	881a      	ldrh	r2, [r3, #0]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	835a      	strh	r2, [r3, #26]
 8008940:	e015      	b.n	800896e <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	211a      	movs	r1, #26
 8008948:	fb01 f303 	mul.w	r3, r1, r3
 800894c:	4413      	add	r3, r2
 800894e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	211a      	movs	r1, #26
 800895e:	fb01 f303 	mul.w	r3, r1, r3
 8008962:	4413      	add	r3, r2
 8008964:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008968:	881a      	ldrh	r2, [r3, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	211a      	movs	r1, #26
 8008974:	fb01 f303 	mul.w	r3, r1, r3
 8008978:	4413      	add	r3, r2
 800897a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b25b      	sxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	da16      	bge.n	80089b4 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	211a      	movs	r1, #26
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	4413      	add	r3, r2
 8008992:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	211a      	movs	r1, #26
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089ac:	881a      	ldrh	r2, [r3, #0]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	835a      	strh	r2, [r3, #26]
 80089b2:	e015      	b.n	80089e0 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	211a      	movs	r1, #26
 80089ba:	fb01 f303 	mul.w	r3, r1, r3
 80089be:	4413      	add	r3, r2
 80089c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	211a      	movs	r1, #26
 80089d0:	fb01 f303 	mul.w	r3, r1, r3
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089da:	881a      	ldrh	r2, [r3, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	7b9b      	ldrb	r3, [r3, #14]
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 fd8b 	bl	800a502 <USBH_AllocPipe>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	7bdb      	ldrb	r3, [r3, #15]
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 fd81 	bl	800a502 <USBH_AllocPipe>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	7b59      	ldrb	r1, [r3, #13]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	7b98      	ldrb	r0, [r3, #14]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	8b12      	ldrh	r2, [r2, #24]
 8008a20:	9202      	str	r2, [sp, #8]
 8008a22:	2202      	movs	r2, #2
 8008a24:	9201      	str	r2, [sp, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4623      	mov	r3, r4
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fd39 	bl	800a4a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	7b19      	ldrb	r1, [r3, #12]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	7bd8      	ldrb	r0, [r3, #15]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	8b52      	ldrh	r2, [r2, #26]
 8008a4a:	9202      	str	r2, [sp, #8]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	9201      	str	r2, [sp, #4]
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	4623      	mov	r3, r4
 8008a54:	4602      	mov	r2, r0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 fd24 	bl	800a4a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	7b5b      	ldrb	r3, [r3, #13]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f002 f82f 	bl	800aad0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7b1b      	ldrb	r3, [r3, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 f828 	bl	800aad0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd90      	pop	{r4, r7, pc}

08008a8a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00e      	beq.n	8008ac2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fd19 	bl	800a4e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fd44 	bl	800a544 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	7b1b      	ldrb	r3, [r3, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00e      	beq.n	8008ae8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	7b1b      	ldrb	r3, [r3, #12]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f001 fd06 	bl	800a4e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	7b1b      	ldrb	r3, [r3, #12]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fd31 	bl	800a544 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	7b5b      	ldrb	r3, [r3, #13]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	7b5b      	ldrb	r3, [r3, #13]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f001 fcf3 	bl	800a4e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	7b5b      	ldrb	r3, [r3, #13]
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fd1e 	bl	800a544 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00b      	beq.n	8008b32 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f00a fabe 	bl	80130a4 <free>
    phost->pActiveClass->pData = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2e:	2200      	movs	r2, #0
 8008b30:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3340      	adds	r3, #64	; 0x40
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8b2 	bl	8008cbe <GetLineCoding>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b70:	7afb      	ldrb	r3, [r7, #11]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d877      	bhi.n	8008c90 <USBH_CDC_Process+0x114>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBH_CDC_Process+0x2c>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bbd 	.word	0x08008bbd
 8008bac:	08008bc3 	.word	0x08008bc3
 8008bb0:	08008bf3 	.word	0x08008bf3
 8008bb4:	08008c67 	.word	0x08008c67
 8008bb8:	08008c75 	.word	0x08008c75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc0:	e06d      	b.n	8008c9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f897 	bl	8008cfc <SetLineCoding>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008be0:	e058      	b.n	8008c94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d055      	beq.n	8008c94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2204      	movs	r2, #4
 8008bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008bf0:	e050      	b.n	8008c94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3340      	adds	r3, #64	; 0x40
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f860 	bl	8008cbe <GetLineCoding>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d126      	bne.n	8008c56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1a:	791b      	ldrb	r3, [r3, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d13b      	bne.n	8008c98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d133      	bne.n	8008c98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d12b      	bne.n	8008c98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d124      	bne.n	8008c98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f958 	bl	8008f04 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c54:	e020      	b.n	8008c98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d01d      	beq.n	8008c98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2204      	movs	r2, #4
 8008c60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c64:	e018      	b.n	8008c98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f867 	bl	8008d3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f8da 	bl	8008e26 <CDC_ProcessReception>
      break;
 8008c72:	e014      	b.n	8008c9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c74:	2100      	movs	r1, #0
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 ffe3 	bl	8009c42 <USBH_ClrFeature>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c8e:	e005      	b.n	8008c9c <USBH_CDC_Process+0x120>

    default:
      break;
 8008c90:	bf00      	nop
 8008c92:	e004      	b.n	8008c9e <USBH_CDC_Process+0x122>
      break;
 8008c94:	bf00      	nop
 8008c96:	e002      	b.n	8008c9e <USBH_CDC_Process+0x122>
      break;
 8008c98:	bf00      	nop
 8008c9a:	e000      	b.n	8008c9e <USBH_CDC_Process+0x122>
      break;
 8008c9c:	bf00      	nop

  }

  return status;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	22a1      	movs	r2, #161	; 0xa1
 8008ccc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2221      	movs	r2, #33	; 0x21
 8008cd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2207      	movs	r2, #7
 8008ce4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2207      	movs	r2, #7
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 f988 	bl	800a002 <USBH_CtlReq>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2221      	movs	r2, #33	; 0x21
 8008d0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2207      	movs	r2, #7
 8008d22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2207      	movs	r2, #7
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 f969 	bl	800a002 <USBH_CtlReq>
 8008d30:	4603      	mov	r3, r0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b086      	sub	sp, #24
 8008d3e:	af02      	add	r7, sp, #8
 8008d40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d002      	beq.n	8008d60 <CDC_ProcessTransmission+0x26>
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d023      	beq.n	8008da6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008d5e:	e05e      	b.n	8008e1e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	8b12      	ldrh	r2, [r2, #24]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d90b      	bls.n	8008d84 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	69d9      	ldr	r1, [r3, #28]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8b1a      	ldrh	r2, [r3, #24]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	7b5b      	ldrb	r3, [r3, #13]
 8008d78:	2001      	movs	r0, #1
 8008d7a:	9000      	str	r0, [sp, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fb4e 	bl	800a41e <USBH_BulkSendData>
 8008d82:	e00b      	b.n	8008d9c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	7b5b      	ldrb	r3, [r3, #13]
 8008d92:	2001      	movs	r0, #1
 8008d94:	9000      	str	r0, [sp, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fb41 	bl	800a41e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008da4:	e03b      	b.n	8008e1e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	7b5b      	ldrb	r3, [r3, #13]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 fe65 	bl	800aa7c <USBH_LL_GetURBState>
 8008db2:	4603      	mov	r3, r0
 8008db4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d128      	bne.n	8008e0e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	8b12      	ldrh	r2, [r2, #24]
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d90e      	bls.n	8008de6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	8b12      	ldrh	r2, [r2, #24]
 8008dd0:	1a9a      	subs	r2, r3, r2
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	8b12      	ldrh	r2, [r2, #24]
 8008dde:	441a      	add	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	61da      	str	r2, [r3, #28]
 8008de4:	e002      	b.n	8008dec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008dfc:	e00e      	b.n	8008e1c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f868 	bl	8008edc <USBH_CDC_TransmitCallback>
      break;
 8008e0c:	e006      	b.n	8008e1c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e0e:	7afb      	ldrb	r3, [r7, #11]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d103      	bne.n	8008e1c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e1c:	bf00      	nop
  }
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d002      	beq.n	8008e4c <CDC_ProcessReception+0x26>
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d00e      	beq.n	8008e68 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008e4a:	e043      	b.n	8008ed4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6a19      	ldr	r1, [r3, #32]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	8b5a      	ldrh	r2, [r3, #26]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	7b1b      	ldrb	r3, [r3, #12]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 fb05 	bl	800a468 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2204      	movs	r2, #4
 8008e62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e66:	e035      	b.n	8008ed4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	7b1b      	ldrb	r3, [r3, #12]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f001 fe04 	bl	800aa7c <USBH_LL_GetURBState>
 8008e74:	4603      	mov	r3, r0
 8008e76:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e78:	7cfb      	ldrb	r3, [r7, #19]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d129      	bne.n	8008ed2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	7b1b      	ldrb	r3, [r3, #12]
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f001 fd67 	bl	800a958 <USBH_LL_GetLastXferSize>
 8008e8a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d016      	beq.n	8008ec4 <CDC_ProcessReception+0x9e>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	8b5b      	ldrh	r3, [r3, #26]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d910      	bls.n	8008ec4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1ad2      	subs	r2, r2, r3
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	441a      	add	r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ec2:	e006      	b.n	8008ed2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f80f 	bl	8008ef0 <USBH_CDC_ReceiveCallback>
      break;
 8008ed2:	bf00      	nop
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	e029      	b.n	8008f84 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	79fa      	ldrb	r2, [r7, #7]
 8008f34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f81f 	bl	8008f8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f001 fc37 	bl	800a7f0 <USBH_LL_Init>

  return USBH_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e009      	b.n	8008fb2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	33e0      	adds	r3, #224	; 0xe0
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b0e      	cmp	r3, #14
 8008fb6:	d9f2      	bls.n	8008f9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	e009      	b.n	8008fd2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd8:	d3f1      	bcc.n	8008fbe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2240      	movs	r2, #64	; 0x40
 8008ffe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d016      	beq.n	8009076 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10e      	bne.n	8009070 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009058:	1c59      	adds	r1, r3, #1
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	33de      	adds	r3, #222	; 0xde
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
 800906e:	e004      	b.n	800907a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009070:	2302      	movs	r3, #2
 8009072:	73fb      	strb	r3, [r7, #15]
 8009074:	e001      	b.n	800907a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800909e:	78fa      	ldrb	r2, [r7, #3]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d204      	bcs.n	80090ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80090ac:	e001      	b.n	80090b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80090ae:	2302      	movs	r3, #2
 80090b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	4608      	mov	r0, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	461a      	mov	r2, r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	70fb      	strb	r3, [r7, #3]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70bb      	strb	r3, [r7, #2]
 80090d6:	4613      	mov	r3, r2
 80090d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80090de:	2300      	movs	r3, #0
 80090e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80090e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090ea:	e025      	b.n	8009138 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	221a      	movs	r2, #26
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	3308      	adds	r3, #8
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	3302      	adds	r3, #2
 80090fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	795b      	ldrb	r3, [r3, #5]
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	429a      	cmp	r2, r3
 8009106:	d002      	beq.n	800910e <USBH_FindInterface+0x4e>
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	2bff      	cmp	r3, #255	; 0xff
 800910c:	d111      	bne.n	8009132 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009112:	78ba      	ldrb	r2, [r7, #2]
 8009114:	429a      	cmp	r2, r3
 8009116:	d002      	beq.n	800911e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009118:	78bb      	ldrb	r3, [r7, #2]
 800911a:	2bff      	cmp	r3, #255	; 0xff
 800911c:	d109      	bne.n	8009132 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009122:	787a      	ldrb	r2, [r7, #1]
 8009124:	429a      	cmp	r2, r3
 8009126:	d002      	beq.n	800912e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009128:	787b      	ldrb	r3, [r7, #1]
 800912a:	2bff      	cmp	r3, #255	; 0xff
 800912c:	d101      	bne.n	8009132 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	e006      	b.n	8009140 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	3301      	adds	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d9d6      	bls.n	80090ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800913e:	23ff      	movs	r3, #255	; 0xff
}
 8009140:	4618      	mov	r0, r3
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fb87 	bl	800a868 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800915a:	2101      	movs	r1, #1
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 fca0 	bl	800aaa2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af04      	add	r7, sp, #16
 8009172:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009174:	2302      	movs	r3, #2
 8009176:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b01      	cmp	r3, #1
 8009186:	d102      	bne.n	800918e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2203      	movs	r2, #3
 800918c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b0b      	cmp	r3, #11
 8009196:	f200 81b3 	bhi.w	8009500 <USBH_Process+0x394>
 800919a:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <USBH_Process+0x34>)
 800919c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a0:	080091d1 	.word	0x080091d1
 80091a4:	08009203 	.word	0x08009203
 80091a8:	0800926b 	.word	0x0800926b
 80091ac:	0800949b 	.word	0x0800949b
 80091b0:	08009501 	.word	0x08009501
 80091b4:	0800930f 	.word	0x0800930f
 80091b8:	08009441 	.word	0x08009441
 80091bc:	08009345 	.word	0x08009345
 80091c0:	08009365 	.word	0x08009365
 80091c4:	08009385 	.word	0x08009385
 80091c8:	080093b3 	.word	0x080093b3
 80091cc:	08009483 	.word	0x08009483
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8193 	beq.w	8009504 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80091e4:	20c8      	movs	r0, #200	; 0xc8
 80091e6:	f001 fca3 	bl	800ab30 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 fb99 	bl	800a922 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009200:	e180      	b.n	8009504 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009208:	2b01      	cmp	r3, #1
 800920a:	d107      	bne.n	800921c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800921a:	e182      	b.n	8009522 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009226:	d914      	bls.n	8009252 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800922e:	3301      	adds	r3, #1
 8009230:	b2da      	uxtb	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800923e:	2b03      	cmp	r3, #3
 8009240:	d903      	bls.n	800924a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	220d      	movs	r2, #13
 8009246:	701a      	strb	r2, [r3, #0]
      break;
 8009248:	e16b      	b.n	8009522 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
      break;
 8009250:	e167      	b.n	8009522 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009258:	f103 020a 	add.w	r2, r3, #10
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009262:	200a      	movs	r0, #10
 8009264:	f001 fc64 	bl	800ab30 <USBH_Delay>
      break;
 8009268:	e15b      	b.n	8009522 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800927a:	2104      	movs	r1, #4
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009280:	2064      	movs	r0, #100	; 0x64
 8009282:	f001 fc55 	bl	800ab30 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 fb24 	bl	800a8d4 <USBH_LL_GetSpeed>
 800928c:	4603      	mov	r3, r0
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2205      	movs	r2, #5
 800929a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800929c:	2100      	movs	r1, #0
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 f92f 	bl	800a502 <USBH_AllocPipe>
 80092a4:	4603      	mov	r3, r0
 80092a6:	461a      	mov	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80092ac:	2180      	movs	r1, #128	; 0x80
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 f927 	bl	800a502 <USBH_AllocPipe>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	7919      	ldrb	r1, [r3, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092d0:	b292      	uxth	r2, r2
 80092d2:	9202      	str	r2, [sp, #8]
 80092d4:	2200      	movs	r2, #0
 80092d6:	9201      	str	r2, [sp, #4]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	4603      	mov	r3, r0
 80092dc:	2280      	movs	r2, #128	; 0x80
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f8e0 	bl	800a4a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7959      	ldrb	r1, [r3, #5]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092f8:	b292      	uxth	r2, r2
 80092fa:	9202      	str	r2, [sp, #8]
 80092fc:	2200      	movs	r2, #0
 80092fe:	9201      	str	r2, [sp, #4]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	4603      	mov	r3, r0
 8009304:	2200      	movs	r2, #0
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 f8cc 	bl	800a4a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800930c:	e109      	b.n	8009522 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f90c 	bl	800952c <USBH_HandleEnum>
 8009314:	4603      	mov	r3, r0
 8009316:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 80f3 	bne.w	8009508 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009330:	2b01      	cmp	r3, #1
 8009332:	d103      	bne.n	800933c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2208      	movs	r2, #8
 8009338:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800933a:	e0e5      	b.n	8009508 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2207      	movs	r2, #7
 8009340:	701a      	strb	r2, [r3, #0]
      break;
 8009342:	e0e1      	b.n	8009508 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 80de 	beq.w	800950c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009356:	2101      	movs	r1, #1
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2208      	movs	r2, #8
 8009360:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009362:	e0d3      	b.n	800950c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800936a:	b29b      	uxth	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fc20 	bl	8009bb4 <USBH_SetCfg>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	f040 80ca 	bne.w	8009510 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2209      	movs	r2, #9
 8009380:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009382:	e0c5      	b.n	8009510 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009392:	2101      	movs	r1, #1
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc30 	bl	8009bfa <USBH_SetFeature>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	f040 80b9 	bne.w	8009514 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	220a      	movs	r2, #10
 80093a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093a8:	e0b4      	b.n	8009514 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	220a      	movs	r2, #10
 80093ae:	701a      	strb	r2, [r3, #0]
      break;
 80093b0:	e0b0      	b.n	8009514 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 80ad 	beq.w	8009518 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]
 80093ca:	e016      	b.n	80093fa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80093cc:	7bfa      	ldrb	r2, [r7, #15]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	32de      	adds	r2, #222	; 0xde
 80093d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d6:	791a      	ldrb	r2, [r3, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80093de:	429a      	cmp	r2, r3
 80093e0:	d108      	bne.n	80093f4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80093e2:	7bfa      	ldrb	r2, [r7, #15]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	32de      	adds	r2, #222	; 0xde
 80093e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80093f2:	e005      	b.n	8009400 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	3301      	adds	r3, #1
 80093f8:	73fb      	strb	r3, [r7, #15]
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0e5      	beq.n	80093cc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d016      	beq.n	8009438 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	4798      	blx	r3
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2206      	movs	r2, #6
 8009420:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009428:	2103      	movs	r1, #3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800942e:	e073      	b.n	8009518 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	220d      	movs	r2, #13
 8009434:	701a      	strb	r2, [r3, #0]
      break;
 8009436:	e06f      	b.n	8009518 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	220d      	movs	r2, #13
 800943c:	701a      	strb	r2, [r3, #0]
      break;
 800943e:	e06b      	b.n	8009518 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d017      	beq.n	800947a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
 8009456:	4603      	mov	r3, r0
 8009458:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d103      	bne.n	800946a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	220b      	movs	r2, #11
 8009466:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009468:	e058      	b.n	800951c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b02      	cmp	r3, #2
 8009470:	d154      	bne.n	800951c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	220d      	movs	r2, #13
 8009476:	701a      	strb	r2, [r3, #0]
      break;
 8009478:	e050      	b.n	800951c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	220d      	movs	r2, #13
 800947e:	701a      	strb	r2, [r3, #0]
      break;
 8009480:	e04c      	b.n	800951c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d049      	beq.n	8009520 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
      }
      break;
 8009498:	e042      	b.n	8009520 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fd72 	bl	8008f8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094d6:	2105      	movs	r1, #5
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d107      	bne.n	80094f8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff fe2b 	bl	800914c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094f6:	e014      	b.n	8009522 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f9b5 	bl	800a868 <USBH_LL_Start>
      break;
 80094fe:	e010      	b.n	8009522 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009500:	bf00      	nop
 8009502:	e00e      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 8009504:	bf00      	nop
 8009506:	e00c      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 8009508:	bf00      	nop
 800950a:	e00a      	b.n	8009522 <USBH_Process+0x3b6>
    break;
 800950c:	bf00      	nop
 800950e:	e008      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 8009510:	bf00      	nop
 8009512:	e006      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 8009514:	bf00      	nop
 8009516:	e004      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 8009518:	bf00      	nop
 800951a:	e002      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 800951c:	bf00      	nop
 800951e:	e000      	b.n	8009522 <USBH_Process+0x3b6>
      break;
 8009520:	bf00      	nop
  }
  return USBH_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af04      	add	r7, sp, #16
 8009532:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009534:	2301      	movs	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009538:	2301      	movs	r3, #1
 800953a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b07      	cmp	r3, #7
 8009542:	f200 81c1 	bhi.w	80098c8 <USBH_HandleEnum+0x39c>
 8009546:	a201      	add	r2, pc, #4	; (adr r2, 800954c <USBH_HandleEnum+0x20>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	0800956d 	.word	0x0800956d
 8009550:	0800962b 	.word	0x0800962b
 8009554:	08009695 	.word	0x08009695
 8009558:	08009723 	.word	0x08009723
 800955c:	0800978d 	.word	0x0800978d
 8009560:	080097fd 	.word	0x080097fd
 8009564:	08009843 	.word	0x08009843
 8009568:	08009889 	.word	0x08009889
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800956c:	2108      	movs	r1, #8
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fa50 	bl	8009a14 <USBH_Get_DevDesc>
 8009574:	4603      	mov	r3, r0
 8009576:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d130      	bne.n	80095e0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7919      	ldrb	r1, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80095a2:	b292      	uxth	r2, r2
 80095a4:	9202      	str	r2, [sp, #8]
 80095a6:	2200      	movs	r2, #0
 80095a8:	9201      	str	r2, [sp, #4]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	4603      	mov	r3, r0
 80095ae:	2280      	movs	r2, #128	; 0x80
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 ff77 	bl	800a4a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	7959      	ldrb	r1, [r3, #5]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095ca:	b292      	uxth	r2, r2
 80095cc:	9202      	str	r2, [sp, #8]
 80095ce:	2200      	movs	r2, #0
 80095d0:	9201      	str	r2, [sp, #4]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	4603      	mov	r3, r0
 80095d6:	2200      	movs	r2, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 ff63 	bl	800a4a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095de:	e175      	b.n	80098cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	f040 8172 	bne.w	80098cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095ee:	3301      	adds	r3, #1
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d903      	bls.n	800960a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	220d      	movs	r2, #13
 8009606:	701a      	strb	r2, [r3, #0]
      break;
 8009608:	e160      	b.n	80098cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	795b      	ldrb	r3, [r3, #5]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 ff97 	bl	800a544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 ff91 	bl	800a544 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
      break;
 8009628:	e150      	b.n	80098cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800962a:	2112      	movs	r1, #18
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9f1 	bl	8009a14 <USBH_Get_DevDesc>
 8009632:	4603      	mov	r3, r0
 8009634:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d103      	bne.n	8009644 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009642:	e145      	b.n	80098d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b03      	cmp	r3, #3
 8009648:	f040 8142 	bne.w	80098d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009652:	3301      	adds	r3, #1
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009662:	2b03      	cmp	r3, #3
 8009664:	d903      	bls.n	800966e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	220d      	movs	r2, #13
 800966a:	701a      	strb	r2, [r3, #0]
      break;
 800966c:	e130      	b.n	80098d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	795b      	ldrb	r3, [r3, #5]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 ff65 	bl	800a544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 ff5f 	bl	800a544 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
      break;
 8009692:	e11d      	b.n	80098d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009694:	2101      	movs	r1, #1
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa68 	bl	8009b6c <USBH_SetAddress>
 800969c:	4603      	mov	r3, r0
 800969e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d132      	bne.n	800970c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80096a6:	2002      	movs	r0, #2
 80096a8:	f001 fa42 	bl	800ab30 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2203      	movs	r2, #3
 80096b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7919      	ldrb	r1, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096ce:	b292      	uxth	r2, r2
 80096d0:	9202      	str	r2, [sp, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	9201      	str	r2, [sp, #4]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	4603      	mov	r3, r0
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fee1 	bl	800a4a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	7959      	ldrb	r1, [r3, #5]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096f6:	b292      	uxth	r2, r2
 80096f8:	9202      	str	r2, [sp, #8]
 80096fa:	2200      	movs	r2, #0
 80096fc:	9201      	str	r2, [sp, #4]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	4603      	mov	r3, r0
 8009702:	2200      	movs	r2, #0
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fecd 	bl	800a4a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800970a:	e0e3      	b.n	80098d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	2b03      	cmp	r3, #3
 8009710:	f040 80e0 	bne.w	80098d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	220d      	movs	r2, #13
 8009718:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	705a      	strb	r2, [r3, #1]
      break;
 8009720:	e0d8      	b.n	80098d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009722:	2109      	movs	r1, #9
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f99d 	bl	8009a64 <USBH_Get_CfgDesc>
 800972a:	4603      	mov	r3, r0
 800972c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d103      	bne.n	800973c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2204      	movs	r2, #4
 8009738:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800973a:	e0cd      	b.n	80098d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b03      	cmp	r3, #3
 8009740:	f040 80ca 	bne.w	80098d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800974a:	3301      	adds	r3, #1
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800975a:	2b03      	cmp	r3, #3
 800975c:	d903      	bls.n	8009766 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	220d      	movs	r2, #13
 8009762:	701a      	strb	r2, [r3, #0]
      break;
 8009764:	e0b8      	b.n	80098d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	795b      	ldrb	r3, [r3, #5]
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fee9 	bl	800a544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	791b      	ldrb	r3, [r3, #4]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fee3 	bl	800a544 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	701a      	strb	r2, [r3, #0]
      break;
 800978a:	e0a5      	b.n	80098d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f965 	bl	8009a64 <USBH_Get_CfgDesc>
 800979a:	4603      	mov	r3, r0
 800979c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d103      	bne.n	80097ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2205      	movs	r2, #5
 80097a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097aa:	e097      	b.n	80098dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	f040 8094 	bne.w	80098dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097ba:	3301      	adds	r3, #1
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d903      	bls.n	80097d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	220d      	movs	r2, #13
 80097d2:	701a      	strb	r2, [r3, #0]
      break;
 80097d4:	e082      	b.n	80098dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	795b      	ldrb	r3, [r3, #5]
 80097da:	4619      	mov	r1, r3
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 feb1 	bl	800a544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	791b      	ldrb	r3, [r3, #4]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 feab 	bl	800a544 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	701a      	strb	r2, [r3, #0]
      break;
 80097fa:	e06f      	b.n	80098dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009802:	2b00      	cmp	r3, #0
 8009804:	d019      	beq.n	800983a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009812:	23ff      	movs	r3, #255	; 0xff
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f949 	bl	8009aac <USBH_Get_StringDesc>
 800981a:	4603      	mov	r3, r0
 800981c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2206      	movs	r2, #6
 8009828:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800982a:	e059      	b.n	80098e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	2b03      	cmp	r3, #3
 8009830:	d156      	bne.n	80098e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2206      	movs	r2, #6
 8009836:	705a      	strb	r2, [r3, #1]
      break;
 8009838:	e052      	b.n	80098e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2206      	movs	r2, #6
 800983e:	705a      	strb	r2, [r3, #1]
      break;
 8009840:	e04e      	b.n	80098e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009848:	2b00      	cmp	r3, #0
 800984a:	d019      	beq.n	8009880 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009858:	23ff      	movs	r3, #255	; 0xff
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f926 	bl	8009aac <USBH_Get_StringDesc>
 8009860:	4603      	mov	r3, r0
 8009862:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009864:	7bbb      	ldrb	r3, [r7, #14]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2207      	movs	r2, #7
 800986e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009870:	e038      	b.n	80098e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b03      	cmp	r3, #3
 8009876:	d135      	bne.n	80098e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2207      	movs	r2, #7
 800987c:	705a      	strb	r2, [r3, #1]
      break;
 800987e:	e031      	b.n	80098e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2207      	movs	r2, #7
 8009884:	705a      	strb	r2, [r3, #1]
      break;
 8009886:	e02d      	b.n	80098e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800988e:	2b00      	cmp	r3, #0
 8009890:	d017      	beq.n	80098c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800989e:	23ff      	movs	r3, #255	; 0xff
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f903 	bl	8009aac <USBH_Get_StringDesc>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80098b4:	e018      	b.n	80098e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d115      	bne.n	80098e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
      break;
 80098c0:	e012      	b.n	80098e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
      break;
 80098c6:	e00f      	b.n	80098e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80098c8:	bf00      	nop
 80098ca:	e00e      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098cc:	bf00      	nop
 80098ce:	e00c      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098d0:	bf00      	nop
 80098d2:	e00a      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098d4:	bf00      	nop
 80098d6:	e008      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098d8:	bf00      	nop
 80098da:	e006      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098dc:	bf00      	nop
 80098de:	e004      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098e0:	bf00      	nop
 80098e2:	e002      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098e4:	bf00      	nop
 80098e6:	e000      	b.n	80098ea <USBH_HandleEnum+0x3be>
      break;
 80098e8:	bf00      	nop
  }
  return Status;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f804 	bl	8009936 <USBH_HandleSof>
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b0b      	cmp	r3, #11
 8009946:	d10a      	bne.n	800995e <USBH_HandleSof+0x28>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
  }
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009976:	bf00      	nop
}
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009992:	bf00      	nop
}
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 ff56 	bl	800a89e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fda3 	bl	800a544 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	795b      	ldrb	r3, [r3, #5]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fd9d 	bl	800a544 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a32:	2100      	movs	r1, #0
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f864 	bl	8009b02 <USBH_GetDescriptor>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	b292      	uxth	r2, r2
 8009a54:	4619      	mov	r1, r3
 8009a56:	f000 f918 	bl	8009c8a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	331c      	adds	r3, #28
 8009a74:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a76:	887b      	ldrh	r3, [r7, #2]
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a80:	2100      	movs	r1, #0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f83d 	bl	8009b02 <USBH_GetDescriptor>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	72fb      	strb	r3, [r7, #11]
 8009a8c:	7afb      	ldrb	r3, [r7, #11]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d107      	bne.n	8009aa2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009a98:	887a      	ldrh	r2, [r7, #2]
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 f964 	bl	8009d6a <USBH_ParseCfgDesc>
  }

  return status;
 8009aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	460b      	mov	r3, r1
 8009aba:	72fb      	strb	r3, [r7, #11]
 8009abc:	4613      	mov	r3, r2
 8009abe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009ac8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ad0:	893b      	ldrh	r3, [r7, #8]
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f812 	bl	8009b02 <USBH_GetDescriptor>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	75fb      	strb	r3, [r7, #23]
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d107      	bne.n	8009af8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009aee:	893a      	ldrh	r2, [r7, #8]
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fa37 	bl	8009f66 <USBH_ParseStringDesc>
  }

  return status;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b084      	sub	sp, #16
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	72fb      	strb	r3, [r7, #11]
 8009b10:	4613      	mov	r3, r2
 8009b12:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	789b      	ldrb	r3, [r3, #2]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d11c      	bne.n	8009b56 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2206      	movs	r2, #6
 8009b2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	893a      	ldrh	r2, [r7, #8]
 8009b32:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009b34:	893b      	ldrh	r3, [r7, #8]
 8009b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b3e:	d104      	bne.n	8009b4a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f240 4209 	movw	r2, #1033	; 0x409
 8009b46:	829a      	strh	r2, [r3, #20]
 8009b48:	e002      	b.n	8009b50 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8b3a      	ldrh	r2, [r7, #24]
 8009b54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b56:	8b3b      	ldrh	r3, [r7, #24]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 fa50 	bl	800a002 <USBH_CtlReq>
 8009b62:	4603      	mov	r3, r0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	789b      	ldrb	r3, [r3, #2]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d10f      	bne.n	8009ba0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2205      	movs	r2, #5
 8009b8a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fa2c 	bl	800a002 <USBH_CtlReq>
 8009baa:	4603      	mov	r3, r0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	789b      	ldrb	r3, [r3, #2]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d10e      	bne.n	8009be6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2209      	movs	r2, #9
 8009bd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	887a      	ldrh	r2, [r7, #2]
 8009bd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009be6:	2200      	movs	r2, #0
 8009be8:	2100      	movs	r1, #0
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa09 	bl	800a002 <USBH_CtlReq>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	789b      	ldrb	r3, [r3, #2]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10f      	bne.n	8009c2e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2203      	movs	r2, #3
 8009c18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2100      	movs	r1, #0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f9e5 	bl	800a002 <USBH_CtlReq>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	789b      	ldrb	r3, [r3, #2]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d10f      	bne.n	8009c76 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c68:	78fb      	ldrb	r3, [r7, #3]
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f9c1 	bl	800a002 <USBH_CtlReq>
 8009c80:	4603      	mov	r3, r0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	4613      	mov	r3, r2
 8009c96:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	785a      	ldrb	r2, [r3, #1]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	3302      	adds	r3, #2
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	3303      	adds	r3, #3
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	791a      	ldrb	r2, [r3, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	795a      	ldrb	r2, [r3, #5]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	799a      	ldrb	r2, [r3, #6]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	79da      	ldrb	r2, [r3, #7]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009ce4:	88fb      	ldrh	r3, [r7, #6]
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d939      	bls.n	8009d5e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3308      	adds	r3, #8
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3309      	adds	r3, #9
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	330a      	adds	r3, #10
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	330b      	adds	r3, #11
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	021b      	lsls	r3, r3, #8
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	330c      	adds	r3, #12
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	330d      	adds	r3, #13
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	7b9a      	ldrb	r2, [r3, #14]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	7bda      	ldrb	r2, [r3, #15]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	7c1a      	ldrb	r2, [r3, #16]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	7c5a      	ldrb	r2, [r3, #17]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	745a      	strb	r2, [r3, #17]
  }
}
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b08a      	sub	sp, #40	; 0x28
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	781a      	ldrb	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	785a      	ldrb	r2, [r3, #1]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	3303      	adds	r3, #3
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	791a      	ldrb	r2, [r3, #4]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	795a      	ldrb	r2, [r3, #5]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	799a      	ldrb	r2, [r3, #6]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	79da      	ldrb	r2, [r3, #7]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	7a1a      	ldrb	r2, [r3, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009de0:	88fb      	ldrh	r3, [r7, #6]
 8009de2:	2b09      	cmp	r3, #9
 8009de4:	d95f      	bls.n	8009ea6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009de6:	2309      	movs	r3, #9
 8009de8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dee:	e051      	b.n	8009e94 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009df0:	f107 0316 	add.w	r3, r7, #22
 8009df4:	4619      	mov	r1, r3
 8009df6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009df8:	f000 f8e8 	bl	8009fcc <USBH_GetNextDesc>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d146      	bne.n	8009e94 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e0a:	221a      	movs	r2, #26
 8009e0c:	fb02 f303 	mul.w	r3, r2, r3
 8009e10:	3308      	adds	r3, #8
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4413      	add	r3, r2
 8009e16:	3302      	adds	r3, #2
 8009e18:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e1c:	69f8      	ldr	r0, [r7, #28]
 8009e1e:	f000 f846 	bl	8009eae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e2c:	e022      	b.n	8009e74 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e2e:	f107 0316 	add.w	r3, r7, #22
 8009e32:	4619      	mov	r1, r3
 8009e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e36:	f000 f8c9 	bl	8009fcc <USBH_GetNextDesc>
 8009e3a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	785b      	ldrb	r3, [r3, #1]
 8009e40:	2b05      	cmp	r3, #5
 8009e42:	d117      	bne.n	8009e74 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e4c:	3201      	adds	r2, #1
 8009e4e:	00d2      	lsls	r2, r2, #3
 8009e50:	211a      	movs	r1, #26
 8009e52:	fb01 f303 	mul.w	r3, r1, r3
 8009e56:	4413      	add	r3, r2
 8009e58:	3308      	adds	r3, #8
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3304      	adds	r3, #4
 8009e60:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009e62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e64:	69b8      	ldr	r0, [r7, #24]
 8009e66:	f000 f851 	bl	8009f0c <USBH_ParseEPDesc>
            ep_ix++;
 8009e6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e6e:	3301      	adds	r3, #1
 8009e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	791b      	ldrb	r3, [r3, #4]
 8009e78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d204      	bcs.n	8009e8a <USBH_ParseCfgDesc+0x120>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	885a      	ldrh	r2, [r3, #2]
 8009e84:	8afb      	ldrh	r3, [r7, #22]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d8d1      	bhi.n	8009e2e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e8e:	3301      	adds	r3, #1
 8009e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d804      	bhi.n	8009ea6 <USBH_ParseCfgDesc+0x13c>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	885a      	ldrh	r2, [r3, #2]
 8009ea0:	8afb      	ldrh	r3, [r7, #22]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d8a4      	bhi.n	8009df0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	3728      	adds	r7, #40	; 0x28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	781a      	ldrb	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	785a      	ldrb	r2, [r3, #1]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	789a      	ldrb	r2, [r3, #2]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	78da      	ldrb	r2, [r3, #3]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	791a      	ldrb	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	795a      	ldrb	r2, [r3, #5]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	799a      	ldrb	r2, [r3, #6]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	79da      	ldrb	r2, [r3, #7]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	7a1a      	ldrb	r2, [r3, #8]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	721a      	strb	r2, [r3, #8]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781a      	ldrb	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	785a      	ldrb	r2, [r3, #1]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	789a      	ldrb	r2, [r3, #2]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	78da      	ldrb	r2, [r3, #3]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	3305      	adds	r3, #5
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	799a      	ldrb	r2, [r3, #6]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	719a      	strb	r2, [r3, #6]
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b087      	sub	sp, #28
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	4613      	mov	r3, r2
 8009f72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d120      	bne.n	8009fc0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	1e9a      	subs	r2, r3, #2
 8009f84:	88fb      	ldrh	r3, [r7, #6]
 8009f86:	4293      	cmp	r3, r2
 8009f88:	bf28      	it	cs
 8009f8a:	4613      	movcs	r3, r2
 8009f8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3302      	adds	r3, #2
 8009f92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f94:	2300      	movs	r3, #0
 8009f96:	82fb      	strh	r3, [r7, #22]
 8009f98:	e00b      	b.n	8009fb2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f9a:	8afb      	ldrh	r3, [r7, #22]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781a      	ldrb	r2, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009fac:	8afb      	ldrh	r3, [r7, #22]
 8009fae:	3302      	adds	r3, #2
 8009fb0:	82fb      	strh	r3, [r7, #22]
 8009fb2:	8afa      	ldrh	r2, [r7, #22]
 8009fb4:	8abb      	ldrh	r3, [r7, #20]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d3ef      	bcc.n	8009f9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]
  }
}
 8009fc0:	bf00      	nop
 8009fc2:	371c      	adds	r7, #28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	881a      	ldrh	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a010:	2301      	movs	r3, #1
 800a012:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	789b      	ldrb	r3, [r3, #2]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d002      	beq.n	800a022 <USBH_CtlReq+0x20>
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d00f      	beq.n	800a040 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a020:	e027      	b.n	800a072 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2201      	movs	r2, #1
 800a032:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2202      	movs	r2, #2
 800a038:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a03a:	2301      	movs	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
      break;
 800a03e:	e018      	b.n	800a072 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f81b 	bl	800a07c <USBH_HandleControl>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <USBH_CtlReq+0x54>
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	2b03      	cmp	r3, #3
 800a054:	d106      	bne.n	800a064 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	761a      	strb	r2, [r3, #24]
      break;
 800a062:	e005      	b.n	800a070 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d102      	bne.n	800a070 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	709a      	strb	r2, [r3, #2]
      break;
 800a070:	bf00      	nop
  }
  return status;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af02      	add	r7, sp, #8
 800a082:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a084:	2301      	movs	r3, #1
 800a086:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a088:	2300      	movs	r3, #0
 800a08a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7e1b      	ldrb	r3, [r3, #24]
 800a090:	3b01      	subs	r3, #1
 800a092:	2b0a      	cmp	r3, #10
 800a094:	f200 8156 	bhi.w	800a344 <USBH_HandleControl+0x2c8>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <USBH_HandleControl+0x24>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0cd 	.word	0x0800a0cd
 800a0a4:	0800a0e7 	.word	0x0800a0e7
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a177 	.word	0x0800a177
 800a0b0:	0800a1af 	.word	0x0800a1af
 800a0b4:	0800a1d9 	.word	0x0800a1d9
 800a0b8:	0800a22b 	.word	0x0800a22b
 800a0bc:	0800a24d 	.word	0x0800a24d
 800a0c0:	0800a289 	.word	0x0800a289
 800a0c4:	0800a2af 	.word	0x0800a2af
 800a0c8:	0800a2ed 	.word	0x0800a2ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f103 0110 	add.w	r1, r3, #16
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	795b      	ldrb	r3, [r3, #5]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f943 	bl	800a364 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	761a      	strb	r2, [r3, #24]
      break;
 800a0e4:	e139      	b.n	800a35a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	795b      	ldrb	r3, [r3, #5]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fcc5 	bl	800aa7c <USBH_LL_GetURBState>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d11e      	bne.n	800a13a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7c1b      	ldrb	r3, [r3, #16]
 800a100:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a104:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	8adb      	ldrh	r3, [r3, #22]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a10e:	7b7b      	ldrb	r3, [r7, #13]
 800a110:	2b80      	cmp	r3, #128	; 0x80
 800a112:	d103      	bne.n	800a11c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2203      	movs	r2, #3
 800a118:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a11a:	e115      	b.n	800a348 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2205      	movs	r2, #5
 800a120:	761a      	strb	r2, [r3, #24]
      break;
 800a122:	e111      	b.n	800a348 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a124:	7b7b      	ldrb	r3, [r7, #13]
 800a126:	2b80      	cmp	r3, #128	; 0x80
 800a128:	d103      	bne.n	800a132 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2209      	movs	r2, #9
 800a12e:	761a      	strb	r2, [r3, #24]
      break;
 800a130:	e10a      	b.n	800a348 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2207      	movs	r2, #7
 800a136:	761a      	strb	r2, [r3, #24]
      break;
 800a138:	e106      	b.n	800a348 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	d003      	beq.n	800a148 <USBH_HandleControl+0xcc>
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	2b02      	cmp	r3, #2
 800a144:	f040 8100 	bne.w	800a348 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	220b      	movs	r2, #11
 800a14c:	761a      	strb	r2, [r3, #24]
      break;
 800a14e:	e0fb      	b.n	800a348 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6899      	ldr	r1, [r3, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	899a      	ldrh	r2, [r3, #12]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	791b      	ldrb	r3, [r3, #4]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f93a 	bl	800a3e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2204      	movs	r2, #4
 800a172:	761a      	strb	r2, [r3, #24]
      break;
 800a174:	e0f1      	b.n	800a35a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fc7d 	bl	800aa7c <USBH_LL_GetURBState>
 800a182:	4603      	mov	r3, r0
 800a184:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d102      	bne.n	800a192 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2209      	movs	r2, #9
 800a190:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	2b05      	cmp	r3, #5
 800a196:	d102      	bne.n	800a19e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a198:	2303      	movs	r3, #3
 800a19a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a19c:	e0d6      	b.n	800a34c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	f040 80d3 	bne.w	800a34c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220b      	movs	r2, #11
 800a1aa:	761a      	strb	r2, [r3, #24]
      break;
 800a1ac:	e0ce      	b.n	800a34c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6899      	ldr	r1, [r3, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	899a      	ldrh	r2, [r3, #12]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	795b      	ldrb	r3, [r3, #5]
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	9000      	str	r0, [sp, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f8ea 	bl	800a398 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2206      	movs	r2, #6
 800a1d4:	761a      	strb	r2, [r3, #24]
      break;
 800a1d6:	e0c0      	b.n	800a35a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	795b      	ldrb	r3, [r3, #5]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fc4c 	bl	800aa7c <USBH_LL_GetURBState>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d103      	bne.n	800a1f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2207      	movs	r2, #7
 800a1f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1f4:	e0ac      	b.n	800a350 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b05      	cmp	r3, #5
 800a1fa:	d105      	bne.n	800a208 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	220c      	movs	r2, #12
 800a200:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
      break;
 800a206:	e0a3      	b.n	800a350 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d103      	bne.n	800a216 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2205      	movs	r2, #5
 800a212:	761a      	strb	r2, [r3, #24]
      break;
 800a214:	e09c      	b.n	800a350 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	2b04      	cmp	r3, #4
 800a21a:	f040 8099 	bne.w	800a350 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	220b      	movs	r2, #11
 800a222:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a224:	2302      	movs	r3, #2
 800a226:	73fb      	strb	r3, [r7, #15]
      break;
 800a228:	e092      	b.n	800a350 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	791b      	ldrb	r3, [r3, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f8d5 	bl	800a3e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a23e:	b29a      	uxth	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2208      	movs	r2, #8
 800a248:	761a      	strb	r2, [r3, #24]

      break;
 800a24a:	e086      	b.n	800a35a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	791b      	ldrb	r3, [r3, #4]
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fc12 	bl	800aa7c <USBH_LL_GetURBState>
 800a258:	4603      	mov	r3, r0
 800a25a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d105      	bne.n	800a26e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	220d      	movs	r2, #13
 800a266:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a26c:	e072      	b.n	800a354 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b04      	cmp	r3, #4
 800a272:	d103      	bne.n	800a27c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	220b      	movs	r2, #11
 800a278:	761a      	strb	r2, [r3, #24]
      break;
 800a27a:	e06b      	b.n	800a354 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a27c:	7bbb      	ldrb	r3, [r7, #14]
 800a27e:	2b05      	cmp	r3, #5
 800a280:	d168      	bne.n	800a354 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a282:	2303      	movs	r3, #3
 800a284:	73fb      	strb	r3, [r7, #15]
      break;
 800a286:	e065      	b.n	800a354 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	795b      	ldrb	r3, [r3, #5]
 800a28c:	2201      	movs	r2, #1
 800a28e:	9200      	str	r2, [sp, #0]
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f87f 	bl	800a398 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	761a      	strb	r2, [r3, #24]
      break;
 800a2ac:	e055      	b.n	800a35a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	795b      	ldrb	r3, [r3, #5]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 fbe1 	bl	800aa7c <USBH_LL_GetURBState>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d105      	bne.n	800a2d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	220d      	movs	r2, #13
 800a2cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a2ce:	e043      	b.n	800a358 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d103      	bne.n	800a2de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2209      	movs	r2, #9
 800a2da:	761a      	strb	r2, [r3, #24]
      break;
 800a2dc:	e03c      	b.n	800a358 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	d139      	bne.n	800a358 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	220b      	movs	r2, #11
 800a2e8:	761a      	strb	r2, [r3, #24]
      break;
 800a2ea:	e035      	b.n	800a358 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	7e5b      	ldrb	r3, [r3, #25]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	765a      	strb	r2, [r3, #25]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	7e5b      	ldrb	r3, [r3, #25]
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d806      	bhi.n	800a30e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a30c:	e025      	b.n	800a35a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a314:	2106      	movs	r1, #6
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	795b      	ldrb	r3, [r3, #5]
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f90c 	bl	800a544 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	791b      	ldrb	r3, [r3, #4]
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f906 	bl	800a544 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a33e:	2302      	movs	r3, #2
 800a340:	73fb      	strb	r3, [r7, #15]
      break;
 800a342:	e00a      	b.n	800a35a <USBH_HandleControl+0x2de>

    default:
      break;
 800a344:	bf00      	nop
 800a346:	e008      	b.n	800a35a <USBH_HandleControl+0x2de>
      break;
 800a348:	bf00      	nop
 800a34a:	e006      	b.n	800a35a <USBH_HandleControl+0x2de>
      break;
 800a34c:	bf00      	nop
 800a34e:	e004      	b.n	800a35a <USBH_HandleControl+0x2de>
      break;
 800a350:	bf00      	nop
 800a352:	e002      	b.n	800a35a <USBH_HandleControl+0x2de>
      break;
 800a354:	bf00      	nop
 800a356:	e000      	b.n	800a35a <USBH_HandleControl+0x2de>
      break;
 800a358:	bf00      	nop
  }

  return status;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af04      	add	r7, sp, #16
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a372:	79f9      	ldrb	r1, [r7, #7]
 800a374:	2300      	movs	r3, #0
 800a376:	9303      	str	r3, [sp, #12]
 800a378:	2308      	movs	r3, #8
 800a37a:	9302      	str	r3, [sp, #8]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	2300      	movs	r3, #0
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	2300      	movs	r3, #0
 800a386:	2200      	movs	r2, #0
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fb46 	bl	800aa1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af04      	add	r7, sp, #16
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	80fb      	strh	r3, [r7, #6]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3bc:	7979      	ldrb	r1, [r7, #5]
 800a3be:	7e3b      	ldrb	r3, [r7, #24]
 800a3c0:	9303      	str	r3, [sp, #12]
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	9302      	str	r3, [sp, #8]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fb21 	bl	800aa1a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b088      	sub	sp, #32
 800a3e6:	af04      	add	r7, sp, #16
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	80fb      	strh	r3, [r7, #6]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3f8:	7979      	ldrb	r1, [r7, #5]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9303      	str	r3, [sp, #12]
 800a3fe:	88fb      	ldrh	r3, [r7, #6]
 800a400:	9302      	str	r3, [sp, #8]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	2301      	movs	r3, #1
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	2300      	movs	r3, #0
 800a40c:	2201      	movs	r2, #1
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f000 fb03 	bl	800aa1a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a414:	2300      	movs	r3, #0

}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b088      	sub	sp, #32
 800a422:	af04      	add	r7, sp, #16
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	4611      	mov	r1, r2
 800a42a:	461a      	mov	r2, r3
 800a42c:	460b      	mov	r3, r1
 800a42e:	80fb      	strh	r3, [r7, #6]
 800a430:	4613      	mov	r3, r2
 800a432:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a442:	7979      	ldrb	r1, [r7, #5]
 800a444:	7e3b      	ldrb	r3, [r7, #24]
 800a446:	9303      	str	r3, [sp, #12]
 800a448:	88fb      	ldrh	r3, [r7, #6]
 800a44a:	9302      	str	r3, [sp, #8]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	2301      	movs	r3, #1
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	2302      	movs	r3, #2
 800a456:	2200      	movs	r2, #0
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 fade 	bl	800aa1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af04      	add	r7, sp, #16
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	4611      	mov	r1, r2
 800a474:	461a      	mov	r2, r3
 800a476:	460b      	mov	r3, r1
 800a478:	80fb      	strh	r3, [r7, #6]
 800a47a:	4613      	mov	r3, r2
 800a47c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a47e:	7979      	ldrb	r1, [r7, #5]
 800a480:	2300      	movs	r3, #0
 800a482:	9303      	str	r3, [sp, #12]
 800a484:	88fb      	ldrh	r3, [r7, #6]
 800a486:	9302      	str	r3, [sp, #8]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	9301      	str	r3, [sp, #4]
 800a48c:	2301      	movs	r3, #1
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	2302      	movs	r3, #2
 800a492:	2201      	movs	r2, #1
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fac0 	bl	800aa1a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af04      	add	r7, sp, #16
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	70fb      	strb	r3, [r7, #3]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70bb      	strb	r3, [r7, #2]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4be:	7878      	ldrb	r0, [r7, #1]
 800a4c0:	78ba      	ldrb	r2, [r7, #2]
 800a4c2:	78f9      	ldrb	r1, [r7, #3]
 800a4c4:	8b3b      	ldrh	r3, [r7, #24]
 800a4c6:	9302      	str	r3, [sp, #8]
 800a4c8:	7d3b      	ldrb	r3, [r7, #20]
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	7c3b      	ldrb	r3, [r7, #16]
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa53 	bl	800a97e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b082      	sub	sp, #8
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa72 	bl	800a9dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f836 	bl	800a580 <USBH_GetFreePipe>
 800a514:	4603      	mov	r3, r0
 800a516:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a518:	89fb      	ldrh	r3, [r7, #14]
 800a51a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00a      	beq.n	800a538 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a522:	78fa      	ldrb	r2, [r7, #3]
 800a524:	89fb      	ldrh	r3, [r7, #14]
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	33e0      	adds	r3, #224	; 0xe0
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	440b      	add	r3, r1
 800a536:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a538:	89fb      	ldrh	r3, [r7, #14]
 800a53a:	b2db      	uxtb	r3, r3
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a550:	78fb      	ldrb	r3, [r7, #3]
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d80d      	bhi.n	800a572 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a556:	78fb      	ldrb	r3, [r7, #3]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	33e0      	adds	r3, #224	; 0xe0
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	33e0      	adds	r3, #224	; 0xe0
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
 800a590:	e00f      	b.n	800a5b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	33e0      	adds	r3, #224	; 0xe0
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	4413      	add	r3, r2
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d102      	bne.n	800a5ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	e007      	b.n	800a5bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	73fb      	strb	r3, [r7, #15]
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	2b0a      	cmp	r3, #10
 800a5b6:	d9ec      	bls.n	800a592 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a5b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	490e      	ldr	r1, [pc, #56]	; (800a608 <MX_USB_HOST_Init+0x40>)
 800a5d0:	480e      	ldr	r0, [pc, #56]	; (800a60c <MX_USB_HOST_Init+0x44>)
 800a5d2:	f7fe fca1 	bl	8008f18 <USBH_Init>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5dc:	f7f7 f93c 	bl	8001858 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5e0:	490b      	ldr	r1, [pc, #44]	; (800a610 <MX_USB_HOST_Init+0x48>)
 800a5e2:	480a      	ldr	r0, [pc, #40]	; (800a60c <MX_USB_HOST_Init+0x44>)
 800a5e4:	f7fe fd26 	bl	8009034 <USBH_RegisterClass>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5ee:	f7f7 f933 	bl	8001858 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5f2:	4806      	ldr	r0, [pc, #24]	; (800a60c <MX_USB_HOST_Init+0x44>)
 800a5f4:	f7fe fdaa 	bl	800914c <USBH_Start>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a5fe:	f7f7 f92b 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a602:	bf00      	nop
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	0800a629 	.word	0x0800a629
 800a60c:	2001defc 	.word	0x2001defc
 800a610:	20000070 	.word	0x20000070

0800a614 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a618:	4802      	ldr	r0, [pc, #8]	; (800a624 <MX_USB_HOST_Process+0x10>)
 800a61a:	f7fe fda7 	bl	800916c <USBH_Process>
}
 800a61e:	bf00      	nop
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	2001defc 	.word	0x2001defc

0800a628 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	3b01      	subs	r3, #1
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d819      	bhi.n	800a670 <USBH_UserProcess+0x48>
 800a63c:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <USBH_UserProcess+0x1c>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a671 	.word	0x0800a671
 800a648:	0800a661 	.word	0x0800a661
 800a64c:	0800a671 	.word	0x0800a671
 800a650:	0800a669 	.word	0x0800a669
 800a654:	0800a659 	.word	0x0800a659
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a658:	4b09      	ldr	r3, [pc, #36]	; (800a680 <USBH_UserProcess+0x58>)
 800a65a:	2203      	movs	r2, #3
 800a65c:	701a      	strb	r2, [r3, #0]
  break;
 800a65e:	e008      	b.n	800a672 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a660:	4b07      	ldr	r3, [pc, #28]	; (800a680 <USBH_UserProcess+0x58>)
 800a662:	2202      	movs	r2, #2
 800a664:	701a      	strb	r2, [r3, #0]
  break;
 800a666:	e004      	b.n	800a672 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <USBH_UserProcess+0x58>)
 800a66a:	2201      	movs	r2, #1
 800a66c:	701a      	strb	r2, [r3, #0]
  break;
 800a66e:	e000      	b.n	800a672 <USBH_UserProcess+0x4a>

  default:
  break;
 800a670:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	2001d978 	.word	0x2001d978

0800a684 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b08a      	sub	sp, #40	; 0x28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a68c:	f107 0314 	add.w	r3, r7, #20
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	605a      	str	r2, [r3, #4]
 800a696:	609a      	str	r2, [r3, #8]
 800a698:	60da      	str	r2, [r3, #12]
 800a69a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6a4:	d147      	bne.n	800a736 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	613b      	str	r3, [r7, #16]
 800a6aa:	4b25      	ldr	r3, [pc, #148]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	4a24      	ldr	r2, [pc, #144]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a6b6:	4b22      	ldr	r3, [pc, #136]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	f003 0301 	and.w	r3, r3, #1
 800a6be:	613b      	str	r3, [r7, #16]
 800a6c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a6c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a6d0:	f107 0314 	add.w	r3, r7, #20
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	481b      	ldr	r0, [pc, #108]	; (800a744 <HAL_HCD_MspInit+0xc0>)
 800a6d8:	f7f8 fd92 	bl	8003200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6ee:	230a      	movs	r3, #10
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6f2:	f107 0314 	add.w	r3, r7, #20
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4812      	ldr	r0, [pc, #72]	; (800a744 <HAL_HCD_MspInit+0xc0>)
 800a6fa:	f7f8 fd81 	bl	8003200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6fe:	4b10      	ldr	r3, [pc, #64]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a702:	4a0f      	ldr	r2, [pc, #60]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a708:	6353      	str	r3, [r2, #52]	; 0x34
 800a70a:	2300      	movs	r3, #0
 800a70c:	60fb      	str	r3, [r7, #12]
 800a70e:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a712:	4a0b      	ldr	r2, [pc, #44]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a718:	6453      	str	r3, [r2, #68]	; 0x44
 800a71a:	4b09      	ldr	r3, [pc, #36]	; (800a740 <HAL_HCD_MspInit+0xbc>)
 800a71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	2043      	movs	r0, #67	; 0x43
 800a72c:	f7f8 f9a5 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a730:	2043      	movs	r0, #67	; 0x43
 800a732:	f7f8 f9be 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a736:	bf00      	nop
 800a738:	3728      	adds	r7, #40	; 0x28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	40023800 	.word	0x40023800
 800a744:	40020000 	.word	0x40020000

0800a748 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff f8db 	bl	8009912 <USBH_LL_IncTimer>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff f913 	bl	800999e <USBH_LL_Connect>
}
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff f91c 	bl	80099cc <USBH_LL_Disconnect>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff f8cd 	bl	8009966 <USBH_LL_PortEnabled>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff f8cd 	bl	8009982 <USBH_LL_PortDisabled>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d12a      	bne.n	800a858 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a802:	4a18      	ldr	r2, [pc, #96]	; (800a864 <USBH_LL_Init+0x74>)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a15      	ldr	r2, [pc, #84]	; (800a864 <USBH_LL_Init+0x74>)
 800a80e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a812:	4b14      	ldr	r3, [pc, #80]	; (800a864 <USBH_LL_Init+0x74>)
 800a814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a818:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a81a:	4b12      	ldr	r3, [pc, #72]	; (800a864 <USBH_LL_Init+0x74>)
 800a81c:	2208      	movs	r2, #8
 800a81e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a820:	4b10      	ldr	r3, [pc, #64]	; (800a864 <USBH_LL_Init+0x74>)
 800a822:	2201      	movs	r2, #1
 800a824:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a826:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <USBH_LL_Init+0x74>)
 800a828:	2200      	movs	r2, #0
 800a82a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <USBH_LL_Init+0x74>)
 800a82e:	2202      	movs	r2, #2
 800a830:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a832:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <USBH_LL_Init+0x74>)
 800a834:	2200      	movs	r2, #0
 800a836:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a838:	480a      	ldr	r0, [pc, #40]	; (800a864 <USBH_LL_Init+0x74>)
 800a83a:	f7f8 feb0 	bl	800359e <HAL_HCD_Init>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a844:	f7f7 f808 	bl	8001858 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a848:	4806      	ldr	r0, [pc, #24]	; (800a864 <USBH_LL_Init+0x74>)
 800a84a:	f7f9 fa94 	bl	8003d76 <HAL_HCD_GetCurrentFrame>
 800a84e:	4603      	mov	r3, r0
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff f84e 	bl	80098f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	2001e2d4 	.word	0x2001e2d4

0800a868 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a870:	2300      	movs	r3, #0
 800a872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f9 fa03 	bl	8003c8a <HAL_HCD_Start>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 f95c 	bl	800ab48 <USBH_Get_USB_Status>
 800a890:	4603      	mov	r3, r0
 800a892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a894:	7bbb      	ldrb	r3, [r7, #14]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f9 fa0b 	bl	8003cd0 <HAL_HCD_Stop>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 f941 	bl	800ab48 <USBH_Get_USB_Status>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7f9 fa53 	bl	8003d92 <HAL_HCD_GetCurrentSpeed>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d00c      	beq.n	800a90c <USBH_LL_GetSpeed+0x38>
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d80d      	bhi.n	800a912 <USBH_LL_GetSpeed+0x3e>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <USBH_LL_GetSpeed+0x2c>
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d003      	beq.n	800a906 <USBH_LL_GetSpeed+0x32>
 800a8fe:	e008      	b.n	800a912 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
    break;
 800a904:	e008      	b.n	800a918 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a906:	2301      	movs	r3, #1
 800a908:	73fb      	strb	r3, [r7, #15]
    break;
 800a90a:	e005      	b.n	800a918 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a90c:	2302      	movs	r3, #2
 800a90e:	73fb      	strb	r3, [r7, #15]
    break;
 800a910:	e002      	b.n	800a918 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a912:	2301      	movs	r3, #1
 800a914:	73fb      	strb	r3, [r7, #15]
    break;
 800a916:	bf00      	nop
  }
  return  speed;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a92e:	2300      	movs	r3, #0
 800a930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a938:	4618      	mov	r0, r3
 800a93a:	f7f9 f9e6 	bl	8003d0a <HAL_HCD_ResetPort>
 800a93e:	4603      	mov	r3, r0
 800a940:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a942:	7bfb      	ldrb	r3, [r7, #15]
 800a944:	4618      	mov	r0, r3
 800a946:	f000 f8ff 	bl	800ab48 <USBH_Get_USB_Status>
 800a94a:	4603      	mov	r3, r0
 800a94c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	4611      	mov	r1, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f9 f9ed 	bl	8003d4e <HAL_HCD_HC_GetXferCount>
 800a974:	4603      	mov	r3, r0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a97e:	b590      	push	{r4, r7, lr}
 800a980:	b089      	sub	sp, #36	; 0x24
 800a982:	af04      	add	r7, sp, #16
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	461a      	mov	r2, r3
 800a98c:	4603      	mov	r3, r0
 800a98e:	70fb      	strb	r3, [r7, #3]
 800a990:	460b      	mov	r3, r1
 800a992:	70bb      	strb	r3, [r7, #2]
 800a994:	4613      	mov	r3, r2
 800a996:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a9a6:	787c      	ldrb	r4, [r7, #1]
 800a9a8:	78ba      	ldrb	r2, [r7, #2]
 800a9aa:	78f9      	ldrb	r1, [r7, #3]
 800a9ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9ba:	9300      	str	r3, [sp, #0]
 800a9bc:	4623      	mov	r3, r4
 800a9be:	f7f8 fe50 	bl	8003662 <HAL_HCD_HC_Init>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f8bd 	bl	800ab48 <USBH_Get_USB_Status>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd90      	pop	{r4, r7, pc}

0800a9dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a9f6:	78fa      	ldrb	r2, [r7, #3]
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f8 fec0 	bl	8003780 <HAL_HCD_HC_Halt>
 800aa00:	4603      	mov	r3, r0
 800aa02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 f89e 	bl	800ab48 <USBH_Get_USB_Status>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa10:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aa1a:	b590      	push	{r4, r7, lr}
 800aa1c:	b089      	sub	sp, #36	; 0x24
 800aa1e:	af04      	add	r7, sp, #16
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	461a      	mov	r2, r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	70fb      	strb	r3, [r7, #3]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70bb      	strb	r3, [r7, #2]
 800aa30:	4613      	mov	r3, r2
 800aa32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa42:	787c      	ldrb	r4, [r7, #1]
 800aa44:	78ba      	ldrb	r2, [r7, #2]
 800aa46:	78f9      	ldrb	r1, [r7, #3]
 800aa48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa4c:	9303      	str	r3, [sp, #12]
 800aa4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa50:	9302      	str	r3, [sp, #8]
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	4623      	mov	r3, r4
 800aa5e:	f7f8 feb3 	bl	80037c8 <HAL_HCD_HC_SubmitRequest>
 800aa62:	4603      	mov	r3, r0
 800aa64:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa66:	7bfb      	ldrb	r3, [r7, #15]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 f86d 	bl	800ab48 <USBH_Get_USB_Status>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd90      	pop	{r4, r7, pc}

0800aa7c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa8e:	78fa      	ldrb	r2, [r7, #3]
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f9 f947 	bl	8003d26 <HAL_HCD_HC_GetURBState>
 800aa98:	4603      	mov	r3, r0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
 800aaaa:	460b      	mov	r3, r1
 800aaac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d103      	bne.n	800aac0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 f870 	bl	800aba0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aac0:	20c8      	movs	r0, #200	; 0xc8
 800aac2:	f7f7 fac9 	bl	8002058 <HAL_Delay>
  return USBH_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
 800aadc:	4613      	mov	r3, r2
 800aade:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aae6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	212c      	movs	r1, #44	; 0x2c
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
 800aaf2:	4413      	add	r3, r2
 800aaf4:	333b      	adds	r3, #59	; 0x3b
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	212c      	movs	r1, #44	; 0x2c
 800ab02:	fb01 f303 	mul.w	r3, r1, r3
 800ab06:	4413      	add	r3, r2
 800ab08:	3354      	adds	r3, #84	; 0x54
 800ab0a:	78ba      	ldrb	r2, [r7, #2]
 800ab0c:	701a      	strb	r2, [r3, #0]
 800ab0e:	e008      	b.n	800ab22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	212c      	movs	r1, #44	; 0x2c
 800ab16:	fb01 f303 	mul.w	r3, r1, r3
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3355      	adds	r3, #85	; 0x55
 800ab1e:	78ba      	ldrb	r2, [r7, #2]
 800ab20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7f7 fa8d 	bl	8002058 <HAL_Delay>
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d817      	bhi.n	800ab8c <USBH_Get_USB_Status+0x44>
 800ab5c:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <USBH_Get_USB_Status+0x1c>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab7b 	.word	0x0800ab7b
 800ab6c:	0800ab81 	.word	0x0800ab81
 800ab70:	0800ab87 	.word	0x0800ab87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	73fb      	strb	r3, [r7, #15]
    break;
 800ab78:	e00b      	b.n	800ab92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab7e:	e008      	b.n	800ab92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab80:	2301      	movs	r3, #1
 800ab82:	73fb      	strb	r3, [r7, #15]
    break;
 800ab84:	e005      	b.n	800ab92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab86:	2302      	movs	r3, #2
 800ab88:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8a:	e002      	b.n	800ab92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab90:	bf00      	nop
  }
  return usb_status;
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d102      	bne.n	800abba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e001      	b.n	800abbe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800abba:	2300      	movs	r3, #0
 800abbc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
 800abc0:	461a      	mov	r2, r3
 800abc2:	2101      	movs	r1, #1
 800abc4:	4803      	ldr	r0, [pc, #12]	; (800abd4 <MX_DriverVbusFS+0x34>)
 800abc6:	f7f8 fcb7 	bl	8003538 <HAL_GPIO_WritePin>
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	40020800 	.word	0x40020800

0800abd8 <LCD_Index2Color_565>:
 800abd8:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800abdc:	4a06      	ldr	r2, [pc, #24]	; (800abf8 <LCD_Index2Color_565+0x20>)
 800abde:	5cd1      	ldrb	r1, [r2, r3]
 800abe0:	4a06      	ldr	r2, [pc, #24]	; (800abfc <LCD_Index2Color_565+0x24>)
 800abe2:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 800abe6:	f000 001f 	and.w	r0, r0, #31
 800abea:	5cd3      	ldrb	r3, [r2, r3]
 800abec:	5c10      	ldrb	r0, [r2, r0]
 800abee:	041b      	lsls	r3, r3, #16
 800abf0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800abf4:	4418      	add	r0, r3
 800abf6:	4770      	bx	lr
 800abf8:	080161d8 	.word	0x080161d8
 800abfc:	08016218 	.word	0x08016218

0800ac00 <_Color2Index_565>:
 800ac00:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ac04:	4a06      	ldr	r2, [pc, #24]	; (800ac20 <_Color2Index_565+0x20>)
 800ac06:	5cd1      	ldrb	r1, [r2, r3]
 800ac08:	4a06      	ldr	r2, [pc, #24]	; (800ac24 <_Color2Index_565+0x24>)
 800ac0a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ac0e:	b2c0      	uxtb	r0, r0
 800ac10:	5cd3      	ldrb	r3, [r2, r3]
 800ac12:	5c10      	ldrb	r0, [r2, r0]
 800ac14:	02db      	lsls	r3, r3, #11
 800ac16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac1a:	4418      	add	r0, r3
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	08015ed8 	.word	0x08015ed8
 800ac24:	08015fd8 	.word	0x08015fd8

0800ac28 <_GetIndexMask_565>:
 800ac28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ac2c:	4770      	bx	lr
	...

0800ac30 <_Color2IndexBulk>:
 800ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac32:	f8df e034 	ldr.w	lr, [pc, #52]	; 800ac68 <_Color2IndexBulk+0x38>
 800ac36:	4e0b      	ldr	r6, [pc, #44]	; (800ac64 <_Color2IndexBulk+0x34>)
 800ac38:	f850 5b04 	ldr.w	r5, [r0], #4
 800ac3c:	f3c5 2407 	ubfx	r4, r5, #8, #8
 800ac40:	3a01      	subs	r2, #1
 800ac42:	f81e 7004 	ldrb.w	r7, [lr, r4]
 800ac46:	f3c5 4407 	ubfx	r4, r5, #16, #8
 800ac4a:	b2ed      	uxtb	r5, r5
 800ac4c:	5d34      	ldrb	r4, [r6, r4]
 800ac4e:	5d75      	ldrb	r5, [r6, r5]
 800ac50:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 800ac54:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 800ac58:	442c      	add	r4, r5
 800ac5a:	800c      	strh	r4, [r1, #0]
 800ac5c:	4419      	add	r1, r3
 800ac5e:	d1eb      	bne.n	800ac38 <_Color2IndexBulk+0x8>
 800ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac62:	bf00      	nop
 800ac64:	08015fd8 	.word	0x08015fd8
 800ac68:	08015ed8 	.word	0x08015ed8

0800ac6c <_Index2ColorBulk>:
 800ac6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6e:	1e54      	subs	r4, r2, #1
 800ac70:	fb03 0004 	mla	r0, r3, r4, r0
 800ac74:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800ac78:	3c01      	subs	r4, #1
 800ac7a:	4e0c      	ldr	r6, [pc, #48]	; (800acac <_Index2ColorBulk+0x40>)
 800ac7c:	4f0c      	ldr	r7, [pc, #48]	; (800acb0 <_Index2ColorBulk+0x44>)
 800ac7e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac82:	8805      	ldrh	r5, [r0, #0]
 800ac84:	0aec      	lsrs	r4, r5, #11
 800ac86:	3a01      	subs	r2, #1
 800ac88:	f816 e004 	ldrb.w	lr, [r6, r4]
 800ac8c:	f005 041f 	and.w	r4, r5, #31
 800ac90:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800ac94:	5d34      	ldrb	r4, [r6, r4]
 800ac96:	5d7d      	ldrb	r5, [r7, r5]
 800ac98:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 800ac9c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800aca0:	f841 4904 	str.w	r4, [r1], #-4
 800aca4:	eba0 0003 	sub.w	r0, r0, r3
 800aca8:	d1eb      	bne.n	800ac82 <_Index2ColorBulk+0x16>
 800acaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acac:	08016218 	.word	0x08016218
 800acb0:	080161d8 	.word	0x080161d8

0800acb4 <_PushFreeBlock>:
 800acb4:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <_PushFreeBlock+0x20>)
 800acb6:	685a      	ldr	r2, [r3, #4]
 800acb8:	3201      	adds	r2, #1
 800acba:	b510      	push	{r4, lr}
 800acbc:	605a      	str	r2, [r3, #4]
 800acbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800acc2:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800acc6:	604c      	str	r4, [r1, #4]
 800acc8:	2100      	movs	r1, #0
 800acca:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800acce:	6258      	str	r0, [r3, #36]	; 0x24
 800acd0:	bd10      	pop	{r4, pc}
 800acd2:	bf00      	nop
 800acd4:	2001e5d8 	.word	0x2001e5d8

0800acd8 <_RemoveFreeBlock>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	490e      	ldr	r1, [pc, #56]	; (800ad14 <_RemoveFreeBlock+0x3c>)
 800acdc:	6844      	ldr	r4, [r0, #4]
 800acde:	230f      	movs	r3, #15
 800ace0:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ace4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ace6:	4294      	cmp	r4, r2
 800ace8:	4a0a      	ldr	r2, [pc, #40]	; (800ad14 <_RemoveFreeBlock+0x3c>)
 800acea:	d203      	bcs.n	800acf4 <_RemoveFreeBlock+0x1c>
 800acec:	f113 33ff 	adds.w	r3, r3, #4294967295
 800acf0:	d2f6      	bcs.n	800ace0 <_RemoveFreeBlock+0x8>
 800acf2:	bd10      	pop	{r4, pc}
 800acf4:	2b0f      	cmp	r3, #15
 800acf6:	d80c      	bhi.n	800ad12 <_RemoveFreeBlock+0x3a>
 800acf8:	6811      	ldr	r1, [r2, #0]
 800acfa:	1b09      	subs	r1, r1, r4
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	6881      	ldr	r1, [r0, #8]
 800ad00:	68c0      	ldr	r0, [r0, #12]
 800ad02:	b101      	cbz	r1, 800ad06 <_RemoveFreeBlock+0x2e>
 800ad04:	6048      	str	r0, [r1, #4]
 800ad06:	b108      	cbz	r0, 800ad0c <_RemoveFreeBlock+0x34>
 800ad08:	6001      	str	r1, [r0, #0]
 800ad0a:	bd10      	pop	{r4, pc}
 800ad0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad10:	6459      	str	r1, [r3, #68]	; 0x44
 800ad12:	bd10      	pop	{r4, pc}
 800ad14:	2001e5d8 	.word	0x2001e5d8

0800ad18 <_AddFreeMemory>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	4e27      	ldr	r6, [pc, #156]	; (800adb8 <_AddFreeMemory+0xa0>)
 800ad1c:	68f3      	ldr	r3, [r6, #12]
 800ad1e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800ad20:	3b01      	subs	r3, #1
 800ad22:	4605      	mov	r5, r0
 800ad24:	4413      	add	r3, r2
 800ad26:	1808      	adds	r0, r1, r0
 800ad28:	4283      	cmp	r3, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	d305      	bcc.n	800ad3a <_AddFreeMemory+0x22>
 800ad2e:	594b      	ldr	r3, [r1, r5]
 800ad30:	b91b      	cbnz	r3, 800ad3a <_AddFreeMemory+0x22>
 800ad32:	6843      	ldr	r3, [r0, #4]
 800ad34:	441d      	add	r5, r3
 800ad36:	f7ff ffcf 	bl	800acd8 <_RemoveFreeBlock>
 800ad3a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	d90a      	bls.n	800ad56 <_AddFreeMemory+0x3e>
 800ad40:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800ad44:	1be7      	subs	r7, r4, r7
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	b92b      	cbnz	r3, 800ad56 <_AddFreeMemory+0x3e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	441d      	add	r5, r3
 800ad50:	f7ff ffc2 	bl	800acd8 <_RemoveFreeBlock>
 800ad54:	463c      	mov	r4, r7
 800ad56:	230f      	movs	r3, #15
 800ad58:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ad5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ad5e:	4295      	cmp	r5, r2
 800ad60:	d203      	bcs.n	800ad6a <_AddFreeMemory+0x52>
 800ad62:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ad66:	d2f7      	bcs.n	800ad58 <_AddFreeMemory+0x40>
 800ad68:	e023      	b.n	800adb2 <_AddFreeMemory+0x9a>
 800ad6a:	2b0f      	cmp	r3, #15
 800ad6c:	d821      	bhi.n	800adb2 <_AddFreeMemory+0x9a>
 800ad6e:	3308      	adds	r3, #8
 800ad70:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ad74:	1960      	adds	r0, r4, r5
 800ad76:	6851      	ldr	r1, [r2, #4]
 800ad78:	60a1      	str	r1, [r4, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	e884 0024 	stmia.w	r4, {r2, r5}
 800ad80:	6124      	str	r4, [r4, #16]
 800ad82:	f840 5c04 	str.w	r5, [r0, #-4]
 800ad86:	f104 0008 	add.w	r0, r4, #8
 800ad8a:	b101      	cbz	r1, 800ad8e <_AddFreeMemory+0x76>
 800ad8c:	6048      	str	r0, [r1, #4]
 800ad8e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ad92:	60a1      	str	r1, [r4, #8]
 800ad94:	60e2      	str	r2, [r4, #12]
 800ad96:	6058      	str	r0, [r3, #4]
 800ad98:	6833      	ldr	r3, [r6, #0]
 800ad9a:	4907      	ldr	r1, [pc, #28]	; (800adb8 <_AddFreeMemory+0xa0>)
 800ad9c:	18ea      	adds	r2, r5, r3
 800ad9e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800ada2:	6032      	str	r2, [r6, #0]
 800ada4:	b92b      	cbnz	r3, 800adb2 <_AddFreeMemory+0x9a>
 800ada6:	68cb      	ldr	r3, [r1, #12]
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	688a      	ldr	r2, [r1, #8]
 800adac:	4293      	cmp	r3, r2
 800adae:	bf88      	it	hi
 800adb0:	608b      	strhi	r3, [r1, #8]
 800adb2:	4628      	mov	r0, r5
 800adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb6:	bf00      	nop
 800adb8:	2001e5d8 	.word	0x2001e5d8

0800adbc <_RemoveHoles>:
 800adbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc0:	4f24      	ldr	r7, [pc, #144]	; (800ae54 <_RemoveHoles+0x98>)
 800adc2:	68fe      	ldr	r6, [r7, #12]
 800adc4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800adc6:	3e01      	subs	r6, #1
 800adc8:	4683      	mov	fp, r0
 800adca:	4426      	add	r6, r4
 800adcc:	46b8      	mov	r8, r7
 800adce:	e894 0028 	ldmia.w	r4, {r3, r5}
 800add2:	bbab      	cbnz	r3, 800ae40 <_RemoveHoles+0x84>
 800add4:	1961      	adds	r1, r4, r5
 800add6:	428e      	cmp	r6, r1
 800add8:	d932      	bls.n	800ae40 <_RemoveHoles+0x84>
 800adda:	f854 a005 	ldr.w	sl, [r4, r5]
 800adde:	f1ba 0f00 	cmp.w	sl, #0
 800ade2:	d02d      	beq.n	800ae40 <_RemoveHoles+0x84>
 800ade4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade6:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d128      	bne.n	800ae40 <_RemoveHoles+0x84>
 800adee:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800adf2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	4620      	mov	r0, r4
 800adfa:	9101      	str	r1, [sp, #4]
 800adfc:	f7ff ff6c 	bl	800acd8 <_RemoveFreeBlock>
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800ae06:	6808      	ldr	r0, [r1, #0]
 800ae08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	6054      	str	r4, [r2, #4]
 800ae10:	464a      	mov	r2, r9
 800ae12:	f008 f95d 	bl	80130d0 <memmove>
 800ae16:	9b00      	ldr	r3, [sp, #0]
 800ae18:	459a      	cmp	sl, r3
 800ae1a:	bf08      	it	eq
 800ae1c:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 800ae20:	eb04 0109 	add.w	r1, r4, r9
 800ae24:	bf08      	it	eq
 800ae26:	1b5b      	subeq	r3, r3, r5
 800ae28:	4628      	mov	r0, r5
 800ae2a:	bf08      	it	eq
 800ae2c:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 800ae30:	f7ff ff72 	bl	800ad18 <_AddFreeMemory>
 800ae34:	f1bb 0f00 	cmp.w	fp, #0
 800ae38:	d001      	beq.n	800ae3e <_RemoveHoles+0x82>
 800ae3a:	4558      	cmp	r0, fp
 800ae3c:	d205      	bcs.n	800ae4a <_RemoveHoles+0x8e>
 800ae3e:	464d      	mov	r5, r9
 800ae40:	442c      	add	r4, r5
 800ae42:	42a6      	cmp	r6, r4
 800ae44:	d8c3      	bhi.n	800adce <_RemoveHoles+0x12>
 800ae46:	2001      	movs	r0, #1
 800ae48:	e000      	b.n	800ae4c <_RemoveHoles+0x90>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	b003      	add	sp, #12
 800ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae52:	bf00      	nop
 800ae54:	2001e5d8 	.word	0x2001e5d8

0800ae58 <GUI_ALLOC_FreeFixedBlock>:
 800ae58:	b128      	cbz	r0, 800ae66 <GUI_ALLOC_FreeFixedBlock+0xe>
 800ae5a:	4b03      	ldr	r3, [pc, #12]	; (800ae68 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800ae5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae5e:	6002      	str	r2, [r0, #0]
 800ae60:	b102      	cbz	r2, 800ae64 <GUI_ALLOC_FreeFixedBlock+0xc>
 800ae62:	6050      	str	r0, [r2, #4]
 800ae64:	63d8      	str	r0, [r3, #60]	; 0x3c
 800ae66:	4770      	bx	lr
 800ae68:	2001e5d8 	.word	0x2001e5d8

0800ae6c <GUI_ALLOC_h2p>:
 800ae6c:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <GUI_ALLOC_h2p+0x10>)
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae70:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ae74:	6840      	ldr	r0, [r0, #4]
 800ae76:	3008      	adds	r0, #8
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	2001e5d8 	.word	0x2001e5d8

0800ae80 <GUI_ALLOC_LockH>:
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <GUI_ALLOC_LockH+0x18>)
 800ae82:	69da      	ldr	r2, [r3, #28]
 800ae84:	3201      	adds	r2, #1
 800ae86:	61da      	str	r2, [r3, #28]
 800ae88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae8a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 800ae94:	f7ff bfea 	b.w	800ae6c <GUI_ALLOC_h2p>
 800ae98:	2001e5d8 	.word	0x2001e5d8

0800ae9c <GUI_ALLOC_UnlockH>:
 800ae9c:	b530      	push	{r4, r5, lr}
 800ae9e:	6803      	ldr	r3, [r0, #0]
 800aea0:	4909      	ldr	r1, [pc, #36]	; (800aec8 <GUI_ALLOC_UnlockH+0x2c>)
 800aea2:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800aea6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800aea8:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d903      	bls.n	800aeb8 <GUI_ALLOC_UnlockH+0x1c>
 800aeb0:	69ca      	ldr	r2, [r1, #28]
 800aeb2:	b10a      	cbz	r2, 800aeb8 <GUI_ALLOC_UnlockH+0x1c>
 800aeb4:	3a01      	subs	r2, #1
 800aeb6:	61ca      	str	r2, [r1, #28]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 800aebe:	2300      	movs	r3, #0
 800aec0:	6003      	str	r3, [r0, #0]
 800aec2:	4618      	mov	r0, r3
 800aec4:	bd30      	pop	{r4, r5, pc}
 800aec6:	bf00      	nop
 800aec8:	2001e5d8 	.word	0x2001e5d8

0800aecc <GUI_ALLOC_AssignMemory>:
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <GUI_ALLOC_AssignMemory+0xc>)
 800aece:	f021 0103 	bic.w	r1, r1, #3
 800aed2:	6018      	str	r0, [r3, #0]
 800aed4:	6059      	str	r1, [r3, #4]
 800aed6:	4770      	bx	lr
 800aed8:	2000027c 	.word	0x2000027c

0800aedc <GUI_ALLOC_Free>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	b160      	cbz	r0, 800aefc <GUI_ALLOC_Free+0x20>
 800aee2:	4b07      	ldr	r3, [pc, #28]	; (800af00 <GUI_ALLOC_Free+0x24>)
 800aee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800aeea:	6859      	ldr	r1, [r3, #4]
 800aeec:	6848      	ldr	r0, [r1, #4]
 800aeee:	f7ff ff13 	bl	800ad18 <_AddFreeMemory>
 800aef2:	4620      	mov	r0, r4
 800aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef8:	f7ff bedc 	b.w	800acb4 <_PushFreeBlock>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	bf00      	nop
 800af00:	2001e5d8 	.word	0x2001e5d8

0800af04 <_EnlargeBlocks>:
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	4c22      	ldr	r4, [pc, #136]	; (800af94 <_EnlargeBlocks+0x90>)
 800af0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af0c:	b93b      	cbnz	r3, 800af1e <_EnlargeBlocks+0x1a>
 800af0e:	4b22      	ldr	r3, [pc, #136]	; (800af98 <_EnlargeBlocks+0x94>)
 800af10:	689d      	ldr	r5, [r3, #8]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	3508      	adds	r5, #8
 800af16:	fbb3 f5f5 	udiv	r5, r3, r5
 800af1a:	3502      	adds	r5, #2
 800af1c:	e003      	b.n	800af26 <_EnlargeBlocks+0x22>
 800af1e:	6923      	ldr	r3, [r4, #16]
 800af20:	1d1d      	adds	r5, r3, #4
 800af22:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800af26:	00e8      	lsls	r0, r5, #3
 800af28:	f000 f8f4 	bl	800b114 <_Alloc>
 800af2c:	4680      	mov	r8, r0
 800af2e:	b360      	cbz	r0, 800af8a <_EnlargeBlocks+0x86>
 800af30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af32:	6922      	ldr	r2, [r4, #16]
 800af34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af36:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800af3a:	00d2      	lsls	r2, r2, #3
 800af3c:	685e      	ldr	r6, [r3, #4]
 800af3e:	4b17      	ldr	r3, [pc, #92]	; (800af9c <_EnlargeBlocks+0x98>)
 800af40:	3608      	adds	r6, #8
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4630      	mov	r0, r6
 800af46:	4798      	blx	r3
 800af48:	6922      	ldr	r2, [r4, #16]
 800af4a:	6366      	str	r6, [r4, #52]	; 0x34
 800af4c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800af50:	4613      	mov	r3, r2
 800af52:	1e69      	subs	r1, r5, #1
 800af54:	428b      	cmp	r3, r1
 800af56:	d205      	bcs.n	800af64 <_EnlargeBlocks+0x60>
 800af58:	3301      	adds	r3, #1
 800af5a:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800af5e:	f840 3c04 	str.w	r3, [r0, #-4]
 800af62:	e7f7      	b.n	800af54 <_EnlargeBlocks+0x50>
 800af64:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800af68:	f04f 0800 	mov.w	r8, #0
 800af6c:	f8c6 8004 	str.w	r8, [r6, #4]
 800af70:	6863      	ldr	r3, [r4, #4]
 800af72:	6262      	str	r2, [r4, #36]	; 0x24
 800af74:	1a9b      	subs	r3, r3, r2
 800af76:	442b      	add	r3, r5
 800af78:	6063      	str	r3, [r4, #4]
 800af7a:	6125      	str	r5, [r4, #16]
 800af7c:	4638      	mov	r0, r7
 800af7e:	b13f      	cbz	r7, 800af90 <_EnlargeBlocks+0x8c>
 800af80:	f7ff ffac 	bl	800aedc <GUI_ALLOC_Free>
 800af84:	4640      	mov	r0, r8
 800af86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8a:	2001      	movs	r0, #1
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af94:	2001e5d8 	.word	0x2001e5d8
 800af98:	2000027c 	.word	0x2000027c
 800af9c:	20000024 	.word	0x20000024

0800afa0 <_InitOnce>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	4a17      	ldr	r2, [pc, #92]	; (800b000 <_InitOnce+0x60>)
 800afa4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800afa8:	bb43      	cbnz	r3, 800affc <_InitOnce+0x5c>
 800afaa:	2301      	movs	r3, #1
 800afac:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800afb0:	4b14      	ldr	r3, [pc, #80]	; (800b004 <_InitOnce+0x64>)
 800afb2:	6899      	ldr	r1, [r3, #8]
 800afb4:	b911      	cbnz	r1, 800afbc <_InitOnce+0x1c>
 800afb6:	6859      	ldr	r1, [r3, #4]
 800afb8:	0889      	lsrs	r1, r1, #2
 800afba:	6099      	str	r1, [r3, #8]
 800afbc:	215a      	movs	r1, #90	; 0x5a
 800afbe:	6211      	str	r1, [r2, #32]
 800afc0:	2610      	movs	r6, #16
 800afc2:	2100      	movs	r1, #0
 800afc4:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 800afc8:	fa06 f501 	lsl.w	r5, r6, r1
 800afcc:	3101      	adds	r1, #1
 800afce:	2910      	cmp	r1, #16
 800afd0:	4c0b      	ldr	r4, [pc, #44]	; (800b000 <_InitOnce+0x60>)
 800afd2:	6405      	str	r5, [r0, #64]	; 0x40
 800afd4:	d1f6      	bne.n	800afc4 <_InitOnce+0x24>
 800afd6:	6858      	ldr	r0, [r3, #4]
 800afd8:	6819      	ldr	r1, [r3, #0]
 800afda:	63a1      	str	r1, [r4, #56]	; 0x38
 800afdc:	2302      	movs	r3, #2
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	f1a0 0314 	sub.w	r3, r0, #20
 800afe4:	440b      	add	r3, r1
 800afe6:	2501      	movs	r5, #1
 800afe8:	6363      	str	r3, [r4, #52]	; 0x34
 800afea:	60e0      	str	r0, [r4, #12]
 800afec:	605d      	str	r5, [r3, #4]
 800afee:	6265      	str	r5, [r4, #36]	; 0x24
 800aff0:	6065      	str	r5, [r4, #4]
 800aff2:	f7ff fe91 	bl	800ad18 <_AddFreeMemory>
 800aff6:	f7ff ff85 	bl	800af04 <_EnlargeBlocks>
 800affa:	6325      	str	r5, [r4, #48]	; 0x30
 800affc:	bd70      	pop	{r4, r5, r6, pc}
 800affe:	bf00      	nop
 800b000:	2001e5d8 	.word	0x2001e5d8
 800b004:	2000027c 	.word	0x2000027c

0800b008 <GUI_ALLOC_GetFixedBlock>:
 800b008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00c:	4607      	mov	r7, r0
 800b00e:	4e26      	ldr	r6, [pc, #152]	; (800b0a8 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800b010:	3703      	adds	r7, #3
 800b012:	f7ff ffc5 	bl	800afa0 <_InitOnce>
 800b016:	f027 0703 	bic.w	r7, r7, #3
 800b01a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 800b01c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800b01e:	3704      	adds	r7, #4
 800b020:	4287      	cmp	r7, r0
 800b022:	bf38      	it	cc
 800b024:	4607      	movcc	r7, r0
 800b026:	4614      	mov	r4, r2
 800b028:	b134      	cbz	r4, 800b038 <GUI_ALLOC_GetFixedBlock+0x30>
 800b02a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b02e:	429f      	cmp	r7, r3
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	d02c      	beq.n	800b08e <GUI_ALLOC_GetFixedBlock+0x86>
 800b034:	461c      	mov	r4, r3
 800b036:	e7f7      	b.n	800b028 <GUI_ALLOC_GetFixedBlock+0x20>
 800b038:	68f3      	ldr	r3, [r6, #12]
 800b03a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800b03c:	eb02 0803 	add.w	r8, r2, r3
 800b040:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800b044:	ebc5 0508 	rsb	r5, r5, r8
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b133      	cbz	r3, 800b05a <GUI_ALLOC_GetFixedBlock+0x52>
 800b04c:	4620      	mov	r0, r4
 800b04e:	f7ff feb5 	bl	800adbc <_RemoveHoles>
 800b052:	f858 5c04 	ldr.w	r5, [r8, #-4]
 800b056:	ebc5 0508 	rsb	r5, r5, r8
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	bb0b      	cbnz	r3, 800b0a2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800b05e:	686b      	ldr	r3, [r5, #4]
 800b060:	429f      	cmp	r7, r3
 800b062:	dc1e      	bgt.n	800b0a2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800b064:	4628      	mov	r0, r5
 800b066:	1d1c      	adds	r4, r3, #4
 800b068:	f7ff fe36 	bl	800acd8 <_RemoveFreeBlock>
 800b06c:	68f3      	ldr	r3, [r6, #12]
 800b06e:	6868      	ldr	r0, [r5, #4]
 800b070:	1bdb      	subs	r3, r3, r7
 800b072:	60f3      	str	r3, [r6, #12]
 800b074:	6973      	ldr	r3, [r6, #20]
 800b076:	1be4      	subs	r4, r4, r7
 800b078:	443b      	add	r3, r7
 800b07a:	1bc0      	subs	r0, r0, r7
 800b07c:	442c      	add	r4, r5
 800b07e:	6173      	str	r3, [r6, #20]
 800b080:	d002      	beq.n	800b088 <GUI_ALLOC_GetFixedBlock+0x80>
 800b082:	4629      	mov	r1, r5
 800b084:	f7ff fe48 	bl	800ad18 <_AddFreeMemory>
 800b088:	f844 7c04 	str.w	r7, [r4, #-4]
 800b08c:	e009      	b.n	800b0a2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800b08e:	b10b      	cbz	r3, 800b094 <GUI_ALLOC_GetFixedBlock+0x8c>
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	6059      	str	r1, [r3, #4]
 800b094:	6861      	ldr	r1, [r4, #4]
 800b096:	b101      	cbz	r1, 800b09a <GUI_ALLOC_GetFixedBlock+0x92>
 800b098:	600b      	str	r3, [r1, #0]
 800b09a:	42a2      	cmp	r2, r4
 800b09c:	d101      	bne.n	800b0a2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	63f3      	str	r3, [r6, #60]	; 0x3c
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	2001e5d8 	.word	0x2001e5d8

0800b0ac <GUI_ALLOC_GetMaxSize>:
 800b0ac:	b508      	push	{r3, lr}
 800b0ae:	f7ff ff77 	bl	800afa0 <_InitOnce>
 800b0b2:	4a0c      	ldr	r2, [pc, #48]	; (800b0e4 <GUI_ALLOC_GetMaxSize+0x38>)
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	1899      	adds	r1, r3, r2
 800b0b8:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800b0bc:	b110      	cbz	r0, 800b0c4 <GUI_ALLOC_GetMaxSize+0x18>
 800b0be:	6883      	ldr	r3, [r0, #8]
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	e00b      	b.n	800b0dc <GUI_ALLOC_GetMaxSize+0x30>
 800b0c4:	3b08      	subs	r3, #8
 800b0c6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800b0ca:	d1f4      	bne.n	800b0b6 <GUI_ALLOC_GetMaxSize+0xa>
 800b0cc:	e008      	b.n	800b0e0 <GUI_ALLOC_GetMaxSize+0x34>
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	4290      	cmp	r0, r2
 800b0d4:	bf38      	it	cc
 800b0d6:	4610      	movcc	r0, r2
 800b0d8:	b113      	cbz	r3, 800b0e0 <GUI_ALLOC_GetMaxSize+0x34>
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f6      	bne.n	800b0ce <GUI_ALLOC_GetMaxSize+0x22>
 800b0e0:	380c      	subs	r0, #12
 800b0e2:	bd08      	pop	{r3, pc}
 800b0e4:	2001e5d8 	.word	0x2001e5d8

0800b0e8 <GUI_ALLOC_RequestSize>:
 800b0e8:	b508      	push	{r3, lr}
 800b0ea:	f7ff ffdf 	bl	800b0ac <GUI_ALLOC_GetMaxSize>
 800b0ee:	4b08      	ldr	r3, [pc, #32]	; (800b110 <GUI_ALLOC_RequestSize+0x28>)
 800b0f0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800b0f4:	bf8c      	ite	hi
 800b0f6:	6a1b      	ldrhi	r3, [r3, #32]
 800b0f8:	6a1b      	ldrls	r3, [r3, #32]
 800b0fa:	f04f 0264 	mov.w	r2, #100	; 0x64
 800b0fe:	bf87      	ittee	hi
 800b100:	fb90 f0f2 	sdivhi	r0, r0, r2
 800b104:	4358      	mulhi	r0, r3
 800b106:	4358      	mulls	r0, r3
 800b108:	fbb0 f0f2 	udivls	r0, r0, r2
 800b10c:	bd08      	pop	{r3, pc}
 800b10e:	bf00      	nop
 800b110:	2001e5d8 	.word	0x2001e5d8

0800b114 <_Alloc>:
 800b114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b118:	4e39      	ldr	r6, [pc, #228]	; (800b200 <_Alloc+0xec>)
 800b11a:	4604      	mov	r4, r0
 800b11c:	f7ff ff40 	bl	800afa0 <_InitOnce>
 800b120:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800b122:	6833      	ldr	r3, [r6, #0]
 800b124:	42ac      	cmp	r4, r5
 800b126:	bf24      	itt	cs
 800b128:	3403      	addcs	r4, #3
 800b12a:	f024 0503 	biccs.w	r5, r4, #3
 800b12e:	350c      	adds	r5, #12
 800b130:	42ab      	cmp	r3, r5
 800b132:	4c33      	ldr	r4, [pc, #204]	; (800b200 <_Alloc+0xec>)
 800b134:	d33e      	bcc.n	800b1b4 <_Alloc+0xa0>
 800b136:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b138:	6862      	ldr	r2, [r4, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d90f      	bls.n	800b15e <_Alloc+0x4a>
 800b13e:	6873      	ldr	r3, [r6, #4]
 800b140:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b142:	3b01      	subs	r3, #1
 800b144:	6073      	str	r3, [r6, #4]
 800b146:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b148:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800b14c:	eb03 0208 	add.w	r2, r3, r8
 800b150:	6852      	ldr	r2, [r2, #4]
 800b152:	6272      	str	r2, [r6, #36]	; 0x24
 800b154:	2201      	movs	r2, #1
 800b156:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 800b15a:	b957      	cbnz	r7, 800b172 <_Alloc+0x5e>
 800b15c:	e02a      	b.n	800b1b4 <_Alloc+0xa0>
 800b15e:	3b01      	subs	r3, #1
 800b160:	6323      	str	r3, [r4, #48]	; 0x30
 800b162:	f7ff fecf 	bl	800af04 <_EnlargeBlocks>
 800b166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b168:	3301      	adds	r3, #1
 800b16a:	6323      	str	r3, [r4, #48]	; 0x30
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d0e6      	beq.n	800b13e <_Alloc+0x2a>
 800b170:	e020      	b.n	800b1b4 <_Alloc+0xa0>
 800b172:	230f      	movs	r3, #15
 800b174:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800b178:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b17a:	4295      	cmp	r5, r2
 800b17c:	d20c      	bcs.n	800b198 <_Alloc+0x84>
 800b17e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800b182:	d2f7      	bcs.n	800b174 <_Alloc+0x60>
 800b184:	e008      	b.n	800b198 <_Alloc+0x84>
 800b186:	6894      	ldr	r4, [r2, #8]
 800b188:	b12c      	cbz	r4, 800b196 <_Alloc+0x82>
 800b18a:	6862      	ldr	r2, [r4, #4]
 800b18c:	4295      	cmp	r5, r2
 800b18e:	d914      	bls.n	800b1ba <_Alloc+0xa6>
 800b190:	68a2      	ldr	r2, [r4, #8]
 800b192:	2a00      	cmp	r2, #0
 800b194:	d1f7      	bne.n	800b186 <_Alloc+0x72>
 800b196:	3301      	adds	r3, #1
 800b198:	2b0f      	cmp	r3, #15
 800b19a:	d803      	bhi.n	800b1a4 <_Alloc+0x90>
 800b19c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800b1a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b1a2:	e7f6      	b.n	800b192 <_Alloc+0x7e>
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7ff fe09 	bl	800adbc <_RemoveHoles>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d0e1      	beq.n	800b172 <_Alloc+0x5e>
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f7ff fd80 	bl	800acb4 <_PushFreeBlock>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b1be:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800b1c0:	ebc5 0209 	rsb	r2, r5, r9
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	bf38      	it	cc
 800b1cc:	464d      	movcc	r5, r9
 800b1ce:	f7ff fd83 	bl	800acd8 <_RemoveFreeBlock>
 800b1d2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800b1d4:	1961      	adds	r1, r4, r5
 800b1d6:	4498      	add	r8, r3
 800b1d8:	454d      	cmp	r5, r9
 800b1da:	f04f 0300 	mov.w	r3, #0
 800b1de:	f8c8 4004 	str.w	r4, [r8, #4]
 800b1e2:	6027      	str	r7, [r4, #0]
 800b1e4:	6065      	str	r5, [r4, #4]
 800b1e6:	60a3      	str	r3, [r4, #8]
 800b1e8:	6124      	str	r4, [r4, #16]
 800b1ea:	f841 5c04 	str.w	r5, [r1, #-4]
 800b1ee:	da03      	bge.n	800b1f8 <_Alloc+0xe4>
 800b1f0:	ebc5 0009 	rsb	r0, r5, r9
 800b1f4:	f7ff fd90 	bl	800ad18 <_AddFreeMemory>
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1fe:	bf00      	nop
 800b200:	2001e5d8 	.word	0x2001e5d8

0800b204 <GUI_ALLOC_AllocNoInit>:
 800b204:	b108      	cbz	r0, 800b20a <GUI_ALLOC_AllocNoInit+0x6>
 800b206:	f7ff bf85 	b.w	800b114 <_Alloc>
 800b20a:	4770      	bx	lr

0800b20c <GUI_ALLOC_AllocZero>:
 800b20c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b20e:	4606      	mov	r6, r0
 800b210:	f7ff fff8 	bl	800b204 <GUI_ALLOC_AllocNoInit>
 800b214:	4605      	mov	r5, r0
 800b216:	b160      	cbz	r0, 800b232 <GUI_ALLOC_AllocZero+0x26>
 800b218:	f7ff fe32 	bl	800ae80 <GUI_ALLOC_LockH>
 800b21c:	ac02      	add	r4, sp, #8
 800b21e:	4b06      	ldr	r3, [pc, #24]	; (800b238 <GUI_ALLOC_AllocZero+0x2c>)
 800b220:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4632      	mov	r2, r6
 800b228:	2100      	movs	r1, #0
 800b22a:	4798      	blx	r3
 800b22c:	4620      	mov	r0, r4
 800b22e:	f7ff fe35 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800b232:	4628      	mov	r0, r5
 800b234:	b002      	add	sp, #8
 800b236:	bd70      	pop	{r4, r5, r6, pc}
 800b238:	20000028 	.word	0x20000028

0800b23c <GUI_CalcColorDist>:
 800b23c:	b2c3      	uxtb	r3, r0
 800b23e:	b2ca      	uxtb	r2, r1
 800b240:	1a9a      	subs	r2, r3, r2
 800b242:	b292      	uxth	r2, r2
 800b244:	b510      	push	{r4, lr}
 800b246:	b214      	sxth	r4, r2
 800b248:	2c00      	cmp	r4, #0
 800b24a:	bfbc      	itt	lt
 800b24c:	4252      	neglt	r2, r2
 800b24e:	b214      	sxthlt	r4, r2
 800b250:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b254:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800b258:	1a9b      	subs	r3, r3, r2
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	0c09      	lsrs	r1, r1, #16
 800b25e:	b21a      	sxth	r2, r3
 800b260:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800b264:	2a00      	cmp	r2, #0
 800b266:	b289      	uxth	r1, r1
 800b268:	b208      	sxth	r0, r1
 800b26a:	bfbc      	itt	lt
 800b26c:	425b      	neglt	r3, r3
 800b26e:	b21a      	sxthlt	r2, r3
 800b270:	2800      	cmp	r0, #0
 800b272:	bfbc      	itt	lt
 800b274:	4249      	neglt	r1, r1
 800b276:	b208      	sxthlt	r0, r1
 800b278:	4352      	muls	r2, r2
 800b27a:	fb04 2204 	mla	r2, r4, r4, r2
 800b27e:	b280      	uxth	r0, r0
 800b280:	fb00 2000 	mla	r0, r0, r0, r2
 800b284:	bd10      	pop	{r4, pc}

0800b286 <GUI_GetBkColor>:
 800b286:	b508      	push	{r3, lr}
 800b288:	f001 f972 	bl	800c570 <LCD_GetBkColorIndex>
 800b28c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b290:	f001 b874 	b.w	800c37c <LCD_Index2Color>

0800b294 <GUI_GetColor>:
 800b294:	b508      	push	{r3, lr}
 800b296:	f001 f973 	bl	800c580 <LCD_GetColorIndex>
 800b29a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b29e:	f001 b86d 	b.w	800c37c <LCD_Index2Color>
	...

0800b2a4 <GUI_GetOrg>:
 800b2a4:	4b04      	ldr	r3, [pc, #16]	; (800b2b8 <GUI_GetOrg+0x14>)
 800b2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2aa:	6003      	str	r3, [r0, #0]
 800b2ac:	4b03      	ldr	r3, [pc, #12]	; (800b2bc <GUI_GetOrg+0x18>)
 800b2ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2b2:	600b      	str	r3, [r1, #0]
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	2001e6c0 	.word	0x2001e6c0
 800b2bc:	2001e6b0 	.word	0x2001e6b0

0800b2c0 <GUI_GetVersionString>:
 800b2c0:	4804      	ldr	r0, [pc, #16]	; (800b2d4 <GUI_GetVersionString+0x14>)
 800b2c2:	2335      	movs	r3, #53	; 0x35
 800b2c4:	7003      	strb	r3, [r0, #0]
 800b2c6:	2334      	movs	r3, #52	; 0x34
 800b2c8:	7083      	strb	r3, [r0, #2]
 800b2ca:	70c3      	strb	r3, [r0, #3]
 800b2cc:	2361      	movs	r3, #97	; 0x61
 800b2ce:	7103      	strb	r3, [r0, #4]
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	20000000 	.word	0x20000000

0800b2d8 <GUI_MergeRect>:
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	b338      	cbz	r0, 800b32c <GUI_MergeRect+0x54>
 800b2dc:	b309      	cbz	r1, 800b322 <GUI_MergeRect+0x4a>
 800b2de:	b30a      	cbz	r2, 800b324 <GUI_MergeRect+0x4c>
 800b2e0:	f9b2 4000 	ldrsh.w	r4, [r2]
 800b2e4:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	bfa8      	it	ge
 800b2ec:	4623      	movge	r3, r4
 800b2ee:	8003      	strh	r3, [r0, #0]
 800b2f0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800b2f4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	bfa8      	it	ge
 800b2fc:	4623      	movge	r3, r4
 800b2fe:	8043      	strh	r3, [r0, #2]
 800b300:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800b304:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800b308:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	bfb8      	it	lt
 800b310:	4623      	movlt	r3, r4
 800b312:	8083      	strh	r3, [r0, #4]
 800b314:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800b318:	4293      	cmp	r3, r2
 800b31a:	bfb8      	it	lt
 800b31c:	4613      	movlt	r3, r2
 800b31e:	80c3      	strh	r3, [r0, #6]
 800b320:	bd10      	pop	{r4, pc}
 800b322:	4611      	mov	r1, r2
 800b324:	680b      	ldr	r3, [r1, #0]
 800b326:	6003      	str	r3, [r0, #0]
 800b328:	684b      	ldr	r3, [r1, #4]
 800b32a:	6043      	str	r3, [r0, #4]
 800b32c:	bd10      	pop	{r4, pc}

0800b32e <GUI_MoveRect>:
 800b32e:	b168      	cbz	r0, 800b34c <GUI_MoveRect+0x1e>
 800b330:	8803      	ldrh	r3, [r0, #0]
 800b332:	b289      	uxth	r1, r1
 800b334:	440b      	add	r3, r1
 800b336:	8003      	strh	r3, [r0, #0]
 800b338:	8883      	ldrh	r3, [r0, #4]
 800b33a:	4419      	add	r1, r3
 800b33c:	8843      	ldrh	r3, [r0, #2]
 800b33e:	8081      	strh	r1, [r0, #4]
 800b340:	b292      	uxth	r2, r2
 800b342:	4413      	add	r3, r2
 800b344:	8043      	strh	r3, [r0, #2]
 800b346:	88c3      	ldrh	r3, [r0, #6]
 800b348:	441a      	add	r2, r3
 800b34a:	80c2      	strh	r2, [r0, #6]
 800b34c:	4770      	bx	lr
	...

0800b350 <GUI_Exec1>:
 800b350:	4b0c      	ldr	r3, [pc, #48]	; (800b384 <GUI_Exec1+0x34>)
 800b352:	b510      	push	{r4, lr}
 800b354:	681c      	ldr	r4, [r3, #0]
 800b356:	b11c      	cbz	r4, 800b360 <GUI_Exec1+0x10>
 800b358:	47a0      	blx	r4
 800b35a:	1c04      	adds	r4, r0, #0
 800b35c:	bf18      	it	ne
 800b35e:	2401      	movne	r4, #1
 800b360:	f004 fcd2 	bl	800fd08 <WM_Exec>
 800b364:	4b08      	ldr	r3, [pc, #32]	; (800b388 <GUI_Exec1+0x38>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2800      	cmp	r0, #0
 800b36a:	bf18      	it	ne
 800b36c:	2401      	movne	r4, #1
 800b36e:	b11b      	cbz	r3, 800b378 <GUI_Exec1+0x28>
 800b370:	4798      	blx	r3
 800b372:	2800      	cmp	r0, #0
 800b374:	bf18      	it	ne
 800b376:	2401      	movne	r4, #1
 800b378:	4b04      	ldr	r3, [pc, #16]	; (800b38c <GUI_Exec1+0x3c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	b103      	cbz	r3, 800b380 <GUI_Exec1+0x30>
 800b37e:	4798      	blx	r3
 800b380:	4620      	mov	r0, r4
 800b382:	bd10      	pop	{r4, pc}
 800b384:	2001e6bc 	.word	0x2001e6bc
 800b388:	2001e6e4 	.word	0x2001e6e4
 800b38c:	2001e6dc 	.word	0x2001e6dc

0800b390 <GUI_Exec>:
 800b390:	b510      	push	{r4, lr}
 800b392:	2400      	movs	r4, #0
 800b394:	f7ff ffdc 	bl	800b350 <GUI_Exec1>
 800b398:	b108      	cbz	r0, 800b39e <GUI_Exec+0xe>
 800b39a:	2401      	movs	r4, #1
 800b39c:	e7fa      	b.n	800b394 <GUI_Exec+0x4>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	bd10      	pop	{r4, pc}
	...

0800b3a4 <GUI_GotoXY>:
 800b3a4:	4b02      	ldr	r3, [pc, #8]	; (800b3b0 <GUI_GotoXY+0xc>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	8458      	strh	r0, [r3, #34]	; 0x22
 800b3aa:	8499      	strh	r1, [r3, #36]	; 0x24
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	4770      	bx	lr
 800b3b0:	20000014 	.word	0x20000014

0800b3b4 <GUI_SetPenSize>:
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <GUI_SetPenSize+0xc>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	7e1a      	ldrb	r2, [r3, #24]
 800b3ba:	7618      	strb	r0, [r3, #24]
 800b3bc:	4610      	mov	r0, r2
 800b3be:	4770      	bx	lr
 800b3c0:	20000014 	.word	0x20000014

0800b3c4 <GUI_RectsIntersect>:
 800b3c4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b3c8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	dc14      	bgt.n	800b3fa <GUI_RectsIntersect+0x36>
 800b3d0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800b3d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	dc0e      	bgt.n	800b3fa <GUI_RectsIntersect+0x36>
 800b3dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b3e0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	dc08      	bgt.n	800b3fa <GUI_RectsIntersect+0x36>
 800b3e8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800b3ec:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	bfcc      	ite	gt
 800b3f4:	2000      	movgt	r0, #0
 800b3f6:	2001      	movle	r0, #1
 800b3f8:	4770      	bx	lr
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	4770      	bx	lr
	...

0800b400 <GUI_SaveContext_W>:
 800b400:	b508      	push	{r3, lr}
 800b402:	4b03      	ldr	r3, [pc, #12]	; (800b410 <GUI_SaveContext_W+0x10>)
 800b404:	2274      	movs	r2, #116	; 0x74
 800b406:	6819      	ldr	r1, [r3, #0]
 800b408:	f007 fe54 	bl	80130b4 <memcpy>
 800b40c:	bd08      	pop	{r3, pc}
 800b40e:	bf00      	nop
 800b410:	20000014 	.word	0x20000014

0800b414 <GUI_RestoreContext>:
 800b414:	b508      	push	{r3, lr}
 800b416:	4b03      	ldr	r3, [pc, #12]	; (800b424 <GUI_RestoreContext+0x10>)
 800b418:	4601      	mov	r1, r0
 800b41a:	2274      	movs	r2, #116	; 0x74
 800b41c:	6818      	ldr	r0, [r3, #0]
 800b41e:	f007 fe49 	bl	80130b4 <memcpy>
 800b422:	bd08      	pop	{r3, pc}
 800b424:	20000014 	.word	0x20000014

0800b428 <GUI_SelectLCD>:
 800b428:	b508      	push	{r3, lr}
 800b42a:	f001 f9b5 	bl	800c798 <LCD_SelectLCD>
 800b42e:	f001 fa1b 	bl	800c868 <LCD_UpdateColorIndices>
 800b432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b436:	f004 bca3 	b.w	800fd80 <WM_Activate>

0800b43a <GUI_SetBkColor>:
 800b43a:	f000 bfe5 	b.w	800c408 <LCD_SetBkColor>

0800b43e <GUI_SetColor>:
 800b43e:	f000 bfe9 	b.w	800c414 <LCD_SetColor>

0800b442 <GUI_SetDrawMode>:
 800b442:	f000 bca5 	b.w	800bd90 <LCD_SetDrawMode>
	...

0800b448 <GUI_SetFont>:
 800b448:	4b03      	ldr	r3, [pc, #12]	; (800b458 <GUI_SetFont+0x10>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	69da      	ldr	r2, [r3, #28]
 800b44e:	b100      	cbz	r0, 800b452 <GUI_SetFont+0xa>
 800b450:	61d8      	str	r0, [r3, #28]
 800b452:	4610      	mov	r0, r2
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	20000014 	.word	0x20000014

0800b45c <GUI_SetLineStyle>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	; (800b468 <GUI_SetLineStyle+0xc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	7e9a      	ldrb	r2, [r3, #26]
 800b462:	7698      	strb	r0, [r3, #26]
 800b464:	4610      	mov	r0, r2
 800b466:	4770      	bx	lr
 800b468:	20000014 	.word	0x20000014

0800b46c <GUI_SetOrg>:
 800b46c:	4b09      	ldr	r3, [pc, #36]	; (800b494 <GUI_SetOrg+0x28>)
 800b46e:	b410      	push	{r4}
 800b470:	8018      	strh	r0, [r3, #0]
 800b472:	4b09      	ldr	r3, [pc, #36]	; (800b498 <GUI_SetOrg+0x2c>)
 800b474:	8019      	strh	r1, [r3, #0]
 800b476:	4b09      	ldr	r3, [pc, #36]	; (800b49c <GUI_SetOrg+0x30>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	460a      	mov	r2, r1
 800b47c:	7c59      	ldrb	r1, [r3, #17]
 800b47e:	4b08      	ldr	r3, [pc, #32]	; (800b4a0 <GUI_SetOrg+0x34>)
 800b480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b484:	68d9      	ldr	r1, [r3, #12]
 800b486:	6a0c      	ldr	r4, [r1, #32]
 800b488:	4601      	mov	r1, r0
 800b48a:	4618      	mov	r0, r3
 800b48c:	4623      	mov	r3, r4
 800b48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b492:	4718      	bx	r3
 800b494:	2001e6c0 	.word	0x2001e6c0
 800b498:	2001e6b0 	.word	0x2001e6b0
 800b49c:	20000014 	.word	0x20000014
 800b4a0:	2001e6e8 	.word	0x2001e6e8

0800b4a4 <GUI_SetTextAlign>:
 800b4a4:	4b03      	ldr	r3, [pc, #12]	; (800b4b4 <GUI_SetTextAlign+0x10>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800b4ac:	8598      	strh	r0, [r3, #44]	; 0x2c
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	20000014 	.word	0x20000014

0800b4b8 <GUI_SetTextMode>:
 800b4b8:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <GUI_SetTextMode+0x10>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800b4c0:	8558      	strh	r0, [r3, #42]	; 0x2a
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20000014 	.word	0x20000014

0800b4cc <GL_SetDefault>:
 800b4cc:	b508      	push	{r3, lr}
 800b4ce:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <GL_SetDefault+0x3c>)
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f000 ff99 	bl	800c408 <LCD_SetBkColor>
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <GL_SetDefault+0x40>)
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f000 ff9b 	bl	800c414 <LCD_SetColor>
 800b4de:	2001      	movs	r0, #1
 800b4e0:	f7ff ff68 	bl	800b3b4 <GUI_SetPenSize>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f7ff ffdd 	bl	800b4a4 <GUI_SetTextAlign>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	f7ff ffe4 	bl	800b4b8 <GUI_SetTextMode>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	f7ff ffa6 	bl	800b442 <GUI_SetDrawMode>
 800b4f6:	4b06      	ldr	r3, [pc, #24]	; (800b510 <GL_SetDefault+0x44>)
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f7ff ffa5 	bl	800b448 <GUI_SetFont>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b504:	f7ff bfaa 	b.w	800b45c <GUI_SetLineStyle>
 800b508:	20000290 	.word	0x20000290
 800b50c:	20000010 	.word	0x20000010
 800b510:	2000000c 	.word	0x2000000c

0800b514 <_InitContext>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	4e1a      	ldr	r6, [pc, #104]	; (800b580 <_InitContext+0x6c>)
 800b518:	4d1a      	ldr	r5, [pc, #104]	; (800b584 <_InitContext+0x70>)
 800b51a:	f106 0384 	add.w	r3, r6, #132	; 0x84
 800b51e:	6703      	str	r3, [r0, #112]	; 0x70
 800b520:	68eb      	ldr	r3, [r5, #12]
 800b522:	1d1a      	adds	r2, r3, #4
 800b524:	63da      	str	r2, [r3, #60]	; 0x3c
 800b526:	f103 0208 	add.w	r2, r3, #8
 800b52a:	639b      	str	r3, [r3, #56]	; 0x38
 800b52c:	641b      	str	r3, [r3, #64]	; 0x40
 800b52e:	6142      	str	r2, [r0, #20]
 800b530:	7c5a      	ldrb	r2, [r3, #17]
 800b532:	4b15      	ldr	r3, [pc, #84]	; (800b588 <_InitContext+0x74>)
 800b534:	4604      	mov	r4, r0
 800b536:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b53a:	68c3      	ldr	r3, [r0, #12]
 800b53c:	f104 0108 	add.w	r1, r4, #8
 800b540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b542:	4798      	blx	r3
 800b544:	4b11      	ldr	r3, [pc, #68]	; (800b58c <_InitContext+0x78>)
 800b546:	6663      	str	r3, [r4, #100]	; 0x64
 800b548:	686b      	ldr	r3, [r5, #4]
 800b54a:	61e3      	str	r3, [r4, #28]
 800b54c:	68eb      	ldr	r3, [r5, #12]
 800b54e:	3308      	adds	r3, #8
 800b550:	6163      	str	r3, [r4, #20]
 800b552:	2301      	movs	r3, #1
 800b554:	7623      	strb	r3, [r4, #24]
 800b556:	76e3      	strb	r3, [r4, #27]
 800b558:	f004 fcf4 	bl	800ff44 <WM_GetDesktopWindow>
 800b55c:	2303      	movs	r3, #3
 800b55e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800b562:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b566:	6323      	str	r3, [r4, #48]	; 0x30
 800b568:	6363      	str	r3, [r4, #52]	; 0x34
 800b56a:	64a0      	str	r0, [r4, #72]	; 0x48
 800b56c:	6830      	ldr	r0, [r6, #0]
 800b56e:	f000 ff4b 	bl	800c408 <LCD_SetBkColor>
 800b572:	68a8      	ldr	r0, [r5, #8]
 800b574:	f000 ff4e 	bl	800c414 <LCD_SetColor>
 800b578:	4b05      	ldr	r3, [pc, #20]	; (800b590 <_InitContext+0x7c>)
 800b57a:	4a06      	ldr	r2, [pc, #24]	; (800b594 <_InitContext+0x80>)
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	20000290 	.word	0x20000290
 800b584:	20000008 	.word	0x20000008
 800b588:	2001e6e8 	.word	0x2001e6e8
 800b58c:	08015eb0 	.word	0x08015eb0
 800b590:	2001e6e0 	.word	0x2001e6e0
 800b594:	08015ec8 	.word	0x08015ec8

0800b598 <_OnExit>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	4d0b      	ldr	r5, [pc, #44]	; (800b5c8 <_OnExit+0x30>)
 800b59c:	4e0b      	ldr	r6, [pc, #44]	; (800b5cc <_OnExit+0x34>)
 800b59e:	2400      	movs	r4, #0
 800b5a0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 800b5a4:	3504      	adds	r5, #4
 800b5a6:	6833      	ldr	r3, [r6, #0]
 800b5a8:	2274      	movs	r2, #116	; 0x74
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	4798      	blx	r3
 800b5b0:	6833      	ldr	r3, [r6, #0]
 800b5b2:	4807      	ldr	r0, [pc, #28]	; (800b5d0 <_OnExit+0x38>)
 800b5b4:	2208      	movs	r2, #8
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4798      	blx	r3
 800b5ba:	4b06      	ldr	r3, [pc, #24]	; (800b5d4 <_OnExit+0x3c>)
 800b5bc:	60dd      	str	r5, [r3, #12]
 800b5be:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <_OnExit+0x40>)
 800b5c0:	701c      	strb	r4, [r3, #0]
 800b5c2:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <_OnExit+0x44>)
 800b5c4:	601c      	str	r4, [r3, #0]
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	20000290 	.word	0x20000290
 800b5cc:	20000028 	.word	0x20000028
 800b5d0:	2001e6e8 	.word	0x2001e6e8
 800b5d4:	20000008 	.word	0x20000008
 800b5d8:	2001e6d0 	.word	0x2001e6d0
 800b5dc:	2001e6ac 	.word	0x2001e6ac

0800b5e0 <GUI_SetDefaultFont>:
 800b5e0:	4b01      	ldr	r3, [pc, #4]	; (800b5e8 <GUI_SetDefaultFont+0x8>)
 800b5e2:	6058      	str	r0, [r3, #4]
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	20000008 	.word	0x20000008

0800b5ec <GUI_ClearRect>:
 800b5ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	2004      	movs	r0, #4
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	461f      	mov	r7, r3
 800b5f8:	460d      	mov	r5, r1
 800b5fa:	f000 fbc9 	bl	800bd90 <LCD_SetDrawMode>
 800b5fe:	4b13      	ldr	r3, [pc, #76]	; (800b64c <GUI_ClearRect+0x60>)
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b606:	4680      	mov	r8, r0
 800b608:	4414      	add	r4, r2
 800b60a:	441d      	add	r5, r3
 800b60c:	4416      	add	r6, r2
 800b60e:	441f      	add	r7, r3
 800b610:	4668      	mov	r0, sp
 800b612:	f8ad 4000 	strh.w	r4, [sp]
 800b616:	f8ad 6004 	strh.w	r6, [sp, #4]
 800b61a:	f8ad 5002 	strh.w	r5, [sp, #2]
 800b61e:	f8ad 7006 	strh.w	r7, [sp, #6]
 800b622:	f004 f9fd 	bl	800fa20 <WM__InitIVRSearch>
 800b626:	b928      	cbnz	r0, 800b634 <GUI_ClearRect+0x48>
 800b628:	4640      	mov	r0, r8
 800b62a:	f000 fbb1 	bl	800bd90 <LCD_SetDrawMode>
 800b62e:	b002      	add	sp, #8
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	463b      	mov	r3, r7
 800b636:	4632      	mov	r2, r6
 800b638:	4629      	mov	r1, r5
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 fc06 	bl	800be4c <LCD_FillRect>
 800b640:	f004 f92c 	bl	800f89c <WM__GetNextIVR>
 800b644:	2800      	cmp	r0, #0
 800b646:	d1f5      	bne.n	800b634 <GUI_ClearRect+0x48>
 800b648:	e7ee      	b.n	800b628 <GUI_ClearRect+0x3c>
 800b64a:	bf00      	nop
 800b64c:	20000008 	.word	0x20000008

0800b650 <GUI_Clear>:
 800b650:	b510      	push	{r4, lr}
 800b652:	2100      	movs	r1, #0
 800b654:	4608      	mov	r0, r1
 800b656:	f7ff fea5 	bl	800b3a4 <GUI_GotoXY>
 800b65a:	4904      	ldr	r1, [pc, #16]	; (800b66c <GUI_Clear+0x1c>)
 800b65c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800b660:	461a      	mov	r2, r3
 800b662:	4608      	mov	r0, r1
 800b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b668:	f7ff bfc0 	b.w	800b5ec <GUI_ClearRect>
 800b66c:	ffffc001 	.word	0xffffc001

0800b670 <GUI__Config>:
 800b670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b672:	4d1f      	ldr	r5, [pc, #124]	; (800b6f0 <GUI__Config+0x80>)
 800b674:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800b678:	b085      	sub	sp, #20
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d136      	bne.n	800b6ec <GUI__Config+0x7c>
 800b67e:	2301      	movs	r3, #1
 800b680:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 800b684:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <GUI__Config+0x84>)
 800b686:	466a      	mov	r2, sp
 800b688:	f103 0708 	add.w	r7, r3, #8
 800b68c:	466e      	mov	r6, sp
 800b68e:	6818      	ldr	r0, [r3, #0]
 800b690:	6859      	ldr	r1, [r3, #4]
 800b692:	4614      	mov	r4, r2
 800b694:	c403      	stmia	r4!, {r0, r1}
 800b696:	3308      	adds	r3, #8
 800b698:	42bb      	cmp	r3, r7
 800b69a:	4622      	mov	r2, r4
 800b69c:	d1f7      	bne.n	800b68e <GUI__Config+0x1e>
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	8899      	ldrh	r1, [r3, #4]
 800b6a2:	799b      	ldrb	r3, [r3, #6]
 800b6a4:	71a3      	strb	r3, [r4, #6]
 800b6a6:	6020      	str	r0, [r4, #0]
 800b6a8:	80a1      	strh	r1, [r4, #4]
 800b6aa:	4c13      	ldr	r4, [pc, #76]	; (800b6f8 <GUI__Config+0x88>)
 800b6ac:	4633      	mov	r3, r6
 800b6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6b2:	f804 2b01 	strb.w	r2, [r4], #1
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	2a00      	cmp	r2, #0
 800b6ba:	d1f8      	bne.n	800b6ae <GUI__Config+0x3e>
 800b6bc:	f7ff fe00 	bl	800b2c0 <GUI_GetVersionString>
 800b6c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	f804 3b01 	strb.w	r3, [r4], #1
 800b6ca:	7803      	ldrb	r3, [r0, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1f7      	bne.n	800b6c0 <GUI__Config+0x50>
 800b6d0:	7053      	strb	r3, [r2, #1]
 800b6d2:	f7fc fdb9 	bl	8008248 <GUI_X_Config>
 800b6d6:	f7fc fe47 	bl	8008368 <LCD_X_Config>
 800b6da:	4b08      	ldr	r3, [pc, #32]	; (800b6fc <GUI__Config+0x8c>)
 800b6dc:	4808      	ldr	r0, [pc, #32]	; (800b700 <GUI__Config+0x90>)
 800b6de:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 800b6e2:	b005      	add	sp, #20
 800b6e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b6e8:	f000 b888 	b.w	800b7fc <GUI__RegisterExit>
 800b6ec:	b005      	add	sp, #20
 800b6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f0:	20000290 	.word	0x20000290
 800b6f4:	08015eb8 	.word	0x08015eb8
 800b6f8:	20000314 	.word	0x20000314
 800b6fc:	0800b599 	.word	0x0800b599
 800b700:	20000328 	.word	0x20000328

0800b704 <GUI_Init>:
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4a33      	ldr	r2, [pc, #204]	; (800b7d8 <GUI_Init+0xd4>)
 800b70c:	4b32      	ldr	r3, [pc, #200]	; (800b7d8 <GUI_Init+0xd4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f023 0301 	bic.w	r3, r3, #1
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	4b31      	ldr	r3, [pc, #196]	; (800b7dc <GUI_Init+0xd8>)
 800b718:	2201      	movs	r2, #1
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	bf00      	nop
 800b71e:	4b2f      	ldr	r3, [pc, #188]	; (800b7dc <GUI_Init+0xd8>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1fb      	bne.n	800b71e <GUI_Init+0x1a>
 800b726:	4b2e      	ldr	r3, [pc, #184]	; (800b7e0 <GUI_Init+0xdc>)
 800b728:	4a2e      	ldr	r2, [pc, #184]	; (800b7e4 <GUI_Init+0xe0>)
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	4b2c      	ldr	r3, [pc, #176]	; (800b7e0 <GUI_Init+0xdc>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a2d      	ldr	r2, [pc, #180]	; (800b7e8 <GUI_Init+0xe4>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d000      	beq.n	800b738 <GUI_Init+0x34>
 800b736:	e7fe      	b.n	800b736 <GUI_Init+0x32>
 800b738:	f7ff ff9a 	bl	800b670 <GUI__Config>
 800b73c:	4b2b      	ldr	r3, [pc, #172]	; (800b7ec <GUI_Init+0xe8>)
 800b73e:	222e      	movs	r2, #46	; 0x2e
 800b740:	701a      	strb	r2, [r3, #0]
 800b742:	f7fd f845 	bl	80087d0 <GUI_X_Init>
 800b746:	482a      	ldr	r0, [pc, #168]	; (800b7f0 <GUI_Init+0xec>)
 800b748:	f7ff fee4 	bl	800b514 <_InitContext>
 800b74c:	f000 fdb6 	bl	800c2bc <emWin_LCD_Init>
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	f000 ffb1 	bl	800c6b8 <LCD_GetXSizeDisplay>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	bf0c      	ite	eq
 800b75c:	2301      	moveq	r3, #1
 800b75e:	2300      	movne	r3, #0
 800b760:	b2dc      	uxtb	r4, r3
 800b762:	f000 ffaf 	bl	800c6c4 <LCD_GetYSizeDisplay>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	bf0c      	ite	eq
 800b76c:	2301      	moveq	r3, #1
 800b76e:	2300      	movne	r3, #0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	4323      	orrs	r3, r4
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d009      	beq.n	800b78e <GUI_Init+0x8a>
 800b77a:	f000 ff8d 	bl	800c698 <LCD_GetXSizeMax>
 800b77e:	4604      	mov	r4, r0
 800b780:	f000 ff8d 	bl	800c69e <LCD_GetYSizeMax>
 800b784:	4603      	mov	r3, r0
 800b786:	4619      	mov	r1, r3
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 ff8f 	bl	800c6ac <LCD_SetDisplaySize>
 800b78e:	2100      	movs	r1, #0
 800b790:	2000      	movs	r0, #0
 800b792:	f7ff fe6b 	bl	800b46c <GUI_SetOrg>
 800b796:	f004 fb5d 	bl	800fe54 <WM_Init>
 800b79a:	4b16      	ldr	r3, [pc, #88]	; (800b7f4 <GUI_Init+0xf0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d012      	beq.n	800b7c8 <GUI_Init+0xc4>
 800b7a2:	e00d      	b.n	800b7c0 <GUI_Init+0xbc>
 800b7a4:	4b13      	ldr	r3, [pc, #76]	; (800b7f4 <GUI_Init+0xf0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <GUI_Init+0xb2>
 800b7ae:	4b11      	ldr	r3, [pc, #68]	; (800b7f4 <GUI_Init+0xf0>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4798      	blx	r3
 800b7b6:	4b0f      	ldr	r3, [pc, #60]	; (800b7f4 <GUI_Init+0xf0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4a0d      	ldr	r2, [pc, #52]	; (800b7f4 <GUI_Init+0xf0>)
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	4b0c      	ldr	r3, [pc, #48]	; (800b7f4 <GUI_Init+0xf0>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1ed      	bne.n	800b7a4 <GUI_Init+0xa0>
 800b7c8:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <GUI_Init+0xf4>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	e0002000 	.word	0xe0002000
 800b7dc:	40023008 	.word	0x40023008
 800b7e0:	40023000 	.word	0x40023000
 800b7e4:	f407a5c2 	.word	0xf407a5c2
 800b7e8:	b5e8b5cd 	.word	0xb5e8b5cd
 800b7ec:	2001e6a0 	.word	0x2001e6a0
 800b7f0:	20000294 	.word	0x20000294
 800b7f4:	2000030c 	.word	0x2000030c
 800b7f8:	2001e6c8 	.word	0x2001e6c8

0800b7fc <GUI__RegisterExit>:
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	4b06      	ldr	r3, [pc, #24]	; (800b820 <GUI__RegisterExit+0x24>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	605a      	str	r2, [r3, #4]
 800b80c:	4a04      	ldr	r2, [pc, #16]	; (800b820 <GUI__RegisterExit+0x24>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	bf00      	nop
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	20000308 	.word	0x20000308

0800b824 <GUI_DEVICE__GetpDriver>:
 800b824:	2801      	cmp	r0, #1
 800b826:	dc09      	bgt.n	800b83c <GUI_DEVICE__GetpDriver+0x18>
 800b828:	4b05      	ldr	r3, [pc, #20]	; (800b840 <GUI_DEVICE__GetpDriver+0x1c>)
 800b82a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b82e:	b120      	cbz	r0, 800b83a <GUI_DEVICE__GetpDriver+0x16>
 800b830:	68c3      	ldr	r3, [r0, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	b11b      	cbz	r3, 800b83e <GUI_DEVICE__GetpDriver+0x1a>
 800b836:	6800      	ldr	r0, [r0, #0]
 800b838:	e7f9      	b.n	800b82e <GUI_DEVICE__GetpDriver+0xa>
 800b83a:	4770      	bx	lr
 800b83c:	2000      	movs	r0, #0
 800b83e:	4770      	bx	lr
 800b840:	2001e6e8 	.word	0x2001e6e8

0800b844 <GUI_DEVICE_Delete>:
 800b844:	f7ff bb08 	b.w	800ae58 <GUI_ALLOC_FreeFixedBlock>

0800b848 <GUI_DEVICE_Create>:
 800b848:	2b01      	cmp	r3, #1
 800b84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84c:	4606      	mov	r6, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	4617      	mov	r7, r2
 800b852:	461c      	mov	r4, r3
 800b854:	dd01      	ble.n	800b85a <GUI_DEVICE_Create+0x12>
 800b856:	2000      	movs	r0, #0
 800b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85a:	201c      	movs	r0, #28
 800b85c:	f7ff fbd4 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 800b860:	2800      	cmp	r0, #0
 800b862:	d0f8      	beq.n	800b856 <GUI_DEVICE_Create+0xe>
 800b864:	b10d      	cbz	r5, 800b86a <GUI_DEVICE_Create+0x22>
 800b866:	6105      	str	r5, [r0, #16]
 800b868:	e009      	b.n	800b87e <GUI_DEVICE_Create+0x36>
 800b86a:	4b09      	ldr	r3, [pc, #36]	; (800b890 <GUI_DEVICE_Create+0x48>)
 800b86c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800b870:	b129      	cbz	r1, 800b87e <GUI_DEVICE_Create+0x36>
 800b872:	680b      	ldr	r3, [r1, #0]
 800b874:	b10b      	cbz	r3, 800b87a <GUI_DEVICE_Create+0x32>
 800b876:	4619      	mov	r1, r3
 800b878:	e7fb      	b.n	800b872 <GUI_DEVICE_Create+0x2a>
 800b87a:	690b      	ldr	r3, [r1, #16]
 800b87c:	6103      	str	r3, [r0, #16]
 800b87e:	2300      	movs	r3, #0
 800b880:	6083      	str	r3, [r0, #8]
 800b882:	6184      	str	r4, [r0, #24]
 800b884:	8287      	strh	r7, [r0, #20]
 800b886:	60c6      	str	r6, [r0, #12]
 800b888:	6003      	str	r3, [r0, #0]
 800b88a:	6043      	str	r3, [r0, #4]
 800b88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b88e:	bf00      	nop
 800b890:	2001e6e8 	.word	0x2001e6e8

0800b894 <GUI_DEVICE_Unlink>:
 800b894:	6981      	ldr	r1, [r0, #24]
 800b896:	4a0a      	ldr	r2, [pc, #40]	; (800b8c0 <GUI_DEVICE_Unlink+0x2c>)
 800b898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b89c:	4298      	cmp	r0, r3
 800b89e:	6803      	ldr	r3, [r0, #0]
 800b8a0:	d104      	bne.n	800b8ac <GUI_DEVICE_Unlink+0x18>
 800b8a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b8a6:	b10b      	cbz	r3, 800b8ac <GUI_DEVICE_Unlink+0x18>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	605a      	str	r2, [r3, #4]
 800b8ac:	6842      	ldr	r2, [r0, #4]
 800b8ae:	b102      	cbz	r2, 800b8b2 <GUI_DEVICE_Unlink+0x1e>
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	6803      	ldr	r3, [r0, #0]
 800b8b4:	b103      	cbz	r3, 800b8b8 <GUI_DEVICE_Unlink+0x24>
 800b8b6:	605a      	str	r2, [r3, #4]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6003      	str	r3, [r0, #0]
 800b8bc:	6043      	str	r3, [r0, #4]
 800b8be:	4770      	bx	lr
 800b8c0:	2001e6e8 	.word	0x2001e6e8

0800b8c4 <GUI_DEVICE_Link>:
 800b8c4:	b530      	push	{r4, r5, lr}
 800b8c6:	b908      	cbnz	r0, 800b8cc <GUI_DEVICE_Link+0x8>
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	bd30      	pop	{r4, r5, pc}
 800b8cc:	6984      	ldr	r4, [r0, #24]
 800b8ce:	2c01      	cmp	r4, #1
 800b8d0:	dcfa      	bgt.n	800b8c8 <GUI_DEVICE_Link+0x4>
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <GUI_DEVICE_Link+0x7c>)
 800b8d4:	781a      	ldrb	r2, [r3, #0]
 800b8d6:	4294      	cmp	r4, r2
 800b8d8:	bfa4      	itt	ge
 800b8da:	1c62      	addge	r2, r4, #1
 800b8dc:	701a      	strbge	r2, [r3, #0]
 800b8de:	4a19      	ldr	r2, [pc, #100]	; (800b944 <GUI_DEVICE_Link+0x80>)
 800b8e0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800b8e4:	4615      	mov	r5, r2
 800b8e6:	b91b      	cbnz	r3, 800b8f0 <GUI_DEVICE_Link+0x2c>
 800b8e8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	bd30      	pop	{r4, r5, pc}
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	b10a      	cbz	r2, 800b8f8 <GUI_DEVICE_Link+0x34>
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	e7fb      	b.n	800b8f0 <GUI_DEVICE_Link+0x2c>
 800b8f8:	68c2      	ldr	r2, [r0, #12]
 800b8fa:	6812      	ldr	r2, [r2, #0]
 800b8fc:	68d9      	ldr	r1, [r3, #12]
 800b8fe:	6809      	ldr	r1, [r1, #0]
 800b900:	4291      	cmp	r1, r2
 800b902:	dd03      	ble.n	800b90c <GUI_DEVICE_Link+0x48>
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1f8      	bne.n	800b8fc <GUI_DEVICE_Link+0x38>
 800b90a:	e7dd      	b.n	800b8c8 <GUI_DEVICE_Link+0x4>
 800b90c:	d109      	bne.n	800b922 <GUI_DEVICE_Link+0x5e>
 800b90e:	8a81      	ldrh	r1, [r0, #20]
 800b910:	2901      	cmp	r1, #1
 800b912:	d106      	bne.n	800b922 <GUI_DEVICE_Link+0x5e>
 800b914:	6819      	ldr	r1, [r3, #0]
 800b916:	b121      	cbz	r1, 800b922 <GUI_DEVICE_Link+0x5e>
 800b918:	460b      	mov	r3, r1
 800b91a:	68c9      	ldr	r1, [r1, #12]
 800b91c:	6809      	ldr	r1, [r1, #0]
 800b91e:	428a      	cmp	r2, r1
 800b920:	ddf8      	ble.n	800b914 <GUI_DEVICE_Link+0x50>
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	b112      	cbz	r2, 800b92c <GUI_DEVICE_Link+0x68>
 800b926:	6010      	str	r0, [r2, #0]
 800b928:	6042      	str	r2, [r0, #4]
 800b92a:	e001      	b.n	800b930 <GUI_DEVICE_Link+0x6c>
 800b92c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 800b930:	6058      	str	r0, [r3, #4]
 800b932:	4298      	cmp	r0, r3
 800b934:	bf08      	it	eq
 800b936:	2300      	moveq	r3, #0
 800b938:	6003      	str	r3, [r0, #0]
 800b93a:	2000      	movs	r0, #0
 800b93c:	bd30      	pop	{r4, r5, pc}
 800b93e:	bf00      	nop
 800b940:	2001e69a 	.word	0x2001e69a
 800b944:	2001e6e8 	.word	0x2001e6e8

0800b948 <GUI_DEVICE_CreateAndLink>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	461d      	mov	r5, r3
 800b94c:	f7ff ff7c 	bl	800b848 <GUI_DEVICE_Create>
 800b950:	4604      	mov	r4, r0
 800b952:	b148      	cbz	r0, 800b968 <GUI_DEVICE_CreateAndLink+0x20>
 800b954:	f7ff ffb6 	bl	800b8c4 <GUI_DEVICE_Link>
 800b958:	68e3      	ldr	r3, [r4, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	b923      	cbnz	r3, 800b968 <GUI_DEVICE_CreateAndLink+0x20>
 800b95e:	4b03      	ldr	r3, [pc, #12]	; (800b96c <GUI_DEVICE_CreateAndLink+0x24>)
 800b960:	3516      	adds	r5, #22
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800b968:	4620      	mov	r0, r4
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	20000014 	.word	0x20000014

0800b970 <GUI_DispString>:
 800b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	4605      	mov	r5, r0
 800b976:	b085      	sub	sp, #20
 800b978:	2800      	cmp	r0, #0
 800b97a:	d07f      	beq.n	800ba7c <GUI_DispString+0x10c>
 800b97c:	4c41      	ldr	r4, [pc, #260]	; (800ba84 <GUI_DispString+0x114>)
 800b97e:	f004 fe3b 	bl	80105f8 <GUI_GetFontDistY>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	4607      	mov	r7, r0
 800b986:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 800b98a:	f004 fe1d 	bl	80105c8 <GUI_GetYAdjust>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800b992:	b286      	uxth	r6, r0
 800b994:	1b9b      	subs	r3, r3, r6
 800b996:	8493      	strh	r3, [r2, #36]	; 0x24
 800b998:	46a1      	mov	r9, r4
 800b99a:	782b      	ldrb	r3, [r5, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d061      	beq.n	800ba64 <GUI_DispString+0xf4>
 800b9a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f004 fe8f 	bl	80106c8 <GUI__GetLineNumChars>
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	4682      	mov	sl, r0
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f004 feb4 	bl	801071c <GUI__GetLineDistX>
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d004      	beq.n	800b9ca <GUI_DispString+0x5a>
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d104      	bne.n	800b9ce <GUI_DispString+0x5e>
 800b9c4:	fb90 f3f3 	sdiv	r3, r0, r3
 800b9c8:	e002      	b.n	800b9d0 <GUI_DispString+0x60>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	e000      	b.n	800b9d0 <GUI_DispString+0x60>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 800b9d2:	1acb      	subs	r3, r1, r3
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	b219      	sxth	r1, r3
 800b9d8:	fa1f fb80 	uxth.w	fp, r0
 800b9dc:	8451      	strh	r1, [r2, #34]	; 0x22
 800b9de:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b9e2:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 800b9e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 800b9ea:	f10b 31ff 	add.w	r1, fp, #4294967295
 800b9ee:	440b      	add	r3, r1
 800b9f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b9f4:	3a01      	subs	r2, #1
 800b9f6:	b2bb      	uxth	r3, r7
 800b9f8:	441a      	add	r2, r3
 800b9fa:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b9fe:	4651      	mov	r1, sl
 800ba00:	aa02      	add	r2, sp, #8
 800ba02:	4628      	mov	r0, r5
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	f004 feb9 	bl	801077c <GUI__DispLine>
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800ba10:	8491      	strh	r1, [r2, #36]	; 0x24
 800ba12:	4628      	mov	r0, r5
 800ba14:	4651      	mov	r1, sl
 800ba16:	f000 f909 	bl	800bc2c <GUI_UC__NumChars2NumBytes>
 800ba1a:	5c2a      	ldrb	r2, [r5, r0]
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	2a0a      	cmp	r2, #10
 800ba20:	eb05 0e00 	add.w	lr, r5, r0
 800ba24:	d001      	beq.n	800ba2a <GUI_DispString+0xba>
 800ba26:	2a0d      	cmp	r2, #13
 800ba28:	d112      	bne.n	800ba50 <GUI_DispString+0xe0>
 800ba2a:	6822      	ldr	r2, [r4, #0]
 800ba2c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800ba2e:	f001 0103 	and.w	r1, r1, #3
 800ba32:	3901      	subs	r1, #1
 800ba34:	2901      	cmp	r1, #1
 800ba36:	bf8a      	itet	hi
 800ba38:	8c11      	ldrhhi	r1, [r2, #32]
 800ba3a:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 800ba3e:	8451      	strhhi	r1, [r2, #34]	; 0x22
 800ba40:	f89e 1000 	ldrb.w	r1, [lr]
 800ba44:	290a      	cmp	r1, #10
 800ba46:	d10a      	bne.n	800ba5e <GUI_DispString+0xee>
 800ba48:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800ba4a:	440b      	add	r3, r1
 800ba4c:	8493      	strh	r3, [r2, #36]	; 0x24
 800ba4e:	e006      	b.n	800ba5e <GUI_DispString+0xee>
 800ba50:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800ba54:	f8d9 3000 	ldr.w	r3, [r9]
 800ba58:	4483      	add	fp, r0
 800ba5a:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 800ba5e:	f89e 3000 	ldrb.w	r3, [lr]
 800ba62:	b943      	cbnz	r3, 800ba76 <GUI_DispString+0x106>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800ba68:	4416      	add	r6, r2
 800ba6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba6c:	849e      	strh	r6, [r3, #36]	; 0x24
 800ba6e:	f022 0203 	bic.w	r2, r2, #3
 800ba72:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ba74:	e002      	b.n	800ba7c <GUI_DispString+0x10c>
 800ba76:	f10e 0501 	add.w	r5, lr, #1
 800ba7a:	e78e      	b.n	800b99a <GUI_DispString+0x2a>
 800ba7c:	b005      	add	sp, #20
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	bf00      	nop
 800ba84:	20000014 	.word	0x20000014

0800ba88 <GUI_DispStringAt>:
 800ba88:	4b02      	ldr	r3, [pc, #8]	; (800ba94 <GUI_DispStringAt+0xc>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	8459      	strh	r1, [r3, #34]	; 0x22
 800ba8e:	849a      	strh	r2, [r3, #36]	; 0x24
 800ba90:	f7ff bf6e 	b.w	800b970 <GUI_DispString>
 800ba94:	20000014 	.word	0x20000014

0800ba98 <GUI_DispStringHCenterAt>:
 800ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9a:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <GUI_DispStringHCenterAt+0x30>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4605      	mov	r5, r0
 800baa0:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 800baa4:	f040 0002 	orr.w	r0, r0, #2
 800baa8:	460e      	mov	r6, r1
 800baaa:	4617      	mov	r7, r2
 800baac:	f7ff fcfa 	bl	800b4a4 <GUI_SetTextAlign>
 800bab0:	463a      	mov	r2, r7
 800bab2:	4604      	mov	r4, r0
 800bab4:	4631      	mov	r1, r6
 800bab6:	4628      	mov	r0, r5
 800bab8:	f7ff ffe6 	bl	800ba88 <GUI_DispStringAt>
 800babc:	4620      	mov	r0, r4
 800babe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bac2:	f7ff bcef 	b.w	800b4a4 <GUI_SetTextAlign>
 800bac6:	bf00      	nop
 800bac8:	20000014 	.word	0x20000014

0800bacc <GUI_StoreKey>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <GUI_StoreKey+0xc>)
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	b902      	cbnz	r2, 800bad4 <GUI_StoreKey+0x8>
 800bad2:	6018      	str	r0, [r3, #0]
 800bad4:	f000 b8c6 	b.w	800bc64 <GUI_SignalEvent>
 800bad8:	20000330 	.word	0x20000330

0800badc <GUI_PollKeyMsg>:
 800badc:	4a09      	ldr	r2, [pc, #36]	; (800bb04 <GUI_PollKeyMsg+0x28>)
 800bade:	6813      	ldr	r3, [r2, #0]
 800bae0:	6851      	ldr	r1, [r2, #4]
 800bae2:	428b      	cmp	r3, r1
 800bae4:	b510      	push	{r4, lr}
 800bae6:	d00b      	beq.n	800bb00 <GUI_PollKeyMsg+0x24>
 800bae8:	4c07      	ldr	r4, [pc, #28]	; (800bb08 <GUI_PollKeyMsg+0x2c>)
 800baea:	42a3      	cmp	r3, r4
 800baec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800baf0:	bf14      	ite	ne
 800baf2:	3308      	addne	r3, #8
 800baf4:	3b50      	subeq	r3, #80	; 0x50
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	f004 fa8c 	bl	8010014 <WM_OnKey>
 800bafc:	2001      	movs	r0, #1
 800bafe:	bd10      	pop	{r4, pc}
 800bb00:	2000      	movs	r0, #0
 800bb02:	bd10      	pop	{r4, pc}
 800bb04:	20000018 	.word	0x20000018
 800bb08:	20000384 	.word	0x20000384

0800bb0c <GUI_TOUCH_SetOrientation>:
 800bb0c:	4b01      	ldr	r3, [pc, #4]	; (800bb14 <GUI_TOUCH_SetOrientation+0x8>)
 800bb0e:	6018      	str	r0, [r3, #0]
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000390 	.word	0x20000390

0800bb18 <GUI_TOUCH_Calibrate>:
 800bb18:	b530      	push	{r4, r5, lr}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	2801      	cmp	r0, #1
 800bb1e:	9d08      	ldr	r5, [sp, #32]
 800bb20:	d84d      	bhi.n	800bbbe <GUI_TOUCH_Calibrate+0xa6>
 800bb22:	4c29      	ldr	r4, [pc, #164]	; (800bbc8 <GUI_TOUCH_Calibrate+0xb0>)
 800bb24:	d010      	beq.n	800bb48 <GUI_TOUCH_Calibrate+0x30>
 800bb26:	6122      	str	r2, [r4, #16]
 800bb28:	6822      	ldr	r2, [r4, #0]
 800bb2a:	60e1      	str	r1, [r4, #12]
 800bb2c:	f002 0106 	and.w	r1, r2, #6
 800bb30:	2906      	cmp	r1, #6
 800bb32:	d003      	beq.n	800bb3c <GUI_TOUCH_Calibrate+0x24>
 800bb34:	f002 0205 	and.w	r2, r2, #5
 800bb38:	2a01      	cmp	r2, #1
 800bb3a:	d102      	bne.n	800bb42 <GUI_TOUCH_Calibrate+0x2a>
 800bb3c:	6165      	str	r5, [r4, #20]
 800bb3e:	61a3      	str	r3, [r4, #24]
 800bb40:	e012      	b.n	800bb68 <GUI_TOUCH_Calibrate+0x50>
 800bb42:	6163      	str	r3, [r4, #20]
 800bb44:	61a5      	str	r5, [r4, #24]
 800bb46:	e00f      	b.n	800bb68 <GUI_TOUCH_Calibrate+0x50>
 800bb48:	6222      	str	r2, [r4, #32]
 800bb4a:	6822      	ldr	r2, [r4, #0]
 800bb4c:	61e1      	str	r1, [r4, #28]
 800bb4e:	f002 0105 	and.w	r1, r2, #5
 800bb52:	2905      	cmp	r1, #5
 800bb54:	d003      	beq.n	800bb5e <GUI_TOUCH_Calibrate+0x46>
 800bb56:	f002 0206 	and.w	r2, r2, #6
 800bb5a:	2a02      	cmp	r2, #2
 800bb5c:	d102      	bne.n	800bb64 <GUI_TOUCH_Calibrate+0x4c>
 800bb5e:	6265      	str	r5, [r4, #36]	; 0x24
 800bb60:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb62:	e001      	b.n	800bb68 <GUI_TOUCH_Calibrate+0x50>
 800bb64:	6263      	str	r3, [r4, #36]	; 0x24
 800bb66:	62a5      	str	r5, [r4, #40]	; 0x28
 800bb68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800bb6c:	4103      	asrs	r3, r0
 800bb6e:	07db      	lsls	r3, r3, #31
 800bb70:	bf42      	ittt	mi
 800bb72:	4b15      	ldrmi	r3, [pc, #84]	; (800bbc8 <GUI_TOUCH_Calibrate+0xb0>)
 800bb74:	2200      	movmi	r2, #0
 800bb76:	f883 202c 	strbmi.w	r2, [r3, #44]	; 0x2c
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	fa03 f000 	lsl.w	r0, r3, r0
 800bb80:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800bb84:	4318      	orrs	r0, r3
 800bb86:	b2c0      	uxtb	r0, r0
 800bb88:	2803      	cmp	r0, #3
 800bb8a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 800bb8e:	d118      	bne.n	800bbc2 <GUI_TOUCH_Calibrate+0xaa>
 800bb90:	4c0e      	ldr	r4, [pc, #56]	; (800bbcc <GUI_TOUCH_Calibrate+0xb4>)
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	7c58      	ldrb	r0, [r3, #17]
 800bb96:	f000 fd1b 	bl	800c5d0 <LCD_GetXSizeEx>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	7c58      	ldrb	r0, [r3, #17]
 800bba0:	f000 fd19 	bl	800c5d6 <LCD_GetYSizeEx>
 800bba4:	490a      	ldr	r1, [pc, #40]	; (800bbd0 <GUI_TOUCH_Calibrate+0xb8>)
 800bba6:	9002      	str	r0, [sp, #8]
 800bba8:	9100      	str	r1, [sp, #0]
 800bbaa:	f1a1 0310 	sub.w	r3, r1, #16
 800bbae:	f1a1 0208 	sub.w	r2, r1, #8
 800bbb2:	9501      	str	r5, [sp, #4]
 800bbb4:	3918      	subs	r1, #24
 800bbb6:	2002      	movs	r0, #2
 800bbb8:	f004 ffbc 	bl	8010b34 <GUI_TOUCH_CalcCoefficients>
 800bbbc:	e002      	b.n	800bbc4 <GUI_TOUCH_Calibrate+0xac>
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e000      	b.n	800bbc4 <GUI_TOUCH_Calibrate+0xac>
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	b005      	add	sp, #20
 800bbc6:	bd30      	pop	{r4, r5, pc}
 800bbc8:	20000390 	.word	0x20000390
 800bbcc:	20000014 	.word	0x20000014
 800bbd0:	200003b4 	.word	0x200003b4

0800bbd4 <GUI_Delay>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	f7fc fdd4 	bl	8008784 <GUI_X_GetTime>
 800bbdc:	4e08      	ldr	r6, [pc, #32]	; (800bc00 <GUI_Delay+0x2c>)
 800bbde:	4404      	add	r4, r0
 800bbe0:	f7fc fdd0 	bl	8008784 <GUI_X_GetTime>
 800bbe4:	1a25      	subs	r5, r4, r0
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	dd08      	ble.n	800bbfc <GUI_Delay+0x28>
 800bbea:	f7ff fbd1 	bl	800b390 <GUI_Exec>
 800bbee:	6830      	ldr	r0, [r6, #0]
 800bbf0:	42a8      	cmp	r0, r5
 800bbf2:	bfa8      	it	ge
 800bbf4:	4628      	movge	r0, r5
 800bbf6:	f7fc fdd1 	bl	800879c <GUI_X_Delay>
 800bbfa:	e7f1      	b.n	800bbe0 <GUI_Delay+0xc>
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000020 	.word	0x20000020

0800bc04 <GUI_UC__GetCharCodeInc>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	4e08      	ldr	r6, [pc, #32]	; (800bc28 <GUI_UC__GetCharCodeInc+0x24>)
 800bc08:	6804      	ldr	r4, [r0, #0]
 800bc0a:	6833      	ldr	r3, [r6, #0]
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4620      	mov	r0, r4
 800bc12:	4798      	blx	r3
 800bc14:	6833      	ldr	r3, [r6, #0]
 800bc16:	4607      	mov	r7, r0
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	4798      	blx	r3
 800bc1e:	4420      	add	r0, r4
 800bc20:	6028      	str	r0, [r5, #0]
 800bc22:	4638      	mov	r0, r7
 800bc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc26:	bf00      	nop
 800bc28:	2001e6e0 	.word	0x2001e6e0

0800bc2c <GUI_UC__NumChars2NumBytes>:
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	4f07      	ldr	r7, [pc, #28]	; (800bc4c <GUI_UC__NumChars2NumBytes+0x20>)
 800bc30:	4606      	mov	r6, r0
 800bc32:	460d      	mov	r5, r1
 800bc34:	2400      	movs	r4, #0
 800bc36:	b13d      	cbz	r5, 800bc48 <GUI_UC__NumChars2NumBytes+0x1c>
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	4798      	blx	r3
 800bc40:	3d01      	subs	r5, #1
 800bc42:	4406      	add	r6, r0
 800bc44:	4404      	add	r4, r0
 800bc46:	e7f6      	b.n	800bc36 <GUI_UC__NumChars2NumBytes+0xa>
 800bc48:	4620      	mov	r0, r4
 800bc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc4c:	2001e6e0 	.word	0x2001e6e0

0800bc50 <_GetCharCode>:
 800bc50:	7800      	ldrb	r0, [r0, #0]
 800bc52:	4770      	bx	lr

0800bc54 <_GetCharSize>:
 800bc54:	2001      	movs	r0, #1
 800bc56:	4770      	bx	lr

0800bc58 <_CalcSizeOfChar>:
 800bc58:	2001      	movs	r0, #1
 800bc5a:	4770      	bx	lr

0800bc5c <_Encode>:
 800bc5c:	7001      	strb	r1, [r0, #0]
 800bc5e:	2001      	movs	r0, #1
 800bc60:	4770      	bx	lr
	...

0800bc64 <GUI_SignalEvent>:
 800bc64:	4b02      	ldr	r3, [pc, #8]	; (800bc70 <GUI_SignalEvent+0xc>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	b103      	cbz	r3, 800bc6c <GUI_SignalEvent+0x8>
 800bc6a:	4718      	bx	r3
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	200003c0 	.word	0x200003c0

0800bc74 <GUI__IntersectRect>:
 800bc74:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bc78:	f9b0 2000 	ldrsh.w	r2, [r0]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	bfb8      	it	lt
 800bc80:	8003      	strhlt	r3, [r0, #0]
 800bc82:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bc86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	bfb8      	it	lt
 800bc8e:	8043      	strhlt	r3, [r0, #2]
 800bc90:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800bc94:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	bfc8      	it	gt
 800bc9c:	8083      	strhgt	r3, [r0, #4]
 800bc9e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800bca2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	bfc8      	it	gt
 800bcaa:	80c3      	strhgt	r3, [r0, #6]
 800bcac:	4770      	bx	lr

0800bcae <GUI__IntersectRects>:
 800bcae:	b570      	push	{r4, r5, r6, lr}
 800bcb0:	f9b1 3000 	ldrsh.w	r3, [r1]
 800bcb4:	f9b2 5000 	ldrsh.w	r5, [r2]
 800bcb8:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	bfb8      	it	lt
 800bcc0:	461d      	movlt	r5, r3
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800bcc8:	8005      	strh	r5, [r0, #0]
 800bcca:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800bcce:	4283      	cmp	r3, r0
 800bcd0:	bfb8      	it	lt
 800bcd2:	4603      	movlt	r3, r0
 800bcd4:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 800bcd8:	8073      	strh	r3, [r6, #2]
 800bcda:	4284      	cmp	r4, r0
 800bcdc:	bfa8      	it	ge
 800bcde:	4604      	movge	r4, r0
 800bce0:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800bce4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800bce8:	80b4      	strh	r4, [r6, #4]
 800bcea:	4282      	cmp	r2, r0
 800bcec:	bfa8      	it	ge
 800bcee:	4602      	movge	r2, r0
 800bcf0:	42a5      	cmp	r5, r4
 800bcf2:	80f2      	strh	r2, [r6, #6]
 800bcf4:	dc04      	bgt.n	800bd00 <GUI__IntersectRects+0x52>
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	bfcc      	ite	gt
 800bcfa:	2000      	movgt	r0, #0
 800bcfc:	2001      	movle	r0, #1
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	2000      	movs	r0, #0
 800bd02:	bd70      	pop	{r4, r5, r6, pc}

0800bd04 <GUI__memset16>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	0784      	lsls	r4, r0, #30
 800bd08:	bf42      	ittt	mi
 800bd0a:	f102 32ff 	addmi.w	r2, r2, #4294967295
 800bd0e:	8001      	strhmi	r1, [r0, #0]
 800bd10:	3002      	addmi	r0, #2
 800bd12:	0854      	lsrs	r4, r2, #1
 800bd14:	d024      	beq.n	800bd60 <GUI__memset16+0x5c>
 800bd16:	2c03      	cmp	r4, #3
 800bd18:	4623      	mov	r3, r4
 800bd1a:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 800bd1e:	d802      	bhi.n	800bd26 <GUI__memset16+0x22>
 800bd20:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800bd24:	e017      	b.n	800bd56 <GUI__memset16+0x52>
 800bd26:	f100 0310 	add.w	r3, r0, #16
 800bd2a:	4626      	mov	r6, r4
 800bd2c:	3e04      	subs	r6, #4
 800bd2e:	2e03      	cmp	r6, #3
 800bd30:	f843 5c10 	str.w	r5, [r3, #-16]
 800bd34:	f843 5c0c 	str.w	r5, [r3, #-12]
 800bd38:	f843 5c08 	str.w	r5, [r3, #-8]
 800bd3c:	f843 5c04 	str.w	r5, [r3, #-4]
 800bd40:	f103 0310 	add.w	r3, r3, #16
 800bd44:	dcf2      	bgt.n	800bd2c <GUI__memset16+0x28>
 800bd46:	3c04      	subs	r4, #4
 800bd48:	08a3      	lsrs	r3, r4, #2
 800bd4a:	1c5e      	adds	r6, r3, #1
 800bd4c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800bd50:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 800bd54:	e7e4      	b.n	800bd20 <GUI__memset16+0x1c>
 800bd56:	4298      	cmp	r0, r3
 800bd58:	d002      	beq.n	800bd60 <GUI__memset16+0x5c>
 800bd5a:	f840 5b04 	str.w	r5, [r0], #4
 800bd5e:	e7fa      	b.n	800bd56 <GUI__memset16+0x52>
 800bd60:	07d3      	lsls	r3, r2, #31
 800bd62:	bf48      	it	mi
 800bd64:	8001      	strhmi	r1, [r0, #0]
 800bd66:	bd70      	pop	{r4, r5, r6, pc}

0800bd68 <_SetDrawMode>:
 800bd68:	b570      	push	{r4, r5, r6, lr}
 800bd6a:	4b08      	ldr	r3, [pc, #32]	; (800bd8c <_SetDrawMode+0x24>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	7c1a      	ldrb	r2, [r3, #16]
 800bd70:	ea82 0100 	eor.w	r1, r2, r0
 800bd74:	0749      	lsls	r1, r1, #29
 800bd76:	d505      	bpl.n	800bd84 <_SetDrawMode+0x1c>
 800bd78:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800bd7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bd7c:	6825      	ldr	r5, [r4, #0]
 800bd7e:	680e      	ldr	r6, [r1, #0]
 800bd80:	6026      	str	r6, [r4, #0]
 800bd82:	600d      	str	r5, [r1, #0]
 800bd84:	7418      	strb	r0, [r3, #16]
 800bd86:	4610      	mov	r0, r2
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000014 	.word	0x20000014

0800bd90 <LCD_SetDrawMode>:
 800bd90:	4b01      	ldr	r3, [pc, #4]	; (800bd98 <LCD_SetDrawMode+0x8>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	4718      	bx	r3
 800bd98:	2000002c 	.word	0x2000002c

0800bd9c <LCD_DrawPixel>:
 800bd9c:	4b15      	ldr	r3, [pc, #84]	; (800bdf4 <LCD_DrawPixel+0x58>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	460a      	mov	r2, r1
 800bda2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800bda6:	4291      	cmp	r1, r2
 800bda8:	b430      	push	{r4, r5}
 800bdaa:	4604      	mov	r4, r0
 800bdac:	dc20      	bgt.n	800bdf0 <LCD_DrawPixel+0x54>
 800bdae:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800bdb2:	428a      	cmp	r2, r1
 800bdb4:	dc1c      	bgt.n	800bdf0 <LCD_DrawPixel+0x54>
 800bdb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800bdba:	4281      	cmp	r1, r0
 800bdbc:	dc18      	bgt.n	800bdf0 <LCD_DrawPixel+0x54>
 800bdbe:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800bdc2:	4288      	cmp	r0, r1
 800bdc4:	dc14      	bgt.n	800bdf0 <LCD_DrawPixel+0x54>
 800bdc6:	7c19      	ldrb	r1, [r3, #16]
 800bdc8:	7c58      	ldrb	r0, [r3, #17]
 800bdca:	f011 0f01 	tst.w	r1, #1
 800bdce:	490a      	ldr	r1, [pc, #40]	; (800bdf8 <LCD_DrawPixel+0x5c>)
 800bdd0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800bdd4:	d004      	beq.n	800bde0 <LCD_DrawPixel+0x44>
 800bdd6:	68c3      	ldr	r3, [r0, #12]
 800bdd8:	4621      	mov	r1, r4
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	bc30      	pop	{r4, r5}
 800bdde:	4718      	bx	r3
 800bde0:	68c1      	ldr	r1, [r0, #12]
 800bde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde4:	698d      	ldr	r5, [r1, #24]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4621      	mov	r1, r4
 800bdea:	46ac      	mov	ip, r5
 800bdec:	bc30      	pop	{r4, r5}
 800bdee:	4760      	bx	ip
 800bdf0:	bc30      	pop	{r4, r5}
 800bdf2:	4770      	bx	lr
 800bdf4:	20000014 	.word	0x20000014
 800bdf8:	2001e6e8 	.word	0x2001e6e8

0800bdfc <LCD_DrawHLine>:
 800bdfc:	4b11      	ldr	r3, [pc, #68]	; (800be44 <LCD_DrawHLine+0x48>)
 800bdfe:	b430      	push	{r4, r5}
 800be00:	681c      	ldr	r4, [r3, #0]
 800be02:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800be06:	428b      	cmp	r3, r1
 800be08:	460d      	mov	r5, r1
 800be0a:	dc19      	bgt.n	800be40 <LCD_DrawHLine+0x44>
 800be0c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800be10:	4299      	cmp	r1, r3
 800be12:	dc15      	bgt.n	800be40 <LCD_DrawHLine+0x44>
 800be14:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800be18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1c:	4281      	cmp	r1, r0
 800be1e:	bfb8      	it	lt
 800be20:	4601      	movlt	r1, r0
 800be22:	4293      	cmp	r3, r2
 800be24:	bfa8      	it	ge
 800be26:	4613      	movge	r3, r2
 800be28:	4299      	cmp	r1, r3
 800be2a:	dc09      	bgt.n	800be40 <LCD_DrawHLine+0x44>
 800be2c:	7c60      	ldrb	r0, [r4, #17]
 800be2e:	4a06      	ldr	r2, [pc, #24]	; (800be48 <LCD_DrawHLine+0x4c>)
 800be30:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800be34:	68c2      	ldr	r2, [r0, #12]
 800be36:	6894      	ldr	r4, [r2, #8]
 800be38:	462a      	mov	r2, r5
 800be3a:	46a4      	mov	ip, r4
 800be3c:	bc30      	pop	{r4, r5}
 800be3e:	4760      	bx	ip
 800be40:	bc30      	pop	{r4, r5}
 800be42:	4770      	bx	lr
 800be44:	20000014 	.word	0x20000014
 800be48:	2001e6e8 	.word	0x2001e6e8

0800be4c <LCD_FillRect>:
 800be4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be4e:	4c13      	ldr	r4, [pc, #76]	; (800be9c <LCD_FillRect+0x50>)
 800be50:	6824      	ldr	r4, [r4, #0]
 800be52:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 800be56:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800be5a:	4285      	cmp	r5, r0
 800be5c:	bfb8      	it	lt
 800be5e:	4605      	movlt	r5, r0
 800be60:	4296      	cmp	r6, r2
 800be62:	bfa8      	it	ge
 800be64:	4616      	movge	r6, r2
 800be66:	42ae      	cmp	r6, r5
 800be68:	db15      	blt.n	800be96 <LCD_FillRect+0x4a>
 800be6a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800be6e:	428a      	cmp	r2, r1
 800be70:	bfb8      	it	lt
 800be72:	460a      	movlt	r2, r1
 800be74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be78:	428b      	cmp	r3, r1
 800be7a:	bfa8      	it	ge
 800be7c:	460b      	movge	r3, r1
 800be7e:	429a      	cmp	r2, r3
 800be80:	dc09      	bgt.n	800be96 <LCD_FillRect+0x4a>
 800be82:	7c60      	ldrb	r0, [r4, #17]
 800be84:	4906      	ldr	r1, [pc, #24]	; (800bea0 <LCD_FillRect+0x54>)
 800be86:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800be8a:	68c1      	ldr	r1, [r0, #12]
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	690c      	ldr	r4, [r1, #16]
 800be90:	4633      	mov	r3, r6
 800be92:	4629      	mov	r1, r5
 800be94:	47a0      	blx	r4
 800be96:	b002      	add	sp, #8
 800be98:	bd70      	pop	{r4, r5, r6, pc}
 800be9a:	bf00      	nop
 800be9c:	20000014 	.word	0x20000014
 800bea0:	2001e6e8 	.word	0x2001e6e8

0800bea4 <LCD__DrawBitmap_1bpp>:
 800bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	b08f      	sub	sp, #60	; 0x3c
 800beaa:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800c078 <LCD__DrawBitmap_1bpp+0x1d4>
 800beae:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800beb0:	9502      	str	r5, [sp, #8]
 800beb2:	f8de e000 	ldr.w	lr, [lr]
 800beb6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800beb8:	9508      	str	r5, [sp, #32]
 800beba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bebc:	9503      	str	r5, [sp, #12]
 800bebe:	9007      	str	r0, [sp, #28]
 800bec0:	460c      	mov	r4, r1
 800bec2:	4617      	mov	r7, r2
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800beca:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800becc:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800bed0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800bed2:	f1be 0f00 	cmp.w	lr, #0
 800bed6:	d002      	beq.n	800bede <LCD__DrawBitmap_1bpp+0x3a>
 800bed8:	f8de 4000 	ldr.w	r4, [lr]
 800bedc:	e054      	b.n	800bf88 <LCD__DrawBitmap_1bpp+0xe4>
 800bede:	9b02      	ldr	r3, [sp, #8]
 800bee0:	9a08      	ldr	r2, [sp, #32]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d154      	bne.n	800bf92 <LCD__DrawBitmap_1bpp+0xee>
 800bee8:	4b61      	ldr	r3, [pc, #388]	; (800c070 <LCD__DrawBitmap_1bpp+0x1cc>)
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800bef0:	1a53      	subs	r3, r2, r1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dd0a      	ble.n	800bf0c <LCD__DrawBitmap_1bpp+0x68>
 800bef6:	9901      	ldr	r1, [sp, #4]
 800bef8:	ebc3 0e01 	rsb	lr, r3, r1
 800befc:	f1be 0f00 	cmp.w	lr, #0
 800bf00:	f340 80b2 	ble.w	800c068 <LCD__DrawBitmap_1bpp+0x1c4>
 800bf04:	9903      	ldr	r1, [sp, #12]
 800bf06:	fb01 6603 	mla	r6, r1, r3, r6
 800bf0a:	e002      	b.n	800bf12 <LCD__DrawBitmap_1bpp+0x6e>
 800bf0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bf10:	460a      	mov	r2, r1
 800bf12:	9b01      	ldr	r3, [sp, #4]
 800bf14:	441c      	add	r4, r3
 800bf16:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800bf1a:	3c01      	subs	r4, #1
 800bf1c:	1ae4      	subs	r4, r4, r3
 800bf1e:	2c00      	cmp	r4, #0
 800bf20:	dd05      	ble.n	800bf2e <LCD__DrawBitmap_1bpp+0x8a>
 800bf22:	ebc4 0e0e 	rsb	lr, r4, lr
 800bf26:	f1be 0f00 	cmp.w	lr, #0
 800bf2a:	f340 809d 	ble.w	800c068 <LCD__DrawBitmap_1bpp+0x1c4>
 800bf2e:	9b07      	ldr	r3, [sp, #28]
 800bf30:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800bf34:	443b      	add	r3, r7
 800bf36:	3b01      	subs	r3, #1
 800bf38:	1a5b      	subs	r3, r3, r1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bfc8      	it	gt
 800bf3e:	1aff      	subgt	r7, r7, r3
 800bf40:	9b07      	ldr	r3, [sp, #28]
 800bf42:	1b59      	subs	r1, r3, r5
 800bf44:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	da09      	bge.n	800bf60 <LCD__DrawBitmap_1bpp+0xbc>
 800bf4c:	1a5b      	subs	r3, r3, r1
 800bf4e:	441d      	add	r5, r3
 800bf50:	1aff      	subs	r7, r7, r3
 800bf52:	f023 0307 	bic.w	r3, r3, #7
 800bf56:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 800bf5a:	4419      	add	r1, r3
 800bf5c:	f005 0507 	and.w	r5, r5, #7
 800bf60:	2f00      	cmp	r7, #0
 800bf62:	f340 8081 	ble.w	800c068 <LCD__DrawBitmap_1bpp+0x1c4>
 800bf66:	7c40      	ldrb	r0, [r0, #17]
 800bf68:	4b42      	ldr	r3, [pc, #264]	; (800c074 <LCD__DrawBitmap_1bpp+0x1d0>)
 800bf6a:	9c03      	ldr	r4, [sp, #12]
 800bf6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800bf70:	68c3      	ldr	r3, [r0, #12]
 800bf72:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 800bf76:	951c      	str	r5, [sp, #112]	; 0x70
 800bf78:	961b      	str	r6, [sp, #108]	; 0x6c
 800bf7a:	941a      	str	r4, [sp, #104]	; 0x68
 800bf7c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800bf80:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800bf84:	685c      	ldr	r4, [r3, #4]
 800bf86:	463b      	mov	r3, r7
 800bf88:	46a4      	mov	ip, r4
 800bf8a:	b00f      	add	sp, #60	; 0x3c
 800bf8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf90:	4760      	bx	ip
 800bf92:	f1ca 0308 	rsb	r3, sl, #8
 800bf96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf98:	9b02      	ldr	r3, [sp, #8]
 800bf9a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800c070 <LCD__DrawBitmap_1bpp+0x1cc>
 800bf9e:	f8cd e014 	str.w	lr, [sp, #20]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	4675      	mov	r5, lr
 800bfa6:	930d      	str	r3, [sp, #52]	; 0x34
 800bfa8:	9b05      	ldr	r3, [sp, #20]
 800bfaa:	9a01      	ldr	r2, [sp, #4]
 800bfac:	4293      	cmp	r3, r2
 800bfae:	da5b      	bge.n	800c068 <LCD__DrawBitmap_1bpp+0x1c4>
 800bfb0:	9b08      	ldr	r3, [sp, #32]
 800bfb2:	18e3      	adds	r3, r4, r3
 800bfb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	930a      	str	r3, [sp, #40]	; 0x28
 800bfba:	f8d9 3000 	ldr.w	r3, [r9]
 800bfbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800bfc4:	428a      	cmp	r2, r1
 800bfc6:	dc48      	bgt.n	800c05a <LCD__DrawBitmap_1bpp+0x1b6>
 800bfc8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bfcc:	429c      	cmp	r4, r3
 800bfce:	dc44      	bgt.n	800c05a <LCD__DrawBitmap_1bpp+0x1b6>
 800bfd0:	9b07      	ldr	r3, [sp, #28]
 800bfd2:	9606      	str	r6, [sp, #24]
 800bfd4:	f04f 0800 	mov.w	r8, #0
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	f8cd 8010 	str.w	r8, [sp, #16]
 800bfde:	9b04      	ldr	r3, [sp, #16]
 800bfe0:	42bb      	cmp	r3, r7
 800bfe2:	da3a      	bge.n	800c05a <LCD__DrawBitmap_1bpp+0x1b6>
 800bfe4:	f1b8 0f00 	cmp.w	r8, #0
 800bfe8:	d105      	bne.n	800bff6 <LCD__DrawBitmap_1bpp+0x152>
 800bfea:	9b06      	ldr	r3, [sp, #24]
 800bfec:	781d      	ldrb	r5, [r3, #0]
 800bfee:	3301      	adds	r3, #1
 800bff0:	9306      	str	r3, [sp, #24]
 800bff2:	f04f 0808 	mov.w	r8, #8
 800bff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bff8:	fa45 f303 	asr.w	r3, r5, r3
 800bffc:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c000:	fa05 f50a 	lsl.w	r5, r5, sl
 800c004:	b2ed      	uxtb	r5, r5
 800c006:	ebca 0808 	rsb	r8, sl, r8
 800c00a:	d104      	bne.n	800c016 <LCD__DrawBitmap_1bpp+0x172>
 800c00c:	f8d9 2000 	ldr.w	r2, [r9]
 800c010:	7c12      	ldrb	r2, [r2, #16]
 800c012:	0792      	lsls	r2, r2, #30
 800c014:	d419      	bmi.n	800c04a <LCD__DrawBitmap_1bpp+0x1a6>
 800c016:	f8d9 2000 	ldr.w	r2, [r9]
 800c01a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c01c:	6810      	ldr	r0, [r2, #0]
 800c01e:	900c      	str	r0, [sp, #48]	; 0x30
 800c020:	f1bb 0f00 	cmp.w	fp, #0
 800c024:	d002      	beq.n	800c02c <LCD__DrawBitmap_1bpp+0x188>
 800c026:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800c02a:	e000      	b.n	800c02e <LCD__DrawBitmap_1bpp+0x18a>
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	9900      	ldr	r1, [sp, #0]
 800c032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c036:	9800      	ldr	r0, [sp, #0]
 800c038:	440a      	add	r2, r1
 800c03a:	4621      	mov	r1, r4
 800c03c:	f7ff ff06 	bl	800be4c <LCD_FillRect>
 800c040:	f8d9 3000 	ldr.w	r3, [r9]
 800c044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	9b04      	ldr	r3, [sp, #16]
 800c04c:	9a02      	ldr	r2, [sp, #8]
 800c04e:	3301      	adds	r3, #1
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	9b00      	ldr	r3, [sp, #0]
 800c054:	4413      	add	r3, r2
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	e7c1      	b.n	800bfde <LCD__DrawBitmap_1bpp+0x13a>
 800c05a:	9b05      	ldr	r3, [sp, #20]
 800c05c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c05e:	3301      	adds	r3, #1
 800c060:	9305      	str	r3, [sp, #20]
 800c062:	9b03      	ldr	r3, [sp, #12]
 800c064:	441e      	add	r6, r3
 800c066:	e79f      	b.n	800bfa8 <LCD__DrawBitmap_1bpp+0x104>
 800c068:	b00f      	add	sp, #60	; 0x3c
 800c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06e:	bf00      	nop
 800c070:	20000014 	.word	0x20000014
 800c074:	2001e6e8 	.word	0x2001e6e8
 800c078:	2001e6a4 	.word	0x2001e6a4

0800c07c <LCD_DrawBitmap>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	b08f      	sub	sp, #60	; 0x3c
 800c082:	f8df e218 	ldr.w	lr, [pc, #536]	; 800c29c <LCD_DrawBitmap+0x220>
 800c086:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c088:	9402      	str	r4, [sp, #8]
 800c08a:	f8de e000 	ldr.w	lr, [lr]
 800c08e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c090:	9408      	str	r4, [sp, #32]
 800c092:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c094:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800c096:	9403      	str	r4, [sp, #12]
 800c098:	4605      	mov	r5, r0
 800c09a:	9100      	str	r1, [sp, #0]
 800c09c:	4690      	mov	r8, r2
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c0a2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c0a4:	9604      	str	r6, [sp, #16]
 800c0a6:	f1be 0f00 	cmp.w	lr, #0
 800c0aa:	d002      	beq.n	800c0b2 <LCD_DrawBitmap+0x36>
 800c0ac:	f8de 4000 	ldr.w	r4, [lr]
 800c0b0:	e07a      	b.n	800c1a8 <LCD_DrawBitmap+0x12c>
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	9a08      	ldr	r2, [sp, #32]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d17a      	bne.n	800c1b2 <LCD_DrawBitmap+0x136>
 800c0bc:	4b75      	ldr	r3, [pc, #468]	; (800c294 <LCD_DrawBitmap+0x218>)
 800c0be:	9901      	ldr	r1, [sp, #4]
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	9b00      	ldr	r3, [sp, #0]
 800c0c4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dd07      	ble.n	800c0de <LCD_DrawBitmap+0x62>
 800c0ce:	1ac9      	subs	r1, r1, r3
 800c0d0:	2900      	cmp	r1, #0
 800c0d2:	f340 80db 	ble.w	800c28c <LCD_DrawBitmap+0x210>
 800c0d6:	9e03      	ldr	r6, [sp, #12]
 800c0d8:	fb06 4403 	mla	r4, r6, r3, r4
 800c0dc:	e000      	b.n	800c0e0 <LCD_DrawBitmap+0x64>
 800c0de:	9a00      	ldr	r2, [sp, #0]
 800c0e0:	e89d 0048 	ldmia.w	sp, {r3, r6}
 800c0e4:	441e      	add	r6, r3
 800c0e6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800c0ea:	3e01      	subs	r6, #1
 800c0ec:	1af6      	subs	r6, r6, r3
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	dd03      	ble.n	800c0fa <LCD_DrawBitmap+0x7e>
 800c0f2:	1b89      	subs	r1, r1, r6
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	f340 80c9 	ble.w	800c28c <LCD_DrawBitmap+0x210>
 800c0fa:	eb05 0308 	add.w	r3, r5, r8
 800c0fe:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800c102:	3b01      	subs	r3, #1
 800c104:	1b9b      	subs	r3, r3, r6
 800c106:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	bfc8      	it	gt
 800c10e:	ebc3 0808 	rsbgt	r8, r3, r8
 800c112:	42b5      	cmp	r5, r6
 800c114:	da31      	bge.n	800c17a <LCD_DrawBitmap+0xfe>
 800c116:	1b73      	subs	r3, r6, r5
 800c118:	2f08      	cmp	r7, #8
 800c11a:	ebc3 0808 	rsb	r8, r3, r8
 800c11e:	d027      	beq.n	800c170 <LCD_DrawBitmap+0xf4>
 800c120:	dc0d      	bgt.n	800c13e <LCD_DrawBitmap+0xc2>
 800c122:	2f02      	cmp	r7, #2
 800c124:	d014      	beq.n	800c150 <LCD_DrawBitmap+0xd4>
 800c126:	2f04      	cmp	r7, #4
 800c128:	d01a      	beq.n	800c160 <LCD_DrawBitmap+0xe4>
 800c12a:	2f01      	cmp	r7, #1
 800c12c:	d126      	bne.n	800c17c <LCD_DrawBitmap+0x100>
 800c12e:	f023 0607 	bic.w	r6, r3, #7
 800c132:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800c136:	4435      	add	r5, r6
 800c138:	f003 0307 	and.w	r3, r3, #7
 800c13c:	e01e      	b.n	800c17c <LCD_DrawBitmap+0x100>
 800c13e:	2f18      	cmp	r7, #24
 800c140:	d018      	beq.n	800c174 <LCD_DrawBitmap+0xf8>
 800c142:	2f20      	cmp	r7, #32
 800c144:	d016      	beq.n	800c174 <LCD_DrawBitmap+0xf8>
 800c146:	2f10      	cmp	r7, #16
 800c148:	d118      	bne.n	800c17c <LCD_DrawBitmap+0x100>
 800c14a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800c14e:	e013      	b.n	800c178 <LCD_DrawBitmap+0xfc>
 800c150:	f023 0603 	bic.w	r6, r3, #3
 800c154:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800c158:	4435      	add	r5, r6
 800c15a:	f003 0303 	and.w	r3, r3, #3
 800c15e:	e00d      	b.n	800c17c <LCD_DrawBitmap+0x100>
 800c160:	f023 0601 	bic.w	r6, r3, #1
 800c164:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800c168:	4435      	add	r5, r6
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	e005      	b.n	800c17c <LCD_DrawBitmap+0x100>
 800c170:	441c      	add	r4, r3
 800c172:	e001      	b.n	800c178 <LCD_DrawBitmap+0xfc>
 800c174:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c178:	4635      	mov	r5, r6
 800c17a:	2300      	movs	r3, #0
 800c17c:	f1b8 0f00 	cmp.w	r8, #0
 800c180:	f340 8084 	ble.w	800c28c <LCD_DrawBitmap+0x210>
 800c184:	7c46      	ldrb	r6, [r0, #17]
 800c186:	4844      	ldr	r0, [pc, #272]	; (800c298 <LCD_DrawBitmap+0x21c>)
 800c188:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800c18c:	9e04      	ldr	r6, [sp, #16]
 800c18e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c192:	931c      	str	r3, [sp, #112]	; 0x70
 800c194:	9b03      	ldr	r3, [sp, #12]
 800c196:	931a      	str	r3, [sp, #104]	; 0x68
 800c198:	9118      	str	r1, [sp, #96]	; 0x60
 800c19a:	961d      	str	r6, [sp, #116]	; 0x74
 800c19c:	941b      	str	r4, [sp, #108]	; 0x6c
 800c19e:	9719      	str	r7, [sp, #100]	; 0x64
 800c1a0:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c1a4:	4643      	mov	r3, r8
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	46a4      	mov	ip, r4
 800c1aa:	b00f      	add	sp, #60	; 0x3c
 800c1ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	4760      	bx	ip
 800c1b2:	f1c7 0308 	rsb	r3, r7, #8
 800c1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c294 <LCD_DrawBitmap+0x218>
 800c1be:	f8cd e018 	str.w	lr, [sp, #24]
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	46f3      	mov	fp, lr
 800c1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800c1c8:	9b06      	ldr	r3, [sp, #24]
 800c1ca:	9a01      	ldr	r2, [sp, #4]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	da5d      	bge.n	800c28c <LCD_DrawBitmap+0x210>
 800c1d0:	9a00      	ldr	r2, [sp, #0]
 800c1d2:	9b08      	ldr	r3, [sp, #32]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	930a      	str	r3, [sp, #40]	; 0x28
 800c1dc:	f8da 3000 	ldr.w	r3, [sl]
 800c1e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c1e2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800c1e6:	428a      	cmp	r2, r1
 800c1e8:	dc48      	bgt.n	800c27c <LCD_DrawBitmap+0x200>
 800c1ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800c1ee:	9a00      	ldr	r2, [sp, #0]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	dc43      	bgt.n	800c27c <LCD_DrawBitmap+0x200>
 800c1f4:	f04f 0900 	mov.w	r9, #0
 800c1f8:	9407      	str	r4, [sp, #28]
 800c1fa:	462e      	mov	r6, r5
 800c1fc:	f8cd 9014 	str.w	r9, [sp, #20]
 800c200:	9b05      	ldr	r3, [sp, #20]
 800c202:	4543      	cmp	r3, r8
 800c204:	da3a      	bge.n	800c27c <LCD_DrawBitmap+0x200>
 800c206:	f1b9 0f00 	cmp.w	r9, #0
 800c20a:	d106      	bne.n	800c21a <LCD_DrawBitmap+0x19e>
 800c20c:	9b07      	ldr	r3, [sp, #28]
 800c20e:	f893 b000 	ldrb.w	fp, [r3]
 800c212:	3301      	adds	r3, #1
 800c214:	9307      	str	r3, [sp, #28]
 800c216:	f04f 0908 	mov.w	r9, #8
 800c21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c21c:	fa4b f303 	asr.w	r3, fp, r3
 800c220:	fa0b f207 	lsl.w	r2, fp, r7
 800c224:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800c228:	fa5f fb82 	uxtb.w	fp, r2
 800c22c:	ebc7 0909 	rsb	r9, r7, r9
 800c230:	d104      	bne.n	800c23c <LCD_DrawBitmap+0x1c0>
 800c232:	f8da 2000 	ldr.w	r2, [sl]
 800c236:	7c12      	ldrb	r2, [r2, #16]
 800c238:	0792      	lsls	r2, r2, #30
 800c23a:	d417      	bmi.n	800c26c <LCD_DrawBitmap+0x1f0>
 800c23c:	f8da 2000 	ldr.w	r2, [sl]
 800c240:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c242:	6810      	ldr	r0, [r2, #0]
 800c244:	900c      	str	r0, [sp, #48]	; 0x30
 800c246:	9804      	ldr	r0, [sp, #16]
 800c248:	b110      	cbz	r0, 800c250 <LCD_DrawBitmap+0x1d4>
 800c24a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800c24e:	e000      	b.n	800c252 <LCD_DrawBitmap+0x1d6>
 800c250:	b2db      	uxtb	r3, r3
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c258:	9900      	ldr	r1, [sp, #0]
 800c25a:	4432      	add	r2, r6
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff fdf5 	bl	800be4c <LCD_FillRect>
 800c262:	f8da 3000 	ldr.w	r3, [sl]
 800c266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	9b05      	ldr	r3, [sp, #20]
 800c26e:	9a02      	ldr	r2, [sp, #8]
 800c270:	3301      	adds	r3, #1
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	4633      	mov	r3, r6
 800c276:	4413      	add	r3, r2
 800c278:	461e      	mov	r6, r3
 800c27a:	e7c1      	b.n	800c200 <LCD_DrawBitmap+0x184>
 800c27c:	9b06      	ldr	r3, [sp, #24]
 800c27e:	3301      	adds	r3, #1
 800c280:	9306      	str	r3, [sp, #24]
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	441c      	add	r4, r3
 800c286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	e79d      	b.n	800c1c8 <LCD_DrawBitmap+0x14c>
 800c28c:	b00f      	add	sp, #60	; 0x3c
 800c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c292:	bf00      	nop
 800c294:	20000014 	.word	0x20000014
 800c298:	2001e6e8 	.word	0x2001e6e8
 800c29c:	2001e6a4 	.word	0x2001e6a4

0800c2a0 <LCD_SetClipRectMax>:
 800c2a0:	4b04      	ldr	r3, [pc, #16]	; (800c2b4 <LCD_SetClipRectMax+0x14>)
 800c2a2:	6819      	ldr	r1, [r3, #0]
 800c2a4:	4b04      	ldr	r3, [pc, #16]	; (800c2b8 <LCD_SetClipRectMax+0x18>)
 800c2a6:	7c4a      	ldrb	r2, [r1, #17]
 800c2a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c2ac:	68c3      	ldr	r3, [r0, #12]
 800c2ae:	3108      	adds	r1, #8
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	4718      	bx	r3
 800c2b4:	20000014 	.word	0x20000014
 800c2b8:	2001e6e8 	.word	0x2001e6e8

0800c2bc <emWin_LCD_Init>:
 800c2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2be:	f7ff ffef 	bl	800c2a0 <LCD_SetClipRectMax>
 800c2c2:	f000 f8bb 	bl	800c43c <LCD_InitColors>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d144      	bne.n	800c356 <emWin_LCD_Init+0x9a>
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	f7ff faa8 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c2d4:	9001      	str	r0, [sp, #4]
 800c2d6:	b150      	cbz	r0, 800c2ee <emWin_LCD_Init+0x32>
 800c2d8:	68c3      	ldr	r3, [r0, #12]
 800c2da:	210c      	movs	r1, #12
 800c2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2de:	a801      	add	r0, sp, #4
 800c2e0:	4798      	blx	r3
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d034      	beq.n	800c352 <emWin_LCD_Init+0x96>
 800c2e8:	9801      	ldr	r0, [sp, #4]
 800c2ea:	4798      	blx	r3
 800c2ec:	4304      	orrs	r4, r0
 800c2ee:	3501      	adds	r5, #1
 800c2f0:	2d02      	cmp	r5, #2
 800c2f2:	d1ec      	bne.n	800c2ce <emWin_LCD_Init+0x12>
 800c2f4:	bb7c      	cbnz	r4, 800c356 <emWin_LCD_Init+0x9a>
 800c2f6:	f000 f8f7 	bl	800c4e8 <LCD_InitLUT>
 800c2fa:	4b18      	ldr	r3, [pc, #96]	; (800c35c <emWin_LCD_Init+0xa0>)
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c302:	429a      	cmp	r2, r3
 800c304:	d101      	bne.n	800c30a <emWin_LCD_Init+0x4e>
 800c306:	2000      	movs	r0, #0
 800c308:	e026      	b.n	800c358 <emWin_LCD_Init+0x9c>
 800c30a:	2401      	movs	r4, #1
 800c30c:	4620      	mov	r0, r4
 800c30e:	f7ff fa89 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c312:	9001      	str	r0, [sp, #4]
 800c314:	b1c8      	cbz	r0, 800c34a <emWin_LCD_Init+0x8e>
 800c316:	4620      	mov	r0, r4
 800c318:	f004 fbf6 	bl	8010b08 <GUI_SelectLayer>
 800c31c:	2004      	movs	r0, #4
 800c31e:	f7ff fd37 	bl	800bd90 <LCD_SetDrawMode>
 800c322:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800c326:	2100      	movs	r1, #0
 800c328:	461a      	mov	r2, r3
 800c32a:	4608      	mov	r0, r1
 800c32c:	f7ff fd8e 	bl	800be4c <LCD_FillRect>
 800c330:	2000      	movs	r0, #0
 800c332:	f7ff fd2d 	bl	800bd90 <LCD_SetDrawMode>
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	210e      	movs	r1, #14
 800c33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33e:	a801      	add	r0, sp, #4
 800c340:	4798      	blx	r3
 800c342:	4603      	mov	r3, r0
 800c344:	b108      	cbz	r0, 800c34a <emWin_LCD_Init+0x8e>
 800c346:	9801      	ldr	r0, [sp, #4]
 800c348:	4798      	blx	r3
 800c34a:	f114 34ff 	adds.w	r4, r4, #4294967295
 800c34e:	d2dd      	bcs.n	800c30c <emWin_LCD_Init+0x50>
 800c350:	e7d9      	b.n	800c306 <emWin_LCD_Init+0x4a>
 800c352:	2001      	movs	r0, #1
 800c354:	e000      	b.n	800c358 <emWin_LCD_Init+0x9c>
 800c356:	4620      	mov	r0, r4
 800c358:	b003      	add	sp, #12
 800c35a:	bd30      	pop	{r4, r5, pc}
 800c35c:	20000290 	.word	0x20000290

0800c360 <LCD_Color2Index>:
 800c360:	4b04      	ldr	r3, [pc, #16]	; (800c374 <LCD_Color2Index+0x14>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	7c5a      	ldrb	r2, [r3, #17]
 800c366:	4b04      	ldr	r3, [pc, #16]	; (800c378 <LCD_Color2Index+0x18>)
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4718      	bx	r3
 800c372:	bf00      	nop
 800c374:	20000014 	.word	0x20000014
 800c378:	2001e6e8 	.word	0x2001e6e8

0800c37c <LCD_Index2Color>:
 800c37c:	4b04      	ldr	r3, [pc, #16]	; (800c390 <LCD_Index2Color+0x14>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	7c5a      	ldrb	r2, [r3, #17]
 800c382:	4b04      	ldr	r3, [pc, #16]	; (800c394 <LCD_Index2Color+0x18>)
 800c384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	4718      	bx	r3
 800c38e:	bf00      	nop
 800c390:	20000014 	.word	0x20000014
 800c394:	2001e6e8 	.word	0x2001e6e8

0800c398 <LCD_SetColorIndex>:
 800c398:	4b04      	ldr	r3, [pc, #16]	; (800c3ac <LCD_SetColorIndex+0x14>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	7c1a      	ldrb	r2, [r3, #16]
 800c39e:	0752      	lsls	r2, r2, #29
 800c3a0:	bf4c      	ite	mi
 800c3a2:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800c3a4:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800c3a6:	6018      	str	r0, [r3, #0]
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20000014 	.word	0x20000014

0800c3b0 <_SetColor>:
 800c3b0:	b508      	push	{r3, lr}
 800c3b2:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <_SetColor+0x1c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c3b8:	4281      	cmp	r1, r0
 800c3ba:	d006      	beq.n	800c3ca <_SetColor+0x1a>
 800c3bc:	6318      	str	r0, [r3, #48]	; 0x30
 800c3be:	f7ff ffcf 	bl	800c360 <LCD_Color2Index>
 800c3c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c3c6:	f7ff bfe7 	b.w	800c398 <LCD_SetColorIndex>
 800c3ca:	bd08      	pop	{r3, pc}
 800c3cc:	20000014 	.word	0x20000014

0800c3d0 <LCD_SetBkColorIndex>:
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <LCD_SetBkColorIndex+0x14>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	7c1a      	ldrb	r2, [r3, #16]
 800c3d6:	0752      	lsls	r2, r2, #29
 800c3d8:	bf4c      	ite	mi
 800c3da:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800c3dc:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800c3de:	6018      	str	r0, [r3, #0]
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20000014 	.word	0x20000014

0800c3e8 <_SetBkColor>:
 800c3e8:	b508      	push	{r3, lr}
 800c3ea:	4b06      	ldr	r3, [pc, #24]	; (800c404 <_SetBkColor+0x1c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c3f0:	4281      	cmp	r1, r0
 800c3f2:	d006      	beq.n	800c402 <_SetBkColor+0x1a>
 800c3f4:	6358      	str	r0, [r3, #52]	; 0x34
 800c3f6:	f7ff ffb3 	bl	800c360 <LCD_Color2Index>
 800c3fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c3fe:	f7ff bfe7 	b.w	800c3d0 <LCD_SetBkColorIndex>
 800c402:	bd08      	pop	{r3, pc}
 800c404:	20000014 	.word	0x20000014

0800c408 <LCD_SetBkColor>:
 800c408:	4b01      	ldr	r3, [pc, #4]	; (800c410 <LCD_SetBkColor+0x8>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	4718      	bx	r3
 800c410:	2000002c 	.word	0x2000002c

0800c414 <LCD_SetColor>:
 800c414:	4b01      	ldr	r3, [pc, #4]	; (800c41c <LCD_SetColor+0x8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4718      	bx	r3
 800c41c:	2000002c 	.word	0x2000002c

0800c420 <_OnExit>:
 800c420:	b510      	push	{r4, lr}
 800c422:	4c04      	ldr	r4, [pc, #16]	; (800c434 <_OnExit+0x14>)
 800c424:	6820      	ldr	r0, [r4, #0]
 800c426:	f7fe fd17 	bl	800ae58 <GUI_ALLOC_FreeFixedBlock>
 800c42a:	4a03      	ldr	r2, [pc, #12]	; (800c438 <_OnExit+0x18>)
 800c42c:	2300      	movs	r3, #0
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	bd10      	pop	{r4, pc}
 800c434:	2001e6f8 	.word	0x2001e6f8
 800c438:	200003c8 	.word	0x200003c8

0800c43c <LCD_InitColors>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4d0a      	ldr	r5, [pc, #40]	; (800c468 <LCD_InitColors+0x2c>)
 800c440:	682c      	ldr	r4, [r5, #0]
 800c442:	b964      	cbnz	r4, 800c45e <LCD_InitColors+0x22>
 800c444:	4b09      	ldr	r3, [pc, #36]	; (800c46c <LCD_InitColors+0x30>)
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	0080      	lsls	r0, r0, #2
 800c44a:	f7fe fddd 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 800c44e:	6028      	str	r0, [r5, #0]
 800c450:	b138      	cbz	r0, 800c462 <LCD_InitColors+0x26>
 800c452:	4807      	ldr	r0, [pc, #28]	; (800c470 <LCD_InitColors+0x34>)
 800c454:	4b07      	ldr	r3, [pc, #28]	; (800c474 <LCD_InitColors+0x38>)
 800c456:	f840 3f04 	str.w	r3, [r0, #4]!
 800c45a:	f7ff f9cf 	bl	800b7fc <GUI__RegisterExit>
 800c45e:	2000      	movs	r0, #0
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	2001      	movs	r0, #1
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	bf00      	nop
 800c468:	2001e6f8 	.word	0x2001e6f8
 800c46c:	20000030 	.word	0x20000030
 800c470:	200003c8 	.word	0x200003c8
 800c474:	0800c421 	.word	0x0800c421

0800c478 <LCD_GetpPalConvTableUncached>:
 800c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c47c:	4604      	mov	r4, r0
 800c47e:	b318      	cbz	r0, 800c4c8 <LCD_GetpPalConvTableUncached+0x50>
 800c480:	6887      	ldr	r7, [r0, #8]
 800c482:	b31f      	cbz	r7, 800c4cc <LCD_GetpPalConvTableUncached+0x54>
 800c484:	4d14      	ldr	r5, [pc, #80]	; (800c4d8 <LCD_GetpPalConvTableUncached+0x60>)
 800c486:	6828      	ldr	r0, [r5, #0]
 800c488:	b320      	cbz	r0, 800c4d4 <LCD_GetpPalConvTableUncached+0x5c>
 800c48a:	6822      	ldr	r2, [r4, #0]
 800c48c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c490:	dc1f      	bgt.n	800c4d2 <LCD_GetpPalConvTableUncached+0x5a>
 800c492:	4b12      	ldr	r3, [pc, #72]	; (800c4dc <LCD_GetpPalConvTableUncached+0x64>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	bfa8      	it	ge
 800c49a:	461a      	movge	r2, r3
 800c49c:	4690      	mov	r8, r2
 800c49e:	2600      	movs	r6, #0
 800c4a0:	4546      	cmp	r6, r8
 800c4a2:	da09      	bge.n	800c4b8 <LCD_GetpPalConvTableUncached+0x40>
 800c4a4:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800c4a8:	f8d5 9000 	ldr.w	r9, [r5]
 800c4ac:	f7ff ff58 	bl	800c360 <LCD_Color2Index>
 800c4b0:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 800c4b4:	3601      	adds	r6, #1
 800c4b6:	e7f3      	b.n	800c4a0 <LCD_GetpPalConvTableUncached+0x28>
 800c4b8:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <LCD_GetpPalConvTableUncached+0x68>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	b10b      	cbz	r3, 800c4c2 <LCD_GetpPalConvTableUncached+0x4a>
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4798      	blx	r3
 800c4c2:	6828      	ldr	r0, [r5, #0]
 800c4c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d8:	2001e6f8 	.word	0x2001e6f8
 800c4dc:	20000030 	.word	0x20000030
 800c4e0:	200003c8 	.word	0x200003c8

0800c4e4 <LCD_GetpPalConvTableBM>:
 800c4e4:	f7ff bfc8 	b.w	800c478 <LCD_GetpPalConvTableUncached>

0800c4e8 <LCD_InitLUT>:
 800c4e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	f000 f945 	bl	800c77a <LCD_GetNumLayers>
 800c4f0:	4e1c      	ldr	r6, [pc, #112]	; (800c564 <LCD_InitLUT+0x7c>)
 800c4f2:	f8df a078 	ldr.w	sl, [pc, #120]	; 800c56c <LCD_InitLUT+0x84>
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	2400      	movs	r4, #0
 800c4fa:	46b1      	mov	r9, r6
 800c4fc:	4544      	cmp	r4, r8
 800c4fe:	da2d      	bge.n	800c55c <LCD_InitLUT+0x74>
 800c500:	4620      	mov	r0, r4
 800c502:	f7ff f98f 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c506:	b338      	cbz	r0, 800c558 <LCD_InitLUT+0x70>
 800c508:	6833      	ldr	r3, [r6, #0]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f893 b011 	ldrb.w	fp, [r3, #17]
 800c510:	745c      	strb	r4, [r3, #17]
 800c512:	f000 f869 	bl	800c5e8 <LCD_GetBitsPerPixelEx>
 800c516:	2808      	cmp	r0, #8
 800c518:	dd04      	ble.n	800c524 <LCD_InitLUT+0x3c>
 800c51a:	f8d9 3000 	ldr.w	r3, [r9]
 800c51e:	f883 b011 	strb.w	fp, [r3, #17]
 800c522:	e019      	b.n	800c558 <LCD_InitLUT+0x70>
 800c524:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800c528:	691a      	ldr	r2, [r3, #16]
 800c52a:	4b0f      	ldr	r3, [pc, #60]	; (800c568 <LCD_InitLUT+0x80>)
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d0f4      	beq.n	800c51a <LCD_InitLUT+0x32>
 800c530:	4620      	mov	r0, r4
 800c532:	f000 f85c 	bl	800c5ee <LCD_GetNumColorsEx>
 800c536:	2500      	movs	r5, #0
 800c538:	4603      	mov	r3, r0
 800c53a:	429d      	cmp	r5, r3
 800c53c:	daed      	bge.n	800c51a <LCD_InitLUT+0x32>
 800c53e:	b2ef      	uxtb	r7, r5
 800c540:	4638      	mov	r0, r7
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	f7ff ff1a 	bl	800c37c <LCD_Index2Color>
 800c548:	4639      	mov	r1, r7
 800c54a:	4602      	mov	r2, r0
 800c54c:	4620      	mov	r0, r4
 800c54e:	f000 f943 	bl	800c7d8 <LCD_SetLUTEntryEx>
 800c552:	3501      	adds	r5, #1
 800c554:	9b01      	ldr	r3, [sp, #4]
 800c556:	e7f0      	b.n	800c53a <LCD_InitLUT+0x52>
 800c558:	3401      	adds	r4, #1
 800c55a:	e7cf      	b.n	800c4fc <LCD_InitLUT+0x14>
 800c55c:	b003      	add	sp, #12
 800c55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c562:	bf00      	nop
 800c564:	20000014 	.word	0x20000014
 800c568:	0801a8d8 	.word	0x0801a8d8
 800c56c:	2001e6e8 	.word	0x2001e6e8

0800c570 <LCD_GetBkColorIndex>:
 800c570:	4b02      	ldr	r3, [pc, #8]	; (800c57c <LCD_GetBkColorIndex+0xc>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	20000014 	.word	0x20000014

0800c580 <LCD_GetColorIndex>:
 800c580:	4b02      	ldr	r3, [pc, #8]	; (800c58c <LCD_GetColorIndex+0xc>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000014 	.word	0x20000014

0800c590 <_GetDevProp>:
 800c590:	2801      	cmp	r0, #1
 800c592:	b510      	push	{r4, lr}
 800c594:	460c      	mov	r4, r1
 800c596:	dc08      	bgt.n	800c5aa <_GetDevProp+0x1a>
 800c598:	f7ff f944 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c59c:	b128      	cbz	r0, 800c5aa <_GetDevProp+0x1a>
 800c59e:	68c3      	ldr	r3, [r0, #12]
 800c5a0:	4621      	mov	r1, r4
 800c5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a8:	4718      	bx	r3
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	bd10      	pop	{r4, pc}

0800c5ae <_GetMaxValue>:
 800c5ae:	b538      	push	{r3, r4, r5, lr}
 800c5b0:	4601      	mov	r1, r0
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	2001      	movs	r0, #1
 800c5b6:	f7ff ffeb 	bl	800c590 <_GetDevProp>
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	4604      	mov	r4, r0
 800c5be:	2000      	movs	r0, #0
 800c5c0:	f7ff ffe6 	bl	800c590 <_GetDevProp>
 800c5c4:	42a0      	cmp	r0, r4
 800c5c6:	bfb8      	it	lt
 800c5c8:	4620      	movlt	r0, r4
 800c5ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}

0800c5d0 <LCD_GetXSizeEx>:
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	f7ff bfdd 	b.w	800c590 <_GetDevProp>

0800c5d6 <LCD_GetYSizeEx>:
 800c5d6:	2102      	movs	r1, #2
 800c5d8:	f7ff bfda 	b.w	800c590 <_GetDevProp>

0800c5dc <LCD_GetVXSizeEx>:
 800c5dc:	2103      	movs	r1, #3
 800c5de:	f7ff bfd7 	b.w	800c590 <_GetDevProp>

0800c5e2 <LCD_GetVYSizeEx>:
 800c5e2:	2104      	movs	r1, #4
 800c5e4:	f7ff bfd4 	b.w	800c590 <_GetDevProp>

0800c5e8 <LCD_GetBitsPerPixelEx>:
 800c5e8:	2108      	movs	r1, #8
 800c5ea:	f7ff bfd1 	b.w	800c590 <_GetDevProp>

0800c5ee <LCD_GetNumColorsEx>:
 800c5ee:	2109      	movs	r1, #9
 800c5f0:	f7ff bfce 	b.w	800c590 <_GetDevProp>

0800c5f4 <LCD_GetSwapXYEx>:
 800c5f4:	210e      	movs	r1, #14
 800c5f6:	f7ff bfcb 	b.w	800c590 <_GetDevProp>
	...

0800c5fc <LCD_GetXSize>:
 800c5fc:	4b02      	ldr	r3, [pc, #8]	; (800c608 <LCD_GetXSize+0xc>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	7c58      	ldrb	r0, [r3, #17]
 800c602:	f7ff bfe5 	b.w	800c5d0 <LCD_GetXSizeEx>
 800c606:	bf00      	nop
 800c608:	20000014 	.word	0x20000014

0800c60c <LCD_GetYSize>:
 800c60c:	4b02      	ldr	r3, [pc, #8]	; (800c618 <LCD_GetYSize+0xc>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	7c58      	ldrb	r0, [r3, #17]
 800c612:	f7ff bfe0 	b.w	800c5d6 <LCD_GetYSizeEx>
 800c616:	bf00      	nop
 800c618:	20000014 	.word	0x20000014

0800c61c <LCD_GetNumColors>:
 800c61c:	4b02      	ldr	r3, [pc, #8]	; (800c628 <LCD_GetNumColors+0xc>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	7c58      	ldrb	r0, [r3, #17]
 800c622:	f7ff bfe4 	b.w	800c5ee <LCD_GetNumColorsEx>
 800c626:	bf00      	nop
 800c628:	20000014 	.word	0x20000014

0800c62c <LCD_GetSwapXY>:
 800c62c:	4b02      	ldr	r3, [pc, #8]	; (800c638 <LCD_GetSwapXY+0xc>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	7c58      	ldrb	r0, [r3, #17]
 800c632:	f7ff bfdf 	b.w	800c5f4 <LCD_GetSwapXYEx>
 800c636:	bf00      	nop
 800c638:	20000014 	.word	0x20000014

0800c63c <GUI_GetBitsPerPixelEx>:
 800c63c:	4b03      	ldr	r3, [pc, #12]	; (800c64c <GUI_GetBitsPerPixelEx+0x10>)
 800c63e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c642:	68c3      	ldr	r3, [r0, #12]
 800c644:	2108      	movs	r1, #8
 800c646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c648:	4718      	bx	r3
 800c64a:	bf00      	nop
 800c64c:	2001e6e8 	.word	0x2001e6e8

0800c650 <LCD_GetPaletteEx>:
 800c650:	b510      	push	{r4, lr}
 800c652:	f7ff f8e7 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c656:	b128      	cbz	r0, 800c664 <LCD_GetPaletteEx+0x14>
 800c658:	68c3      	ldr	r3, [r0, #12]
 800c65a:	2102      	movs	r1, #2
 800c65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c662:	4718      	bx	r3
 800c664:	bd10      	pop	{r4, pc}
	...

0800c668 <LCD_GetPalette>:
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <LCD_GetPalette+0xc>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	7c58      	ldrb	r0, [r3, #17]
 800c66e:	f7ff bfef 	b.w	800c650 <LCD_GetPaletteEx>
 800c672:	bf00      	nop
 800c674:	20000014 	.word	0x20000014

0800c678 <GUI_GetpfIndex2ColorEx>:
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <GUI_GetpfIndex2ColorEx+0xc>)
 800c67a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	6858      	ldr	r0, [r3, #4]
 800c682:	4770      	bx	lr
 800c684:	2001e6e8 	.word	0x2001e6e8

0800c688 <GUI_GetpfColor2IndexEx>:
 800c688:	4b02      	ldr	r3, [pc, #8]	; (800c694 <GUI_GetpfColor2IndexEx+0xc>)
 800c68a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	4770      	bx	lr
 800c694:	2001e6e8 	.word	0x2001e6e8

0800c698 <LCD_GetXSizeMax>:
 800c698:	2001      	movs	r0, #1
 800c69a:	f7ff bf88 	b.w	800c5ae <_GetMaxValue>

0800c69e <LCD_GetYSizeMax>:
 800c69e:	2002      	movs	r0, #2
 800c6a0:	f7ff bf85 	b.w	800c5ae <_GetMaxValue>

0800c6a4 <LCD_GetVXSizeMax>:
 800c6a4:	2003      	movs	r0, #3
 800c6a6:	f7ff bf82 	b.w	800c5ae <_GetMaxValue>
	...

0800c6ac <LCD_SetDisplaySize>:
 800c6ac:	4b01      	ldr	r3, [pc, #4]	; (800c6b4 <LCD_SetDisplaySize+0x8>)
 800c6ae:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6b2:	4770      	bx	lr
 800c6b4:	200003d4 	.word	0x200003d4

0800c6b8 <LCD_GetXSizeDisplay>:
 800c6b8:	4b01      	ldr	r3, [pc, #4]	; (800c6c0 <LCD_GetXSizeDisplay+0x8>)
 800c6ba:	6818      	ldr	r0, [r3, #0]
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	200003d4 	.word	0x200003d4

0800c6c4 <LCD_GetYSizeDisplay>:
 800c6c4:	4b01      	ldr	r3, [pc, #4]	; (800c6cc <LCD_GetYSizeDisplay+0x8>)
 800c6c6:	6858      	ldr	r0, [r3, #4]
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	200003d4 	.word	0x200003d4

0800c6d0 <LCD__GetBPP>:
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d03b      	beq.n	800c74c <LCD__GetBPP+0x7c>
 800c6d4:	f030 0301 	bics.w	r3, r0, #1
 800c6d8:	d029      	beq.n	800c72e <LCD__GetBPP+0x5e>
 800c6da:	f030 0303 	bics.w	r3, r0, #3
 800c6de:	d028      	beq.n	800c732 <LCD__GetBPP+0x62>
 800c6e0:	f030 0307 	bics.w	r3, r0, #7
 800c6e4:	d027      	beq.n	800c736 <LCD__GetBPP+0x66>
 800c6e6:	f030 030f 	bics.w	r3, r0, #15
 800c6ea:	d026      	beq.n	800c73a <LCD__GetBPP+0x6a>
 800c6ec:	f030 031f 	bics.w	r3, r0, #31
 800c6f0:	d025      	beq.n	800c73e <LCD__GetBPP+0x6e>
 800c6f2:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800c6f6:	d024      	beq.n	800c742 <LCD__GetBPP+0x72>
 800c6f8:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800c6fc:	f023 0301 	bic.w	r3, r3, #1
 800c700:	b30b      	cbz	r3, 800c746 <LCD__GetBPP+0x76>
 800c702:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800c706:	f023 030f 	bic.w	r3, r3, #15
 800c70a:	b1e3      	cbz	r3, 800c746 <LCD__GetBPP+0x76>
 800c70c:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800c710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c714:	b1bb      	cbz	r3, 800c746 <LCD__GetBPP+0x76>
 800c716:	0c03      	lsrs	r3, r0, #16
 800c718:	041b      	lsls	r3, r3, #16
 800c71a:	b1a3      	cbz	r3, 800c746 <LCD__GetBPP+0x76>
 800c71c:	0c83      	lsrs	r3, r0, #18
 800c71e:	049b      	lsls	r3, r3, #18
 800c720:	b19b      	cbz	r3, 800c74a <LCD__GetBPP+0x7a>
 800c722:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c726:	bf0c      	ite	eq
 800c728:	2018      	moveq	r0, #24
 800c72a:	2020      	movne	r0, #32
 800c72c:	4770      	bx	lr
 800c72e:	2001      	movs	r0, #1
 800c730:	4770      	bx	lr
 800c732:	2002      	movs	r0, #2
 800c734:	4770      	bx	lr
 800c736:	2003      	movs	r0, #3
 800c738:	4770      	bx	lr
 800c73a:	2004      	movs	r0, #4
 800c73c:	4770      	bx	lr
 800c73e:	2005      	movs	r0, #5
 800c740:	4770      	bx	lr
 800c742:	2008      	movs	r0, #8
 800c744:	4770      	bx	lr
 800c746:	2010      	movs	r0, #16
 800c748:	4770      	bx	lr
 800c74a:	2012      	movs	r0, #18
 800c74c:	4770      	bx	lr

0800c74e <LCD__GetBPPDevice>:
 800c74e:	b508      	push	{r3, lr}
 800c750:	f7ff ffbe 	bl	800c6d0 <LCD__GetBPP>
 800c754:	2801      	cmp	r0, #1
 800c756:	d00f      	beq.n	800c778 <LCD__GetBPPDevice+0x2a>
 800c758:	1e83      	subs	r3, r0, #2
 800c75a:	2b06      	cmp	r3, #6
 800c75c:	d909      	bls.n	800c772 <LCD__GetBPPDevice+0x24>
 800c75e:	f1a0 0309 	sub.w	r3, r0, #9
 800c762:	2b07      	cmp	r3, #7
 800c764:	d907      	bls.n	800c776 <LCD__GetBPPDevice+0x28>
 800c766:	3811      	subs	r0, #17
 800c768:	280f      	cmp	r0, #15
 800c76a:	bf8c      	ite	hi
 800c76c:	2000      	movhi	r0, #0
 800c76e:	2020      	movls	r0, #32
 800c770:	bd08      	pop	{r3, pc}
 800c772:	2008      	movs	r0, #8
 800c774:	bd08      	pop	{r3, pc}
 800c776:	2010      	movs	r0, #16
 800c778:	bd08      	pop	{r3, pc}

0800c77a <LCD_GetNumLayers>:
 800c77a:	b510      	push	{r4, lr}
 800c77c:	2000      	movs	r0, #0
 800c77e:	f7ff f851 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c782:	1c04      	adds	r4, r0, #0
 800c784:	f04f 0001 	mov.w	r0, #1
 800c788:	bf18      	it	ne
 800c78a:	2401      	movne	r4, #1
 800c78c:	f7ff f84a 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c790:	b100      	cbz	r0, 800c794 <LCD_GetNumLayers+0x1a>
 800c792:	3401      	adds	r4, #1
 800c794:	4620      	mov	r0, r4
 800c796:	bd10      	pop	{r4, pc}

0800c798 <LCD_SelectLCD>:
 800c798:	b510      	push	{r4, lr}
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <LCD_SelectLCD+0x38>)
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	7c51      	ldrb	r1, [r2, #17]
 800c7a0:	4a0c      	ldr	r2, [pc, #48]	; (800c7d4 <LCD_SelectLCD+0x3c>)
 800c7a2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800c7a6:	461c      	mov	r4, r3
 800c7a8:	b140      	cbz	r0, 800c7bc <LCD_SelectLCD+0x24>
 800c7aa:	68c3      	ldr	r3, [r0, #12]
 800c7ac:	b113      	cbz	r3, 800c7b4 <LCD_SelectLCD+0x1c>
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d001      	beq.n	800c7b8 <LCD_SelectLCD+0x20>
 800c7b4:	6800      	ldr	r0, [r0, #0]
 800c7b6:	e7f7      	b.n	800c7a8 <LCD_SelectLCD+0x10>
 800c7b8:	f7ff f86c 	bl	800b894 <GUI_DEVICE_Unlink>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	661a      	str	r2, [r3, #96]	; 0x60
 800c7c2:	f103 0208 	add.w	r2, r3, #8
 800c7c6:	615a      	str	r2, [r3, #20]
 800c7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7cc:	f7ff bd68 	b.w	800c2a0 <LCD_SetClipRectMax>
 800c7d0:	20000014 	.word	0x20000014
 800c7d4:	2001e6e8 	.word	0x2001e6e8

0800c7d8 <LCD_SetLUTEntryEx>:
 800c7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7da:	460c      	mov	r4, r1
 800c7dc:	4615      	mov	r5, r2
 800c7de:	f7ff f821 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c7e2:	9001      	str	r0, [sp, #4]
 800c7e4:	b908      	cbnz	r0, 800c7ea <LCD_SetLUTEntryEx+0x12>
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e00c      	b.n	800c804 <LCD_SetLUTEntryEx+0x2c>
 800c7ea:	68c3      	ldr	r3, [r0, #12]
 800c7ec:	2110      	movs	r1, #16
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	a801      	add	r0, sp, #4
 800c7f2:	4798      	blx	r3
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0f5      	beq.n	800c7e6 <LCD_SetLUTEntryEx+0xe>
 800c7fa:	9801      	ldr	r0, [sp, #4]
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	4621      	mov	r1, r4
 800c800:	4798      	blx	r3
 800c802:	2000      	movs	r0, #0
 800c804:	b003      	add	sp, #12
 800c806:	bd30      	pop	{r4, r5, pc}

0800c808 <LCD_SetSizeEx>:
 800c808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c80a:	460c      	mov	r4, r1
 800c80c:	4615      	mov	r5, r2
 800c80e:	f7ff f809 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c812:	9001      	str	r0, [sp, #4]
 800c814:	b908      	cbnz	r0, 800c81a <LCD_SetSizeEx+0x12>
 800c816:	2001      	movs	r0, #1
 800c818:	e00c      	b.n	800c834 <LCD_SetSizeEx+0x2c>
 800c81a:	68c3      	ldr	r3, [r0, #12]
 800c81c:	210b      	movs	r1, #11
 800c81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c820:	a801      	add	r0, sp, #4
 800c822:	4798      	blx	r3
 800c824:	4603      	mov	r3, r0
 800c826:	2800      	cmp	r0, #0
 800c828:	d0f5      	beq.n	800c816 <LCD_SetSizeEx+0xe>
 800c82a:	9801      	ldr	r0, [sp, #4]
 800c82c:	462a      	mov	r2, r5
 800c82e:	4621      	mov	r1, r4
 800c830:	4798      	blx	r3
 800c832:	2000      	movs	r0, #0
 800c834:	b003      	add	sp, #12
 800c836:	bd30      	pop	{r4, r5, pc}

0800c838 <LCD_SetVSizeEx>:
 800c838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c83a:	460c      	mov	r4, r1
 800c83c:	4615      	mov	r5, r2
 800c83e:	f7fe fff1 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800c842:	9001      	str	r0, [sp, #4]
 800c844:	b908      	cbnz	r0, 800c84a <LCD_SetVSizeEx+0x12>
 800c846:	2001      	movs	r0, #1
 800c848:	e00c      	b.n	800c864 <LCD_SetVSizeEx+0x2c>
 800c84a:	68c3      	ldr	r3, [r0, #12]
 800c84c:	210a      	movs	r1, #10
 800c84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c850:	a801      	add	r0, sp, #4
 800c852:	4798      	blx	r3
 800c854:	4603      	mov	r3, r0
 800c856:	2800      	cmp	r0, #0
 800c858:	d0f5      	beq.n	800c846 <LCD_SetVSizeEx+0xe>
 800c85a:	9801      	ldr	r0, [sp, #4]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4621      	mov	r1, r4
 800c860:	4798      	blx	r3
 800c862:	2000      	movs	r0, #0
 800c864:	b003      	add	sp, #12
 800c866:	bd30      	pop	{r4, r5, pc}

0800c868 <LCD_UpdateColorIndices>:
 800c868:	b510      	push	{r4, lr}
 800c86a:	4c07      	ldr	r4, [pc, #28]	; (800c888 <LCD_UpdateColorIndices+0x20>)
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c870:	f7ff fd76 	bl	800c360 <LCD_Color2Index>
 800c874:	f7ff fd90 	bl	800c398 <LCD_SetColorIndex>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c87c:	f7ff fd70 	bl	800c360 <LCD_Color2Index>
 800c880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c884:	f7ff bda4 	b.w	800c3d0 <LCD_SetBkColorIndex>
 800c888:	20000014 	.word	0x20000014

0800c88c <_Log2PhysY_X1Y0S0>:
 800c88c:	4610      	mov	r0, r2
 800c88e:	4770      	bx	lr

0800c890 <_Log2PhysY_X1Y1S0>:
 800c890:	6840      	ldr	r0, [r0, #4]
 800c892:	1a80      	subs	r0, r0, r2
 800c894:	3801      	subs	r0, #1
 800c896:	4770      	bx	lr

0800c898 <_Log2PhysY_X1Y0S1>:
 800c898:	4608      	mov	r0, r1
 800c89a:	4770      	bx	lr

0800c89c <_Log2PhysY_X1Y1S1>:
 800c89c:	6800      	ldr	r0, [r0, #0]
 800c89e:	1a40      	subs	r0, r0, r1
 800c8a0:	3801      	subs	r0, #1
 800c8a2:	4770      	bx	lr

0800c8a4 <_SetPixelIndex>:
 800c8a4:	b410      	push	{r4}
 800c8a6:	6884      	ldr	r4, [r0, #8]
 800c8a8:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800c8ac:	46a4      	mov	ip, r4
 800c8ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8b2:	4760      	bx	ip

0800c8b4 <_GetPixelIndex>:
 800c8b4:	6883      	ldr	r3, [r0, #8]
 800c8b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c8ba:	4718      	bx	r3

0800c8bc <_XorPixel>:
 800c8bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8be:	4616      	mov	r6, r2
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	6887      	ldr	r7, [r0, #8]
 800c8c6:	f7ff fff5 	bl	800c8b4 <_GetPixelIndex>
 800c8ca:	9001      	str	r0, [sp, #4]
 800c8cc:	9a01      	ldr	r2, [sp, #4]
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4053      	eors	r3, r2
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	4632      	mov	r2, r6
 800c8d8:	f7ff ffe4 	bl	800c8a4 <_SetPixelIndex>
 800c8dc:	b003      	add	sp, #12
 800c8de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8e0 <_DrawHLine>:
 800c8e0:	b513      	push	{r0, r1, r4, lr}
 800c8e2:	6884      	ldr	r4, [r0, #8]
 800c8e4:	9200      	str	r2, [sp, #0]
 800c8e6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800c8ea:	47a0      	blx	r4
 800c8ec:	b002      	add	sp, #8
 800c8ee:	bd10      	pop	{r4, pc}

0800c8f0 <_DrawVLine>:
 800c8f0:	b513      	push	{r0, r1, r4, lr}
 800c8f2:	6884      	ldr	r4, [r0, #8]
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	47a0      	blx	r4
 800c8fe:	b002      	add	sp, #8
 800c900:	bd10      	pop	{r4, pc}

0800c902 <_FillRect>:
 800c902:	b410      	push	{r4}
 800c904:	6884      	ldr	r4, [r0, #8]
 800c906:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800c90a:	46a4      	mov	ip, r4
 800c90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c910:	4760      	bx	ip

0800c912 <_DrawBitmap>:
 800c912:	b430      	push	{r4, r5}
 800c914:	6884      	ldr	r4, [r0, #8]
 800c916:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
 800c91a:	46a4      	mov	ip, r4
 800c91c:	bc30      	pop	{r4, r5}
 800c91e:	4760      	bx	ip

0800c920 <_GetDevFunc_SetRect>:
 800c920:	4770      	bx	lr
	...

0800c924 <_GetDevFunc_SetRectOutside>:
 800c924:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c926:	9e07      	ldr	r6, [sp, #28]
 800c928:	6884      	ldr	r4, [r0, #8]
 800c92a:	4d0c      	ldr	r5, [pc, #48]	; (800c95c <_GetDevFunc_SetRectOutside+0x38>)
 800c92c:	b176      	cbz	r6, 800c94c <_GetDevFunc_SetRectOutside+0x28>
 800c92e:	6828      	ldr	r0, [r5, #0]
 800c930:	b988      	cbnz	r0, 800c956 <_GetDevFunc_SetRectOutside+0x32>
 800c932:	9806      	ldr	r0, [sp, #24]
 800c934:	9000      	str	r0, [sp, #0]
 800c936:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800c93a:	4620      	mov	r0, r4
 800c93c:	47b0      	blx	r6
 800c93e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800c942:	602b      	str	r3, [r5, #0]
 800c944:	4b06      	ldr	r3, [pc, #24]	; (800c960 <_GetDevFunc_SetRectOutside+0x3c>)
 800c946:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800c94a:	e004      	b.n	800c956 <_GetDevFunc_SetRectOutside+0x32>
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	b113      	cbz	r3, 800c956 <_GetDevFunc_SetRectOutside+0x32>
 800c950:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800c954:	602e      	str	r6, [r5, #0]
 800c956:	b002      	add	sp, #8
 800c958:	bd70      	pop	{r4, r5, r6, pc}
 800c95a:	bf00      	nop
 800c95c:	200003dc 	.word	0x200003dc
 800c960:	0800c921 	.word	0x0800c921

0800c964 <_ReadPixelCust_16bpp>:
 800c964:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c966:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800c96a:	6990      	ldr	r0, [r2, #24]
 800c96c:	4718      	bx	r3

0800c96e <_ReadPixelCust_18bpp>:
 800c96e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c970:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800c974:	6990      	ldr	r0, [r2, #24]
 800c976:	4718      	bx	r3

0800c978 <_ReadRectCust_16bpp>:
 800c978:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c97e:	6885      	ldr	r5, [r0, #8]
 800c980:	9400      	str	r4, [sp, #0]
 800c982:	4628      	mov	r0, r5
 800c984:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800c988:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c98a:	468a      	mov	sl, r1
 800c98c:	4691      	mov	r9, r2
 800c98e:	4698      	mov	r8, r3
 800c990:	47b0      	blx	r6
 800c992:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800c994:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 800c998:	6980      	ldr	r0, [r0, #24]
 800c99a:	ebc9 0404 	rsb	r4, r9, r4
 800c99e:	ebca 0608 	rsb	r6, sl, r8
 800c9a2:	1c62      	adds	r2, r4, #1
 800c9a4:	fb06 2202 	mla	r2, r6, r2, r2
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	b002      	add	sp, #8
 800c9ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	4718      	bx	r3

0800c9b2 <_ReadRectCust_18bpp>:
 800c9b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c9b8:	6885      	ldr	r5, [r0, #8]
 800c9ba:	9400      	str	r4, [sp, #0]
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800c9c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c9c4:	468a      	mov	sl, r1
 800c9c6:	4691      	mov	r9, r2
 800c9c8:	4698      	mov	r8, r3
 800c9ca:	47b0      	blx	r6
 800c9cc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800c9ce:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 800c9d2:	6980      	ldr	r0, [r0, #24]
 800c9d4:	ebc9 0404 	rsb	r4, r9, r4
 800c9d8:	ebca 0608 	rsb	r6, sl, r8
 800c9dc:	1c62      	adds	r2, r4, #1
 800c9de:	fb06 2202 	mla	r2, r6, r2, r2
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	b002      	add	sp, #8
 800c9e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ea:	4718      	bx	r3

0800c9ec <_GetDevFunc>:
 800c9ec:	3901      	subs	r1, #1
 800c9ee:	2917      	cmp	r1, #23
 800c9f0:	d828      	bhi.n	800ca44 <_GetDevFunc+0x58>
 800c9f2:	e8df f001 	tbb	[pc, r1]
 800c9f6:	2714      	.short	0x2714
 800c9f8:	27272727 	.word	0x27272727
 800c9fc:	0e272727 	.word	0x0e272727
 800ca00:	29191210 	.word	0x29191210
 800ca04:	2727270c 	.word	0x2727270c
 800ca08:	23272727 	.word	0x23272727
 800ca0c:	251e      	.short	0x251e
 800ca0e:	480f      	ldr	r0, [pc, #60]	; (800ca4c <_GetDevFunc+0x60>)
 800ca10:	4770      	bx	lr
 800ca12:	480f      	ldr	r0, [pc, #60]	; (800ca50 <_GetDevFunc+0x64>)
 800ca14:	4770      	bx	lr
 800ca16:	480f      	ldr	r0, [pc, #60]	; (800ca54 <_GetDevFunc+0x68>)
 800ca18:	4770      	bx	lr
 800ca1a:	480f      	ldr	r0, [pc, #60]	; (800ca58 <_GetDevFunc+0x6c>)
 800ca1c:	4770      	bx	lr
 800ca1e:	6803      	ldr	r3, [r0, #0]
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800ca26:	4770      	bx	lr
 800ca28:	6803      	ldr	r3, [r0, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800ca30:	4770      	bx	lr
 800ca32:	6803      	ldr	r3, [r0, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800ca3a:	4770      	bx	lr
 800ca3c:	4807      	ldr	r0, [pc, #28]	; (800ca5c <_GetDevFunc+0x70>)
 800ca3e:	4770      	bx	lr
 800ca40:	4807      	ldr	r0, [pc, #28]	; (800ca60 <_GetDevFunc+0x74>)
 800ca42:	4770      	bx	lr
 800ca44:	2000      	movs	r0, #0
 800ca46:	4770      	bx	lr
 800ca48:	4806      	ldr	r0, [pc, #24]	; (800ca64 <_GetDevFunc+0x78>)
 800ca4a:	4770      	bx	lr
 800ca4c:	0800ce0f 	.word	0x0800ce0f
 800ca50:	0800cdfb 	.word	0x0800cdfb
 800ca54:	0800cde7 	.word	0x0800cde7
 800ca58:	0800cd9d 	.word	0x0800cd9d
 800ca5c:	0800cd01 	.word	0x0800cd01
 800ca60:	0800c925 	.word	0x0800c925
 800ca64:	0800ce25 	.word	0x0800ce25

0800ca68 <_GetDevProp>:
 800ca68:	3901      	subs	r1, #1
 800ca6a:	6880      	ldr	r0, [r0, #8]
 800ca6c:	290d      	cmp	r1, #13
 800ca6e:	d823      	bhi.n	800cab8 <_GetDevProp+0x50>
 800ca70:	e8df f001 	tbb	[pc, r1]
 800ca74:	0f0d0b09 	.word	0x0f0d0b09
 800ca78:	11222222 	.word	0x11222222
 800ca7c:	13070725 	.word	0x13070725
 800ca80:	1d18      	.short	0x1d18
 800ca82:	2001      	movs	r0, #1
 800ca84:	4770      	bx	lr
 800ca86:	6800      	ldr	r0, [r0, #0]
 800ca88:	4770      	bx	lr
 800ca8a:	6840      	ldr	r0, [r0, #4]
 800ca8c:	4770      	bx	lr
 800ca8e:	6880      	ldr	r0, [r0, #8]
 800ca90:	4770      	bx	lr
 800ca92:	68c0      	ldr	r0, [r0, #12]
 800ca94:	4770      	bx	lr
 800ca96:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ca98:	4770      	bx	lr
 800ca9a:	b188      	cbz	r0, 800cac0 <_GetDevProp+0x58>
 800ca9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ca9e:	f000 0001 	and.w	r0, r0, #1
 800caa2:	4770      	bx	lr
 800caa4:	b160      	cbz	r0, 800cac0 <_GetDevProp+0x58>
 800caa6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800caa8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800caac:	4770      	bx	lr
 800caae:	b138      	cbz	r0, 800cac0 <_GetDevProp+0x58>
 800cab0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800cab2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800cab6:	4770      	bx	lr
 800cab8:	f04f 30ff 	mov.w	r0, #4294967295
 800cabc:	4770      	bx	lr
 800cabe:	2000      	movs	r0, #0
 800cac0:	4770      	bx	lr

0800cac2 <_GetDevData>:
 800cac2:	6883      	ldr	r3, [r0, #8]
 800cac4:	2901      	cmp	r1, #1
 800cac6:	bf0c      	ite	eq
 800cac8:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800caca:	2000      	movne	r0, #0
 800cacc:	4770      	bx	lr

0800cace <_GetRect>:
 800cace:	6882      	ldr	r2, [r0, #8]
 800cad0:	2300      	movs	r3, #0
 800cad2:	800b      	strh	r3, [r1, #0]
 800cad4:	804b      	strh	r3, [r1, #2]
 800cad6:	6813      	ldr	r3, [r2, #0]
 800cad8:	3b01      	subs	r3, #1
 800cada:	808b      	strh	r3, [r1, #4]
 800cadc:	6853      	ldr	r3, [r2, #4]
 800cade:	3b01      	subs	r3, #1
 800cae0:	80cb      	strh	r3, [r1, #6]
 800cae2:	4770      	bx	lr

0800cae4 <GUIDRV_FlexColor__SetLog2Phys>:
 800cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae6:	4c10      	ldr	r4, [pc, #64]	; (800cb28 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800cae8:	4626      	mov	r6, r4
 800caea:	4607      	mov	r7, r0
 800caec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800caee:	b091      	sub	sp, #68	; 0x44
 800caf0:	466d      	mov	r5, sp
 800caf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800caf4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800caf8:	3420      	adds	r4, #32
 800cafa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cafe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb00:	ad08      	add	r5, sp, #32
 800cb02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cb08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0e:	aa10      	add	r2, sp, #64	; 0x40
 800cb10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb14:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800cb18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cb1c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800cb20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800cb24:	b011      	add	sp, #68	; 0x44
 800cb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb28:	08016254 	.word	0x08016254

0800cb2c <_SetOrg>:
 800cb2c:	b507      	push	{r0, r1, r2, lr}
 800cb2e:	6980      	ldr	r0, [r0, #24]
 800cb30:	e88d 0006 	stmia.w	sp, {r1, r2}
 800cb34:	466a      	mov	r2, sp
 800cb36:	2103      	movs	r1, #3
 800cb38:	f7fb fcbe 	bl	80084b8 <LCD_X_DisplayDriver>
 800cb3c:	b003      	add	sp, #12
 800cb3e:	f85d fb04 	ldr.w	pc, [sp], #4

0800cb42 <_Log2PhysY_X0Y0S1>:
 800cb42:	4608      	mov	r0, r1
 800cb44:	4770      	bx	lr

0800cb46 <_Log2PhysX_X0Y0S0>:
 800cb46:	4608      	mov	r0, r1
 800cb48:	4770      	bx	lr

0800cb4a <_Log2PhysX_X0Y1S0>:
 800cb4a:	4608      	mov	r0, r1
 800cb4c:	4770      	bx	lr

0800cb4e <_Log2PhysX_X0Y0S1>:
 800cb4e:	4610      	mov	r0, r2
 800cb50:	4770      	bx	lr

0800cb52 <_Log2PhysX_X0Y1S1>:
 800cb52:	4610      	mov	r0, r2
 800cb54:	4770      	bx	lr

0800cb56 <_Log2PhysY_X0Y0S0>:
 800cb56:	4610      	mov	r0, r2
 800cb58:	4770      	bx	lr

0800cb5a <_Log2PhysY_X0Y1S0>:
 800cb5a:	6840      	ldr	r0, [r0, #4]
 800cb5c:	1a80      	subs	r0, r0, r2
 800cb5e:	3801      	subs	r0, #1
 800cb60:	4770      	bx	lr

0800cb62 <_Log2PhysX_X1Y0S0>:
 800cb62:	6800      	ldr	r0, [r0, #0]
 800cb64:	1a40      	subs	r0, r0, r1
 800cb66:	3801      	subs	r0, #1
 800cb68:	4770      	bx	lr

0800cb6a <_Log2PhysX_X1Y1S0>:
 800cb6a:	6800      	ldr	r0, [r0, #0]
 800cb6c:	1a40      	subs	r0, r0, r1
 800cb6e:	3801      	subs	r0, #1
 800cb70:	4770      	bx	lr

0800cb72 <_Log2PhysX_X1Y0S1>:
 800cb72:	6840      	ldr	r0, [r0, #4]
 800cb74:	1a80      	subs	r0, r0, r2
 800cb76:	3801      	subs	r0, #1
 800cb78:	4770      	bx	lr

0800cb7a <_Log2PhysX_X1Y1S1>:
 800cb7a:	6840      	ldr	r0, [r0, #4]
 800cb7c:	1a80      	subs	r0, r0, r2
 800cb7e:	3801      	subs	r0, #1
 800cb80:	4770      	bx	lr

0800cb82 <_Log2PhysY_X0Y1S1>:
 800cb82:	6800      	ldr	r0, [r0, #0]
 800cb84:	1a40      	subs	r0, r0, r1
 800cb86:	3801      	subs	r0, #1
 800cb88:	4770      	bx	lr

0800cb8a <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800cb8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cb8e:	6884      	ldr	r4, [r0, #8]
 800cb90:	4698      	mov	r8, r3
 800cb92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800cb94:	079b      	lsls	r3, r3, #30
 800cb96:	460e      	mov	r6, r1
 800cb98:	4617      	mov	r7, r2
 800cb9a:	d52e      	bpl.n	800cbfa <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 800cb9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800cba0:	4620      	mov	r0, r4
 800cba2:	4798      	blx	r3
 800cba4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800cba8:	4605      	mov	r5, r0
 800cbaa:	463a      	mov	r2, r7
 800cbac:	4631      	mov	r1, r6
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4798      	blx	r3
 800cbb2:	69a3      	ldr	r3, [r4, #24]
 800cbb4:	6922      	ldr	r2, [r4, #16]
 800cbb6:	429d      	cmp	r5, r3
 800cbb8:	bfd4      	ite	le
 800cbba:	2300      	movle	r3, #0
 800cbbc:	2301      	movgt	r3, #1
 800cbbe:	4295      	cmp	r5, r2
 800cbc0:	bfb8      	it	lt
 800cbc2:	f043 0301 	orrlt.w	r3, r3, #1
 800cbc6:	6962      	ldr	r2, [r4, #20]
 800cbc8:	4290      	cmp	r0, r2
 800cbca:	bfb8      	it	lt
 800cbcc:	f043 0301 	orrlt.w	r3, r3, #1
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	b913      	cbnz	r3, 800cbda <GUIDRV_FlexColor__SetPixelIndexNoCache+0x50>
 800cbd4:	69e3      	ldr	r3, [r4, #28]
 800cbd6:	4298      	cmp	r0, r3
 800cbd8:	dd0a      	ble.n	800cbf0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x66>
 800cbda:	6862      	ldr	r2, [r4, #4]
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	3a01      	subs	r2, #1
 800cbe0:	9200      	str	r2, [sp, #0]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	4611      	mov	r1, r2
 800cbec:	4620      	mov	r0, r4
 800cbee:	47b8      	blx	r7
 800cbf0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	e001      	b.n	800cbfe <GUIDRV_FlexColor__SetPixelIndexNoCache+0x74>
 800cbfa:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800cbfe:	4620      	mov	r0, r4
 800cc00:	4798      	blx	r3
 800cc02:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800cc06:	4641      	mov	r1, r8
 800cc08:	4620      	mov	r0, r4
 800cc0a:	b002      	add	sp, #8
 800cc0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc10:	4718      	bx	r3

0800cc12 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800cc12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc14:	6884      	ldr	r4, [r0, #8]
 800cc16:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800cc18:	079b      	lsls	r3, r3, #30
 800cc1a:	460e      	mov	r6, r1
 800cc1c:	4617      	mov	r7, r2
 800cc1e:	d543      	bpl.n	800cca8 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x96>
 800cc20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800cc24:	4620      	mov	r0, r4
 800cc26:	4798      	blx	r3
 800cc28:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4605      	mov	r5, r0
 800cc30:	463a      	mov	r2, r7
 800cc32:	4620      	mov	r0, r4
 800cc34:	4798      	blx	r3
 800cc36:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	b11b      	cbz	r3, 800cc46 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	2101      	movs	r1, #1
 800cc42:	4620      	mov	r0, r4
 800cc44:	4798      	blx	r3
 800cc46:	69a3      	ldr	r3, [r4, #24]
 800cc48:	6922      	ldr	r2, [r4, #16]
 800cc4a:	429d      	cmp	r5, r3
 800cc4c:	bfd4      	ite	le
 800cc4e:	2300      	movle	r3, #0
 800cc50:	2301      	movgt	r3, #1
 800cc52:	4295      	cmp	r5, r2
 800cc54:	bfb8      	it	lt
 800cc56:	f043 0301 	orrlt.w	r3, r3, #1
 800cc5a:	6962      	ldr	r2, [r4, #20]
 800cc5c:	4296      	cmp	r6, r2
 800cc5e:	bfb8      	it	lt
 800cc60:	f043 0301 	orrlt.w	r3, r3, #1
 800cc64:	b913      	cbnz	r3, 800cc6c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5a>
 800cc66:	69e3      	ldr	r3, [r4, #28]
 800cc68:	429e      	cmp	r6, r3
 800cc6a:	dd0a      	ble.n	800cc82 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x70>
 800cc6c:	6862      	ldr	r2, [r4, #4]
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	3a01      	subs	r2, #1
 800cc72:	9200      	str	r2, [sp, #0]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	4620      	mov	r0, r4
 800cc80:	47b8      	blx	r7
 800cc82:	4629      	mov	r1, r5
 800cc84:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800cc88:	4632      	mov	r2, r6
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	4798      	blx	r3
 800cc8e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800cc92:	4620      	mov	r0, r4
 800cc94:	4798      	blx	r3
 800cc96:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	b17b      	cbz	r3, 800ccbe <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800cc9e:	2201      	movs	r2, #1
 800cca0:	2100      	movs	r1, #0
 800cca2:	4620      	mov	r0, r4
 800cca4:	4798      	blx	r3
 800cca6:	e00a      	b.n	800ccbe <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800cca8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800ccac:	4620      	mov	r0, r4
 800ccae:	4798      	blx	r3
 800ccb0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	b003      	add	sp, #12
 800ccb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ccbc:	4718      	bx	r3
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	b003      	add	sp, #12
 800ccc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccc4 <GUIDRV_FlexColor__InitOnce>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	6885      	ldr	r5, [r0, #8]
 800ccc8:	4604      	mov	r4, r0
 800ccca:	b99d      	cbnz	r5, 800ccf4 <GUIDRV_FlexColor__InitOnce+0x30>
 800cccc:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800ccd0:	f7fe f99a 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 800ccd4:	4b08      	ldr	r3, [pc, #32]	; (800ccf8 <GUIDRV_FlexColor__InitOnce+0x34>)
 800ccd6:	60a0      	str	r0, [r4, #8]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800ccde:	4629      	mov	r1, r5
 800cce0:	4798      	blx	r3
 800cce2:	68a3      	ldr	r3, [r4, #8]
 800cce4:	2202      	movs	r2, #2
 800cce6:	84da      	strh	r2, [r3, #38]	; 0x26
 800cce8:	2201      	movs	r2, #1
 800ccea:	621a      	str	r2, [r3, #32]
 800ccec:	4a03      	ldr	r2, [pc, #12]	; (800ccfc <GUIDRV_FlexColor__InitOnce+0x38>)
 800ccee:	641c      	str	r4, [r3, #64]	; 0x40
 800ccf0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800ccf4:	bd38      	pop	{r3, r4, r5, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20000028 	.word	0x20000028
 800ccfc:	0800cae5 	.word	0x0800cae5

0800cd00 <_SetDevFunc>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	4606      	mov	r6, r0
 800cd04:	460d      	mov	r5, r1
 800cd06:	4614      	mov	r4, r2
 800cd08:	f7ff ffdc 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800cd0c:	68b3      	ldr	r3, [r6, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d03b      	beq.n	800cd8a <_SetDevFunc+0x8a>
 800cd12:	2d26      	cmp	r5, #38	; 0x26
 800cd14:	d002      	beq.n	800cd1c <_SetDevFunc+0x1c>
 800cd16:	2d27      	cmp	r5, #39	; 0x27
 800cd18:	d016      	beq.n	800cd48 <_SetDevFunc+0x48>
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd1e:	2a10      	cmp	r2, #16
 800cd20:	d002      	beq.n	800cd28 <_SetDevFunc+0x28>
 800cd22:	2a12      	cmp	r2, #18
 800cd24:	d008      	beq.n	800cd38 <_SetDevFunc+0x38>
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
 800cd28:	4a18      	ldr	r2, [pc, #96]	; (800cd8c <_SetDevFunc+0x8c>)
 800cd2a:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800cd2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800cd32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800cd36:	bd70      	pop	{r4, r5, r6, pc}
 800cd38:	4a15      	ldr	r2, [pc, #84]	; (800cd90 <_SetDevFunc+0x90>)
 800cd3a:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800cd3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800cd42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800cd46:	bd70      	pop	{r4, r5, r6, pc}
 800cd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd4a:	2a10      	cmp	r2, #16
 800cd4c:	d002      	beq.n	800cd54 <_SetDevFunc+0x54>
 800cd4e:	2a12      	cmp	r2, #18
 800cd50:	d00e      	beq.n	800cd70 <_SetDevFunc+0x70>
 800cd52:	bd70      	pop	{r4, r5, r6, pc}
 800cd54:	b13c      	cbz	r4, 800cd66 <_SetDevFunc+0x66>
 800cd56:	4a0f      	ldr	r2, [pc, #60]	; (800cd94 <_SetDevFunc+0x94>)
 800cd58:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800cd5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800cd60:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800cd64:	bd70      	pop	{r4, r5, r6, pc}
 800cd66:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800cd6a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	b13c      	cbz	r4, 800cd82 <_SetDevFunc+0x82>
 800cd72:	4a09      	ldr	r2, [pc, #36]	; (800cd98 <_SetDevFunc+0x98>)
 800cd74:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800cd78:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800cd7c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
 800cd82:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800cd86:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	0800c965 	.word	0x0800c965
 800cd90:	0800c96f 	.word	0x0800c96f
 800cd94:	0800c979 	.word	0x0800c979
 800cd98:	0800c9b3 	.word	0x0800c9b3

0800cd9c <_GetDevFunc_Init>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4605      	mov	r5, r0
 800cda0:	f7ff ff90 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800cda4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cda8:	68ac      	ldr	r4, [r5, #8]
 800cdaa:	f7fe f92d 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 800cdae:	66a0      	str	r0, [r4, #104]	; 0x68
 800cdb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	3007      	adds	r0, #7
 800cdb6:	10c0      	asrs	r0, r0, #3
 800cdb8:	4358      	muls	r0, r3
 800cdba:	f7fe f925 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	66e0      	str	r0, [r4, #108]	; 0x6c
 800cdc4:	69a8      	ldr	r0, [r5, #24]
 800cdc6:	f7fb fb77 	bl	80084b8 <LCD_X_DisplayDriver>
 800cdca:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800cdce:	4605      	mov	r5, r0
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	4798      	blx	r3
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800cdda:	4798      	blx	r3
 800cddc:	2d00      	cmp	r5, #0
 800cdde:	bfd4      	ite	le
 800cde0:	2000      	movle	r0, #0
 800cde2:	2001      	movgt	r0, #1
 800cde4:	bd38      	pop	{r3, r4, r5, pc}

0800cde6 <_GetDevFunc_SetSize>:
 800cde6:	b570      	push	{r4, r5, r6, lr}
 800cde8:	4606      	mov	r6, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	4614      	mov	r4, r2
 800cdee:	f7ff ff69 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800cdf2:	68b3      	ldr	r3, [r6, #8]
 800cdf4:	601d      	str	r5, [r3, #0]
 800cdf6:	605c      	str	r4, [r3, #4]
 800cdf8:	bd70      	pop	{r4, r5, r6, pc}

0800cdfa <_GetDevFunc_SetVSize>:
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	4614      	mov	r4, r2
 800ce02:	f7ff ff5f 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800ce06:	68b3      	ldr	r3, [r6, #8]
 800ce08:	609d      	str	r5, [r3, #8]
 800ce0a:	60dc      	str	r4, [r3, #12]
 800ce0c:	bd70      	pop	{r4, r5, r6, pc}

0800ce0e <_GetDevFunc_Off>:
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	4604      	mov	r4, r0
 800ce12:	f7ff ff57 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800ce16:	69a0      	ldr	r0, [r4, #24]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2106      	movs	r1, #6
 800ce1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce20:	f7fb bb4a 	b.w	80084b8 <LCD_X_DisplayDriver>

0800ce24 <_GetDevFunc_On>:
 800ce24:	b510      	push	{r4, lr}
 800ce26:	4604      	mov	r4, r0
 800ce28:	f7ff ff4c 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800ce2c:	69a0      	ldr	r0, [r4, #24]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	2105      	movs	r1, #5
 800ce32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce36:	f7fb bb3f 	b.w	80084b8 <LCD_X_DisplayDriver>

0800ce3a <GUIDRV_FlexColor_Config>:
 800ce3a:	b538      	push	{r3, r4, r5, lr}
 800ce3c:	4605      	mov	r5, r0
 800ce3e:	460c      	mov	r4, r1
 800ce40:	f7ff ff40 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800ce44:	68ab      	ldr	r3, [r5, #8]
 800ce46:	6822      	ldr	r2, [r4, #0]
 800ce48:	62da      	str	r2, [r3, #44]	; 0x2c
 800ce4a:	6862      	ldr	r2, [r4, #4]
 800ce4c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce4e:	68a2      	ldr	r2, [r4, #8]
 800ce50:	635a      	str	r2, [r3, #52]	; 0x34
 800ce52:	0752      	lsls	r2, r2, #29
 800ce54:	d507      	bpl.n	800ce66 <GUIDRV_FlexColor_Config+0x2c>
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	6859      	ldr	r1, [r3, #4]
 800ce5a:	e883 0006 	stmia.w	r3, {r1, r2}
 800ce5e:	689a      	ldr	r2, [r3, #8]
 800ce60:	68d9      	ldr	r1, [r3, #12]
 800ce62:	6099      	str	r1, [r3, #8]
 800ce64:	60da      	str	r2, [r3, #12]
 800ce66:	89a2      	ldrh	r2, [r4, #12]
 800ce68:	849a      	strh	r2, [r3, #36]	; 0x24
 800ce6a:	6922      	ldr	r2, [r4, #16]
 800ce6c:	b112      	cbz	r2, 800ce74 <GUIDRV_FlexColor_Config+0x3a>
 800ce6e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800ce72:	621a      	str	r2, [r3, #32]
 800ce74:	bd38      	pop	{r3, r4, r5, pc}

0800ce76 <GUIDRV_FlexColor_SetFunc>:
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	461e      	mov	r6, r3
 800ce7e:	4617      	mov	r7, r2
 800ce80:	4688      	mov	r8, r1
 800ce82:	f7ff ff1f 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800ce86:	68a5      	ldr	r5, [r4, #8]
 800ce88:	2268      	movs	r2, #104	; 0x68
 800ce8a:	4641      	mov	r1, r8
 800ce8c:	f505 708a 	add.w	r0, r5, #276	; 0x114
 800ce90:	f006 f910 	bl	80130b4 <memcpy>
 800ce94:	4620      	mov	r0, r4
 800ce96:	47b8      	blx	r7
 800ce98:	4620      	mov	r0, r4
 800ce9a:	47b0      	blx	r6
 800ce9c:	6923      	ldr	r3, [r4, #16]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	4798      	blx	r3
 800cea2:	62a8      	str	r0, [r5, #40]	; 0x28
 800cea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cea8 <_WriteU16_A1>:
 800cea8:	0a0b      	lsrs	r3, r1, #8
 800ceaa:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800ceae:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800ceb2:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800ceb6:	2102      	movs	r1, #2
 800ceb8:	3071      	adds	r0, #113	; 0x71
 800ceba:	4718      	bx	r3

0800cebc <_WriteDataMP>:
 800cebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	4604      	mov	r4, r0
 800cec2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800cec4:	460e      	mov	r6, r1
 800cec6:	4615      	mov	r5, r2
 800cec8:	2100      	movs	r1, #0
 800ceca:	b1a5      	cbz	r5, 800cef6 <_WriteDataMP+0x3a>
 800cecc:	f836 2b02 	ldrh.w	r2, [r6], #2
 800ced0:	4603      	mov	r3, r0
 800ced2:	3101      	adds	r1, #1
 800ced4:	0a17      	lsrs	r7, r2, #8
 800ced6:	29fa      	cmp	r1, #250	; 0xfa
 800ced8:	f803 7b02 	strb.w	r7, [r3], #2
 800cedc:	7042      	strb	r2, [r0, #1]
 800cede:	d107      	bne.n	800cef0 <_WriteDataMP+0x34>
 800cee0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800cee4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800cee6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ceea:	4798      	blx	r3
 800ceec:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ceee:	2100      	movs	r1, #0
 800cef0:	3d01      	subs	r5, #1
 800cef2:	4618      	mov	r0, r3
 800cef4:	e7e9      	b.n	800ceca <_WriteDataMP+0xe>
 800cef6:	b131      	cbz	r1, 800cf06 <_WriteDataMP+0x4a>
 800cef8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800cefc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800cefe:	0049      	lsls	r1, r1, #1
 800cf00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	4718      	bx	r3
 800cf06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf0a <_ReadData>:
 800cf0a:	b508      	push	{r3, lr}
 800cf0c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800cf10:	4798      	blx	r3
 800cf12:	bd08      	pop	{r3, pc}

0800cf14 <_WriteData>:
 800cf14:	b289      	uxth	r1, r1
 800cf16:	f7ff bfc7 	b.w	800cea8 <_WriteU16_A1>
	...

0800cf1c <_FillRect>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	4e3e      	ldr	r6, [pc, #248]	; (800d01c <_FillRect+0x100>)
 800cf22:	6885      	ldr	r5, [r0, #8]
 800cf24:	4682      	mov	sl, r0
 800cf26:	6830      	ldr	r0, [r6, #0]
 800cf28:	7c00      	ldrb	r0, [r0, #16]
 800cf2a:	f010 0f01 	tst.w	r0, #1
 800cf2e:	b085      	sub	sp, #20
 800cf30:	4688      	mov	r8, r1
 800cf32:	4614      	mov	r4, r2
 800cf34:	4699      	mov	r9, r3
 800cf36:	eba3 0001 	sub.w	r0, r3, r1
 800cf3a:	d03d      	beq.n	800cfb8 <_FillRect+0x9c>
 800cf3c:	0043      	lsls	r3, r0, #1
 800cf3e:	9303      	str	r3, [sp, #12]
 800cf40:	1c47      	adds	r7, r0, #1
 800cf42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf44:	429c      	cmp	r4, r3
 800cf46:	dc66      	bgt.n	800d016 <_FillRect+0xfa>
 800cf48:	f8d5 b0cc 	ldr.w	fp, [r5, #204]	; 0xcc
 800cf4c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 800cf4e:	f1bb 0f00 	cmp.w	fp, #0
 800cf52:	d101      	bne.n	800cf58 <_FillRect+0x3c>
 800cf54:	46c3      	mov	fp, r8
 800cf56:	e007      	b.n	800cf68 <_FillRect+0x4c>
 800cf58:	e88d 0050 	stmia.w	sp, {r4, r6}
 800cf5c:	464b      	mov	r3, r9
 800cf5e:	4622      	mov	r2, r4
 800cf60:	4641      	mov	r1, r8
 800cf62:	4650      	mov	r0, sl
 800cf64:	47d8      	blx	fp
 800cf66:	e00d      	b.n	800cf84 <_FillRect+0x68>
 800cf68:	45cb      	cmp	fp, r9
 800cf6a:	dc0a      	bgt.n	800cf82 <_FillRect+0x66>
 800cf6c:	4659      	mov	r1, fp
 800cf6e:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800cf72:	4622      	mov	r2, r4
 800cf74:	4650      	mov	r0, sl
 800cf76:	4798      	blx	r3
 800cf78:	f10b 0b01 	add.w	fp, fp, #1
 800cf7c:	f826 0b02 	strh.w	r0, [r6], #2
 800cf80:	e7f2      	b.n	800cf68 <_FillRect+0x4c>
 800cf82:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 800cf84:	9a03      	ldr	r2, [sp, #12]
 800cf86:	1eb3      	subs	r3, r6, #2
 800cf88:	4416      	add	r6, r2
 800cf8a:	42b3      	cmp	r3, r6
 800cf8c:	d005      	beq.n	800cf9a <_FillRect+0x7e>
 800cf8e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800cf90:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800cf94:	404a      	eors	r2, r1
 800cf96:	801a      	strh	r2, [r3, #0]
 800cf98:	e7f7      	b.n	800cf8a <_FillRect+0x6e>
 800cf9a:	9400      	str	r4, [sp, #0]
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	464b      	mov	r3, r9
 800cfa0:	4641      	mov	r1, r8
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800cfa8:	47b0      	blx	r6
 800cfaa:	463a      	mov	r2, r7
 800cfac:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f7ff ff84 	bl	800cebc <_WriteDataMP>
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	e7c4      	b.n	800cf42 <_FillRect+0x26>
 800cfb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800cfba:	1abc      	subs	r4, r7, r2
 800cfbc:	1c67      	adds	r7, r4, #1
 800cfbe:	fb00 7707 	mla	r7, r0, r7, r7
 800cfc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cfc4:	9000      	str	r0, [sp, #0]
 800cfc6:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47a0      	blx	r4
 800cfce:	6833      	ldr	r3, [r6, #0]
 800cfd0:	6eae      	ldr	r6, [r5, #104]	; 0x68
 800cfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd4:	681c      	ldr	r4, [r3, #0]
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	f3c4 2907 	ubfx	r9, r4, #8, #8
 800cfdc:	eb06 0a03 	add.w	sl, r6, r3
 800cfe0:	b2e4      	uxtb	r4, r4
 800cfe2:	b1c7      	cbz	r7, 800d016 <_FillRect+0xfa>
 800cfe4:	2ff9      	cmp	r7, #249	; 0xf9
 800cfe6:	46b8      	mov	r8, r7
 800cfe8:	bf28      	it	cs
 800cfea:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 800cfee:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800cff2:	b93b      	cbnz	r3, 800d004 <_FillRect+0xe8>
 800cff4:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800cff8:	4650      	mov	r0, sl
 800cffa:	4798      	blx	r3
 800cffc:	ebc8 0707 	rsb	r7, r8, r7
 800d000:	2300      	movs	r3, #0
 800d002:	e7ee      	b.n	800cfe2 <_FillRect+0xc6>
 800d004:	4633      	mov	r3, r6
 800d006:	1872      	adds	r2, r6, r1
 800d008:	4293      	cmp	r3, r2
 800d00a:	d0f3      	beq.n	800cff4 <_FillRect+0xd8>
 800d00c:	f883 9001 	strb.w	r9, [r3, #1]
 800d010:	f803 4f02 	strb.w	r4, [r3, #2]!
 800d014:	e7f8      	b.n	800d008 <_FillRect+0xec>
 800d016:	b005      	add	sp, #20
 800d018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01c:	20000014 	.word	0x20000014

0800d020 <_DrawBitmap>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	b08f      	sub	sp, #60	; 0x3c
 800d026:	9303      	str	r3, [sp, #12]
 800d028:	6883      	ldr	r3, [r0, #8]
 800d02a:	9309      	str	r3, [sp, #36]	; 0x24
 800d02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d02e:	9005      	str	r0, [sp, #20]
 800d030:	2b08      	cmp	r3, #8
 800d032:	9106      	str	r1, [sp, #24]
 800d034:	9208      	str	r2, [sp, #32]
 800d036:	d80c      	bhi.n	800d052 <_DrawBitmap+0x32>
 800d038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d03a:	f44f 738b 	mov.w	r3, #278	; 0x116
 800d03e:	40d3      	lsrs	r3, r2
 800d040:	07db      	lsls	r3, r3, #31
 800d042:	d506      	bpl.n	800d052 <_DrawBitmap+0x32>
 800d044:	4b98      	ldr	r3, [pc, #608]	; (800d2a8 <_DrawBitmap+0x288>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	7c1b      	ldrb	r3, [r3, #16]
 800d04a:	f003 0303 	and.w	r3, r3, #3
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d010      	beq.n	800d074 <_DrawBitmap+0x54>
 800d052:	9b06      	ldr	r3, [sp, #24]
 800d054:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d056:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d058:	1899      	adds	r1, r3, r2
 800d05a:	9a08      	ldr	r2, [sp, #32]
 800d05c:	9b03      	ldr	r3, [sp, #12]
 800d05e:	4402      	add	r2, r0
 800d060:	3a01      	subs	r2, #1
 800d062:	9200      	str	r2, [sp, #0]
 800d064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d066:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d068:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 800d06c:	9a08      	ldr	r2, [sp, #32]
 800d06e:	18cb      	adds	r3, r1, r3
 800d070:	3b01      	subs	r3, #1
 800d072:	47a0      	blx	r4
 800d074:	9b03      	ldr	r3, [sp, #12]
 800d076:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d078:	9f08      	ldr	r7, [sp, #32]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	930d      	str	r3, [sp, #52]	; 0x34
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	4413      	add	r3, r2
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	9a04      	ldr	r2, [sp, #16]
 800d086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d088:	4413      	add	r3, r2
 800d08a:	930c      	str	r3, [sp, #48]	; 0x30
 800d08c:	9b08      	ldr	r3, [sp, #32]
 800d08e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d090:	1afb      	subs	r3, r7, r3
 800d092:	429a      	cmp	r2, r3
 800d094:	f340 8253 	ble.w	800d53e <_DrawBitmap+0x51e>
 800d098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d09a:	3b01      	subs	r3, #1
 800d09c:	2b0f      	cmp	r3, #15
 800d09e:	f200 8248 	bhi.w	800d532 <_DrawBitmap+0x512>
 800d0a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d0a6:	0010      	.short	0x0010
 800d0a8:	024600c0 	.word	0x024600c0
 800d0ac:	02460148 	.word	0x02460148
 800d0b0:	02460246 	.word	0x02460246
 800d0b4:	024601d8 	.word	0x024601d8
 800d0b8:	02460246 	.word	0x02460246
 800d0bc:	02460246 	.word	0x02460246
 800d0c0:	02460246 	.word	0x02460246
 800d0c4:	0241      	.short	0x0241
 800d0c6:	9b05      	ldr	r3, [sp, #20]
 800d0c8:	689c      	ldr	r4, [r3, #8]
 800d0ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0d0:	4b75      	ldr	r3, [pc, #468]	; (800d2a8 <_DrawBitmap+0x288>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	7c1b      	ldrb	r3, [r3, #16]
 800d0d6:	f003 0303 	and.w	r3, r3, #3
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d022      	beq.n	800d124 <_DrawBitmap+0x104>
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d075      	beq.n	800d1ce <_DrawBitmap+0x1ae>
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d073      	beq.n	800d1ce <_DrawBitmap+0x1ae>
 800d0e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0e8:	9e03      	ldr	r6, [sp, #12]
 800d0ea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d0ec:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800d0f0:	f8b3 9000 	ldrh.w	r9, [r3]
 800d0f4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 800d0f8:	f04f 0880 	mov.w	r8, #128	; 0x80
 800d0fc:	f89b 2000 	ldrb.w	r2, [fp]
 800d100:	fa48 f305 	asr.w	r3, r8, r5
 800d104:	421a      	tst	r2, r3
 800d106:	bf14      	ite	ne
 800d108:	4651      	movne	r1, sl
 800d10a:	4649      	moveq	r1, r9
 800d10c:	3501      	adds	r5, #1
 800d10e:	4620      	mov	r0, r4
 800d110:	f7ff feca 	bl	800cea8 <_WriteU16_A1>
 800d114:	2d08      	cmp	r5, #8
 800d116:	bf04      	itt	eq
 800d118:	f10b 0b01 	addeq.w	fp, fp, #1
 800d11c:	2500      	moveq	r5, #0
 800d11e:	3e01      	subs	r6, #1
 800d120:	d1ec      	bne.n	800d0fc <_DrawBitmap+0xdc>
 800d122:	e206      	b.n	800d532 <_DrawBitmap+0x512>
 800d124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d126:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d12a:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800d12e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d132:	930a      	str	r3, [sp, #40]	; 0x28
 800d134:	2500      	movs	r5, #0
 800d136:	f8cd b01c 	str.w	fp, [sp, #28]
 800d13a:	462b      	mov	r3, r5
 800d13c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d13e:	f892 9000 	ldrb.w	r9, [r2]
 800d142:	2280      	movs	r2, #128	; 0x80
 800d144:	fa42 f208 	asr.w	r2, r2, r8
 800d148:	ea19 0902 	ands.w	r9, r9, r2
 800d14c:	d00d      	beq.n	800d16a <_DrawBitmap+0x14a>
 800d14e:	b91b      	cbnz	r3, 800d158 <_DrawBitmap+0x138>
 800d150:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800d154:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800d158:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d15c:	f8aa 3000 	strh.w	r3, [sl]
 800d160:	3501      	adds	r5, #1
 800d162:	f10a 0a02 	add.w	sl, sl, #2
 800d166:	2301      	movs	r3, #1
 800d168:	e013      	b.n	800d192 <_DrawBitmap+0x172>
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d110      	bne.n	800d190 <_DrawBitmap+0x170>
 800d16e:	9b07      	ldr	r3, [sp, #28]
 800d170:	9700      	str	r7, [sp, #0]
 800d172:	3b01      	subs	r3, #1
 800d174:	463a      	mov	r2, r7
 800d176:	4659      	mov	r1, fp
 800d178:	4620      	mov	r0, r4
 800d17a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d17e:	47b0      	blx	r6
 800d180:	462a      	mov	r2, r5
 800d182:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff fe99 	bl	800cebc <_WriteDataMP>
 800d18a:	464d      	mov	r5, r9
 800d18c:	464b      	mov	r3, r9
 800d18e:	e000      	b.n	800d192 <_DrawBitmap+0x172>
 800d190:	464b      	mov	r3, r9
 800d192:	9a07      	ldr	r2, [sp, #28]
 800d194:	9903      	ldr	r1, [sp, #12]
 800d196:	f108 0801 	add.w	r8, r8, #1
 800d19a:	3201      	adds	r2, #1
 800d19c:	f1b8 0f08 	cmp.w	r8, #8
 800d1a0:	9207      	str	r2, [sp, #28]
 800d1a2:	bf02      	ittt	eq
 800d1a4:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
 800d1a6:	3201      	addeq	r2, #1
 800d1a8:	920a      	streq	r2, [sp, #40]	; 0x28
 800d1aa:	9a04      	ldr	r2, [sp, #16]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	9907      	ldr	r1, [sp, #28]
 800d1b0:	bf08      	it	eq
 800d1b2:	f04f 0800 	moveq.w	r8, #0
 800d1b6:	4291      	cmp	r1, r2
 800d1b8:	d1c0      	bne.n	800d13c <_DrawBitmap+0x11c>
 800d1ba:	2d00      	cmp	r5, #0
 800d1bc:	f000 81b9 	beq.w	800d532 <_DrawBitmap+0x512>
 800d1c0:	9700      	str	r7, [sp, #0]
 800d1c2:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1c8:	463a      	mov	r2, r7
 800d1ca:	4659      	mov	r1, fp
 800d1cc:	e1a6      	b.n	800d51c <_DrawBitmap+0x4fc>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	9a04      	ldr	r2, [sp, #16]
 800d1d2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d1d4:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800d1d8:	9307      	str	r3, [sp, #28]
 800d1da:	eb03 0a02 	add.w	sl, r3, r2
 800d1de:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800d1e2:	9b07      	ldr	r3, [sp, #28]
 800d1e4:	f898 2000 	ldrb.w	r2, [r8]
 800d1e8:	ebc3 090a 	rsb	r9, r3, sl
 800d1ec:	fa4b f305 	asr.w	r3, fp, r5
 800d1f0:	421a      	tst	r2, r3
 800d1f2:	d00d      	beq.n	800d210 <_DrawBitmap+0x1f0>
 800d1f4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800d1f8:	9805      	ldr	r0, [sp, #20]
 800d1fa:	463a      	mov	r2, r7
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	4798      	blx	r3
 800d200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d202:	f8d4 60f8 	ldr.w	r6, [r4, #248]	; 0xf8
 800d206:	4043      	eors	r3, r0
 800d208:	463a      	mov	r2, r7
 800d20a:	4649      	mov	r1, r9
 800d20c:	9805      	ldr	r0, [sp, #20]
 800d20e:	47b0      	blx	r6
 800d210:	3501      	adds	r5, #1
 800d212:	9b07      	ldr	r3, [sp, #28]
 800d214:	2d08      	cmp	r5, #8
 800d216:	bf04      	itt	eq
 800d218:	f108 0801 	addeq.w	r8, r8, #1
 800d21c:	2500      	moveq	r5, #0
 800d21e:	3b01      	subs	r3, #1
 800d220:	9307      	str	r3, [sp, #28]
 800d222:	d1de      	bne.n	800d1e2 <_DrawBitmap+0x1c2>
 800d224:	e185      	b.n	800d532 <_DrawBitmap+0x512>
 800d226:	9b05      	ldr	r3, [sp, #20]
 800d228:	689c      	ldr	r4, [r3, #8]
 800d22a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 8180 	beq.w	800d532 <_DrawBitmap+0x512>
 800d232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d234:	f893 b000 	ldrb.w	fp, [r3]
 800d238:	4b1b      	ldr	r3, [pc, #108]	; (800d2a8 <_DrawBitmap+0x288>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	7c1b      	ldrb	r3, [r3, #16]
 800d23e:	f013 0303 	ands.w	r3, r3, #3
 800d242:	d00f      	beq.n	800d264 <_DrawBitmap+0x244>
 800d244:	2b02      	cmp	r3, #2
 800d246:	f040 8174 	bne.w	800d532 <_DrawBitmap+0x512>
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	930a      	str	r3, [sp, #40]	; 0x28
 800d24e:	2600      	movs	r6, #0
 800d250:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d252:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800d256:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800d25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d25c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d260:	4632      	mov	r2, r6
 800d262:	e046      	b.n	800d2f2 <_DrawBitmap+0x2d2>
 800d264:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d266:	9e03      	ldr	r6, [sp, #12]
 800d268:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800d26c:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 800d270:	f1c5 0303 	rsb	r3, r5, #3
 800d274:	005a      	lsls	r2, r3, #1
 800d276:	f1c2 0306 	rsb	r3, r2, #6
 800d27a:	fa48 f303 	asr.w	r3, r8, r3
 800d27e:	ea03 030b 	and.w	r3, r3, fp
 800d282:	40d3      	lsrs	r3, r2
 800d284:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d286:	3501      	adds	r5, #1
 800d288:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800d28c:	4620      	mov	r0, r4
 800d28e:	f7ff fe0b 	bl	800cea8 <_WriteU16_A1>
 800d292:	2d04      	cmp	r5, #4
 800d294:	bf02      	ittt	eq
 800d296:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 800d29a:	2500      	moveq	r5, #0
 800d29c:	f109 0901 	addeq.w	r9, r9, #1
 800d2a0:	3e01      	subs	r6, #1
 800d2a2:	d1e5      	bne.n	800d270 <_DrawBitmap+0x250>
 800d2a4:	e145      	b.n	800d532 <_DrawBitmap+0x512>
 800d2a6:	bf00      	nop
 800d2a8:	20000014 	.word	0x20000014
 800d2ac:	b91a      	cbnz	r2, 800d2b6 <_DrawBitmap+0x296>
 800d2ae:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800d2b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d2b6:	9a07      	ldr	r2, [sp, #28]
 800d2b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2be:	f8aa 3000 	strh.w	r3, [sl]
 800d2c2:	3601      	adds	r6, #1
 800d2c4:	f10a 0a02 	add.w	sl, sl, #2
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f109 0901 	add.w	r9, r9, #1
 800d2ce:	f1b9 0f04 	cmp.w	r9, #4
 800d2d2:	f108 0801 	add.w	r8, r8, #1
 800d2d6:	d106      	bne.n	800d2e6 <_DrawBitmap+0x2c6>
 800d2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2da:	f893 b001 	ldrb.w	fp, [r3, #1]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2e2:	f04f 0900 	mov.w	r9, #0
 800d2e6:	9b04      	ldr	r3, [sp, #16]
 800d2e8:	9903      	ldr	r1, [sp, #12]
 800d2ea:	440b      	add	r3, r1
 800d2ec:	4598      	cmp	r8, r3
 800d2ee:	f000 80a6 	beq.w	800d43e <_DrawBitmap+0x41e>
 800d2f2:	f1c9 0503 	rsb	r5, r9, #3
 800d2f6:	006d      	lsls	r5, r5, #1
 800d2f8:	f1c5 0306 	rsb	r3, r5, #6
 800d2fc:	21c0      	movs	r1, #192	; 0xc0
 800d2fe:	fa41 f303 	asr.w	r3, r1, r3
 800d302:	ea03 030b 	and.w	r3, r3, fp
 800d306:	40eb      	lsrs	r3, r5
 800d308:	9307      	str	r3, [sp, #28]
 800d30a:	d1cf      	bne.n	800d2ac <_DrawBitmap+0x28c>
 800d30c:	2a01      	cmp	r2, #1
 800d30e:	d110      	bne.n	800d332 <_DrawBitmap+0x312>
 800d310:	9700      	str	r7, [sp, #0]
 800d312:	f108 33ff 	add.w	r3, r8, #4294967295
 800d316:	463a      	mov	r2, r7
 800d318:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d31a:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800d31e:	4620      	mov	r0, r4
 800d320:	47a8      	blx	r5
 800d322:	4632      	mov	r2, r6
 800d324:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d326:	4620      	mov	r0, r4
 800d328:	f7ff fdc8 	bl	800cebc <_WriteDataMP>
 800d32c:	9e07      	ldr	r6, [sp, #28]
 800d32e:	4632      	mov	r2, r6
 800d330:	e7cb      	b.n	800d2ca <_DrawBitmap+0x2aa>
 800d332:	9a07      	ldr	r2, [sp, #28]
 800d334:	e7c9      	b.n	800d2ca <_DrawBitmap+0x2aa>
 800d336:	9b05      	ldr	r3, [sp, #20]
 800d338:	689c      	ldr	r4, [r3, #8]
 800d33a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 80f8 	beq.w	800d532 <_DrawBitmap+0x512>
 800d342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d344:	f893 b000 	ldrb.w	fp, [r3]
 800d348:	4b7e      	ldr	r3, [pc, #504]	; (800d544 <_DrawBitmap+0x524>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	7c1b      	ldrb	r3, [r3, #16]
 800d34e:	f013 0303 	ands.w	r3, r3, #3
 800d352:	d00f      	beq.n	800d374 <_DrawBitmap+0x354>
 800d354:	2b02      	cmp	r3, #2
 800d356:	f040 80ec 	bne.w	800d532 <_DrawBitmap+0x512>
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	930a      	str	r3, [sp, #40]	; 0x28
 800d35e:	2600      	movs	r6, #0
 800d360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d362:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800d366:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800d36a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d370:	4632      	mov	r2, r6
 800d372:	e042      	b.n	800d3fa <_DrawBitmap+0x3da>
 800d374:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d376:	9e03      	ldr	r6, [sp, #12]
 800d378:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800d37c:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 800d380:	f1c5 0301 	rsb	r3, r5, #1
 800d384:	009a      	lsls	r2, r3, #2
 800d386:	f1c2 0304 	rsb	r3, r2, #4
 800d38a:	fa48 f303 	asr.w	r3, r8, r3
 800d38e:	ea03 030b 	and.w	r3, r3, fp
 800d392:	40d3      	lsrs	r3, r2
 800d394:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d396:	3501      	adds	r5, #1
 800d398:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800d39c:	4620      	mov	r0, r4
 800d39e:	f7ff fd83 	bl	800cea8 <_WriteU16_A1>
 800d3a2:	2d02      	cmp	r5, #2
 800d3a4:	bf02      	ittt	eq
 800d3a6:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 800d3aa:	2500      	moveq	r5, #0
 800d3ac:	f109 0901 	addeq.w	r9, r9, #1
 800d3b0:	3e01      	subs	r6, #1
 800d3b2:	d1e5      	bne.n	800d380 <_DrawBitmap+0x360>
 800d3b4:	e0bd      	b.n	800d532 <_DrawBitmap+0x512>
 800d3b6:	b91a      	cbnz	r2, 800d3c0 <_DrawBitmap+0x3a0>
 800d3b8:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 800d3bc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d3c0:	9a07      	ldr	r2, [sp, #28]
 800d3c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c8:	f8aa 3000 	strh.w	r3, [sl]
 800d3cc:	3601      	adds	r6, #1
 800d3ce:	f10a 0a02 	add.w	sl, sl, #2
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f109 0901 	add.w	r9, r9, #1
 800d3d8:	f1b9 0f02 	cmp.w	r9, #2
 800d3dc:	f108 0801 	add.w	r8, r8, #1
 800d3e0:	d106      	bne.n	800d3f0 <_DrawBitmap+0x3d0>
 800d3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3e4:	f893 b001 	ldrb.w	fp, [r3, #1]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3ec:	f04f 0900 	mov.w	r9, #0
 800d3f0:	9b03      	ldr	r3, [sp, #12]
 800d3f2:	9904      	ldr	r1, [sp, #16]
 800d3f4:	440b      	add	r3, r1
 800d3f6:	4598      	cmp	r8, r3
 800d3f8:	d021      	beq.n	800d43e <_DrawBitmap+0x41e>
 800d3fa:	f1c9 0501 	rsb	r5, r9, #1
 800d3fe:	00ad      	lsls	r5, r5, #2
 800d400:	f1c5 0304 	rsb	r3, r5, #4
 800d404:	21f0      	movs	r1, #240	; 0xf0
 800d406:	fa41 f303 	asr.w	r3, r1, r3
 800d40a:	ea03 030b 	and.w	r3, r3, fp
 800d40e:	40eb      	lsrs	r3, r5
 800d410:	9307      	str	r3, [sp, #28]
 800d412:	d1d0      	bne.n	800d3b6 <_DrawBitmap+0x396>
 800d414:	2a01      	cmp	r2, #1
 800d416:	d110      	bne.n	800d43a <_DrawBitmap+0x41a>
 800d418:	9700      	str	r7, [sp, #0]
 800d41a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d41e:	463a      	mov	r2, r7
 800d420:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d422:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800d426:	4620      	mov	r0, r4
 800d428:	47a8      	blx	r5
 800d42a:	4632      	mov	r2, r6
 800d42c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d42e:	4620      	mov	r0, r4
 800d430:	f7ff fd44 	bl	800cebc <_WriteDataMP>
 800d434:	9e07      	ldr	r6, [sp, #28]
 800d436:	4632      	mov	r2, r6
 800d438:	e7cc      	b.n	800d3d4 <_DrawBitmap+0x3b4>
 800d43a:	9a07      	ldr	r2, [sp, #28]
 800d43c:	e7ca      	b.n	800d3d4 <_DrawBitmap+0x3b4>
 800d43e:	2e00      	cmp	r6, #0
 800d440:	d077      	beq.n	800d532 <_DrawBitmap+0x512>
 800d442:	9700      	str	r7, [sp, #0]
 800d444:	463a      	mov	r2, r7
 800d446:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800d44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d44c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d44e:	4620      	mov	r0, r4
 800d450:	47a8      	blx	r5
 800d452:	4632      	mov	r2, r6
 800d454:	e065      	b.n	800d522 <_DrawBitmap+0x502>
 800d456:	9b05      	ldr	r3, [sp, #20]
 800d458:	689c      	ldr	r4, [r3, #8]
 800d45a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d068      	beq.n	800d532 <_DrawBitmap+0x512>
 800d460:	4b38      	ldr	r3, [pc, #224]	; (800d544 <_DrawBitmap+0x524>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	7c1b      	ldrb	r3, [r3, #16]
 800d466:	f013 0303 	ands.w	r3, r3, #3
 800d46a:	d00f      	beq.n	800d48c <_DrawBitmap+0x46c>
 800d46c:	2b02      	cmp	r3, #2
 800d46e:	d160      	bne.n	800d532 <_DrawBitmap+0x512>
 800d470:	f8dd a018 	ldr.w	sl, [sp, #24]
 800d474:	9a03      	ldr	r2, [sp, #12]
 800d476:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800d47a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800d47e:	f8cd a01c 	str.w	sl, [sp, #28]
 800d482:	2500      	movs	r5, #0
 800d484:	4452      	add	r2, sl
 800d486:	462b      	mov	r3, r5
 800d488:	920a      	str	r2, [sp, #40]	; 0x28
 800d48a:	e024      	b.n	800d4d6 <_DrawBitmap+0x4b6>
 800d48c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d48e:	9b03      	ldr	r3, [sp, #12]
 800d490:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d492:	1b5b      	subs	r3, r3, r5
 800d494:	4413      	add	r3, r2
 800d496:	2b00      	cmp	r3, #0
 800d498:	dd4b      	ble.n	800d532 <_DrawBitmap+0x512>
 800d49a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d49e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800d4a6:	f7ff fcff 	bl	800cea8 <_WriteU16_A1>
 800d4aa:	e7f0      	b.n	800d48e <_DrawBitmap+0x46e>
 800d4ac:	b91b      	cbnz	r3, 800d4b6 <_DrawBitmap+0x496>
 800d4ae:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800d4b2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d4b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d4b8:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800d4bc:	f8a8 3000 	strh.w	r3, [r8]
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	f108 0802 	add.w	r8, r8, #2
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	9a07      	ldr	r2, [sp, #28]
 800d4ca:	3201      	adds	r2, #1
 800d4cc:	9207      	str	r2, [sp, #28]
 800d4ce:	9907      	ldr	r1, [sp, #28]
 800d4d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4d2:	4291      	cmp	r1, r2
 800d4d4:	d019      	beq.n	800d50a <_DrawBitmap+0x4ea>
 800d4d6:	f81b 9b01 	ldrb.w	r9, [fp], #1
 800d4da:	f1b9 0f00 	cmp.w	r9, #0
 800d4de:	d1e5      	bne.n	800d4ac <_DrawBitmap+0x48c>
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d110      	bne.n	800d506 <_DrawBitmap+0x4e6>
 800d4e4:	9b07      	ldr	r3, [sp, #28]
 800d4e6:	9700      	str	r7, [sp, #0]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	463a      	mov	r2, r7
 800d4ec:	4651      	mov	r1, sl
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d4f4:	47b0      	blx	r6
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f7ff fcde 	bl	800cebc <_WriteDataMP>
 800d500:	464d      	mov	r5, r9
 800d502:	464b      	mov	r3, r9
 800d504:	e7e0      	b.n	800d4c8 <_DrawBitmap+0x4a8>
 800d506:	464b      	mov	r3, r9
 800d508:	e7de      	b.n	800d4c8 <_DrawBitmap+0x4a8>
 800d50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d50c:	9a06      	ldr	r2, [sp, #24]
 800d50e:	4413      	add	r3, r2
 800d510:	b17d      	cbz	r5, 800d532 <_DrawBitmap+0x512>
 800d512:	9700      	str	r7, [sp, #0]
 800d514:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800d518:	463a      	mov	r2, r7
 800d51a:	4651      	mov	r1, sl
 800d51c:	4620      	mov	r0, r4
 800d51e:	47b0      	blx	r6
 800d520:	462a      	mov	r2, r5
 800d522:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800d524:	4620      	mov	r0, r4
 800d526:	e002      	b.n	800d52e <_DrawBitmap+0x50e>
 800d528:	9a03      	ldr	r2, [sp, #12]
 800d52a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d52e:	f7ff fcc5 	bl	800cebc <_WriteDataMP>
 800d532:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d534:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d536:	4413      	add	r3, r2
 800d538:	931b      	str	r3, [sp, #108]	; 0x6c
 800d53a:	3701      	adds	r7, #1
 800d53c:	e5a6      	b.n	800d08c <_DrawBitmap+0x6c>
 800d53e:	b00f      	add	sp, #60	; 0x3c
 800d540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d544:	20000014 	.word	0x20000014

0800d548 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800d548:	b510      	push	{r4, lr}
 800d54a:	4604      	mov	r4, r0
 800d54c:	f7ff fbba 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800d550:	68a4      	ldr	r4, [r4, #8]
 800d552:	4b10      	ldr	r3, [pc, #64]	; (800d594 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800d554:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800d55a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 800d560:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800d564:	4b0e      	ldr	r3, [pc, #56]	; (800d5a0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800d566:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800d56a:	4b0e      	ldr	r3, [pc, #56]	; (800d5a4 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 800d56c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800d570:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800d572:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800d576:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800d57a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800d57e:	2108      	movs	r1, #8
 800d580:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d584:	4620      	mov	r0, r4
 800d586:	4798      	blx	r3
 800d588:	2310      	movs	r3, #16
 800d58a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d58c:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800d58e:	6463      	str	r3, [r4, #68]	; 0x44
 800d590:	bd10      	pop	{r4, pc}
 800d592:	bf00      	nop
 800d594:	0800d021 	.word	0x0800d021
 800d598:	0800cf1d 	.word	0x0800cf1d
 800d59c:	0800cc13 	.word	0x0800cc13
 800d5a0:	0800cb8b 	.word	0x0800cb8b
 800d5a4:	0800cf0b 	.word	0x0800cf0b
 800d5a8:	0800cf15 	.word	0x0800cf15
 800d5ac:	0801a864 	.word	0x0801a864

0800d5b0 <_SetPhysRAMAddr>:
 800d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460e      	mov	r6, r1
 800d5b8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800d5bc:	212a      	movs	r1, #42	; 0x2a
 800d5be:	4615      	mov	r5, r2
 800d5c0:	4798      	blx	r3
 800d5c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d5c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d5c8:	4431      	add	r1, r6
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d5d0:	4798      	blx	r3
 800d5d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d5d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d5d8:	b2b7      	uxth	r7, r6
 800d5da:	4439      	add	r1, r7
 800d5dc:	4620      	mov	r0, r4
 800d5de:	b2c9      	uxtb	r1, r1
 800d5e0:	4798      	blx	r3
 800d5e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d5e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d5e8:	4431      	add	r1, r6
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d5f0:	4798      	blx	r3
 800d5f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d5f4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d5f8:	4439      	add	r1, r7
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	b2c9      	uxtb	r1, r1
 800d5fe:	4798      	blx	r3
 800d600:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d604:	4620      	mov	r0, r4
 800d606:	212b      	movs	r1, #43	; 0x2b
 800d608:	4798      	blx	r3
 800d60a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d60c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d610:	4429      	add	r1, r5
 800d612:	4620      	mov	r0, r4
 800d614:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d618:	4798      	blx	r3
 800d61a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d61c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d620:	b2ae      	uxth	r6, r5
 800d622:	4431      	add	r1, r6
 800d624:	4620      	mov	r0, r4
 800d626:	b2c9      	uxtb	r1, r1
 800d628:	4798      	blx	r3
 800d62a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d62c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d630:	4429      	add	r1, r5
 800d632:	4620      	mov	r0, r4
 800d634:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d638:	4798      	blx	r3
 800d63a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d63c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d640:	4431      	add	r1, r6
 800d642:	4620      	mov	r0, r4
 800d644:	b2c9      	uxtb	r1, r1
 800d646:	4798      	blx	r3
 800d648:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d64c:	4620      	mov	r0, r4
 800d64e:	212c      	movs	r1, #44	; 0x2c
 800d650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d654:	4718      	bx	r3

0800d656 <_SetRect>:
 800d656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65a:	4604      	mov	r4, r0
 800d65c:	4688      	mov	r8, r1
 800d65e:	461f      	mov	r7, r3
 800d660:	212a      	movs	r1, #42	; 0x2a
 800d662:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800d666:	9d06      	ldr	r5, [sp, #24]
 800d668:	4616      	mov	r6, r2
 800d66a:	4798      	blx	r3
 800d66c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d66e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d672:	4441      	add	r1, r8
 800d674:	4620      	mov	r0, r4
 800d676:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d67a:	4798      	blx	r3
 800d67c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d67e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d682:	4441      	add	r1, r8
 800d684:	4620      	mov	r0, r4
 800d686:	b2c9      	uxtb	r1, r1
 800d688:	4798      	blx	r3
 800d68a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d68c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d690:	4439      	add	r1, r7
 800d692:	4620      	mov	r0, r4
 800d694:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d698:	4798      	blx	r3
 800d69a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d69c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d6a0:	4439      	add	r1, r7
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	b2c9      	uxtb	r1, r1
 800d6a6:	4798      	blx	r3
 800d6a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	212b      	movs	r1, #43	; 0x2b
 800d6b0:	4798      	blx	r3
 800d6b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d6b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d6b8:	4431      	add	r1, r6
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d6c0:	4798      	blx	r3
 800d6c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d6c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d6c8:	4431      	add	r1, r6
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	b2c9      	uxtb	r1, r1
 800d6ce:	4798      	blx	r3
 800d6d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d6d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d6d6:	4429      	add	r1, r5
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800d6de:	4798      	blx	r3
 800d6e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d6e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d6e6:	4429      	add	r1, r5
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	b2c9      	uxtb	r1, r1
 800d6ec:	4798      	blx	r3
 800d6ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	212c      	movs	r1, #44	; 0x2c
 800d6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fa:	4718      	bx	r3

0800d6fc <_SetOrientation>:
 800d6fc:	b513      	push	{r0, r1, r4, lr}
 800d6fe:	4a0e      	ldr	r2, [pc, #56]	; (800d738 <_SetOrientation+0x3c>)
 800d700:	4604      	mov	r4, r0
 800d702:	6851      	ldr	r1, [r2, #4]
 800d704:	6810      	ldr	r0, [r2, #0]
 800d706:	466b      	mov	r3, sp
 800d708:	c303      	stmia	r3!, {r0, r1}
 800d70a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d70e:	4620      	mov	r0, r4
 800d710:	2136      	movs	r1, #54	; 0x36
 800d712:	4798      	blx	r3
 800d714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d716:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800d718:	aa02      	add	r2, sp, #8
 800d71a:	4413      	add	r3, r2
 800d71c:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800d720:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800d724:	4319      	orrs	r1, r3
 800d726:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d72a:	b289      	uxth	r1, r1
 800d72c:	4620      	mov	r0, r4
 800d72e:	b002      	add	sp, #8
 800d730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d734:	4718      	bx	r3
 800d736:	bf00      	nop
 800d738:	080162c8 	.word	0x080162c8

0800d73c <_ReadPixel_16bpp_B8>:
 800d73c:	b513      	push	{r0, r1, r4, lr}
 800d73e:	4604      	mov	r4, r0
 800d740:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d744:	202e      	movs	r0, #46	; 0x2e
 800d746:	4798      	blx	r3
 800d748:	6a21      	ldr	r1, [r4, #32]
 800d74a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800d74e:	4668      	mov	r0, sp
 800d750:	3103      	adds	r1, #3
 800d752:	4798      	blx	r3
 800d754:	6a23      	ldr	r3, [r4, #32]
 800d756:	eb0d 0203 	add.w	r2, sp, r3
 800d75a:	f81d 3003 	ldrb.w	r3, [sp, r3]
 800d75e:	7850      	ldrb	r0, [r2, #1]
 800d760:	08db      	lsrs	r3, r3, #3
 800d762:	0880      	lsrs	r0, r0, #2
 800d764:	02db      	lsls	r3, r3, #11
 800d766:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 800d76a:	7890      	ldrb	r0, [r2, #2]
 800d76c:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 800d770:	b002      	add	sp, #8
 800d772:	bd10      	pop	{r4, pc}

0800d774 <_ReadPixel_16bpp_B16_I>:
 800d774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d776:	4604      	mov	r4, r0
 800d778:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800d77c:	202e      	movs	r0, #46	; 0x2e
 800d77e:	4798      	blx	r3
 800d780:	6a21      	ldr	r1, [r4, #32]
 800d782:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d786:	4668      	mov	r0, sp
 800d788:	3102      	adds	r1, #2
 800d78a:	4798      	blx	r3
 800d78c:	6a22      	ldr	r2, [r4, #32]
 800d78e:	eb0d 0342 	add.w	r3, sp, r2, lsl #1
 800d792:	885b      	ldrh	r3, [r3, #2]
 800d794:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 800d798:	115b      	asrs	r3, r3, #5
 800d79a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800d79e:	4303      	orrs	r3, r0
 800d7a0:	f83d 0012 	ldrh.w	r0, [sp, r2, lsl #1]
 800d7a4:	0200      	lsls	r0, r0, #8
 800d7a6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 800d7aa:	4318      	orrs	r0, r3
 800d7ac:	b004      	add	sp, #16
 800d7ae:	bd10      	pop	{r4, pc}

0800d7b0 <_SetReg_B8>:
 800d7b0:	b570      	push	{r4, r5, r6, lr}
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d7ba:	0a08      	lsrs	r0, r1, #8
 800d7bc:	4798      	blx	r3
 800d7be:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800d7c2:	b2e0      	uxtb	r0, r4
 800d7c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7c8:	4718      	bx	r3

0800d7ca <_SetReg_B16>:
 800d7ca:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800d7ce:	4608      	mov	r0, r1
 800d7d0:	4718      	bx	r3

0800d7d2 <_WritePara_B8>:
 800d7d2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800d7d6:	b2c8      	uxtb	r0, r1
 800d7d8:	4718      	bx	r3

0800d7da <_WritePara_B16>:
 800d7da:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800d7de:	4608      	mov	r0, r1
 800d7e0:	4718      	bx	r3
	...

0800d7e4 <_SetInterface>:
 800d7e4:	2908      	cmp	r1, #8
 800d7e6:	d002      	beq.n	800d7ee <_SetInterface+0xa>
 800d7e8:	2910      	cmp	r1, #16
 800d7ea:	d005      	beq.n	800d7f8 <_SetInterface+0x14>
 800d7ec:	4770      	bx	lr
 800d7ee:	4b06      	ldr	r3, [pc, #24]	; (800d808 <_SetInterface+0x24>)
 800d7f0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <_SetInterface+0x28>)
 800d7f6:	e003      	b.n	800d800 <_SetInterface+0x1c>
 800d7f8:	4b05      	ldr	r3, [pc, #20]	; (800d810 <_SetInterface+0x2c>)
 800d7fa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 800d7fe:	4b05      	ldr	r3, [pc, #20]	; (800d814 <_SetInterface+0x30>)
 800d800:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	0800d7b1 	.word	0x0800d7b1
 800d80c:	0800d7d3 	.word	0x0800d7d3
 800d810:	0800d7cb 	.word	0x0800d7cb
 800d814:	0800d7db 	.word	0x0800d7db

0800d818 <_ReadRect_16bpp_B8>:
 800d818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81a:	b085      	sub	sp, #20
 800d81c:	6885      	ldr	r5, [r0, #8]
 800d81e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d820:	9700      	str	r7, [sp, #0]
 800d822:	1abc      	subs	r4, r7, r2
 800d824:	1a58      	subs	r0, r3, r1
 800d826:	3401      	adds	r4, #1
 800d828:	fb00 4404 	mla	r4, r0, r4, r4
 800d82c:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800d830:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d832:	4628      	mov	r0, r5
 800d834:	47b8      	blx	r7
 800d836:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800d83a:	202e      	movs	r0, #46	; 0x2e
 800d83c:	4798      	blx	r3
 800d83e:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 800d842:	6a29      	ldr	r1, [r5, #32]
 800d844:	a802      	add	r0, sp, #8
 800d846:	4798      	blx	r3
 800d848:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 800d84c:	2103      	movs	r1, #3
 800d84e:	a802      	add	r0, sp, #8
 800d850:	4798      	blx	r3
 800d852:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d856:	089a      	lsrs	r2, r3, #2
 800d858:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d85c:	08db      	lsrs	r3, r3, #3
 800d85e:	02db      	lsls	r3, r3, #11
 800d860:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800d864:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800d868:	3c01      	subs	r4, #1
 800d86a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 800d86e:	f826 3b02 	strh.w	r3, [r6], #2
 800d872:	d1e9      	bne.n	800d848 <_ReadRect_16bpp_B8+0x30>
 800d874:	b005      	add	sp, #20
 800d876:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d878 <_ReadRect_16bpp_B16_I>:
 800d878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87a:	b087      	sub	sp, #28
 800d87c:	6885      	ldr	r5, [r0, #8]
 800d87e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d880:	9700      	str	r7, [sp, #0]
 800d882:	1abc      	subs	r4, r7, r2
 800d884:	1a58      	subs	r0, r3, r1
 800d886:	3401      	adds	r4, #1
 800d888:	fb00 4404 	mla	r4, r0, r4, r4
 800d88c:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800d890:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d892:	4628      	mov	r0, r5
 800d894:	47b8      	blx	r7
 800d896:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
 800d89a:	202e      	movs	r0, #46	; 0x2e
 800d89c:	4798      	blx	r3
 800d89e:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 800d8a2:	6a29      	ldr	r1, [r5, #32]
 800d8a4:	a802      	add	r0, sp, #8
 800d8a6:	4798      	blx	r3
 800d8a8:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 800d8ac:	2102      	movs	r1, #2
 800d8ae:	a802      	add	r0, sp, #8
 800d8b0:	4798      	blx	r3
 800d8b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d8b6:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 800d8ba:	115b      	asrs	r3, r3, #5
 800d8bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800d8c0:	4313      	orrs	r3, r2
 800d8c2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d8c6:	0212      	lsls	r2, r2, #8
 800d8c8:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	3c01      	subs	r4, #1
 800d8d0:	f826 3b02 	strh.w	r3, [r6], #2
 800d8d4:	d1e8      	bne.n	800d8a8 <_ReadRect_16bpp_B16_I+0x30>
 800d8d6:	b007      	add	sp, #28
 800d8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d8dc <GUIDRV_FlexColor_SetFunc66709>:
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	4604      	mov	r4, r0
 800d8e0:	f7ff f9f0 	bl	800ccc4 <GUIDRV_FlexColor__InitOnce>
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	4a11      	ldr	r2, [pc, #68]	; (800d92c <GUIDRV_FlexColor_SetFunc66709+0x50>)
 800d8e8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800d8ec:	4a10      	ldr	r2, [pc, #64]	; (800d930 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 800d8ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800d8f2:	4a10      	ldr	r2, [pc, #64]	; (800d934 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 800d8f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800d8f8:	4a0f      	ldr	r2, [pc, #60]	; (800d938 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 800d8fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800d8fe:	4a0f      	ldr	r2, [pc, #60]	; (800d93c <GUIDRV_FlexColor_SetFunc66709+0x60>)
 800d900:	6810      	ldr	r0, [r2, #0]
 800d902:	6852      	ldr	r2, [r2, #4]
 800d904:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800d908:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800d90a:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
 800d90e:	f022 0203 	bic.w	r2, r2, #3
 800d912:	2100      	movs	r1, #0
 800d914:	480a      	ldr	r0, [pc, #40]	; (800d940 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 800d916:	84da      	strh	r2, [r3, #38]	; 0x26
 800d918:	4a0a      	ldr	r2, [pc, #40]	; (800d944 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 800d91a:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 800d91e:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 800d922:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 800d926:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800d92a:	bd10      	pop	{r4, pc}
 800d92c:	0800d5b1 	.word	0x0800d5b1
 800d930:	0800d657 	.word	0x0800d657
 800d934:	0800d6fd 	.word	0x0800d6fd
 800d938:	0800d73d 	.word	0x0800d73d
 800d93c:	20000034 	.word	0x20000034
 800d940:	0800d819 	.word	0x0800d819
 800d944:	0800d7e5 	.word	0x0800d7e5

0800d948 <_GetDevData>:
 800d948:	2901      	cmp	r1, #1
 800d94a:	4802      	ldr	r0, [pc, #8]	; (800d954 <_GetDevData+0xc>)
 800d94c:	bf18      	it	ne
 800d94e:	2000      	movne	r0, #0
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	0801a864 	.word	0x0801a864

0800d958 <_GetDevFunc>:
 800d958:	2916      	cmp	r1, #22
 800d95a:	4802      	ldr	r0, [pc, #8]	; (800d964 <_GetDevFunc+0xc>)
 800d95c:	bf18      	it	ne
 800d95e:	2000      	movne	r0, #0
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	0800e449 	.word	0x0800e449

0800d968 <_SetOrg>:
 800d968:	6800      	ldr	r0, [r0, #0]
 800d96a:	b110      	cbz	r0, 800d972 <_SetOrg+0xa>
 800d96c:	68c3      	ldr	r3, [r0, #12]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	4718      	bx	r3
 800d972:	4770      	bx	lr

0800d974 <_GetRect>:
 800d974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d976:	6880      	ldr	r0, [r0, #8]
 800d978:	460d      	mov	r5, r1
 800d97a:	f7fd fa81 	bl	800ae80 <GUI_ALLOC_LockH>
 800d97e:	4602      	mov	r2, r0
 800d980:	a802      	add	r0, sp, #8
 800d982:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d986:	8914      	ldrh	r4, [r2, #8]
 800d988:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800d98c:	802b      	strh	r3, [r5, #0]
 800d98e:	441c      	add	r4, r3
 800d990:	8953      	ldrh	r3, [r2, #10]
 800d992:	f840 2d04 	str.w	r2, [r0, #-4]!
 800d996:	440b      	add	r3, r1
 800d998:	3b01      	subs	r3, #1
 800d99a:	3c01      	subs	r4, #1
 800d99c:	8069      	strh	r1, [r5, #2]
 800d99e:	80ac      	strh	r4, [r5, #4]
 800d9a0:	80eb      	strh	r3, [r5, #6]
 800d9a2:	f7fd fa7b 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800d9a6:	b003      	add	sp, #12
 800d9a8:	bd30      	pop	{r4, r5, pc}
	...

0800d9ac <_XY2PTR>:
 800d9ac:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <_XY2PTR+0x3c>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9b2:	4606      	mov	r6, r0
 800d9b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	f7fd fa62 	bl	800ae80 <GUI_ALLOC_LockH>
 800d9bc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d9c0:	68c4      	ldr	r4, [r0, #12]
 800d9c2:	1a69      	subs	r1, r5, r1
 800d9c4:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800d9c8:	ab02      	add	r3, sp, #8
 800d9ca:	1b76      	subs	r6, r6, r5
 800d9cc:	0076      	lsls	r6, r6, #1
 800d9ce:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d9d2:	3618      	adds	r6, #24
 800d9d4:	fb04 6501 	mla	r5, r4, r1, r6
 800d9d8:	1944      	adds	r4, r0, r5
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fd fa5e 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	b002      	add	sp, #8
 800d9e4:	bd70      	pop	{r4, r5, r6, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20000014 	.word	0x20000014

0800d9ec <_GetPixelIndex>:
 800d9ec:	b508      	push	{r3, lr}
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	f7ff ffdb 	bl	800d9ac <_XY2PTR>
 800d9f6:	8800      	ldrh	r0, [r0, #0]
 800d9f8:	bd08      	pop	{r3, pc}
	...

0800d9fc <_XorPixel>:
 800d9fc:	4b14      	ldr	r3, [pc, #80]	; (800da50 <_XorPixel+0x54>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da02:	4607      	mov	r7, r0
 800da04:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800da06:	4616      	mov	r6, r2
 800da08:	460d      	mov	r5, r1
 800da0a:	f7fd fa39 	bl	800ae80 <GUI_ALLOC_LockH>
 800da0e:	4631      	mov	r1, r6
 800da10:	9000      	str	r0, [sp, #0]
 800da12:	4628      	mov	r0, r5
 800da14:	f7ff ffca 	bl	800d9ac <_XY2PTR>
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	4604      	mov	r4, r0
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	4798      	blx	r3
 800da20:	8823      	ldrh	r3, [r4, #0]
 800da22:	4058      	eors	r0, r3
 800da24:	9b00      	ldr	r3, [sp, #0]
 800da26:	8020      	strh	r0, [r4, #0]
 800da28:	6958      	ldr	r0, [r3, #20]
 800da2a:	b160      	cbz	r0, 800da46 <_XorPixel+0x4a>
 800da2c:	f7fd fa28 	bl	800ae80 <GUI_ALLOC_LockH>
 800da30:	ac02      	add	r4, sp, #8
 800da32:	6883      	ldr	r3, [r0, #8]
 800da34:	f844 0d04 	str.w	r0, [r4, #-4]!
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4632      	mov	r2, r6
 800da3c:	4629      	mov	r1, r5
 800da3e:	4798      	blx	r3
 800da40:	4620      	mov	r0, r4
 800da42:	f7fd fa2b 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800da46:	4668      	mov	r0, sp
 800da48:	f7fd fa28 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800da4c:	b003      	add	sp, #12
 800da4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da50:	20000014 	.word	0x20000014

0800da54 <_SetPixelIndex>:
 800da54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da56:	461c      	mov	r4, r3
 800da58:	4b10      	ldr	r3, [pc, #64]	; (800da9c <_SetPixelIndex+0x48>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800da5e:	460d      	mov	r5, r1
 800da60:	4616      	mov	r6, r2
 800da62:	f7fd fa0d 	bl	800ae80 <GUI_ALLOC_LockH>
 800da66:	4631      	mov	r1, r6
 800da68:	9000      	str	r0, [sp, #0]
 800da6a:	4628      	mov	r0, r5
 800da6c:	f7ff ff9e 	bl	800d9ac <_XY2PTR>
 800da70:	9b00      	ldr	r3, [sp, #0]
 800da72:	8004      	strh	r4, [r0, #0]
 800da74:	6958      	ldr	r0, [r3, #20]
 800da76:	b160      	cbz	r0, 800da92 <_SetPixelIndex+0x3e>
 800da78:	f7fd fa02 	bl	800ae80 <GUI_ALLOC_LockH>
 800da7c:	ac02      	add	r4, sp, #8
 800da7e:	6883      	ldr	r3, [r0, #8]
 800da80:	f844 0d04 	str.w	r0, [r4, #-4]!
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	4632      	mov	r2, r6
 800da88:	4629      	mov	r1, r5
 800da8a:	4798      	blx	r3
 800da8c:	4620      	mov	r0, r4
 800da8e:	f7fd fa05 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800da92:	4668      	mov	r0, sp
 800da94:	f7fd fa02 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800da98:	b002      	add	sp, #8
 800da9a:	bd70      	pop	{r4, r5, r6, pc}
 800da9c:	20000014 	.word	0x20000014

0800daa0 <_DrawVLine>:
 800daa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daa4:	4c2c      	ldr	r4, [pc, #176]	; (800db58 <_DrawVLine+0xb8>)
 800daa6:	461e      	mov	r6, r3
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	4680      	mov	r8, r0
 800daac:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800daae:	460f      	mov	r7, r1
 800dab0:	4615      	mov	r5, r2
 800dab2:	f7fd f9e5 	bl	800ae80 <GUI_ALLOC_LockH>
 800dab6:	9000      	str	r0, [sp, #0]
 800dab8:	6940      	ldr	r0, [r0, #20]
 800daba:	46a1      	mov	r9, r4
 800dabc:	b108      	cbz	r0, 800dac2 <_DrawVLine+0x22>
 800dabe:	f7fd f9df 	bl	800ae80 <GUI_ALLOC_LockH>
 800dac2:	9001      	str	r0, [sp, #4]
 800dac4:	4629      	mov	r1, r5
 800dac6:	4638      	mov	r0, r7
 800dac8:	f7ff ff70 	bl	800d9ac <_XY2PTR>
 800dacc:	f8d9 3000 	ldr.w	r3, [r9]
 800dad0:	7c1a      	ldrb	r2, [r3, #16]
 800dad2:	07d2      	lsls	r2, r2, #31
 800dad4:	4604      	mov	r4, r0
 800dad6:	d51f      	bpl.n	800db18 <_DrawVLine+0x78>
 800dad8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	4798      	blx	r3
 800dae0:	fa1f f880 	uxth.w	r8, r0
 800dae4:	9801      	ldr	r0, [sp, #4]
 800dae6:	b120      	cbz	r0, 800daf2 <_DrawVLine+0x52>
 800dae8:	6883      	ldr	r3, [r0, #8]
 800daea:	462a      	mov	r2, r5
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4639      	mov	r1, r7
 800daf0:	4798      	blx	r3
 800daf2:	8823      	ldrh	r3, [r4, #0]
 800daf4:	ea88 0303 	eor.w	r3, r8, r3
 800daf8:	8023      	strh	r3, [r4, #0]
 800dafa:	9b00      	ldr	r3, [sp, #0]
 800dafc:	3501      	adds	r5, #1
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	42b5      	cmp	r5, r6
 800db02:	441c      	add	r4, r3
 800db04:	ddee      	ble.n	800dae4 <_DrawVLine+0x44>
 800db06:	4668      	mov	r0, sp
 800db08:	f7fd f9c8 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800db0c:	9b01      	ldr	r3, [sp, #4]
 800db0e:	b303      	cbz	r3, 800db52 <_DrawVLine+0xb2>
 800db10:	a801      	add	r0, sp, #4
 800db12:	f7fd f9c3 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800db16:	e01c      	b.n	800db52 <_DrawVLine+0xb2>
 800db18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db1a:	9a00      	ldr	r2, [sp, #0]
 800db1c:	f8d3 9000 	ldr.w	r9, [r3]
 800db20:	9b01      	ldr	r3, [sp, #4]
 800db22:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800db26:	b163      	cbz	r3, 800db42 <_DrawVLine+0xa2>
 800db28:	9801      	ldr	r0, [sp, #4]
 800db2a:	6883      	ldr	r3, [r0, #8]
 800db2c:	462a      	mov	r2, r5
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4639      	mov	r1, r7
 800db32:	3501      	adds	r5, #1
 800db34:	4798      	blx	r3
 800db36:	42ae      	cmp	r6, r5
 800db38:	f8a4 9000 	strh.w	r9, [r4]
 800db3c:	4444      	add	r4, r8
 800db3e:	daf3      	bge.n	800db28 <_DrawVLine+0x88>
 800db40:	e7e1      	b.n	800db06 <_DrawVLine+0x66>
 800db42:	1b75      	subs	r5, r6, r5
 800db44:	3501      	adds	r5, #1
 800db46:	3d01      	subs	r5, #1
 800db48:	f8a4 9000 	strh.w	r9, [r4]
 800db4c:	4444      	add	r4, r8
 800db4e:	d1fa      	bne.n	800db46 <_DrawVLine+0xa6>
 800db50:	e7d9      	b.n	800db06 <_DrawVLine+0x66>
 800db52:	b003      	add	sp, #12
 800db54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db58:	20000014 	.word	0x20000014

0800db5c <_FillRect>:
 800db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	4f2a      	ldr	r7, [pc, #168]	; (800dc0c <_FillRect+0xb0>)
 800db62:	461d      	mov	r5, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	4614      	mov	r4, r2
 800db68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db6a:	b087      	sub	sp, #28
 800db6c:	6812      	ldr	r2, [r2, #0]
 800db6e:	9202      	str	r2, [sp, #8]
 800db70:	4683      	mov	fp, r0
 800db72:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800db74:	4689      	mov	r9, r1
 800db76:	f7fd f983 	bl	800ae80 <GUI_ALLOC_LockH>
 800db7a:	4621      	mov	r1, r4
 800db7c:	9004      	str	r0, [sp, #16]
 800db7e:	4648      	mov	r0, r9
 800db80:	f7ff ff14 	bl	800d9ac <_XY2PTR>
 800db84:	9a04      	ldr	r2, [sp, #16]
 800db86:	4606      	mov	r6, r0
 800db88:	6950      	ldr	r0, [r2, #20]
 800db8a:	68d3      	ldr	r3, [r2, #12]
 800db8c:	9303      	str	r3, [sp, #12]
 800db8e:	ebc9 0505 	rsb	r5, r9, r5
 800db92:	f105 0a01 	add.w	sl, r5, #1
 800db96:	b188      	cbz	r0, 800dbbc <_FillRect+0x60>
 800db98:	f7fd f972 	bl	800ae80 <GUI_ALLOC_LockH>
 800db9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db9e:	f10d 0818 	add.w	r8, sp, #24
 800dba2:	1b1b      	subs	r3, r3, r4
 800dba4:	f848 0d04 	str.w	r0, [r8, #-4]!
 800dba8:	3301      	adds	r3, #1
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	4622      	mov	r2, r4
 800dbae:	4653      	mov	r3, sl
 800dbb0:	4649      	mov	r1, r9
 800dbb2:	f000 fbf5 	bl	800e3a0 <GUI_USAGE_AddRect>
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	f7fd f970 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800dbbc:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 800dbc0:	006d      	lsls	r5, r5, #1
 800dbc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	dc1a      	bgt.n	800dbfe <_FillRect+0xa2>
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	7c1b      	ldrb	r3, [r3, #16]
 800dbcc:	07db      	lsls	r3, r3, #31
 800dbce:	d50d      	bpl.n	800dbec <_FillRect+0x90>
 800dbd0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	4798      	blx	r3
 800dbd8:	1eb3      	subs	r3, r6, #2
 800dbda:	b280      	uxth	r0, r0
 800dbdc:	1971      	adds	r1, r6, r5
 800dbde:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800dbe2:	4042      	eors	r2, r0
 800dbe4:	428b      	cmp	r3, r1
 800dbe6:	801a      	strh	r2, [r3, #0]
 800dbe8:	d1f9      	bne.n	800dbde <_FillRect+0x82>
 800dbea:	e004      	b.n	800dbf6 <_FillRect+0x9a>
 800dbec:	4652      	mov	r2, sl
 800dbee:	4641      	mov	r1, r8
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	f7fe f887 	bl	800bd04 <GUI__memset16>
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	3401      	adds	r4, #1
 800dbfa:	441e      	add	r6, r3
 800dbfc:	e7e1      	b.n	800dbc2 <_FillRect+0x66>
 800dbfe:	a804      	add	r0, sp, #16
 800dc00:	f7fd f94c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800dc04:	b007      	add	sp, #28
 800dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc0a:	bf00      	nop
 800dc0c:	20000014 	.word	0x20000014

0800dc10 <_DrawHLine>:
 800dc10:	b507      	push	{r0, r1, r2, lr}
 800dc12:	9200      	str	r2, [sp, #0]
 800dc14:	f7ff ffa2 	bl	800db5c <_FillRect>
 800dc18:	b003      	add	sp, #12
 800dc1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800dc20 <_DrawBitmap>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	4d99      	ldr	r5, [pc, #612]	; (800de8c <_DrawBitmap+0x26c>)
 800dc26:	b091      	sub	sp, #68	; 0x44
 800dc28:	460e      	mov	r6, r1
 800dc2a:	9302      	str	r3, [sp, #8]
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	900a      	str	r0, [sp, #40]	; 0x28
 800dc30:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800dc32:	9205      	str	r2, [sp, #20]
 800dc34:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800dc36:	f7fd f923 	bl	800ae80 <GUI_ALLOC_LockH>
 800dc3a:	900e      	str	r0, [sp, #56]	; 0x38
 800dc3c:	6940      	ldr	r0, [r0, #20]
 800dc3e:	b108      	cbz	r0, 800dc44 <_DrawBitmap+0x24>
 800dc40:	f7fd f91e 	bl	800ae80 <GUI_ALLOC_LockH>
 800dc44:	900f      	str	r0, [sp, #60]	; 0x3c
 800dc46:	a810      	add	r0, sp, #64	; 0x40
 800dc48:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	9306      	str	r3, [sp, #24]
 800dc50:	f7fd f924 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800dc54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dc56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dc58:	eb06 0b03 	add.w	fp, r6, r3
 800dc5c:	b150      	cbz	r0, 800dc74 <_DrawBitmap+0x54>
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	7c1b      	ldrb	r3, [r3, #16]
 800dc62:	0799      	lsls	r1, r3, #30
 800dc64:	d106      	bne.n	800dc74 <_DrawBitmap+0x54>
 800dc66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dc68:	9300      	str	r3, [sp, #0]
 800dc6a:	9a05      	ldr	r2, [sp, #20]
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	4659      	mov	r1, fp
 800dc70:	f000 fb96 	bl	800e3a0 <GUI_USAGE_AddRect>
 800dc74:	9905      	ldr	r1, [sp, #20]
 800dc76:	4658      	mov	r0, fp
 800dc78:	f7ff fe98 	bl	800d9ac <_XY2PTR>
 800dc7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc7e:	2b10      	cmp	r3, #16
 800dc80:	4605      	mov	r5, r0
 800dc82:	d134      	bne.n	800dcee <_DrawBitmap+0xce>
 800dc84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc86:	b133      	cbz	r3, 800dc96 <_DrawBitmap+0x76>
 800dc88:	9b02      	ldr	r3, [sp, #8]
 800dc8a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800de94 <_DrawBitmap+0x274>
 800dc8e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800dc92:	2600      	movs	r6, #0
 800dc94:	e012      	b.n	800dcbc <_DrawBitmap+0x9c>
 800dc96:	4b7e      	ldr	r3, [pc, #504]	; (800de90 <_DrawBitmap+0x270>)
 800dc98:	681e      	ldr	r6, [r3, #0]
 800dc9a:	2e00      	cmp	r6, #0
 800dc9c:	d0f4      	beq.n	800dc88 <_DrawBitmap+0x68>
 800dc9e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	9b06      	ldr	r3, [sp, #24]
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	9a02      	ldr	r2, [sp, #8]
 800dca8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcaa:	4621      	mov	r1, r4
 800dcac:	47b0      	blx	r6
 800dcae:	e352      	b.n	800e356 <_DrawBitmap+0x736>
 800dcb0:	b944      	cbnz	r4, 800dcc4 <_DrawBitmap+0xa4>
 800dcb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dcb4:	441c      	add	r4, r3
 800dcb6:	9b06      	ldr	r3, [sp, #24]
 800dcb8:	3601      	adds	r6, #1
 800dcba:	441d      	add	r5, r3
 800dcbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dcbe:	429e      	cmp	r6, r3
 800dcc0:	dbf6      	blt.n	800dcb0 <_DrawBitmap+0x90>
 800dcc2:	e343      	b.n	800e34c <_DrawBitmap+0x72c>
 800dcc4:	2d00      	cmp	r5, #0
 800dcc6:	d0f4      	beq.n	800dcb2 <_DrawBitmap+0x92>
 800dcc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800dcca:	f8d9 3000 	ldr.w	r3, [r9]
 800dcce:	4642      	mov	r2, r8
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	4798      	blx	r3
 800dcd6:	2f00      	cmp	r7, #0
 800dcd8:	d0eb      	beq.n	800dcb2 <_DrawBitmap+0x92>
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	9a05      	ldr	r2, [sp, #20]
 800dcde:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dce2:	9b02      	ldr	r3, [sp, #8]
 800dce4:	4432      	add	r2, r6
 800dce6:	4659      	mov	r1, fp
 800dce8:	4638      	mov	r0, r7
 800dcea:	47d0      	blx	sl
 800dcec:	e7e1      	b.n	800dcb2 <_DrawBitmap+0x92>
 800dcee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dcf0:	2b17      	cmp	r3, #23
 800dcf2:	dd44      	ble.n	800dd7e <_DrawBitmap+0x15e>
 800dcf4:	f06f 0303 	mvn.w	r3, #3
 800dcf8:	fb03 f30b 	mul.w	r3, r3, fp
 800dcfc:	9307      	str	r3, [sp, #28]
 800dcfe:	f06f 0301 	mvn.w	r3, #1
 800dd02:	fb03 f30b 	mul.w	r3, r3, fp
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	445b      	add	r3, fp
 800dd0c:	f04f 0800 	mov.w	r8, #0
 800dd10:	9308      	str	r3, [sp, #32]
 800dd12:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dd14:	4598      	cmp	r8, r3
 800dd16:	f280 8319 	bge.w	800e34c <_DrawBitmap+0x72c>
 800dd1a:	9b05      	ldr	r3, [sp, #20]
 800dd1c:	eb03 0908 	add.w	r9, r3, r8
 800dd20:	b934      	cbnz	r4, 800dd30 <_DrawBitmap+0x110>
 800dd22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dd24:	441c      	add	r4, r3
 800dd26:	9b06      	ldr	r3, [sp, #24]
 800dd28:	f108 0801 	add.w	r8, r8, #1
 800dd2c:	441d      	add	r5, r3
 800dd2e:	e7f0      	b.n	800dd12 <_DrawBitmap+0xf2>
 800dd30:	2d00      	cmp	r5, #0
 800dd32:	d0f6      	beq.n	800dd22 <_DrawBitmap+0x102>
 800dd34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800dd36:	b137      	cbz	r7, 800dd46 <_DrawBitmap+0x126>
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	464a      	mov	r2, r9
 800dd3c:	685e      	ldr	r6, [r3, #4]
 800dd3e:	9b02      	ldr	r3, [sp, #8]
 800dd40:	4659      	mov	r1, fp
 800dd42:	4638      	mov	r0, r7
 800dd44:	47b0      	blx	r6
 800dd46:	9b07      	ldr	r3, [sp, #28]
 800dd48:	eb04 0a03 	add.w	sl, r4, r3
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	18eb      	adds	r3, r5, r3
 800dd50:	9303      	str	r3, [sp, #12]
 800dd52:	465e      	mov	r6, fp
 800dd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd56:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4798      	blx	r3
 800dd60:	9b03      	ldr	r3, [sp, #12]
 800dd62:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 800dd66:	b12f      	cbz	r7, 800dd74 <_DrawBitmap+0x154>
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	464a      	mov	r2, r9
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4631      	mov	r1, r6
 800dd70:	4638      	mov	r0, r7
 800dd72:	4798      	blx	r3
 800dd74:	9b08      	ldr	r3, [sp, #32]
 800dd76:	3601      	adds	r6, #1
 800dd78:	429e      	cmp	r6, r3
 800dd7a:	d1eb      	bne.n	800dd54 <_DrawBitmap+0x134>
 800dd7c:	e7d1      	b.n	800dd22 <_DrawBitmap+0x102>
 800dd7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd80:	2b08      	cmp	r3, #8
 800dd82:	f040 8089 	bne.w	800de98 <_DrawBitmap+0x278>
 800dd86:	9b02      	ldr	r3, [sp, #8]
 800dd88:	9e05      	ldr	r6, [sp, #20]
 800dd8a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800de8c <_DrawBitmap+0x26c>
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	9307      	str	r3, [sp, #28]
 800dd92:	f06f 0301 	mvn.w	r3, #1
 800dd96:	fb03 f30b 	mul.w	r3, r3, fp
 800dd9a:	9303      	str	r3, [sp, #12]
 800dd9c:	9b02      	ldr	r3, [sp, #8]
 800dd9e:	445b      	add	r3, fp
 800dda0:	3c01      	subs	r4, #1
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	9b05      	ldr	r3, [sp, #20]
 800dda6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dda8:	1af3      	subs	r3, r6, r3
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	f104 0101 	add.w	r1, r4, #1
 800ddb0:	f340 82cc 	ble.w	800e34c <_DrawBitmap+0x72c>
 800ddb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d036      	beq.n	800de28 <_DrawBitmap+0x208>
 800ddba:	f8d9 3000 	ldr.w	r3, [r9]
 800ddbe:	7c1b      	ldrb	r3, [r3, #16]
 800ddc0:	f013 0303 	ands.w	r3, r3, #3
 800ddc4:	d009      	beq.n	800ddda <_DrawBitmap+0x1ba>
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d15a      	bne.n	800de80 <_DrawBitmap+0x260>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800ddd0:	18eb      	adds	r3, r5, r3
 800ddd2:	9308      	str	r3, [sp, #32]
 800ddd4:	46a2      	mov	sl, r4
 800ddd6:	465f      	mov	r7, fp
 800ddd8:	e021      	b.n	800de1e <_DrawBitmap+0x1fe>
 800ddda:	9b07      	ldr	r3, [sp, #28]
 800dddc:	4622      	mov	r2, r4
 800ddde:	18e9      	adds	r1, r5, r3
 800dde0:	462b      	mov	r3, r5
 800dde2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dde6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800dde8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800ddec:	f823 0b02 	strh.w	r0, [r3], #2
 800ddf0:	428b      	cmp	r3, r1
 800ddf2:	d1f6      	bne.n	800dde2 <_DrawBitmap+0x1c2>
 800ddf4:	e044      	b.n	800de80 <_DrawBitmap+0x260>
 800ddf6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ddf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddfc:	9a08      	ldr	r2, [sp, #32]
 800ddfe:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 800de02:	f1b8 0f00 	cmp.w	r8, #0
 800de06:	d006      	beq.n	800de16 <_DrawBitmap+0x1f6>
 800de08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de0c:	4632      	mov	r2, r6
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4639      	mov	r1, r7
 800de12:	4640      	mov	r0, r8
 800de14:	4798      	blx	r3
 800de16:	9b04      	ldr	r3, [sp, #16]
 800de18:	3701      	adds	r7, #1
 800de1a:	42bb      	cmp	r3, r7
 800de1c:	d030      	beq.n	800de80 <_DrawBitmap+0x260>
 800de1e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800de22:	2b00      	cmp	r3, #0
 800de24:	d0f7      	beq.n	800de16 <_DrawBitmap+0x1f6>
 800de26:	e7e6      	b.n	800ddf6 <_DrawBitmap+0x1d6>
 800de28:	f8d9 3000 	ldr.w	r3, [r9]
 800de2c:	7c1b      	ldrb	r3, [r3, #16]
 800de2e:	f013 0303 	ands.w	r3, r3, #3
 800de32:	d009      	beq.n	800de48 <_DrawBitmap+0x228>
 800de34:	2b02      	cmp	r3, #2
 800de36:	d123      	bne.n	800de80 <_DrawBitmap+0x260>
 800de38:	9b03      	ldr	r3, [sp, #12]
 800de3a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800de3e:	18eb      	adds	r3, r5, r3
 800de40:	9308      	str	r3, [sp, #32]
 800de42:	46a2      	mov	sl, r4
 800de44:	465f      	mov	r7, fp
 800de46:	e016      	b.n	800de76 <_DrawBitmap+0x256>
 800de48:	4b12      	ldr	r3, [pc, #72]	; (800de94 <_DrawBitmap+0x274>)
 800de4a:	9a02      	ldr	r2, [sp, #8]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	4628      	mov	r0, r5
 800de50:	4798      	blx	r3
 800de52:	e015      	b.n	800de80 <_DrawBitmap+0x260>
 800de54:	9a08      	ldr	r2, [sp, #32]
 800de56:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 800de5a:	f1b8 0f00 	cmp.w	r8, #0
 800de5e:	d006      	beq.n	800de6e <_DrawBitmap+0x24e>
 800de60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de64:	4632      	mov	r2, r6
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4639      	mov	r1, r7
 800de6a:	4640      	mov	r0, r8
 800de6c:	4798      	blx	r3
 800de6e:	9b04      	ldr	r3, [sp, #16]
 800de70:	3701      	adds	r7, #1
 800de72:	429f      	cmp	r7, r3
 800de74:	d004      	beq.n	800de80 <_DrawBitmap+0x260>
 800de76:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d0f7      	beq.n	800de6e <_DrawBitmap+0x24e>
 800de7e:	e7e9      	b.n	800de54 <_DrawBitmap+0x234>
 800de80:	9b06      	ldr	r3, [sp, #24]
 800de82:	441d      	add	r5, r3
 800de84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800de86:	3601      	adds	r6, #1
 800de88:	441c      	add	r4, r3
 800de8a:	e78b      	b.n	800dda4 <_DrawBitmap+0x184>
 800de8c:	20000014 	.word	0x20000014
 800de90:	200003f8 	.word	0x200003f8
 800de94:	20000024 	.word	0x20000024
 800de98:	4bad      	ldr	r3, [pc, #692]	; (800e150 <_DrawBitmap+0x530>)
 800de9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800de9c:	2a00      	cmp	r2, #0
 800de9e:	bf08      	it	eq
 800dea0:	461a      	moveq	r2, r3
 800dea2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dea4:	921f      	str	r2, [sp, #124]	; 0x7c
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	930b      	str	r3, [sp, #44]	; 0x2c
 800deaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	930c      	str	r3, [sp, #48]	; 0x30
 800deb0:	1c63      	adds	r3, r4, #1
 800deb2:	9303      	str	r3, [sp, #12]
 800deb4:	1c83      	adds	r3, r0, #2
 800deb6:	9307      	str	r3, [sp, #28]
 800deb8:	9b05      	ldr	r3, [sp, #20]
 800deba:	9304      	str	r3, [sp, #16]
 800debc:	9b07      	ldr	r3, [sp, #28]
 800debe:	9a05      	ldr	r2, [sp, #20]
 800dec0:	1e9c      	subs	r4, r3, #2
 800dec2:	9b03      	ldr	r3, [sp, #12]
 800dec4:	f103 3aff 	add.w	sl, r3, #4294967295
 800dec8:	9b04      	ldr	r3, [sp, #16]
 800deca:	1a9b      	subs	r3, r3, r2
 800decc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dece:	429a      	cmp	r2, r3
 800ded0:	f340 823c 	ble.w	800e34c <_DrawBitmap+0x72c>
 800ded4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	f000 80c5 	beq.w	800e066 <_DrawBitmap+0x446>
 800dedc:	2b04      	cmp	r3, #4
 800dede:	f000 8160 	beq.w	800e1a2 <_DrawBitmap+0x582>
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	f040 8226 	bne.w	800e334 <_DrawBitmap+0x714>
 800dee8:	4b9a      	ldr	r3, [pc, #616]	; (800e154 <_DrawBitmap+0x534>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800deee:	f7fc ffc7 	bl	800ae80 <GUI_ALLOC_LockH>
 800def2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800def4:	4a98      	ldr	r2, [pc, #608]	; (800e158 <_DrawBitmap+0x538>)
 800def6:	900e      	str	r0, [sp, #56]	; 0x38
 800def8:	f1c3 0508 	rsb	r5, r3, #8
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800df02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800df06:	9f02      	ldr	r7, [sp, #8]
 800df08:	5cd6      	ldrb	r6, [r2, r3]
 800df0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800df0c:	411e      	asrs	r6, r3
 800df0e:	4b91      	ldr	r3, [pc, #580]	; (800e154 <_DrawBitmap+0x534>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	7c1b      	ldrb	r3, [r3, #16]
 800df14:	f003 0303 	and.w	r3, r3, #3
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d01f      	beq.n	800df5c <_DrawBitmap+0x33c>
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d057      	beq.n	800dfd0 <_DrawBitmap+0x3b0>
 800df20:	2b01      	cmp	r3, #1
 800df22:	d055      	beq.n	800dfd0 <_DrawBitmap+0x3b0>
 800df24:	42bd      	cmp	r5, r7
 800df26:	bf28      	it	cs
 800df28:	463d      	movcs	r5, r7
 800df2a:	1b7f      	subs	r7, r7, r5
 800df2c:	462b      	mov	r3, r5
 800df2e:	4622      	mov	r2, r4
 800df30:	f006 0101 	and.w	r1, r6, #1
 800df34:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800df36:	3b01      	subs	r3, #1
 800df38:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800df3c:	f822 1b02 	strh.w	r1, [r2], #2
 800df40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800df44:	d1f4      	bne.n	800df30 <_DrawBitmap+0x310>
 800df46:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800df4a:	2f00      	cmp	r7, #0
 800df4c:	f000 8087 	beq.w	800e05e <_DrawBitmap+0x43e>
 800df50:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800df54:	4a80      	ldr	r2, [pc, #512]	; (800e158 <_DrawBitmap+0x538>)
 800df56:	2508      	movs	r5, #8
 800df58:	5cd6      	ldrb	r6, [r2, r3]
 800df5a:	e7e3      	b.n	800df24 <_DrawBitmap+0x304>
 800df5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df5e:	889b      	ldrh	r3, [r3, #4]
 800df60:	9308      	str	r3, [sp, #32]
 800df62:	46d8      	mov	r8, fp
 800df64:	42bd      	cmp	r5, r7
 800df66:	bf28      	it	cs
 800df68:	463d      	movcs	r5, r7
 800df6a:	1b7f      	subs	r7, r7, r5
 800df6c:	f1b9 0f00 	cmp.w	r9, #0
 800df70:	d022      	beq.n	800dfb8 <_DrawBitmap+0x398>
 800df72:	b91e      	cbnz	r6, 800df7c <_DrawBitmap+0x35c>
 800df74:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800df78:	44a8      	add	r8, r5
 800df7a:	e021      	b.n	800dfc0 <_DrawBitmap+0x3a0>
 800df7c:	07f2      	lsls	r2, r6, #31
 800df7e:	d509      	bpl.n	800df94 <_DrawBitmap+0x374>
 800df80:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800df84:	9a04      	ldr	r2, [sp, #16]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4641      	mov	r1, r8
 800df8a:	4648      	mov	r0, r9
 800df8c:	4798      	blx	r3
 800df8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800df92:	8023      	strh	r3, [r4, #0]
 800df94:	3d01      	subs	r5, #1
 800df96:	f108 0801 	add.w	r8, r8, #1
 800df9a:	f104 0402 	add.w	r4, r4, #2
 800df9e:	d00f      	beq.n	800dfc0 <_DrawBitmap+0x3a0>
 800dfa0:	0876      	lsrs	r6, r6, #1
 800dfa2:	e7e6      	b.n	800df72 <_DrawBitmap+0x352>
 800dfa4:	07f3      	lsls	r3, r6, #31
 800dfa6:	bf44      	itt	mi
 800dfa8:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 800dfac:	8023      	strhmi	r3, [r4, #0]
 800dfae:	3d01      	subs	r5, #1
 800dfb0:	f104 0402 	add.w	r4, r4, #2
 800dfb4:	d004      	beq.n	800dfc0 <_DrawBitmap+0x3a0>
 800dfb6:	0876      	lsrs	r6, r6, #1
 800dfb8:	2e00      	cmp	r6, #0
 800dfba:	d1f3      	bne.n	800dfa4 <_DrawBitmap+0x384>
 800dfbc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800dfc0:	2f00      	cmp	r7, #0
 800dfc2:	d04c      	beq.n	800e05e <_DrawBitmap+0x43e>
 800dfc4:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800dfc8:	4a63      	ldr	r2, [pc, #396]	; (800e158 <_DrawBitmap+0x538>)
 800dfca:	2508      	movs	r5, #8
 800dfcc:	5cd6      	ldrb	r6, [r2, r3]
 800dfce:	e7c9      	b.n	800df64 <_DrawBitmap+0x344>
 800dfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	4798      	blx	r3
 800dfd8:	b283      	uxth	r3, r0
 800dfda:	9309      	str	r3, [sp, #36]	; 0x24
 800dfdc:	9b03      	ldr	r3, [sp, #12]
 800dfde:	9308      	str	r3, [sp, #32]
 800dfe0:	46d8      	mov	r8, fp
 800dfe2:	42bd      	cmp	r5, r7
 800dfe4:	bf28      	it	cs
 800dfe6:	463d      	movcs	r5, r7
 800dfe8:	1b7f      	subs	r7, r7, r5
 800dfea:	f1b9 0f00 	cmp.w	r9, #0
 800dfee:	d01c      	beq.n	800e02a <_DrawBitmap+0x40a>
 800dff0:	eb08 0305 	add.w	r3, r8, r5
 800dff4:	46a2      	mov	sl, r4
 800dff6:	930d      	str	r3, [sp, #52]	; 0x34
 800dff8:	07f0      	lsls	r0, r6, #31
 800dffa:	d50c      	bpl.n	800e016 <_DrawBitmap+0x3f6>
 800dffc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800e000:	9a04      	ldr	r2, [sp, #16]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4641      	mov	r1, r8
 800e006:	4648      	mov	r0, r9
 800e008:	4798      	blx	r3
 800e00a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e010:	4053      	eors	r3, r2
 800e012:	f8aa 3000 	strh.w	r3, [sl]
 800e016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e018:	f108 0801 	add.w	r8, r8, #1
 800e01c:	4598      	cmp	r8, r3
 800e01e:	f10a 0a02 	add.w	sl, sl, #2
 800e022:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e026:	d1e7      	bne.n	800dff8 <_DrawBitmap+0x3d8>
 800e028:	e00d      	b.n	800e046 <_DrawBitmap+0x426>
 800e02a:	462a      	mov	r2, r5
 800e02c:	4623      	mov	r3, r4
 800e02e:	07f1      	lsls	r1, r6, #31
 800e030:	bf41      	itttt	mi
 800e032:	8819      	ldrhmi	r1, [r3, #0]
 800e034:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 800e036:	4041      	eormi	r1, r0
 800e038:	8019      	strhmi	r1, [r3, #0]
 800e03a:	3a01      	subs	r2, #1
 800e03c:	f103 0302 	add.w	r3, r3, #2
 800e040:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e044:	d1f3      	bne.n	800e02e <_DrawBitmap+0x40e>
 800e046:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e04a:	b147      	cbz	r7, 800e05e <_DrawBitmap+0x43e>
 800e04c:	9b08      	ldr	r3, [sp, #32]
 800e04e:	4a42      	ldr	r2, [pc, #264]	; (800e158 <_DrawBitmap+0x538>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	5cd6      	ldrb	r6, [r2, r3]
 800e054:	9b08      	ldr	r3, [sp, #32]
 800e056:	3301      	adds	r3, #1
 800e058:	9308      	str	r3, [sp, #32]
 800e05a:	2508      	movs	r5, #8
 800e05c:	e7c1      	b.n	800dfe2 <_DrawBitmap+0x3c2>
 800e05e:	a80e      	add	r0, sp, #56	; 0x38
 800e060:	f7fc ff1c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e064:	e166      	b.n	800e334 <_DrawBitmap+0x714>
 800e066:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e068:	f1c3 0504 	rsb	r5, r3, #4
 800e06c:	9b03      	ldr	r3, [sp, #12]
 800e06e:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800e072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e074:	409e      	lsls	r6, r3
 800e076:	4b37      	ldr	r3, [pc, #220]	; (800e154 <_DrawBitmap+0x534>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	7c1b      	ldrb	r3, [r3, #16]
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	2b01      	cmp	r3, #1
 800e082:	b2ed      	uxtb	r5, r5
 800e084:	b2f6      	uxtb	r6, r6
 800e086:	d009      	beq.n	800e09c <_DrawBitmap+0x47c>
 800e088:	d30a      	bcc.n	800e0a0 <_DrawBitmap+0x480>
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	f040 8152 	bne.w	800e334 <_DrawBitmap+0x714>
 800e090:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e092:	9308      	str	r3, [sp, #32]
 800e094:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e098:	465f      	mov	r7, fp
 800e09a:	e036      	b.n	800e10a <_DrawBitmap+0x4ea>
 800e09c:	9b02      	ldr	r3, [sp, #8]
 800e09e:	e079      	b.n	800e194 <_DrawBitmap+0x574>
 800e0a0:	9b02      	ldr	r3, [sp, #8]
 800e0a2:	429d      	cmp	r5, r3
 800e0a4:	bfc8      	it	gt
 800e0a6:	b2dd      	uxtbgt	r5, r3
 800e0a8:	1b5b      	subs	r3, r3, r5
 800e0aa:	462a      	mov	r2, r5
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	09b0      	lsrs	r0, r6, #6
 800e0b0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800e0b2:	3a01      	subs	r2, #1
 800e0b4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800e0b8:	f821 0b02 	strh.w	r0, [r1], #2
 800e0bc:	00b6      	lsls	r6, r6, #2
 800e0be:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800e0c2:	b2f6      	uxtb	r6, r6
 800e0c4:	d1f3      	bne.n	800e0ae <_DrawBitmap+0x48e>
 800e0c6:	3d01      	subs	r5, #1
 800e0c8:	b2ed      	uxtb	r5, r5
 800e0ca:	3501      	adds	r5, #1
 800e0cc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	f000 812f 	beq.w	800e334 <_DrawBitmap+0x714>
 800e0d6:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800e0da:	2504      	movs	r5, #4
 800e0dc:	e7e1      	b.n	800e0a2 <_DrawBitmap+0x482>
 800e0de:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800e0e2:	d124      	bne.n	800e12e <_DrawBitmap+0x50e>
 800e0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0e6:	f109 0901 	add.w	r9, r9, #1
 800e0ea:	00b6      	lsls	r6, r6, #2
 800e0ec:	4599      	cmp	r9, r3
 800e0ee:	b2f6      	uxtb	r6, r6
 800e0f0:	d1f5      	bne.n	800e0de <_DrawBitmap+0x4be>
 800e0f2:	1c6b      	adds	r3, r5, #1
 800e0f4:	3701      	adds	r7, #1
 800e0f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e0fa:	442f      	add	r7, r5
 800e0fc:	f1b8 0f00 	cmp.w	r8, #0
 800e100:	f000 8118 	beq.w	800e334 <_DrawBitmap+0x714>
 800e104:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800e108:	2504      	movs	r5, #4
 800e10a:	4545      	cmp	r5, r8
 800e10c:	bfc8      	it	gt
 800e10e:	fa5f f588 	uxtbgt.w	r5, r8
 800e112:	ebc5 0808 	rsb	r8, r5, r8
 800e116:	3d01      	subs	r5, #1
 800e118:	b2ed      	uxtb	r5, r5
 800e11a:	1c7b      	adds	r3, r7, #1
 800e11c:	442b      	add	r3, r5
 800e11e:	930d      	str	r3, [sp, #52]	; 0x34
 800e120:	f06f 0301 	mvn.w	r3, #1
 800e124:	fb03 4307 	mla	r3, r3, r7, r4
 800e128:	9309      	str	r3, [sp, #36]	; 0x24
 800e12a:	46b9      	mov	r9, r7
 800e12c:	e7d7      	b.n	800e0de <_DrawBitmap+0x4be>
 800e12e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e130:	09b3      	lsrs	r3, r6, #6
 800e132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e138:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 800e13c:	9b08      	ldr	r3, [sp, #32]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0d0      	beq.n	800e0e4 <_DrawBitmap+0x4c4>
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	9a04      	ldr	r2, [sp, #16]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	9808      	ldr	r0, [sp, #32]
 800e14a:	4649      	mov	r1, r9
 800e14c:	4798      	blx	r3
 800e14e:	e7c9      	b.n	800e0e4 <_DrawBitmap+0x4c4>
 800e150:	0801a898 	.word	0x0801a898
 800e154:	20000014 	.word	0x20000014
 800e158:	0801a8f0 	.word	0x0801a8f0
 800e15c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800e160:	bf18      	it	ne
 800e162:	8808      	ldrhne	r0, [r1, #0]
 800e164:	f102 32ff 	add.w	r2, r2, #4294967295
 800e168:	bf1c      	itt	ne
 800e16a:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 800e16e:	8008      	strhne	r0, [r1, #0]
 800e170:	00b6      	lsls	r6, r6, #2
 800e172:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800e176:	f101 0102 	add.w	r1, r1, #2
 800e17a:	b2f6      	uxtb	r6, r6
 800e17c:	d1ee      	bne.n	800e15c <_DrawBitmap+0x53c>
 800e17e:	3d01      	subs	r5, #1
 800e180:	b2ed      	uxtb	r5, r5
 800e182:	3501      	adds	r5, #1
 800e184:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 80d3 	beq.w	800e334 <_DrawBitmap+0x714>
 800e18e:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800e192:	2504      	movs	r5, #4
 800e194:	429d      	cmp	r5, r3
 800e196:	bfc8      	it	gt
 800e198:	b2dd      	uxtbgt	r5, r3
 800e19a:	1b5b      	subs	r3, r3, r5
 800e19c:	462a      	mov	r2, r5
 800e19e:	4621      	mov	r1, r4
 800e1a0:	e7dc      	b.n	800e15c <_DrawBitmap+0x53c>
 800e1a2:	9b03      	ldr	r3, [sp, #12]
 800e1a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e1aa:	4093      	lsls	r3, r2
 800e1ac:	4a6b      	ldr	r2, [pc, #428]	; (800e35c <_DrawBitmap+0x73c>)
 800e1ae:	6812      	ldr	r2, [r2, #0]
 800e1b0:	7c12      	ldrb	r2, [r2, #16]
 800e1b2:	f002 0203 	and.w	r2, r2, #3
 800e1b6:	2a01      	cmp	r2, #1
 800e1b8:	b2dd      	uxtb	r5, r3
 800e1ba:	d003      	beq.n	800e1c4 <_DrawBitmap+0x5a4>
 800e1bc:	d308      	bcc.n	800e1d0 <_DrawBitmap+0x5b0>
 800e1be:	2a02      	cmp	r2, #2
 800e1c0:	d03b      	beq.n	800e23a <_DrawBitmap+0x61a>
 800e1c2:	e0b7      	b.n	800e334 <_DrawBitmap+0x714>
 800e1c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e1c6:	9a02      	ldr	r2, [sp, #8]
 800e1c8:	f1c3 0302 	rsb	r3, r3, #2
 800e1cc:	b2db      	uxtb	r3, r3
 800e1ce:	e0aa      	b.n	800e326 <_DrawBitmap+0x706>
 800e1d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e1d2:	b15b      	cbz	r3, 800e1ec <_DrawBitmap+0x5cc>
 800e1d4:	092d      	lsrs	r5, r5, #4
 800e1d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1d8:	9a03      	ldr	r2, [sp, #12]
 800e1da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e1de:	8023      	strh	r3, [r4, #0]
 800e1e0:	9b02      	ldr	r3, [sp, #8]
 800e1e2:	9c07      	ldr	r4, [sp, #28]
 800e1e4:	7815      	ldrb	r5, [r2, #0]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	4692      	mov	sl, r2
 800e1ea:	e000      	b.n	800e1ee <_DrawBitmap+0x5ce>
 800e1ec:	9b02      	ldr	r3, [sp, #8]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	dd1a      	ble.n	800e228 <_DrawBitmap+0x608>
 800e1f2:	1059      	asrs	r1, r3, #1
 800e1f4:	1d22      	adds	r2, r4, #4
 800e1f6:	f003 0301 	and.w	r3, r3, #1
 800e1fa:	eb0a 0001 	add.w	r0, sl, r1
 800e1fe:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800e200:	092e      	lsrs	r6, r5, #4
 800e202:	f005 050f 	and.w	r5, r5, #15
 800e206:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800e20a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800e20e:	f822 6c04 	strh.w	r6, [r2, #-4]
 800e212:	f822 5c02 	strh.w	r5, [r2, #-2]
 800e216:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800e21a:	4582      	cmp	sl, r0
 800e21c:	463e      	mov	r6, r7
 800e21e:	f102 0204 	add.w	r2, r2, #4
 800e222:	d1ec      	bne.n	800e1fe <_DrawBitmap+0x5de>
 800e224:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f000 8083 	beq.w	800e334 <_DrawBitmap+0x714>
 800e22e:	092d      	lsrs	r5, r5, #4
 800e230:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e232:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e236:	8023      	strh	r3, [r4, #0]
 800e238:	e07c      	b.n	800e334 <_DrawBitmap+0x714>
 800e23a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e23c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800e23e:	b1c2      	cbz	r2, 800e272 <_DrawBitmap+0x652>
 800e240:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800e244:	d00b      	beq.n	800e25e <_DrawBitmap+0x63e>
 800e246:	092d      	lsrs	r5, r5, #4
 800e248:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e24a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e24e:	8023      	strh	r3, [r4, #0]
 800e250:	b12e      	cbz	r6, 800e25e <_DrawBitmap+0x63e>
 800e252:	68b3      	ldr	r3, [r6, #8]
 800e254:	9a04      	ldr	r2, [sp, #16]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4659      	mov	r1, fp
 800e25a:	4630      	mov	r0, r6
 800e25c:	4798      	blx	r3
 800e25e:	9b02      	ldr	r3, [sp, #8]
 800e260:	9c07      	ldr	r4, [sp, #28]
 800e262:	f103 38ff 	add.w	r8, r3, #4294967295
 800e266:	9b03      	ldr	r3, [sp, #12]
 800e268:	f10b 0701 	add.w	r7, fp, #1
 800e26c:	781d      	ldrb	r5, [r3, #0]
 800e26e:	469a      	mov	sl, r3
 800e270:	e00f      	b.n	800e292 <_DrawBitmap+0x672>
 800e272:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e276:	465f      	mov	r7, fp
 800e278:	e00b      	b.n	800e292 <_DrawBitmap+0x672>
 800e27a:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800e27e:	d10c      	bne.n	800e29a <_DrawBitmap+0x67a>
 800e280:	f015 050f 	ands.w	r5, r5, #15
 800e284:	d117      	bne.n	800e2b6 <_DrawBitmap+0x696>
 800e286:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800e28a:	3404      	adds	r4, #4
 800e28c:	3702      	adds	r7, #2
 800e28e:	f1a8 0802 	sub.w	r8, r8, #2
 800e292:	f1b8 0f01 	cmp.w	r8, #1
 800e296:	dcf0      	bgt.n	800e27a <_DrawBitmap+0x65a>
 800e298:	e01a      	b.n	800e2d0 <_DrawBitmap+0x6b0>
 800e29a:	092b      	lsrs	r3, r5, #4
 800e29c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a2:	8023      	strh	r3, [r4, #0]
 800e2a4:	2e00      	cmp	r6, #0
 800e2a6:	d0eb      	beq.n	800e280 <_DrawBitmap+0x660>
 800e2a8:	68b3      	ldr	r3, [r6, #8]
 800e2aa:	9a04      	ldr	r2, [sp, #16]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4639      	mov	r1, r7
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	4798      	blx	r3
 800e2b4:	e7e4      	b.n	800e280 <_DrawBitmap+0x660>
 800e2b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2bc:	8063      	strh	r3, [r4, #2]
 800e2be:	2e00      	cmp	r6, #0
 800e2c0:	d0e1      	beq.n	800e286 <_DrawBitmap+0x666>
 800e2c2:	68b3      	ldr	r3, [r6, #8]
 800e2c4:	9a04      	ldr	r2, [sp, #16]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	1c79      	adds	r1, r7, #1
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	4798      	blx	r3
 800e2ce:	e7da      	b.n	800e286 <_DrawBitmap+0x666>
 800e2d0:	f1b8 0f00 	cmp.w	r8, #0
 800e2d4:	d02e      	beq.n	800e334 <_DrawBitmap+0x714>
 800e2d6:	092d      	lsrs	r5, r5, #4
 800e2d8:	d02c      	beq.n	800e334 <_DrawBitmap+0x714>
 800e2da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2dc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2e0:	8023      	strh	r3, [r4, #0]
 800e2e2:	b33e      	cbz	r6, 800e334 <_DrawBitmap+0x714>
 800e2e4:	68b3      	ldr	r3, [r6, #8]
 800e2e6:	9a04      	ldr	r2, [sp, #16]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4639      	mov	r1, r7
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	4798      	blx	r3
 800e2f0:	e020      	b.n	800e334 <_DrawBitmap+0x714>
 800e2f2:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800e2f6:	bf18      	it	ne
 800e2f8:	8806      	ldrhne	r6, [r0, #0]
 800e2fa:	f101 31ff 	add.w	r1, r1, #4294967295
 800e2fe:	bf1c      	itt	ne
 800e300:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 800e304:	8006      	strhne	r6, [r0, #0]
 800e306:	012d      	lsls	r5, r5, #4
 800e308:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800e30c:	f100 0002 	add.w	r0, r0, #2
 800e310:	b2ed      	uxtb	r5, r5
 800e312:	d1ee      	bne.n	800e2f2 <_DrawBitmap+0x6d2>
 800e314:	3b01      	subs	r3, #1
 800e316:	b2db      	uxtb	r3, r3
 800e318:	3301      	adds	r3, #1
 800e31a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e31e:	b14a      	cbz	r2, 800e334 <_DrawBitmap+0x714>
 800e320:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800e324:	2302      	movs	r3, #2
 800e326:	4293      	cmp	r3, r2
 800e328:	bfc8      	it	gt
 800e32a:	b2d3      	uxtbgt	r3, r2
 800e32c:	1ad2      	subs	r2, r2, r3
 800e32e:	4619      	mov	r1, r3
 800e330:	4620      	mov	r0, r4
 800e332:	e7de      	b.n	800e2f2 <_DrawBitmap+0x6d2>
 800e334:	9b04      	ldr	r3, [sp, #16]
 800e336:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e338:	3301      	adds	r3, #1
 800e33a:	9304      	str	r3, [sp, #16]
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	4413      	add	r3, r2
 800e340:	9303      	str	r3, [sp, #12]
 800e342:	9a06      	ldr	r2, [sp, #24]
 800e344:	9b07      	ldr	r3, [sp, #28]
 800e346:	4413      	add	r3, r2
 800e348:	9307      	str	r3, [sp, #28]
 800e34a:	e5b7      	b.n	800debc <_DrawBitmap+0x29c>
 800e34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e34e:	b113      	cbz	r3, 800e356 <_DrawBitmap+0x736>
 800e350:	a80f      	add	r0, sp, #60	; 0x3c
 800e352:	f7fc fda3 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e356:	b011      	add	sp, #68	; 0x44
 800e358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35c:	20000014 	.word	0x20000014

0800e360 <_GetDevProp>:
 800e360:	2908      	cmp	r1, #8
 800e362:	d004      	beq.n	800e36e <_GetDevProp+0xe>
 800e364:	6800      	ldr	r0, [r0, #0]
 800e366:	b120      	cbz	r0, 800e372 <_GetDevProp+0x12>
 800e368:	68c3      	ldr	r3, [r0, #12]
 800e36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36c:	4718      	bx	r3
 800e36e:	2010      	movs	r0, #16
 800e370:	4770      	bx	lr
 800e372:	f04f 30ff 	mov.w	r0, #4294967295
 800e376:	4770      	bx	lr

0800e378 <GUI_USAGE_DecUseCnt>:
 800e378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e37a:	4605      	mov	r5, r0
 800e37c:	f7fc fd80 	bl	800ae80 <GUI_ALLOC_LockH>
 800e380:	ab02      	add	r3, sp, #8
 800e382:	8984      	ldrh	r4, [r0, #12]
 800e384:	f843 0d04 	str.w	r0, [r3, #-4]!
 800e388:	3c01      	subs	r4, #1
 800e38a:	b224      	sxth	r4, r4
 800e38c:	8184      	strh	r4, [r0, #12]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fc fd84 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e394:	b914      	cbnz	r4, 800e39c <GUI_USAGE_DecUseCnt+0x24>
 800e396:	4628      	mov	r0, r5
 800e398:	f7fc fda0 	bl	800aedc <GUI_ALLOC_Free>
 800e39c:	b003      	add	sp, #12
 800e39e:	bd30      	pop	{r4, r5, pc}

0800e3a0 <GUI_USAGE_AddRect>:
 800e3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3a4:	9c08      	ldr	r4, [sp, #32]
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	4688      	mov	r8, r1
 800e3aa:	4699      	mov	r9, r3
 800e3ac:	4414      	add	r4, r2
 800e3ae:	68ab      	ldr	r3, [r5, #8]
 800e3b0:	1c56      	adds	r6, r2, #1
 800e3b2:	685f      	ldr	r7, [r3, #4]
 800e3b4:	4641      	mov	r1, r8
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	47b8      	blx	r7
 800e3bc:	42b4      	cmp	r4, r6
 800e3be:	4632      	mov	r2, r6
 800e3c0:	d1f5      	bne.n	800e3ae <GUI_USAGE_AddRect+0xe>
 800e3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e3c6 <_Convert16>:
 800e3c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ca:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e3ce:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e3d2:	4681      	mov	r9, r0
 800e3d4:	460d      	mov	r5, r1
 800e3d6:	4616      	mov	r6, r2
 800e3d8:	461f      	mov	r7, r3
 800e3da:	4614      	mov	r4, r2
 800e3dc:	4688      	mov	r8, r1
 800e3de:	f839 0b02 	ldrh.w	r0, [r9], #2
 800e3e2:	47d8      	blx	fp
 800e3e4:	47d0      	blx	sl
 800e3e6:	3c01      	subs	r4, #1
 800e3e8:	f848 0b04 	str.w	r0, [r8], #4
 800e3ec:	d1f7      	bne.n	800e3de <_Convert16+0x18>
 800e3ee:	2f1f      	cmp	r7, #31
 800e3f0:	d806      	bhi.n	800e400 <_Convert16+0x3a>
 800e3f2:	463a      	mov	r2, r7
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	f002 bfa3 	b.w	8011346 <GUI__CompactPixelIndices>
 800e400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e404 <_Convert8>:
 800e404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e408:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e40c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e410:	4680      	mov	r8, r0
 800e412:	460d      	mov	r5, r1
 800e414:	4616      	mov	r6, r2
 800e416:	461f      	mov	r7, r3
 800e418:	4689      	mov	r9, r1
 800e41a:	4604      	mov	r4, r0
 800e41c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e420:	47d8      	blx	fp
 800e422:	47d0      	blx	sl
 800e424:	1b33      	subs	r3, r6, r4
 800e426:	eb18 0f03 	cmn.w	r8, r3
 800e42a:	f849 0b04 	str.w	r0, [r9], #4
 800e42e:	d1f5      	bne.n	800e41c <_Convert8+0x18>
 800e430:	2f1f      	cmp	r7, #31
 800e432:	d806      	bhi.n	800e442 <_Convert8+0x3e>
 800e434:	463a      	mov	r2, r7
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43e:	f002 bf82 	b.w	8011346 <GUI__CompactPixelIndices>
 800e442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e448 <GUI_MEMDEV__WriteToActiveOpaque>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	b09b      	sub	sp, #108	; 0x6c
 800e44e:	4605      	mov	r5, r0
 800e450:	9108      	str	r1, [sp, #32]
 800e452:	9209      	str	r2, [sp, #36]	; 0x24
 800e454:	2800      	cmp	r0, #0
 800e456:	f000 8399 	beq.w	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e45a:	f7fc fd11 	bl	800ae80 <GUI_ALLOC_LockH>
 800e45e:	ab1a      	add	r3, sp, #104	; 0x68
 800e460:	6944      	ldr	r4, [r0, #20]
 800e462:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800e466:	4618      	mov	r0, r3
 800e468:	f7fc fd18 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e46c:	4628      	mov	r0, r5
 800e46e:	f003 fc13 	bl	8011c98 <GUI_MEMDEV_GetBitsPerPixel>
 800e472:	2808      	cmp	r0, #8
 800e474:	4607      	mov	r7, r0
 800e476:	4ea5      	ldr	r6, [pc, #660]	; (800e70c <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 800e478:	dd02      	ble.n	800e480 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800e47a:	2c00      	cmp	r4, #0
 800e47c:	f000 81c9 	beq.w	800e812 <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 800e480:	2301      	movs	r3, #1
 800e482:	2700      	movs	r7, #0
 800e484:	4628      	mov	r0, r5
 800e486:	9319      	str	r3, [sp, #100]	; 0x64
 800e488:	930d      	str	r3, [sp, #52]	; 0x34
 800e48a:	9718      	str	r7, [sp, #96]	; 0x60
 800e48c:	f7fc fcf8 	bl	800ae80 <GUI_ALLOC_LockH>
 800e490:	6802      	ldr	r2, [r0, #0]
 800e492:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800e496:	6912      	ldr	r2, [r2, #16]
 800e498:	930e      	str	r3, [sp, #56]	; 0x38
 800e49a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800e49e:	6853      	ldr	r3, [r2, #4]
 800e4a0:	6832      	ldr	r2, [r6, #0]
 800e4a2:	f849 0d14 	str.w	r0, [r9, #-20]!
 800e4a6:	6904      	ldr	r4, [r0, #16]
 800e4a8:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800e4ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e4b0:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 800e4b4:	7c50      	ldrb	r0, [r2, #17]
 800e4b6:	930c      	str	r3, [sp, #48]	; 0x30
 800e4b8:	f7fe f8c0 	bl	800c63c <GUI_GetBitsPerPixelEx>
 800e4bc:	6832      	ldr	r2, [r6, #0]
 800e4be:	900b      	str	r0, [sp, #44]	; 0x2c
 800e4c0:	7c50      	ldrb	r0, [r2, #17]
 800e4c2:	f7fe f8d9 	bl	800c678 <GUI_GetpfIndex2ColorEx>
 800e4c6:	900a      	str	r0, [sp, #40]	; 0x28
 800e4c8:	4648      	mov	r0, r9
 800e4ca:	f7fc fce7 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e4ce:	2c08      	cmp	r4, #8
 800e4d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4d4:	d904      	bls.n	800e4e0 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 800e4d6:	2c10      	cmp	r4, #16
 800e4d8:	bf8c      	ite	hi
 800e4da:	2304      	movhi	r3, #4
 800e4dc:	2302      	movls	r3, #2
 800e4de:	e005      	b.n	800e4ec <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800e4e0:	2c01      	cmp	r4, #1
 800e4e2:	d103      	bne.n	800e4ec <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800e4e4:	ab18      	add	r3, sp, #96	; 0x60
 800e4e6:	940d      	str	r4, [sp, #52]	; 0x34
 800e4e8:	930a      	str	r3, [sp, #40]	; 0x28
 800e4ea:	e001      	b.n	800e4f0 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 800e4ec:	930d      	str	r3, [sp, #52]	; 0x34
 800e4ee:	970a      	str	r7, [sp, #40]	; 0x28
 800e4f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	f000 80df 	beq.w	800e6b6 <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 800e4f8:	6833      	ldr	r3, [r6, #0]
 800e4fa:	7c58      	ldrb	r0, [r3, #17]
 800e4fc:	f7fe f8c4 	bl	800c688 <GUI_GetpfColor2IndexEx>
 800e500:	900f      	str	r0, [sp, #60]	; 0x3c
 800e502:	ea4f 008b 	mov.w	r0, fp, lsl #2
 800e506:	f7fc fe7d 	bl	800b204 <GUI_ALLOC_AllocNoInit>
 800e50a:	9010      	str	r0, [sp, #64]	; 0x40
 800e50c:	2800      	cmp	r0, #0
 800e50e:	f000 833d 	beq.w	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e512:	4628      	mov	r0, r5
 800e514:	f003 fd80 	bl	8012018 <GUI_MEMDEV_GetDataPtr>
 800e518:	4605      	mov	r5, r0
 800e51a:	f1b8 0f00 	cmp.w	r8, #0
 800e51e:	f000 80b9 	beq.w	800e694 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 800e522:	4640      	mov	r0, r8
 800e524:	f7fc fcac 	bl	800ae80 <GUI_ALLOC_LockH>
 800e528:	eb05 030a 	add.w	r3, r5, sl
 800e52c:	9311      	str	r3, [sp, #68]	; 0x44
 800e52e:	2300      	movs	r3, #0
 800e530:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e534:	9016      	str	r0, [sp, #88]	; 0x58
 800e536:	9309      	str	r3, [sp, #36]	; 0x24
 800e538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e53c:	ebca 0703 	rsb	r7, sl, r3
 800e540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e542:	4293      	cmp	r3, r2
 800e544:	f340 80a2 	ble.w	800e68c <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 800e548:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e54c:	2300      	movs	r3, #0
 800e54e:	9317      	str	r3, [sp, #92]	; 0x5c
 800e550:	6883      	ldr	r3, [r0, #8]
 800e552:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800e556:	695b      	ldr	r3, [r3, #20]
 800e558:	4641      	mov	r1, r8
 800e55a:	4798      	blx	r3
 800e55c:	4583      	cmp	fp, r0
 800e55e:	4605      	mov	r5, r0
 800e560:	d128      	bne.n	800e5b4 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 800e562:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e564:	f7fc fc8c 	bl	800ae80 <GUI_ALLOC_LockH>
 800e568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	2c08      	cmp	r4, #8
 800e56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e570:	9014      	str	r0, [sp, #80]	; 0x50
 800e572:	4601      	mov	r1, r0
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	465a      	mov	r2, fp
 800e578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e57a:	4638      	mov	r0, r7
 800e57c:	d902      	bls.n	800e584 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 800e57e:	f7ff ff22 	bl	800e3c6 <_Convert16>
 800e582:	e001      	b.n	800e588 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 800e584:	f7ff ff3e 	bl	800e404 <_Convert8>
 800e588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e58a:	9305      	str	r3, [sp, #20]
 800e58c:	ad1a      	add	r5, sp, #104	; 0x68
 800e58e:	9808      	ldr	r0, [sp, #32]
 800e590:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	2300      	movs	r3, #0
 800e598:	9303      	str	r3, [sp, #12]
 800e59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e59c:	9302      	str	r3, [sp, #8]
 800e59e:	2301      	movs	r3, #1
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	465a      	mov	r2, fp
 800e5a6:	4649      	mov	r1, r9
 800e5a8:	f7fd fd68 	bl	800c07c <LCD_DrawBitmap>
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	f7fc fc75 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e5b2:	e062      	b.n	800e67a <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800e5b4:	2c01      	cmp	r4, #1
 800e5b6:	d002      	beq.n	800e5be <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800e5b8:	f04f 0801 	mov.w	r8, #1
 800e5bc:	e057      	b.n	800e66e <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	d05b      	beq.n	800e67a <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800e5c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e5c4:	9e08      	ldr	r6, [sp, #32]
 800e5c6:	f8cd a00c 	str.w	sl, [sp, #12]
 800e5ca:	f000 0307 	and.w	r3, r0, #7
 800e5ce:	9306      	str	r3, [sp, #24]
 800e5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d2:	9305      	str	r3, [sp, #20]
 800e5d4:	2308      	movs	r3, #8
 800e5d6:	fb90 f3f3 	sdiv	r3, r0, r3
 800e5da:	443b      	add	r3, r7
 800e5dc:	9304      	str	r3, [sp, #16]
 800e5de:	2301      	movs	r3, #1
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	9302      	str	r3, [sp, #8]
 800e5e4:	9301      	str	r3, [sp, #4]
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	4430      	add	r0, r6
 800e5ec:	f7fd fc5a 	bl	800bea4 <LCD__DrawBitmap_1bpp>
 800e5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5f2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5f6:	441d      	add	r5, r3
 800e5f8:	6883      	ldr	r3, [r0, #8]
 800e5fa:	9517      	str	r5, [sp, #92]	; 0x5c
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	4641      	mov	r1, r8
 800e600:	4798      	blx	r3
 800e602:	4605      	mov	r5, r0
 800e604:	e7db      	b.n	800e5be <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 800e606:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e608:	f7fc fc3a 	bl	800ae80 <GUI_ALLOC_LockH>
 800e60c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e60e:	9014      	str	r0, [sp, #80]	; 0x50
 800e610:	4601      	mov	r1, r0
 800e612:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e614:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e616:	9301      	str	r3, [sp, #4]
 800e618:	2c08      	cmp	r4, #8
 800e61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	462a      	mov	r2, r5
 800e620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e622:	fb00 7006 	mla	r0, r0, r6, r7
 800e626:	d925      	bls.n	800e674 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800e628:	f7ff fecd 	bl	800e3c6 <_Convert16>
 800e62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e62e:	9305      	str	r3, [sp, #20]
 800e630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e632:	9304      	str	r3, [sp, #16]
 800e634:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e636:	9e08      	ldr	r6, [sp, #32]
 800e638:	f8cd 8004 	str.w	r8, [sp, #4]
 800e63c:	2300      	movs	r3, #0
 800e63e:	9303      	str	r3, [sp, #12]
 800e640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e642:	9302      	str	r3, [sp, #8]
 800e644:	462a      	mov	r2, r5
 800e646:	2301      	movs	r3, #1
 800e648:	4649      	mov	r1, r9
 800e64a:	4430      	add	r0, r6
 800e64c:	f8cd 8000 	str.w	r8, [sp]
 800e650:	f7fd fd14 	bl	800c07c <LCD_DrawBitmap>
 800e654:	a814      	add	r0, sp, #80	; 0x50
 800e656:	f7fc fc21 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e65a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e65c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e65e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e660:	441d      	add	r5, r3
 800e662:	6883      	ldr	r3, [r0, #8]
 800e664:	9517      	str	r5, [sp, #92]	; 0x5c
 800e666:	695b      	ldr	r3, [r3, #20]
 800e668:	a917      	add	r1, sp, #92	; 0x5c
 800e66a:	4798      	blx	r3
 800e66c:	4605      	mov	r5, r0
 800e66e:	2d00      	cmp	r5, #0
 800e670:	d1c9      	bne.n	800e606 <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 800e672:	e002      	b.n	800e67a <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 800e674:	f7ff fec6 	bl	800e404 <_Convert8>
 800e678:	e7d8      	b.n	800e62c <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 800e67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e67c:	3301      	adds	r3, #1
 800e67e:	9309      	str	r3, [sp, #36]	; 0x24
 800e680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e682:	4453      	add	r3, sl
 800e684:	9311      	str	r3, [sp, #68]	; 0x44
 800e686:	f109 0901 	add.w	r9, r9, #1
 800e68a:	e755      	b.n	800e538 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800e68c:	a816      	add	r0, sp, #88	; 0x58
 800e68e:	f7fc fc05 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e692:	e00e      	b.n	800e6b2 <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 800e694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e696:	9305      	str	r3, [sp, #20]
 800e698:	2301      	movs	r3, #1
 800e69a:	9004      	str	r0, [sp, #16]
 800e69c:	9301      	str	r3, [sp, #4]
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	f8cd a00c 	str.w	sl, [sp, #12]
 800e6a4:	9402      	str	r4, [sp, #8]
 800e6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6aa:	9808      	ldr	r0, [sp, #32]
 800e6ac:	465a      	mov	r2, fp
 800e6ae:	f7fd fce5 	bl	800c07c <LCD_DrawBitmap>
 800e6b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e6b4:	e268      	b.n	800eb88 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	f003 fcae 	bl	8012018 <GUI_MEMDEV_GetDataPtr>
 800e6bc:	4607      	mov	r7, r0
 800e6be:	f1b8 0f00 	cmp.w	r8, #0
 800e6c2:	f000 809a 	beq.w	800e7fa <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	f7fc fbda 	bl	800ae80 <GUI_ALLOC_LockH>
 800e6cc:	2500      	movs	r5, #0
 800e6ce:	9016      	str	r0, [sp, #88]	; 0x58
 800e6d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6d2:	42ab      	cmp	r3, r5
 800e6d4:	f340 808d 	ble.w	800e7f2 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 800e6d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e6da:	2300      	movs	r3, #0
 800e6dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800e6de:	6883      	ldr	r3, [r0, #8]
 800e6e0:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800e6e4:	695b      	ldr	r3, [r3, #20]
 800e6e6:	462a      	mov	r2, r5
 800e6e8:	4641      	mov	r1, r8
 800e6ea:	4798      	blx	r3
 800e6ec:	4583      	cmp	fp, r0
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	d126      	bne.n	800e740 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 800e6f2:	462e      	mov	r6, r5
 800e6f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e6f6:	6883      	ldr	r3, [r0, #8]
 800e6f8:	f106 0901 	add.w	r9, r6, #1
 800e6fc:	695b      	ldr	r3, [r3, #20]
 800e6fe:	464a      	mov	r2, r9
 800e700:	4641      	mov	r1, r8
 800e702:	4798      	blx	r3
 800e704:	4583      	cmp	fp, r0
 800e706:	d103      	bne.n	800e710 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 800e708:	464e      	mov	r6, r9
 800e70a:	e7f3      	b.n	800e6f4 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 800e70c:	20000014 	.word	0x20000014
 800e710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e712:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e714:	9305      	str	r3, [sp, #20]
 800e716:	ebc5 0806 	rsb	r8, r5, r6
 800e71a:	2301      	movs	r3, #1
 800e71c:	f108 0801 	add.w	r8, r8, #1
 800e720:	9704      	str	r7, [sp, #16]
 800e722:	9301      	str	r3, [sp, #4]
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	4429      	add	r1, r5
 800e728:	f8cd a00c 	str.w	sl, [sp, #12]
 800e72c:	9402      	str	r4, [sp, #8]
 800e72e:	4643      	mov	r3, r8
 800e730:	465a      	mov	r2, fp
 800e732:	9808      	ldr	r0, [sp, #32]
 800e734:	f7fd fca2 	bl	800c07c <LCD_DrawBitmap>
 800e738:	fb0a 7708 	mla	r7, sl, r8, r7
 800e73c:	4635      	mov	r5, r6
 800e73e:	e056      	b.n	800e7ee <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800e740:	2c01      	cmp	r4, #1
 800e742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e744:	d004      	beq.n	800e750 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 800e746:	442b      	add	r3, r5
 800e748:	930b      	str	r3, [sp, #44]	; 0x2c
 800e74a:	f04f 0901 	mov.w	r9, #1
 800e74e:	e02b      	b.n	800e7a8 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800e750:	eb03 0905 	add.w	r9, r3, r5
 800e754:	46a0      	mov	r8, r4
 800e756:	b32e      	cbz	r6, 800e7a4 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800e758:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800e75c:	9808      	ldr	r0, [sp, #32]
 800e75e:	f8cd a00c 	str.w	sl, [sp, #12]
 800e762:	f00e 0307 	and.w	r3, lr, #7
 800e766:	9306      	str	r3, [sp, #24]
 800e768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e76a:	9305      	str	r3, [sp, #20]
 800e76c:	2308      	movs	r3, #8
 800e76e:	fb9e f3f3 	sdiv	r3, lr, r3
 800e772:	443b      	add	r3, r7
 800e774:	4632      	mov	r2, r6
 800e776:	4470      	add	r0, lr
 800e778:	9304      	str	r3, [sp, #16]
 800e77a:	4649      	mov	r1, r9
 800e77c:	2301      	movs	r3, #1
 800e77e:	f8cd 8008 	str.w	r8, [sp, #8]
 800e782:	f8cd 8004 	str.w	r8, [sp, #4]
 800e786:	f8cd 8000 	str.w	r8, [sp]
 800e78a:	f7fd fb8b 	bl	800bea4 <LCD__DrawBitmap_1bpp>
 800e78e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e790:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e792:	441e      	add	r6, r3
 800e794:	6883      	ldr	r3, [r0, #8]
 800e796:	9617      	str	r6, [sp, #92]	; 0x5c
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	462a      	mov	r2, r5
 800e79c:	a917      	add	r1, sp, #92	; 0x5c
 800e79e:	4798      	blx	r3
 800e7a0:	4606      	mov	r6, r0
 800e7a2:	e7d8      	b.n	800e756 <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 800e7a4:	4457      	add	r7, sl
 800e7a6:	e022      	b.n	800e7ee <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 800e7a8:	2e00      	cmp	r6, #0
 800e7aa:	d0fb      	beq.n	800e7a4 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800e7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ae:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800e7b2:	9305      	str	r3, [sp, #20]
 800e7b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7b6:	9808      	ldr	r0, [sp, #32]
 800e7b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7ba:	f8cd a00c 	str.w	sl, [sp, #12]
 800e7be:	fb03 730e 	mla	r3, r3, lr, r7
 800e7c2:	4632      	mov	r2, r6
 800e7c4:	4470      	add	r0, lr
 800e7c6:	9304      	str	r3, [sp, #16]
 800e7c8:	9402      	str	r4, [sp, #8]
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800e7d0:	f8cd 9000 	str.w	r9, [sp]
 800e7d4:	f7fd fc52 	bl	800c07c <LCD_DrawBitmap>
 800e7d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7da:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e7dc:	441e      	add	r6, r3
 800e7de:	6883      	ldr	r3, [r0, #8]
 800e7e0:	9617      	str	r6, [sp, #92]	; 0x5c
 800e7e2:	695b      	ldr	r3, [r3, #20]
 800e7e4:	462a      	mov	r2, r5
 800e7e6:	4641      	mov	r1, r8
 800e7e8:	4798      	blx	r3
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	e7dc      	b.n	800e7a8 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800e7ee:	3501      	adds	r5, #1
 800e7f0:	e76e      	b.n	800e6d0 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800e7f2:	a816      	add	r0, sp, #88	; 0x58
 800e7f4:	f7fc fb52 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e7f8:	e1c8      	b.n	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7fc:	9305      	str	r3, [sp, #20]
 800e7fe:	2301      	movs	r3, #1
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	9004      	str	r0, [sp, #16]
 800e806:	f8cd a00c 	str.w	sl, [sp, #12]
 800e80a:	9402      	str	r4, [sp, #8]
 800e80c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e80e:	465a      	mov	r2, fp
 800e810:	e03a      	b.n	800e888 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800e812:	4628      	mov	r0, r5
 800e814:	f7fc fb34 	bl	800ae80 <GUI_ALLOC_LockH>
 800e818:	4683      	mov	fp, r0
 800e81a:	a81a      	add	r0, sp, #104	; 0x68
 800e81c:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 800e820:	f840 bd10 	str.w	fp, [r0, #-16]!
 800e824:	f8db 2000 	ldr.w	r2, [fp]
 800e828:	930b      	str	r3, [sp, #44]	; 0x2c
 800e82a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800e82e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800e832:	930c      	str	r3, [sp, #48]	; 0x30
 800e834:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 800e838:	f7fc fb30 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800e83c:	6832      	ldr	r2, [r6, #0]
 800e83e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800e842:	7c50      	ldrb	r0, [r2, #17]
 800e844:	4aa1      	ldr	r2, [pc, #644]	; (800eacc <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 800e846:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800e84a:	6916      	ldr	r6, [r2, #16]
 800e84c:	6833      	ldr	r3, [r6, #0]
 800e84e:	930a      	str	r3, [sp, #40]	; 0x28
 800e850:	f7fd fef4 	bl	800c63c <GUI_GetBitsPerPixelEx>
 800e854:	2808      	cmp	r0, #8
 800e856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e858:	d906      	bls.n	800e868 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800e85a:	2810      	cmp	r0, #16
 800e85c:	bf8c      	ite	hi
 800e85e:	f04f 0a04 	movhi.w	sl, #4
 800e862:	f04f 0a02 	movls.w	sl, #2
 800e866:	e001      	b.n	800e86c <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 800e868:	f04f 0a01 	mov.w	sl, #1
 800e86c:	45b0      	cmp	r8, r6
 800e86e:	d110      	bne.n	800e892 <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 800e870:	9303      	str	r3, [sp, #12]
 800e872:	2301      	movs	r3, #1
 800e874:	2200      	movs	r2, #0
 800e876:	f10b 0018 	add.w	r0, fp, #24
 800e87a:	9301      	str	r3, [sp, #4]
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e880:	9205      	str	r2, [sp, #20]
 800e882:	9004      	str	r0, [sp, #16]
 800e884:	9702      	str	r7, [sp, #8]
 800e886:	4622      	mov	r2, r4
 800e888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e88a:	9808      	ldr	r0, [sp, #32]
 800e88c:	f7fd fbf6 	bl	800c07c <LCD_DrawBitmap>
 800e890:	e17c      	b.n	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e892:	2f20      	cmp	r7, #32
 800e894:	f040 80a2 	bne.w	800e9dc <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 800e898:	fb0a f004 	mul.w	r0, sl, r4
 800e89c:	f7fc fcb2 	bl	800b204 <GUI_ALLOC_AllocNoInit>
 800e8a0:	900d      	str	r0, [sp, #52]	; 0x34
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	f000 8172 	beq.w	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e8a8:	f7fc faea 	bl	800ae80 <GUI_ALLOC_LockH>
 800e8ac:	9018      	str	r0, [sp, #96]	; 0x60
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	f7fc fae6 	bl	800ae80 <GUI_ALLOC_LockH>
 800e8b4:	9016      	str	r0, [sp, #88]	; 0x58
 800e8b6:	6933      	ldr	r3, [r6, #16]
 800e8b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8bc:	f100 0518 	add.w	r5, r0, #24
 800e8c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e8c4:	920c      	str	r2, [sp, #48]	; 0x30
 800e8c6:	b373      	cbz	r3, 800e926 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800e8c8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800e8cc:	f04f 0901 	mov.w	r9, #1
 800e8d0:	f1ba 0f02 	cmp.w	sl, #2
 800e8d4:	d005      	beq.n	800e8e2 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800e8d6:	f1ba 0f04 	cmp.w	sl, #4
 800e8da:	d002      	beq.n	800e8e2 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800e8dc:	f1ba 0f01 	cmp.w	sl, #1
 800e8e0:	d106      	bne.n	800e8f0 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	6937      	ldr	r7, [r6, #16]
 800e8e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e8e8:	4653      	mov	r3, sl
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	47b8      	blx	r7
 800e8ee:	445d      	add	r5, fp
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e8f4:	9305      	str	r3, [sp, #20]
 800e8f6:	9303      	str	r3, [sp, #12]
 800e8f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8fa:	9204      	str	r2, [sp, #16]
 800e8fc:	9302      	str	r3, [sp, #8]
 800e8fe:	4622      	mov	r2, r4
 800e900:	2301      	movs	r3, #1
 800e902:	f8cd 9004 	str.w	r9, [sp, #4]
 800e906:	f8cd 9000 	str.w	r9, [sp]
 800e90a:	4641      	mov	r1, r8
 800e90c:	9808      	ldr	r0, [sp, #32]
 800e90e:	f7fd fbb5 	bl	800c07c <LCD_DrawBitmap>
 800e912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e916:	f108 0701 	add.w	r7, r8, #1
 800e91a:	4413      	add	r3, r2
 800e91c:	429f      	cmp	r7, r3
 800e91e:	f000 812c 	beq.w	800eb7a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800e922:	46b8      	mov	r8, r7
 800e924:	e7d4      	b.n	800e8d0 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 800e926:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e928:	461e      	mov	r6, r3
 800e92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e92c:	443b      	add	r3, r7
 800e92e:	f04f 0901 	mov.w	r9, #1
 800e932:	9309      	str	r3, [sp, #36]	; 0x24
 800e934:	f1ba 0f02 	cmp.w	sl, #2
 800e938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e93c:	d016      	beq.n	800e96c <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 800e93e:	f1ba 0f04 	cmp.w	sl, #4
 800e942:	d024      	beq.n	800e98e <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 800e944:	f1ba 0f01 	cmp.w	sl, #1
 800e948:	d130      	bne.n	800e9ac <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 800e94a:	4643      	mov	r3, r8
 800e94c:	462a      	mov	r2, r5
 800e94e:	f852 0b04 	ldr.w	r0, [r2], #4
 800e952:	930e      	str	r3, [sp, #56]	; 0x38
 800e954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e956:	920b      	str	r2, [sp, #44]	; 0x2c
 800e958:	4798      	blx	r3
 800e95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e95c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e95e:	f803 0b01 	strb.w	r0, [r3], #1
 800e962:	1ae1      	subs	r1, r4, r3
 800e964:	eb18 0f01 	cmn.w	r8, r1
 800e968:	d1f1      	bne.n	800e94e <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 800e96a:	e01e      	b.n	800e9aa <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800e96c:	4643      	mov	r3, r8
 800e96e:	462a      	mov	r2, r5
 800e970:	46a0      	mov	r8, r4
 800e972:	f852 0b04 	ldr.w	r0, [r2], #4
 800e976:	930e      	str	r3, [sp, #56]	; 0x38
 800e978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e97a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e97c:	4798      	blx	r3
 800e97e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e982:	f823 0b02 	strh.w	r0, [r3], #2
 800e986:	f1b8 0801 	subs.w	r8, r8, #1
 800e98a:	d1f2      	bne.n	800e972 <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 800e98c:	e00d      	b.n	800e9aa <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800e98e:	462a      	mov	r2, r5
 800e990:	4623      	mov	r3, r4
 800e992:	f852 0b04 	ldr.w	r0, [r2], #4
 800e996:	930e      	str	r3, [sp, #56]	; 0x38
 800e998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e99a:	920b      	str	r2, [sp, #44]	; 0x2c
 800e99c:	4798      	blx	r3
 800e99e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9a0:	f848 0b04 	str.w	r0, [r8], #4
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9a8:	d1f3      	bne.n	800e992 <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 800e9aa:	445d      	add	r5, fp
 800e9ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9ae:	9304      	str	r3, [sp, #16]
 800e9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9b2:	9302      	str	r3, [sp, #8]
 800e9b4:	9605      	str	r6, [sp, #20]
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	9603      	str	r6, [sp, #12]
 800e9ba:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9be:	f8cd 9000 	str.w	r9, [sp]
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	9808      	ldr	r0, [sp, #32]
 800e9c8:	f7fd fb58 	bl	800c07c <LCD_DrawBitmap>
 800e9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ce:	f107 0801 	add.w	r8, r7, #1
 800e9d2:	4543      	cmp	r3, r8
 800e9d4:	f000 80d1 	beq.w	800eb7a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800e9d8:	4647      	mov	r7, r8
 800e9da:	e7ab      	b.n	800e934 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 800e9dc:	2f10      	cmp	r7, #16
 800e9de:	f040 80d5 	bne.w	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e9e2:	fb04 f00a 	mul.w	r0, r4, sl
 800e9e6:	f7fc fc0d 	bl	800b204 <GUI_ALLOC_AllocNoInit>
 800e9ea:	900d      	str	r0, [sp, #52]	; 0x34
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f000 80cd 	beq.w	800eb8c <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800e9f2:	f7fc fa45 	bl	800ae80 <GUI_ALLOC_LockH>
 800e9f6:	9018      	str	r0, [sp, #96]	; 0x60
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	f7fc fa41 	bl	800ae80 <GUI_ALLOC_LockH>
 800e9fe:	9016      	str	r0, [sp, #88]	; 0x58
 800ea00:	6933      	ldr	r3, [r6, #16]
 800ea02:	f100 0718 	add.w	r7, r0, #24
 800ea06:	b113      	cbz	r3, 800ea0e <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 800ea08:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ea0c:	b953      	cbnz	r3, 800ea24 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 800ea0e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ea12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea14:	930c      	str	r3, [sp, #48]	; 0x30
 800ea16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea18:	442b      	add	r3, r5
 800ea1a:	0066      	lsls	r6, r4, #1
 800ea1c:	f04f 0b00 	mov.w	fp, #0
 800ea20:	9309      	str	r3, [sp, #36]	; 0x24
 800ea22:	e083      	b.n	800eb2c <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 800ea24:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800ea28:	0080      	lsls	r0, r0, #2
 800ea2a:	f7fc fbeb 	bl	800b204 <GUI_ALLOC_AllocNoInit>
 800ea2e:	900c      	str	r0, [sp, #48]	; 0x30
 800ea30:	b118      	cbz	r0, 800ea3a <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 800ea32:	f7fc fa25 	bl	800ae80 <GUI_ALLOC_LockH>
 800ea36:	9017      	str	r0, [sp, #92]	; 0x5c
 800ea38:	e001      	b.n	800ea3e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800ea3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea3c:	9317      	str	r3, [sp, #92]	; 0x5c
 800ea3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f000 809a 	beq.w	800eb7a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800ea46:	0063      	lsls	r3, r4, #1
 800ea48:	930a      	str	r3, [sp, #40]	; 0x28
 800ea4a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800ea4e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ea52:	930e      	str	r3, [sp, #56]	; 0x38
 800ea54:	f1ba 0f02 	cmp.w	sl, #2
 800ea58:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800ea5c:	d006      	beq.n	800ea6c <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 800ea5e:	f1ba 0f04 	cmp.w	sl, #4
 800ea62:	d005      	beq.n	800ea70 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800ea64:	f1ba 0f01 	cmp.w	sl, #1
 800ea68:	d111      	bne.n	800ea8e <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 800ea6a:	e001      	b.n	800ea70 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800ea6c:	4653      	mov	r3, sl
 800ea6e:	e000      	b.n	800ea72 <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 800ea70:	2302      	movs	r3, #2
 800ea72:	4638      	mov	r0, r7
 800ea74:	4622      	mov	r2, r4
 800ea76:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800ea78:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800ea7c:	47a8      	blx	r5
 800ea7e:	4653      	mov	r3, sl
 800ea80:	4622      	mov	r2, r4
 800ea82:	4649      	mov	r1, r9
 800ea84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ea86:	6935      	ldr	r5, [r6, #16]
 800ea88:	47a8      	blx	r5
 800ea8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea8c:	441f      	add	r7, r3
 800ea8e:	2300      	movs	r3, #0
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	9303      	str	r3, [sp, #12]
 800ea94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ea98:	9302      	str	r3, [sp, #8]
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	9204      	str	r2, [sp, #16]
 800ea9e:	9301      	str	r3, [sp, #4]
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	4622      	mov	r2, r4
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	9808      	ldr	r0, [sp, #32]
 800eaa8:	f7fd fae8 	bl	800c07c <LCD_DrawBitmap>
 800eaac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eab0:	f10b 0901 	add.w	r9, fp, #1
 800eab4:	4413      	add	r3, r2
 800eab6:	4599      	cmp	r9, r3
 800eab8:	d001      	beq.n	800eabe <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 800eaba:	46cb      	mov	fp, r9
 800eabc:	e7ca      	b.n	800ea54 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 800eabe:	a817      	add	r0, sp, #92	; 0x5c
 800eac0:	f7fc f9ec 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eac4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eac6:	f7fc fa09 	bl	800aedc <GUI_ALLOC_Free>
 800eaca:	e056      	b.n	800eb7a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800eacc:	2001e6e8 	.word	0x2001e6e8
 800ead0:	f1ba 0f04 	cmp.w	sl, #4
 800ead4:	d041      	beq.n	800eb5a <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 800ead6:	f1ba 0f01 	cmp.w	sl, #1
 800eada:	d111      	bne.n	800eb00 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 800eadc:	4643      	mov	r3, r8
 800eade:	463a      	mov	r2, r7
 800eae0:	f832 0b02 	ldrh.w	r0, [r2], #2
 800eae4:	920b      	str	r2, [sp, #44]	; 0x2c
 800eae6:	930e      	str	r3, [sp, #56]	; 0x38
 800eae8:	47c8      	blx	r9
 800eaea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaec:	4798      	blx	r3
 800eaee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eaf2:	f803 0b01 	strb.w	r0, [r3], #1
 800eaf6:	1ae1      	subs	r1, r4, r3
 800eaf8:	eb18 0f01 	cmn.w	r8, r1
 800eafc:	d1f0      	bne.n	800eae0 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 800eafe:	4437      	add	r7, r6
 800eb00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb06:	9302      	str	r3, [sp, #8]
 800eb08:	2301      	movs	r3, #1
 800eb0a:	9301      	str	r3, [sp, #4]
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	f8cd b014 	str.w	fp, [sp, #20]
 800eb12:	f8cd b00c 	str.w	fp, [sp, #12]
 800eb16:	4622      	mov	r2, r4
 800eb18:	4629      	mov	r1, r5
 800eb1a:	9808      	ldr	r0, [sp, #32]
 800eb1c:	f7fd faae 	bl	800c07c <LCD_DrawBitmap>
 800eb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb22:	f105 0801 	add.w	r8, r5, #1
 800eb26:	4543      	cmp	r3, r8
 800eb28:	d027      	beq.n	800eb7a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800eb2a:	4645      	mov	r5, r8
 800eb2c:	f1ba 0f02 	cmp.w	sl, #2
 800eb30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb34:	d1cc      	bne.n	800ead0 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 800eb36:	4643      	mov	r3, r8
 800eb38:	463a      	mov	r2, r7
 800eb3a:	46a0      	mov	r8, r4
 800eb3c:	f832 0b02 	ldrh.w	r0, [r2], #2
 800eb40:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb42:	930e      	str	r3, [sp, #56]	; 0x38
 800eb44:	47c8      	blx	r9
 800eb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb48:	4798      	blx	r3
 800eb4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb4e:	f823 0b02 	strh.w	r0, [r3], #2
 800eb52:	f1b8 0801 	subs.w	r8, r8, #1
 800eb56:	d1f1      	bne.n	800eb3c <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 800eb58:	e7d1      	b.n	800eafe <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800eb5a:	463a      	mov	r2, r7
 800eb5c:	4623      	mov	r3, r4
 800eb5e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800eb62:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb64:	930e      	str	r3, [sp, #56]	; 0x38
 800eb66:	47c8      	blx	r9
 800eb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb6a:	4798      	blx	r3
 800eb6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb6e:	f848 0b04 	str.w	r0, [r8], #4
 800eb72:	3b01      	subs	r3, #1
 800eb74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb76:	d1f2      	bne.n	800eb5e <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 800eb78:	e7c1      	b.n	800eafe <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800eb7a:	a816      	add	r0, sp, #88	; 0x58
 800eb7c:	f7fc f98e 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eb80:	a818      	add	r0, sp, #96	; 0x60
 800eb82:	f7fc f98b 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eb86:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eb88:	f7fc f9a8 	bl	800aedc <GUI_ALLOC_Free>
 800eb8c:	b01b      	add	sp, #108	; 0x6c
 800eb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb92:	bf00      	nop

0800eb94 <_OnExit>:
 800eb94:	4b18      	ldr	r3, [pc, #96]	; (800ebf8 <_OnExit+0x64>)
 800eb96:	4819      	ldr	r0, [pc, #100]	; (800ebfc <_OnExit+0x68>)
 800eb98:	4a19      	ldr	r2, [pc, #100]	; (800ec00 <_OnExit+0x6c>)
 800eb9a:	b570      	push	{r4, r5, r6, lr}
 800eb9c:	2400      	movs	r4, #0
 800eb9e:	601c      	str	r4, [r3, #0]
 800eba0:	4b18      	ldr	r3, [pc, #96]	; (800ec04 <_OnExit+0x70>)
 800eba2:	4d19      	ldr	r5, [pc, #100]	; (800ec08 <_OnExit+0x74>)
 800eba4:	601c      	str	r4, [r3, #0]
 800eba6:	605c      	str	r4, [r3, #4]
 800eba8:	4b18      	ldr	r3, [pc, #96]	; (800ec0c <_OnExit+0x78>)
 800ebaa:	7004      	strb	r4, [r0, #0]
 800ebac:	601c      	str	r4, [r3, #0]
 800ebae:	4b18      	ldr	r3, [pc, #96]	; (800ec10 <_OnExit+0x7c>)
 800ebb0:	6044      	str	r4, [r0, #4]
 800ebb2:	601c      	str	r4, [r3, #0]
 800ebb4:	4b17      	ldr	r3, [pc, #92]	; (800ec14 <_OnExit+0x80>)
 800ebb6:	6014      	str	r4, [r2, #0]
 800ebb8:	601c      	str	r4, [r3, #0]
 800ebba:	4b17      	ldr	r3, [pc, #92]	; (800ec18 <_OnExit+0x84>)
 800ebbc:	6054      	str	r4, [r2, #4]
 800ebbe:	601c      	str	r4, [r3, #0]
 800ebc0:	6084      	str	r4, [r0, #8]
 800ebc2:	682b      	ldr	r3, [r5, #0]
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	2218      	movs	r2, #24
 800ebc8:	300c      	adds	r0, #12
 800ebca:	4798      	blx	r3
 800ebcc:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <_OnExit+0x88>)
 800ebce:	4814      	ldr	r0, [pc, #80]	; (800ec20 <_OnExit+0x8c>)
 800ebd0:	601c      	str	r4, [r3, #0]
 800ebd2:	4b14      	ldr	r3, [pc, #80]	; (800ec24 <_OnExit+0x90>)
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	601c      	str	r4, [r3, #0]
 800ebd8:	605c      	str	r4, [r3, #4]
 800ebda:	2210      	movs	r2, #16
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	4798      	blx	r3
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	4811      	ldr	r0, [pc, #68]	; (800ec28 <_OnExit+0x94>)
 800ebe4:	4621      	mov	r1, r4
 800ebe6:	2210      	movs	r2, #16
 800ebe8:	4798      	blx	r3
 800ebea:	682b      	ldr	r3, [r5, #0]
 800ebec:	480f      	ldr	r0, [pc, #60]	; (800ec2c <_OnExit+0x98>)
 800ebee:	4621      	mov	r1, r4
 800ebf0:	2210      	movs	r2, #16
 800ebf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebf6:	4718      	bx	r3
 800ebf8:	2001e740 	.word	0x2001e740
 800ebfc:	200003fc 	.word	0x200003fc
 800ec00:	2001e714 	.word	0x2001e714
 800ec04:	2001e748 	.word	0x2001e748
 800ec08:	20000028 	.word	0x20000028
 800ec0c:	2001e754 	.word	0x2001e754
 800ec10:	2001e700 	.word	0x2001e700
 800ec14:	2001e734 	.word	0x2001e734
 800ec18:	2001e744 	.word	0x2001e744
 800ec1c:	2001e710 	.word	0x2001e710
 800ec20:	2001e778 	.word	0x2001e778
 800ec24:	2001e704 	.word	0x2001e704
 800ec28:	2001e768 	.word	0x2001e768
 800ec2c:	2001e758 	.word	0x2001e758

0800ec30 <_Paint1>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	f7fc f91a 	bl	800ae6c <GUI_ALLOC_h2p>
 800ec38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ec3a:	4a05      	ldr	r2, [pc, #20]	; (800ec50 <_Paint1+0x20>)
 800ec3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ec40:	4620      	mov	r0, r4
 800ec42:	4b04      	ldr	r3, [pc, #16]	; (800ec54 <_Paint1+0x24>)
 800ec44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec48:	bf08      	it	eq
 800ec4a:	4613      	moveq	r3, r2
 800ec4c:	4718      	bx	r3
 800ec4e:	bf00      	nop
 800ec50:	0800fb35 	.word	0x0800fb35
 800ec54:	08012251 	.word	0x08012251

0800ec58 <_Findy1>:
 800ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5a:	b085      	sub	sp, #20
 800ec5c:	4607      	mov	r7, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	4616      	mov	r6, r2
 800ec62:	ad02      	add	r5, sp, #8
 800ec64:	2f00      	cmp	r7, #0
 800ec66:	d048      	beq.n	800ecfa <_Findy1+0xa2>
 800ec68:	4638      	mov	r0, r7
 800ec6a:	f7fc f909 	bl	800ae80 <GUI_ALLOC_LockH>
 800ec6e:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800ec70:	9001      	str	r0, [sp, #4]
 800ec72:	07bb      	lsls	r3, r7, #30
 800ec74:	4601      	mov	r1, r0
 800ec76:	d53a      	bpl.n	800ecee <_Findy1+0x96>
 800ec78:	b126      	cbz	r6, 800ec84 <_Findy1+0x2c>
 800ec7a:	4632      	mov	r2, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	f7fd f816 	bl	800bcae <GUI__IntersectRects>
 800ec82:	e002      	b.n	800ec8a <_Findy1+0x32>
 800ec84:	c803      	ldmia	r0, {r0, r1}
 800ec86:	e885 0003 	stmia.w	r5, {r0, r1}
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f7fc fb99 	bl	800b3c4 <GUI_RectsIntersect>
 800ec92:	b360      	cbz	r0, 800ecee <_Findy1+0x96>
 800ec94:	f017 0f01 	tst.w	r7, #1
 800ec98:	9b01      	ldr	r3, [sp, #4]
 800ec9a:	d11c      	bne.n	800ecd6 <_Findy1+0x7e>
 800ec9c:	b13e      	cbz	r6, 800ecae <_Findy1+0x56>
 800ec9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800eca2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800eca6:	4293      	cmp	r3, r2
 800eca8:	bfb8      	it	lt
 800ecaa:	4613      	movlt	r3, r2
 800ecac:	e001      	b.n	800ecb2 <_Findy1+0x5a>
 800ecae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ecb2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ecbc:	dd05      	ble.n	800ecca <_Findy1+0x72>
 800ecbe:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	db13      	blt.n	800ecee <_Findy1+0x96>
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	e003      	b.n	800ecd2 <_Findy1+0x7a>
 800ecca:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	dd0d      	ble.n	800ecee <_Findy1+0x96>
 800ecd2:	80e3      	strh	r3, [r4, #6]
 800ecd4:	e00b      	b.n	800ecee <_Findy1+0x96>
 800ecd6:	69df      	ldr	r7, [r3, #28]
 800ecd8:	b14f      	cbz	r7, 800ecee <_Findy1+0x96>
 800ecda:	4638      	mov	r0, r7
 800ecdc:	462a      	mov	r2, r5
 800ecde:	4621      	mov	r1, r4
 800ece0:	f7ff ffba 	bl	800ec58 <_Findy1>
 800ece4:	4638      	mov	r0, r7
 800ece6:	f7fc f8c1 	bl	800ae6c <GUI_ALLOC_h2p>
 800ecea:	6a07      	ldr	r7, [r0, #32]
 800ecec:	e7f4      	b.n	800ecd8 <_Findy1+0x80>
 800ecee:	9b01      	ldr	r3, [sp, #4]
 800ecf0:	a801      	add	r0, sp, #4
 800ecf2:	6a1f      	ldr	r7, [r3, #32]
 800ecf4:	f7fc f8d2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ecf8:	e7b4      	b.n	800ec64 <_Findy1+0xc>
 800ecfa:	b005      	add	sp, #20
 800ecfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecfe <_Findx0>:
 800ecfe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ed02:	4606      	mov	r6, r0
 800ed04:	460f      	mov	r7, r1
 800ed06:	4690      	mov	r8, r2
 800ed08:	2500      	movs	r5, #0
 800ed0a:	ac02      	add	r4, sp, #8
 800ed0c:	2e00      	cmp	r6, #0
 800ed0e:	d035      	beq.n	800ed7c <_Findx0+0x7e>
 800ed10:	4630      	mov	r0, r6
 800ed12:	f7fc f8b5 	bl	800ae80 <GUI_ALLOC_LockH>
 800ed16:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800ed18:	9001      	str	r0, [sp, #4]
 800ed1a:	07b2      	lsls	r2, r6, #30
 800ed1c:	4601      	mov	r1, r0
 800ed1e:	d527      	bpl.n	800ed70 <_Findx0+0x72>
 800ed20:	f1b8 0f00 	cmp.w	r8, #0
 800ed24:	d004      	beq.n	800ed30 <_Findx0+0x32>
 800ed26:	4642      	mov	r2, r8
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f7fc ffc0 	bl	800bcae <GUI__IntersectRects>
 800ed2e:	e002      	b.n	800ed36 <_Findx0+0x38>
 800ed30:	c803      	ldmia	r0, {r0, r1}
 800ed32:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed36:	4621      	mov	r1, r4
 800ed38:	4638      	mov	r0, r7
 800ed3a:	f7fc fb43 	bl	800b3c4 <GUI_RectsIntersect>
 800ed3e:	b1b8      	cbz	r0, 800ed70 <_Findx0+0x72>
 800ed40:	07f3      	lsls	r3, r6, #31
 800ed42:	d405      	bmi.n	800ed50 <_Findx0+0x52>
 800ed44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	803b      	strh	r3, [r7, #0]
 800ed4c:	2501      	movs	r5, #1
 800ed4e:	e00f      	b.n	800ed70 <_Findx0+0x72>
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	69de      	ldr	r6, [r3, #28]
 800ed54:	b166      	cbz	r6, 800ed70 <_Findx0+0x72>
 800ed56:	4622      	mov	r2, r4
 800ed58:	4639      	mov	r1, r7
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f7ff ffcf 	bl	800ecfe <_Findx0>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	4630      	mov	r0, r6
 800ed64:	bf18      	it	ne
 800ed66:	2501      	movne	r5, #1
 800ed68:	f7fc f880 	bl	800ae6c <GUI_ALLOC_h2p>
 800ed6c:	6a06      	ldr	r6, [r0, #32]
 800ed6e:	e7f1      	b.n	800ed54 <_Findx0+0x56>
 800ed70:	9b01      	ldr	r3, [sp, #4]
 800ed72:	a801      	add	r0, sp, #4
 800ed74:	6a1e      	ldr	r6, [r3, #32]
 800ed76:	f7fc f891 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ed7a:	e7c7      	b.n	800ed0c <_Findx0+0xe>
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	b004      	add	sp, #16
 800ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed84 <_Findx1>:
 800ed84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed86:	b085      	sub	sp, #20
 800ed88:	4605      	mov	r5, r0
 800ed8a:	460e      	mov	r6, r1
 800ed8c:	4617      	mov	r7, r2
 800ed8e:	ac02      	add	r4, sp, #8
 800ed90:	b37d      	cbz	r5, 800edf2 <_Findx1+0x6e>
 800ed92:	4628      	mov	r0, r5
 800ed94:	f7fc f874 	bl	800ae80 <GUI_ALLOC_LockH>
 800ed98:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800ed9a:	9001      	str	r0, [sp, #4]
 800ed9c:	07aa      	lsls	r2, r5, #30
 800ed9e:	4601      	mov	r1, r0
 800eda0:	d521      	bpl.n	800ede6 <_Findx1+0x62>
 800eda2:	b127      	cbz	r7, 800edae <_Findx1+0x2a>
 800eda4:	463a      	mov	r2, r7
 800eda6:	4620      	mov	r0, r4
 800eda8:	f7fc ff81 	bl	800bcae <GUI__IntersectRects>
 800edac:	e002      	b.n	800edb4 <_Findx1+0x30>
 800edae:	c803      	ldmia	r0, {r0, r1}
 800edb0:	e884 0003 	stmia.w	r4, {r0, r1}
 800edb4:	4621      	mov	r1, r4
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7fc fb04 	bl	800b3c4 <GUI_RectsIntersect>
 800edbc:	b198      	cbz	r0, 800ede6 <_Findx1+0x62>
 800edbe:	07eb      	lsls	r3, r5, #31
 800edc0:	d404      	bmi.n	800edcc <_Findx1+0x48>
 800edc2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800edc6:	3b01      	subs	r3, #1
 800edc8:	80b3      	strh	r3, [r6, #4]
 800edca:	e00c      	b.n	800ede6 <_Findx1+0x62>
 800edcc:	9b01      	ldr	r3, [sp, #4]
 800edce:	69dd      	ldr	r5, [r3, #28]
 800edd0:	b14d      	cbz	r5, 800ede6 <_Findx1+0x62>
 800edd2:	4628      	mov	r0, r5
 800edd4:	4622      	mov	r2, r4
 800edd6:	4631      	mov	r1, r6
 800edd8:	f7ff ffd4 	bl	800ed84 <_Findx1>
 800eddc:	4628      	mov	r0, r5
 800edde:	f7fc f845 	bl	800ae6c <GUI_ALLOC_h2p>
 800ede2:	6a05      	ldr	r5, [r0, #32]
 800ede4:	e7f4      	b.n	800edd0 <_Findx1+0x4c>
 800ede6:	9b01      	ldr	r3, [sp, #4]
 800ede8:	a801      	add	r0, sp, #4
 800edea:	6a1d      	ldr	r5, [r3, #32]
 800edec:	f7fc f856 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800edf0:	e7ce      	b.n	800ed90 <_Findx1+0xc>
 800edf2:	b005      	add	sp, #20
 800edf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800edf8 <_Paint1Trans>:
 800edf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800edfc:	4d21      	ldr	r5, [pc, #132]	; (800ee84 <_Paint1Trans+0x8c>)
 800edfe:	682b      	ldr	r3, [r5, #0]
 800ee00:	4607      	mov	r7, r0
 800ee02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ee04:	f7fc f83c 	bl	800ae80 <GUI_ALLOC_LockH>
 800ee08:	9000      	str	r0, [sp, #0]
 800ee0a:	4638      	mov	r0, r7
 800ee0c:	f7fc f838 	bl	800ae80 <GUI_ALLOC_LockH>
 800ee10:	ac02      	add	r4, sp, #8
 800ee12:	4601      	mov	r1, r0
 800ee14:	9001      	str	r0, [sp, #4]
 800ee16:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800ee1a:	3008      	adds	r0, #8
 800ee1c:	f7fc fad2 	bl	800b3c4 <GUI_RectsIntersect>
 800ee20:	4606      	mov	r6, r0
 800ee22:	b328      	cbz	r0, 800ee70 <_Paint1Trans+0x78>
 800ee24:	9901      	ldr	r1, [sp, #4]
 800ee26:	9a00      	ldr	r2, [sp, #0]
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	3208      	adds	r2, #8
 800ee2c:	f101 0008 	add.w	r0, r1, #8
 800ee30:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800ee32:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 800ee36:	f7fc ff3a 	bl	800bcae <GUI__IntersectRects>
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7fc f82e 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ee40:	9a01      	ldr	r2, [sp, #4]
 800ee42:	682b      	ldr	r3, [r5, #0]
 800ee44:	f9b2 1000 	ldrsh.w	r1, [r2]
 800ee48:	4c0f      	ldr	r4, [pc, #60]	; (800ee88 <_Paint1Trans+0x90>)
 800ee4a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800ee4e:	64d9      	str	r1, [r3, #76]	; 0x4c
 800ee50:	651a      	str	r2, [r3, #80]	; 0x50
 800ee52:	a801      	add	r0, sp, #4
 800ee54:	6027      	str	r7, [r4, #0]
 800ee56:	f7fc f821 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ee5a:	4638      	mov	r0, r7
 800ee5c:	f7ff fee8 	bl	800ec30 <_Paint1>
 800ee60:	2300      	movs	r3, #0
 800ee62:	6023      	str	r3, [r4, #0]
 800ee64:	682b      	ldr	r3, [r5, #0]
 800ee66:	64de      	str	r6, [r3, #76]	; 0x4c
 800ee68:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 800ee6c:	2601      	movs	r6, #1
 800ee6e:	e005      	b.n	800ee7c <_Paint1Trans+0x84>
 800ee70:	4620      	mov	r0, r4
 800ee72:	f7fc f813 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ee76:	a801      	add	r0, sp, #4
 800ee78:	f7fc f810 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	b002      	add	sp, #8
 800ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee84:	20000014 	.word	0x20000014
 800ee88:	2001e700 	.word	0x2001e700

0800ee8c <_PaintTransChildren>:
 800ee8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee90:	4605      	mov	r5, r0
 800ee92:	f7fb fff5 	bl	800ae80 <GUI_ALLOC_LockH>
 800ee96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ee98:	9001      	str	r0, [sp, #4]
 800ee9a:	079b      	lsls	r3, r3, #30
 800ee9c:	d405      	bmi.n	800eeaa <_PaintTransChildren+0x1e>
 800ee9e:	a801      	add	r0, sp, #4
 800eea0:	f7fb fffc 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eea4:	b003      	add	sp, #12
 800eea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeaa:	69c4      	ldr	r4, [r0, #28]
 800eeac:	2c00      	cmp	r4, #0
 800eeae:	d0f6      	beq.n	800ee9e <_PaintTransChildren+0x12>
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f7fb ffe5 	bl	800ae80 <GUI_ALLOC_LockH>
 800eeb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800eeb8:	9000      	str	r0, [sp, #0]
 800eeba:	f003 0303 	and.w	r3, r3, #3
 800eebe:	2b03      	cmp	r3, #3
 800eec0:	d135      	bne.n	800ef2e <_PaintTransChildren+0xa2>
 800eec2:	9901      	ldr	r1, [sp, #4]
 800eec4:	3108      	adds	r1, #8
 800eec6:	f7fc fa7d 	bl	800b3c4 <GUI_RectsIntersect>
 800eeca:	b380      	cbz	r0, 800ef2e <_PaintTransChildren+0xa2>
 800eecc:	9b01      	ldr	r3, [sp, #4]
 800eece:	a801      	add	r0, sp, #4
 800eed0:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 800eed4:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800eed8:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 800eedc:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 800eee0:	f7fb ffdc 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eee4:	4668      	mov	r0, sp
 800eee6:	f7fb ffd9 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7ff ff84 	bl	800edf8 <_Paint1Trans>
 800eef0:	b170      	cbz	r0, 800ef10 <_PaintTransChildren+0x84>
 800eef2:	4620      	mov	r0, r4
 800eef4:	f7fb ffba 	bl	800ae6c <GUI_ALLOC_h2p>
 800eef8:	9000      	str	r0, [sp, #0]
 800eefa:	4620      	mov	r0, r4
 800eefc:	f7ff ffc6 	bl	800ee8c <_PaintTransChildren>
 800ef00:	4620      	mov	r0, r4
 800ef02:	f7fb ffb3 	bl	800ae6c <GUI_ALLOC_h2p>
 800ef06:	9000      	str	r0, [sp, #0]
 800ef08:	4628      	mov	r0, r5
 800ef0a:	f7fb ffaf 	bl	800ae6c <GUI_ALLOC_h2p>
 800ef0e:	9001      	str	r0, [sp, #4]
 800ef10:	4628      	mov	r0, r5
 800ef12:	f7fb ffb5 	bl	800ae80 <GUI_ALLOC_LockH>
 800ef16:	9001      	str	r0, [sp, #4]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f7fb ffb1 	bl	800ae80 <GUI_ALLOC_LockH>
 800ef1e:	9b01      	ldr	r3, [sp, #4]
 800ef20:	9000      	str	r0, [sp, #0]
 800ef22:	f8a3 9008 	strh.w	r9, [r3, #8]
 800ef26:	f8a3 800a 	strh.w	r8, [r3, #10]
 800ef2a:	819f      	strh	r7, [r3, #12]
 800ef2c:	81de      	strh	r6, [r3, #14]
 800ef2e:	9b00      	ldr	r3, [sp, #0]
 800ef30:	4668      	mov	r0, sp
 800ef32:	6a1c      	ldr	r4, [r3, #32]
 800ef34:	f7fb ffb2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ef38:	e7b8      	b.n	800eeac <_PaintTransChildren+0x20>
	...

0800ef3c <WM__PaintWinAndOverlays>:
 800ef3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef3e:	4604      	mov	r4, r0
 800ef40:	f7fb ff9e 	bl	800ae80 <GUI_ALLOC_LockH>
 800ef44:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ef46:	9001      	str	r0, [sp, #4]
 800ef48:	f640 0301 	movw	r3, #2049	; 0x801
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d005      	beq.n	800ef5e <WM__PaintWinAndOverlays+0x22>
 800ef52:	a801      	add	r0, sp, #4
 800ef54:	f7fb ffa2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f7ff fe69 	bl	800ec30 <_Paint1>
 800ef5e:	4b14      	ldr	r3, [pc, #80]	; (800efb0 <WM__PaintWinAndOverlays+0x74>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	b313      	cbz	r3, 800efaa <WM__PaintWinAndOverlays+0x6e>
 800ef64:	4620      	mov	r0, r4
 800ef66:	f7ff ff91 	bl	800ee8c <_PaintTransChildren>
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7fb ff7e 	bl	800ae6c <GUI_ALLOC_h2p>
 800ef70:	6985      	ldr	r5, [r0, #24]
 800ef72:	6a04      	ldr	r4, [r0, #32]
 800ef74:	b1cd      	cbz	r5, 800efaa <WM__PaintWinAndOverlays+0x6e>
 800ef76:	b194      	cbz	r4, 800ef9e <WM__PaintWinAndOverlays+0x62>
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7fb ff77 	bl	800ae6c <GUI_ALLOC_h2p>
 800ef7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ef80:	f003 0303 	and.w	r3, r3, #3
 800ef84:	2b03      	cmp	r3, #3
 800ef86:	d102      	bne.n	800ef8e <WM__PaintWinAndOverlays+0x52>
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f7ff ff35 	bl	800edf8 <_Paint1Trans>
 800ef8e:	4620      	mov	r0, r4
 800ef90:	f7ff ff7c 	bl	800ee8c <_PaintTransChildren>
 800ef94:	4620      	mov	r0, r4
 800ef96:	f7fb ff69 	bl	800ae6c <GUI_ALLOC_h2p>
 800ef9a:	6a04      	ldr	r4, [r0, #32]
 800ef9c:	e7eb      	b.n	800ef76 <WM__PaintWinAndOverlays+0x3a>
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f7fb ff64 	bl	800ae6c <GUI_ALLOC_h2p>
 800efa4:	6a04      	ldr	r4, [r0, #32]
 800efa6:	6985      	ldr	r5, [r0, #24]
 800efa8:	e7e4      	b.n	800ef74 <WM__PaintWinAndOverlays+0x38>
 800efaa:	b003      	add	sp, #12
 800efac:	bd30      	pop	{r4, r5, pc}
 800efae:	bf00      	nop
 800efb0:	2001e754 	.word	0x2001e754

0800efb4 <_cbPaintMemDev>:
 800efb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800efb8:	4d18      	ldr	r5, [pc, #96]	; (800f01c <_cbPaintMemDev+0x68>)
 800efba:	682b      	ldr	r3, [r5, #0]
 800efbc:	4682      	mov	sl, r0
 800efbe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800efc0:	f7fb ff5e 	bl	800ae80 <GUI_ALLOC_LockH>
 800efc4:	682a      	ldr	r2, [r5, #0]
 800efc6:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 800efca:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 800efce:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800efd2:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800efd6:	ac02      	add	r4, sp, #8
 800efd8:	3208      	adds	r2, #8
 800efda:	f844 0d04 	str.w	r0, [r4, #-4]!
 800efde:	f100 0308 	add.w	r3, r0, #8
 800efe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efe6:	e883 0003 	stmia.w	r3, {r0, r1}
 800efea:	4620      	mov	r0, r4
 800efec:	f7fb ff56 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800eff0:	f8da 0000 	ldr.w	r0, [sl]
 800eff4:	f7ff ffa2 	bl	800ef3c <WM__PaintWinAndOverlays>
 800eff8:	682b      	ldr	r3, [r5, #0]
 800effa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800effc:	f7fb ff40 	bl	800ae80 <GUI_ALLOC_LockH>
 800f000:	9001      	str	r0, [sp, #4]
 800f002:	f8a0 9008 	strh.w	r9, [r0, #8]
 800f006:	f8a0 800a 	strh.w	r8, [r0, #10]
 800f00a:	8187      	strh	r7, [r0, #12]
 800f00c:	81c6      	strh	r6, [r0, #14]
 800f00e:	4620      	mov	r0, r4
 800f010:	f7fb ff44 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f014:	b002      	add	sp, #8
 800f016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f01a:	bf00      	nop
 800f01c:	20000014 	.word	0x20000014

0800f020 <WM__ClipAtParentBorders>:
 800f020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f022:	4606      	mov	r6, r0
 800f024:	460d      	mov	r5, r1
 800f026:	4628      	mov	r0, r5
 800f028:	f7fb ff2a 	bl	800ae80 <GUI_ALLOC_LockH>
 800f02c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f02e:	9001      	str	r0, [sp, #4]
 800f030:	f013 0402 	ands.w	r4, r3, #2
 800f034:	4601      	mov	r1, r0
 800f036:	d104      	bne.n	800f042 <WM__ClipAtParentBorders+0x22>
 800f038:	a801      	add	r0, sp, #4
 800f03a:	f7fb ff2f 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f03e:	4620      	mov	r0, r4
 800f040:	e016      	b.n	800f070 <WM__ClipAtParentBorders+0x50>
 800f042:	4630      	mov	r0, r6
 800f044:	f7fc fe16 	bl	800bc74 <GUI__IntersectRect>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	699c      	ldr	r4, [r3, #24]
 800f04c:	a801      	add	r0, sp, #4
 800f04e:	b954      	cbnz	r4, 800f066 <WM__ClipAtParentBorders+0x46>
 800f050:	f7fb ff24 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f054:	4b07      	ldr	r3, [pc, #28]	; (800f074 <WM__ClipAtParentBorders+0x54>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	4295      	cmp	r5, r2
 800f05a:	d008      	beq.n	800f06e <WM__ClipAtParentBorders+0x4e>
 800f05c:	6858      	ldr	r0, [r3, #4]
 800f05e:	1b43      	subs	r3, r0, r5
 800f060:	4258      	negs	r0, r3
 800f062:	4158      	adcs	r0, r3
 800f064:	e004      	b.n	800f070 <WM__ClipAtParentBorders+0x50>
 800f066:	f7fb ff19 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f06a:	4625      	mov	r5, r4
 800f06c:	e7db      	b.n	800f026 <WM__ClipAtParentBorders+0x6>
 800f06e:	2001      	movs	r0, #1
 800f070:	b002      	add	sp, #8
 800f072:	bd70      	pop	{r4, r5, r6, pc}
 800f074:	2001e704 	.word	0x2001e704

0800f078 <WM__InsertWindowIntoList>:
 800f078:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f07c:	4606      	mov	r6, r0
 800f07e:	460c      	mov	r4, r1
 800f080:	2900      	cmp	r1, #0
 800f082:	d04c      	beq.n	800f11e <WM__InsertWindowIntoList+0xa6>
 800f084:	f7fb fefc 	bl	800ae80 <GUI_ALLOC_LockH>
 800f088:	2300      	movs	r3, #0
 800f08a:	6184      	str	r4, [r0, #24]
 800f08c:	9001      	str	r0, [sp, #4]
 800f08e:	6203      	str	r3, [r0, #32]
 800f090:	4620      	mov	r0, r4
 800f092:	f7fb fef5 	bl	800ae80 <GUI_ALLOC_LockH>
 800f096:	ac04      	add	r4, sp, #16
 800f098:	69c7      	ldr	r7, [r0, #28]
 800f09a:	f844 0d08 	str.w	r0, [r4, #-8]!
 800f09e:	b92f      	cbnz	r7, 800f0ac <WM__InsertWindowIntoList+0x34>
 800f0a0:	61c6      	str	r6, [r0, #28]
 800f0a2:	a801      	add	r0, sp, #4
 800f0a4:	f7fb fefa 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	e036      	b.n	800f11a <WM__InsertWindowIntoList+0xa2>
 800f0ac:	9b01      	ldr	r3, [sp, #4]
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800f0b2:	f7fb fee5 	bl	800ae80 <GUI_ALLOC_LockH>
 800f0b6:	f10d 0810 	add.w	r8, sp, #16
 800f0ba:	f005 0508 	and.w	r5, r5, #8
 800f0be:	f848 0d04 	str.w	r0, [r8, #-4]!
 800f0c2:	b975      	cbnz	r5, 800f0e2 <WM__InsertWindowIntoList+0x6a>
 800f0c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f0c6:	071a      	lsls	r2, r3, #28
 800f0c8:	d50b      	bpl.n	800f0e2 <WM__InsertWindowIntoList+0x6a>
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	621f      	str	r7, [r3, #32]
 800f0ce:	9b02      	ldr	r3, [sp, #8]
 800f0d0:	a801      	add	r0, sp, #4
 800f0d2:	61de      	str	r6, [r3, #28]
 800f0d4:	f7fb fee2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f7fb fedf 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f0de:	4640      	mov	r0, r8
 800f0e0:	e01b      	b.n	800f11a <WM__InsertWindowIntoList+0xa2>
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f7fb feda 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	f7fb fed7 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	f7fb febc 	bl	800ae6c <GUI_ALLOC_h2p>
 800f0f4:	9003      	str	r0, [sp, #12]
 800f0f6:	9b03      	ldr	r3, [sp, #12]
 800f0f8:	6a1c      	ldr	r4, [r3, #32]
 800f0fa:	b90c      	cbnz	r4, 800f100 <WM__InsertWindowIntoList+0x88>
 800f0fc:	621e      	str	r6, [r3, #32]
 800f0fe:	e00b      	b.n	800f118 <WM__InsertWindowIntoList+0xa0>
 800f100:	4620      	mov	r0, r4
 800f102:	f7fb feb3 	bl	800ae6c <GUI_ALLOC_h2p>
 800f106:	2d00      	cmp	r5, #0
 800f108:	d1f4      	bne.n	800f0f4 <WM__InsertWindowIntoList+0x7c>
 800f10a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f10c:	071b      	lsls	r3, r3, #28
 800f10e:	d5f1      	bpl.n	800f0f4 <WM__InsertWindowIntoList+0x7c>
 800f110:	9b03      	ldr	r3, [sp, #12]
 800f112:	621e      	str	r6, [r3, #32]
 800f114:	9b01      	ldr	r3, [sp, #4]
 800f116:	621c      	str	r4, [r3, #32]
 800f118:	a801      	add	r0, sp, #4
 800f11a:	f7fb febf 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f11e:	b004      	add	sp, #16
 800f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f124 <WM__RemoveWindowFromList>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	4604      	mov	r4, r0
 800f128:	f7fb fea0 	bl	800ae6c <GUI_ALLOC_h2p>
 800f12c:	4605      	mov	r5, r0
 800f12e:	6980      	ldr	r0, [r0, #24]
 800f130:	b1a8      	cbz	r0, 800f15e <WM__RemoveWindowFromList+0x3a>
 800f132:	f7fb fe9b 	bl	800ae6c <GUI_ALLOC_h2p>
 800f136:	69c3      	ldr	r3, [r0, #28]
 800f138:	429c      	cmp	r4, r3
 800f13a:	4606      	mov	r6, r0
 800f13c:	d105      	bne.n	800f14a <WM__RemoveWindowFromList+0x26>
 800f13e:	4620      	mov	r0, r4
 800f140:	f7fb fe94 	bl	800ae6c <GUI_ALLOC_h2p>
 800f144:	6a03      	ldr	r3, [r0, #32]
 800f146:	61f3      	str	r3, [r6, #28]
 800f148:	bd70      	pop	{r4, r5, r6, pc}
 800f14a:	b143      	cbz	r3, 800f15e <WM__RemoveWindowFromList+0x3a>
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fb fe8d 	bl	800ae6c <GUI_ALLOC_h2p>
 800f152:	6a03      	ldr	r3, [r0, #32]
 800f154:	429c      	cmp	r4, r3
 800f156:	d1f8      	bne.n	800f14a <WM__RemoveWindowFromList+0x26>
 800f158:	6a2b      	ldr	r3, [r5, #32]
 800f15a:	6203      	str	r3, [r0, #32]
 800f15c:	bd70      	pop	{r4, r5, r6, pc}
 800f15e:	bd70      	pop	{r4, r5, r6, pc}

0800f160 <WM__Client2Screen>:
 800f160:	4603      	mov	r3, r0
 800f162:	4608      	mov	r0, r1
 800f164:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f168:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f16c:	f7fc b8df 	b.w	800b32e <GUI_MoveRect>

0800f170 <_SetClipRectUserIntersect>:
 800f170:	4b11      	ldr	r3, [pc, #68]	; (800f1b8 <_SetClipRectUserIntersect+0x48>)
 800f172:	b530      	push	{r4, r5, lr}
 800f174:	681c      	ldr	r4, [r3, #0]
 800f176:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f178:	b085      	sub	sp, #20
 800f17a:	4605      	mov	r5, r0
 800f17c:	b1ba      	cbz	r2, 800f1ae <_SetClipRectUserIntersect+0x3e>
 800f17e:	6810      	ldr	r0, [r2, #0]
 800f180:	6851      	ldr	r1, [r2, #4]
 800f182:	ab02      	add	r3, sp, #8
 800f184:	c303      	stmia	r3!, {r0, r1}
 800f186:	4b0d      	ldr	r3, [pc, #52]	; (800f1bc <_SetClipRectUserIntersect+0x4c>)
 800f188:	6818      	ldr	r0, [r3, #0]
 800f18a:	b900      	cbnz	r0, 800f18e <_SetClipRectUserIntersect+0x1e>
 800f18c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800f18e:	f7fb fe77 	bl	800ae80 <GUI_ALLOC_LockH>
 800f192:	ac04      	add	r4, sp, #16
 800f194:	a902      	add	r1, sp, #8
 800f196:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800f19a:	f7ff ffe1 	bl	800f160 <WM__Client2Screen>
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f7fb fe7c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f1a4:	a802      	add	r0, sp, #8
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f7fc fd64 	bl	800bc74 <GUI__IntersectRect>
 800f1ac:	a802      	add	r0, sp, #8
 800f1ae:	f002 fcad 	bl	8011b0c <LCD_SetClipRectEx>
 800f1b2:	b005      	add	sp, #20
 800f1b4:	bd30      	pop	{r4, r5, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20000014 	.word	0x20000014
 800f1bc:	2001e700 	.word	0x2001e700

0800f1c0 <WM__ActivateClipRect>:
 800f1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1c2:	4b0e      	ldr	r3, [pc, #56]	; (800f1fc <WM__ActivateClipRect+0x3c>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800f1ca:	b10a      	cbz	r2, 800f1d0 <WM__ActivateClipRect+0x10>
 800f1cc:	480c      	ldr	r0, [pc, #48]	; (800f200 <WM__ActivateClipRect+0x40>)
 800f1ce:	e011      	b.n	800f1f4 <WM__ActivateClipRect+0x34>
 800f1d0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f1d2:	f7fb fe55 	bl	800ae80 <GUI_ALLOC_LockH>
 800f1d6:	9001      	str	r0, [sp, #4]
 800f1d8:	c803      	ldmia	r0, {r0, r1}
 800f1da:	ac02      	add	r4, sp, #8
 800f1dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800f1e0:	a801      	add	r0, sp, #4
 800f1e2:	f7fb fe5b 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f1e6:	4b07      	ldr	r3, [pc, #28]	; (800f204 <WM__ActivateClipRect+0x44>)
 800f1e8:	6819      	ldr	r1, [r3, #0]
 800f1ea:	b111      	cbz	r1, 800f1f2 <WM__ActivateClipRect+0x32>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f7ff ff17 	bl	800f020 <WM__ClipAtParentBorders>
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f7ff ffbc 	bl	800f170 <_SetClipRectUserIntersect>
 800f1f8:	b004      	add	sp, #16
 800f1fa:	bd10      	pop	{r4, pc}
 800f1fc:	20000014 	.word	0x20000014
 800f200:	20000410 	.word	0x20000410
 800f204:	2001e700 	.word	0x2001e700

0800f208 <WM__IsWindow>:
 800f208:	4b06      	ldr	r3, [pc, #24]	; (800f224 <WM__IsWindow+0x1c>)
 800f20a:	b510      	push	{r4, lr}
 800f20c:	4604      	mov	r4, r0
 800f20e:	6818      	ldr	r0, [r3, #0]
 800f210:	b128      	cbz	r0, 800f21e <WM__IsWindow+0x16>
 800f212:	42a0      	cmp	r0, r4
 800f214:	d004      	beq.n	800f220 <WM__IsWindow+0x18>
 800f216:	f7fb fe29 	bl	800ae6c <GUI_ALLOC_h2p>
 800f21a:	6940      	ldr	r0, [r0, #20]
 800f21c:	e7f8      	b.n	800f210 <WM__IsWindow+0x8>
 800f21e:	bd10      	pop	{r4, pc}
 800f220:	2001      	movs	r0, #1
 800f222:	bd10      	pop	{r4, pc}
 800f224:	2001e720 	.word	0x2001e720

0800f228 <WM__InvalidateDrawAndDescs>:
 800f228:	b513      	push	{r0, r1, r4, lr}
 800f22a:	4604      	mov	r4, r0
 800f22c:	b300      	cbz	r0, 800f270 <WM__InvalidateDrawAndDescs+0x48>
 800f22e:	f7fb fe27 	bl	800ae80 <GUI_ALLOC_LockH>
 800f232:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f234:	9001      	str	r0, [sp, #4]
 800f236:	079b      	lsls	r3, r3, #30
 800f238:	d517      	bpl.n	800f26a <WM__InvalidateDrawAndDescs+0x42>
 800f23a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f23c:	b140      	cbz	r0, 800f250 <WM__InvalidateDrawAndDescs+0x28>
 800f23e:	4b0d      	ldr	r3, [pc, #52]	; (800f274 <WM__InvalidateDrawAndDescs+0x4c>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	429c      	cmp	r4, r3
 800f244:	d004      	beq.n	800f250 <WM__InvalidateDrawAndDescs+0x28>
 800f246:	f002 fd3d 	bl	8011cc4 <GUI_MEMDEV_Delete>
 800f24a:	9b01      	ldr	r3, [sp, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	625a      	str	r2, [r3, #36]	; 0x24
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fe83 	bl	800ff5c <WM_GetFirstChild>
 800f256:	4604      	mov	r4, r0
 800f258:	b13c      	cbz	r4, 800f26a <WM__InvalidateDrawAndDescs+0x42>
 800f25a:	4620      	mov	r0, r4
 800f25c:	f7ff ffe4 	bl	800f228 <WM__InvalidateDrawAndDescs>
 800f260:	4620      	mov	r0, r4
 800f262:	f7fb fe03 	bl	800ae6c <GUI_ALLOC_h2p>
 800f266:	6a04      	ldr	r4, [r0, #32]
 800f268:	e7f6      	b.n	800f258 <WM__InvalidateDrawAndDescs+0x30>
 800f26a:	a801      	add	r0, sp, #4
 800f26c:	f7fb fe16 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f270:	b002      	add	sp, #8
 800f272:	bd10      	pop	{r4, pc}
 800f274:	2001e750 	.word	0x2001e750

0800f278 <WM__RectIsNZ>:
 800f278:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f27c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	dc08      	bgt.n	800f296 <WM__RectIsNZ+0x1e>
 800f284:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f288:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f28c:	4283      	cmp	r3, r0
 800f28e:	bfcc      	ite	gt
 800f290:	2000      	movgt	r0, #0
 800f292:	2001      	movle	r0, #1
 800f294:	4770      	bx	lr
 800f296:	2000      	movs	r0, #0
 800f298:	4770      	bx	lr

0800f29a <WM__SendMsgNoData>:
 800f29a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f29c:	ab04      	add	r3, sp, #16
 800f29e:	9001      	str	r0, [sp, #4]
 800f2a0:	f843 1d10 	str.w	r1, [r3, #-16]!
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	f001 f86d 	bl	8010384 <WM__SendMessage>
 800f2aa:	b005      	add	sp, #20
 800f2ac:	f85d fb04 	ldr.w	pc, [sp], #4

0800f2b0 <WM__GetClientRectWin>:
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	800b      	strh	r3, [r1, #0]
 800f2b4:	8802      	ldrh	r2, [r0, #0]
 800f2b6:	804b      	strh	r3, [r1, #2]
 800f2b8:	8883      	ldrh	r3, [r0, #4]
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	808b      	strh	r3, [r1, #4]
 800f2be:	8842      	ldrh	r2, [r0, #2]
 800f2c0:	88c3      	ldrh	r3, [r0, #6]
 800f2c2:	1a9b      	subs	r3, r3, r2
 800f2c4:	80cb      	strh	r3, [r1, #6]
 800f2c6:	4770      	bx	lr

0800f2c8 <WM__GetTopLevelLayer>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	f7fb fdce 	bl	800ae6c <GUI_ALLOC_h2p>
 800f2d0:	6980      	ldr	r0, [r0, #24]
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d1f9      	bne.n	800f2ca <WM__GetTopLevelLayer+0x2>
 800f2d6:	4b05      	ldr	r3, [pc, #20]	; (800f2ec <WM__GetTopLevelLayer+0x24>)
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	4294      	cmp	r4, r2
 800f2dc:	d005      	beq.n	800f2ea <WM__GetTopLevelLayer+0x22>
 800f2de:	6858      	ldr	r0, [r3, #4]
 800f2e0:	4284      	cmp	r4, r0
 800f2e2:	bf0c      	ite	eq
 800f2e4:	2001      	moveq	r0, #1
 800f2e6:	f04f 30ff 	movne.w	r0, #4294967295
 800f2ea:	bd10      	pop	{r4, pc}
 800f2ec:	2001e704 	.word	0x2001e704

0800f2f0 <_Invalidate1Abs>:
 800f2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	460d      	mov	r5, r1
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	4617      	mov	r7, r2
 800f2fa:	f7fb fdb7 	bl	800ae6c <GUI_ALLOC_h2p>
 800f2fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f300:	9001      	str	r0, [sp, #4]
 800f302:	078b      	lsls	r3, r1, #30
 800f304:	d53e      	bpl.n	800f384 <_Invalidate1Abs+0x94>
 800f306:	4628      	mov	r0, r5
 800f308:	f7ff ffb6 	bl	800f278 <WM__RectIsNZ>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d039      	beq.n	800f384 <_Invalidate1Abs+0x94>
 800f310:	f640 0301 	movw	r3, #2049	; 0x801
 800f314:	400b      	ands	r3, r1
 800f316:	2b01      	cmp	r3, #1
 800f318:	d034      	beq.n	800f384 <_Invalidate1Abs+0x94>
 800f31a:	4630      	mov	r0, r6
 800f31c:	f7fb fdb0 	bl	800ae80 <GUI_ALLOC_LockH>
 800f320:	ac02      	add	r4, sp, #8
 800f322:	4602      	mov	r2, r0
 800f324:	9001      	str	r0, [sp, #4]
 800f326:	4629      	mov	r1, r5
 800f328:	4620      	mov	r0, r4
 800f32a:	f7fc fcc0 	bl	800bcae <GUI__IntersectRects>
 800f32e:	4620      	mov	r0, r4
 800f330:	f7ff ffa2 	bl	800f278 <WM__RectIsNZ>
 800f334:	b318      	cbz	r0, 800f37e <_Invalidate1Abs+0x8e>
 800f336:	9b01      	ldr	r3, [sp, #4]
 800f338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f33a:	f244 0120 	movw	r1, #16416	; 0x4020
 800f33e:	4011      	ands	r1, r2
 800f340:	f103 0508 	add.w	r5, r3, #8
 800f344:	b129      	cbz	r1, 800f352 <_Invalidate1Abs+0x62>
 800f346:	4622      	mov	r2, r4
 800f348:	4629      	mov	r1, r5
 800f34a:	4628      	mov	r0, r5
 800f34c:	f7fb ffc4 	bl	800b2d8 <GUI_MergeRect>
 800f350:	e015      	b.n	800f37e <_Invalidate1Abs+0x8e>
 800f352:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f356:	433a      	orrs	r2, r7
 800f358:	e885 0003 	stmia.w	r5, {r0, r1}
 800f35c:	629a      	str	r2, [r3, #40]	; 0x28
 800f35e:	4a0a      	ldr	r2, [pc, #40]	; (800f388 <_Invalidate1Abs+0x98>)
 800f360:	8813      	ldrh	r3, [r2, #0]
 800f362:	4630      	mov	r0, r6
 800f364:	3301      	adds	r3, #1
 800f366:	8013      	strh	r3, [r2, #0]
 800f368:	f7ff ffae 	bl	800f2c8 <WM__GetTopLevelLayer>
 800f36c:	4a07      	ldr	r2, [pc, #28]	; (800f38c <_Invalidate1Abs+0x9c>)
 800f36e:	2301      	movs	r3, #1
 800f370:	fa03 f000 	lsl.w	r0, r3, r0
 800f374:	6813      	ldr	r3, [r2, #0]
 800f376:	4303      	orrs	r3, r0
 800f378:	6013      	str	r3, [r2, #0]
 800f37a:	f7fc fc73 	bl	800bc64 <GUI_SignalEvent>
 800f37e:	a801      	add	r0, sp, #4
 800f380:	f7fb fd8c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f384:	b005      	add	sp, #20
 800f386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f388:	2001e71c 	.word	0x2001e71c
 800f38c:	2001e72c 	.word	0x2001e72c

0800f390 <WM__Invalidate1Abs>:
 800f390:	2220      	movs	r2, #32
 800f392:	f7ff bfad 	b.w	800f2f0 <_Invalidate1Abs>

0800f396 <WM_InvalidateWindowAndDescsEx>:
 800f396:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f398:	460f      	mov	r7, r1
 800f39a:	b085      	sub	sp, #20
 800f39c:	4615      	mov	r5, r2
 800f39e:	4606      	mov	r6, r0
 800f3a0:	b348      	cbz	r0, 800f3f6 <WM_InvalidateWindowAndDescsEx+0x60>
 800f3a2:	f7fb fd6d 	bl	800ae80 <GUI_ALLOC_LockH>
 800f3a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f3a8:	ac04      	add	r4, sp, #16
 800f3aa:	079b      	lsls	r3, r3, #30
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800f3b2:	d403      	bmi.n	800f3bc <WM_InvalidateWindowAndDescsEx+0x26>
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7fb fd71 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f3ba:	e01c      	b.n	800f3f6 <WM_InvalidateWindowAndDescsEx+0x60>
 800f3bc:	4639      	mov	r1, r7
 800f3be:	a802      	add	r0, sp, #8
 800f3c0:	f7fc fc75 	bl	800bcae <GUI__IntersectRects>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d0f5      	beq.n	800f3b4 <WM_InvalidateWindowAndDescsEx+0x1e>
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f7fb fd67 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f3ce:	462a      	mov	r2, r5
 800f3d0:	a902      	add	r1, sp, #8
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f7ff ff8c 	bl	800f2f0 <_Invalidate1Abs>
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f000 fdbf 	bl	800ff5c <WM_GetFirstChild>
 800f3de:	4604      	mov	r4, r0
 800f3e0:	b14c      	cbz	r4, 800f3f6 <WM_InvalidateWindowAndDescsEx+0x60>
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	462a      	mov	r2, r5
 800f3e6:	a902      	add	r1, sp, #8
 800f3e8:	f7ff ffd5 	bl	800f396 <WM_InvalidateWindowAndDescsEx>
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f7fb fd3d 	bl	800ae6c <GUI_ALLOC_h2p>
 800f3f2:	6a04      	ldr	r4, [r0, #32]
 800f3f4:	e7f4      	b.n	800f3e0 <WM_InvalidateWindowAndDescsEx+0x4a>
 800f3f6:	b005      	add	sp, #20
 800f3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3fa <WM__InvalidateRect>:
 800f3fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f3fe:	4680      	mov	r8, r0
 800f400:	4617      	mov	r7, r2
 800f402:	461d      	mov	r5, r3
 800f404:	460c      	mov	r4, r1
 800f406:	b381      	cbz	r1, 800f46a <WM__InvalidateRect+0x70>
 800f408:	4608      	mov	r0, r1
 800f40a:	f7fb fd39 	bl	800ae80 <GUI_ALLOC_LockH>
 800f40e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800f410:	9001      	str	r0, [sp, #4]
 800f412:	07b3      	lsls	r3, r6, #30
 800f414:	4602      	mov	r2, r0
 800f416:	d525      	bpl.n	800f464 <WM__InvalidateRect+0x6a>
 800f418:	4641      	mov	r1, r8
 800f41a:	a802      	add	r0, sp, #8
 800f41c:	f7fc fc47 	bl	800bcae <GUI__IntersectRects>
 800f420:	b300      	cbz	r0, 800f464 <WM__InvalidateRect+0x6a>
 800f422:	f640 0301 	movw	r3, #2049	; 0x801
 800f426:	4033      	ands	r3, r6
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d107      	bne.n	800f43c <WM__InvalidateRect+0x42>
 800f42c:	9901      	ldr	r1, [sp, #4]
 800f42e:	462b      	mov	r3, r5
 800f430:	6a0a      	ldr	r2, [r1, #32]
 800f432:	6989      	ldr	r1, [r1, #24]
 800f434:	a802      	add	r0, sp, #8
 800f436:	f7ff ffe0 	bl	800f3fa <WM__InvalidateRect>
 800f43a:	e004      	b.n	800f446 <WM__InvalidateRect+0x4c>
 800f43c:	462a      	mov	r2, r5
 800f43e:	a902      	add	r1, sp, #8
 800f440:	4620      	mov	r0, r4
 800f442:	f7ff ff55 	bl	800f2f0 <_Invalidate1Abs>
 800f446:	9b01      	ldr	r3, [sp, #4]
 800f448:	69dc      	ldr	r4, [r3, #28]
 800f44a:	b15c      	cbz	r4, 800f464 <WM__InvalidateRect+0x6a>
 800f44c:	42bc      	cmp	r4, r7
 800f44e:	d009      	beq.n	800f464 <WM__InvalidateRect+0x6a>
 800f450:	4620      	mov	r0, r4
 800f452:	462a      	mov	r2, r5
 800f454:	a902      	add	r1, sp, #8
 800f456:	f7ff ff9e 	bl	800f396 <WM_InvalidateWindowAndDescsEx>
 800f45a:	4620      	mov	r0, r4
 800f45c:	f7fb fd06 	bl	800ae6c <GUI_ALLOC_h2p>
 800f460:	6a04      	ldr	r4, [r0, #32]
 800f462:	e7f2      	b.n	800f44a <WM__InvalidateRect+0x50>
 800f464:	a801      	add	r0, sp, #4
 800f466:	f7fb fd19 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f46a:	b004      	add	sp, #16
 800f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f470 <WM__InvalidateParent>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	4605      	mov	r5, r0
 800f474:	4608      	mov	r0, r1
 800f476:	460c      	mov	r4, r1
 800f478:	4616      	mov	r6, r2
 800f47a:	f7fb fcf7 	bl	800ae6c <GUI_ALLOC_h2p>
 800f47e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f480:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800f484:	4632      	mov	r2, r6
 800f486:	4621      	mov	r1, r4
 800f488:	4628      	mov	r0, r5
 800f48a:	bf14      	ite	ne
 800f48c:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800f490:	2320      	moveq	r3, #32
 800f492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f496:	f7ff bfb0 	b.w	800f3fa <WM__InvalidateRect>

0800f49a <WM__InvalidateRectEx>:
 800f49a:	2320      	movs	r3, #32
 800f49c:	f7ff bfad 	b.w	800f3fa <WM__InvalidateRect>

0800f4a0 <WM__DetachWindow>:
 800f4a0:	b513      	push	{r0, r1, r4, lr}
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	f7fb fcec 	bl	800ae80 <GUI_ALLOC_LockH>
 800f4a8:	6981      	ldr	r1, [r0, #24]
 800f4aa:	9001      	str	r0, [sp, #4]
 800f4ac:	b141      	cbz	r1, 800f4c0 <WM__DetachWindow+0x20>
 800f4ae:	6a02      	ldr	r2, [r0, #32]
 800f4b0:	f7ff fff3 	bl	800f49a <WM__InvalidateRectEx>
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7ff fe35 	bl	800f124 <WM__RemoveWindowFromList>
 800f4ba:	9b01      	ldr	r3, [sp, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	619a      	str	r2, [r3, #24]
 800f4c0:	a801      	add	r0, sp, #4
 800f4c2:	f7fb fceb 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f4c6:	b002      	add	sp, #8
 800f4c8:	bd10      	pop	{r4, pc}

0800f4ca <WM_InvalidateRect>:
 800f4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4cc:	460f      	mov	r7, r1
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d033      	beq.n	800f53e <WM_InvalidateRect+0x74>
 800f4d6:	f7fb fcd3 	bl	800ae80 <GUI_ALLOC_LockH>
 800f4da:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800f4dc:	9001      	str	r0, [sp, #4]
 800f4de:	07b2      	lsls	r2, r6, #30
 800f4e0:	d52a      	bpl.n	800f538 <WM_InvalidateRect+0x6e>
 800f4e2:	c803      	ldmia	r0, {r0, r1}
 800f4e4:	ac04      	add	r4, sp, #16
 800f4e6:	03f3      	lsls	r3, r6, #15
 800f4e8:	e884 0003 	stmia.w	r4, {r0, r1}
 800f4ec:	d502      	bpl.n	800f4f4 <WM_InvalidateRect+0x2a>
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f7ff fe9a 	bl	800f228 <WM__InvalidateDrawAndDescs>
 800f4f4:	b15f      	cbz	r7, 800f50e <WM_InvalidateRect+0x44>
 800f4f6:	6838      	ldr	r0, [r7, #0]
 800f4f8:	6879      	ldr	r1, [r7, #4]
 800f4fa:	ab02      	add	r3, sp, #8
 800f4fc:	c303      	stmia	r3!, {r0, r1}
 800f4fe:	a902      	add	r1, sp, #8
 800f500:	9801      	ldr	r0, [sp, #4]
 800f502:	f7ff fe2d 	bl	800f160 <WM__Client2Screen>
 800f506:	a902      	add	r1, sp, #8
 800f508:	4620      	mov	r0, r4
 800f50a:	f7fc fbb3 	bl	800bc74 <GUI__IntersectRect>
 800f50e:	4629      	mov	r1, r5
 800f510:	4620      	mov	r0, r4
 800f512:	f7ff fd85 	bl	800f020 <WM__ClipAtParentBorders>
 800f516:	b178      	cbz	r0, 800f538 <WM_InvalidateRect+0x6e>
 800f518:	f640 0301 	movw	r3, #2049	; 0x801
 800f51c:	4033      	ands	r3, r6
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d106      	bne.n	800f530 <WM_InvalidateRect+0x66>
 800f522:	9b01      	ldr	r3, [sp, #4]
 800f524:	4620      	mov	r0, r4
 800f526:	6a1a      	ldr	r2, [r3, #32]
 800f528:	6999      	ldr	r1, [r3, #24]
 800f52a:	f7ff ffb6 	bl	800f49a <WM__InvalidateRectEx>
 800f52e:	e003      	b.n	800f538 <WM_InvalidateRect+0x6e>
 800f530:	4621      	mov	r1, r4
 800f532:	4628      	mov	r0, r5
 800f534:	f7ff ff2c 	bl	800f390 <WM__Invalidate1Abs>
 800f538:	a801      	add	r0, sp, #4
 800f53a:	f7fb fcaf 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f53e:	b007      	add	sp, #28
 800f540:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f542 <WM_InvalidateWindow>:
 800f542:	2100      	movs	r1, #0
 800f544:	f7ff bfc1 	b.w	800f4ca <WM_InvalidateRect>

0800f548 <WM__SelectTopLevelLayer>:
 800f548:	b508      	push	{r3, lr}
 800f54a:	f7ff febd 	bl	800f2c8 <WM__GetTopLevelLayer>
 800f54e:	2800      	cmp	r0, #0
 800f550:	db03      	blt.n	800f55a <WM__SelectTopLevelLayer+0x12>
 800f552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f556:	f001 bad7 	b.w	8010b08 <GUI_SelectLayer>
 800f55a:	bd08      	pop	{r3, pc}

0800f55c <WM_SelectWindow>:
 800f55c:	4b0d      	ldr	r3, [pc, #52]	; (800f594 <WM_SelectWindow+0x38>)
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	6c96      	ldr	r6, [r2, #72]	; 0x48
 800f564:	4604      	mov	r4, r0
 800f566:	461d      	mov	r5, r3
 800f568:	b908      	cbnz	r0, 800f56e <WM_SelectWindow+0x12>
 800f56a:	4b0b      	ldr	r3, [pc, #44]	; (800f598 <WM_SelectWindow+0x3c>)
 800f56c:	681c      	ldr	r4, [r3, #0]
 800f56e:	6494      	str	r4, [r2, #72]	; 0x48
 800f570:	4620      	mov	r0, r4
 800f572:	f7ff ffe9 	bl	800f548 <WM__SelectTopLevelLayer>
 800f576:	f7fc fe93 	bl	800c2a0 <LCD_SetClipRectMax>
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7fb fc76 	bl	800ae6c <GUI_ALLOC_h2p>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f586:	64da      	str	r2, [r3, #76]	; 0x4c
 800f588:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f58c:	651a      	str	r2, [r3, #80]	; 0x50
 800f58e:	4630      	mov	r0, r6
 800f590:	bd70      	pop	{r4, r5, r6, pc}
 800f592:	bf00      	nop
 800f594:	20000014 	.word	0x20000014
 800f598:	2001e720 	.word	0x2001e720

0800f59c <WM_CreateWindowAsChild>:
 800f59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f5a4:	4698      	mov	r8, r3
 800f5a6:	4b4e      	ldr	r3, [pc, #312]	; (800f6e0 <WM_CreateWindowAsChild+0x144>)
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	460e      	mov	r6, r1
 800f5ac:	4617      	mov	r7, r2
 800f5ae:	f8d3 9000 	ldr.w	r9, [r3]
 800f5b2:	f1ba 0f00 	cmp.w	sl, #0
 800f5b6:	d128      	bne.n	800f60a <WM_CreateWindowAsChild+0x6e>
 800f5b8:	4b4a      	ldr	r3, [pc, #296]	; (800f6e4 <WM_CreateWindowAsChild+0x148>)
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	b353      	cbz	r3, 800f614 <WM_CreateWindowAsChild+0x78>
 800f5be:	4b4a      	ldr	r3, [pc, #296]	; (800f6e8 <WM_CreateWindowAsChild+0x14c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	7c5a      	ldrb	r2, [r3, #17]
 800f5c4:	4b49      	ldr	r3, [pc, #292]	; (800f6ec <WM_CreateWindowAsChild+0x150>)
 800f5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ca:	1c5a      	adds	r2, r3, #1
 800f5cc:	2a01      	cmp	r2, #1
 800f5ce:	d921      	bls.n	800f614 <WM_CreateWindowAsChild+0x78>
 800f5d0:	469a      	mov	sl, r3
 800f5d2:	4650      	mov	r0, sl
 800f5d4:	f7fb fc54 	bl	800ae80 <GUI_ALLOC_LockH>
 800f5d8:	f9b0 1000 	ldrsh.w	r1, [r0]
 800f5dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f5e0:	9001      	str	r0, [sp, #4]
 800f5e2:	440d      	add	r5, r1
 800f5e4:	4416      	add	r6, r2
 800f5e6:	b91f      	cbnz	r7, 800f5f0 <WM_CreateWindowAsChild+0x54>
 800f5e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f5ec:	1a5f      	subs	r7, r3, r1
 800f5ee:	3701      	adds	r7, #1
 800f5f0:	f1b8 0f00 	cmp.w	r8, #0
 800f5f4:	d105      	bne.n	800f602 <WM_CreateWindowAsChild+0x66>
 800f5f6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f5fa:	ebc2 0803 	rsb	r8, r2, r3
 800f5fe:	f108 0801 	add.w	r8, r8, #1
 800f602:	a801      	add	r0, sp, #4
 800f604:	f7fb fc4a 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f608:	e004      	b.n	800f614 <WM_CreateWindowAsChild+0x78>
 800f60a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f60e:	d1e0      	bne.n	800f5d2 <WM_CreateWindowAsChild+0x36>
 800f610:	f04f 0a00 	mov.w	sl, #0
 800f614:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f616:	302c      	adds	r0, #44	; 0x2c
 800f618:	f7fb fdf8 	bl	800b20c <GUI_ALLOC_AllocZero>
 800f61c:	4604      	mov	r4, r0
 800f61e:	2800      	cmp	r0, #0
 800f620:	d059      	beq.n	800f6d6 <WM_CreateWindowAsChild+0x13a>
 800f622:	4a30      	ldr	r2, [pc, #192]	; (800f6e4 <WM_CreateWindowAsChild+0x148>)
 800f624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f626:	ea49 0903 	orr.w	r9, r9, r3
 800f62a:	8813      	ldrh	r3, [r2, #0]
 800f62c:	3301      	adds	r3, #1
 800f62e:	8013      	strh	r3, [r2, #0]
 800f630:	f7fb fc26 	bl	800ae80 <GUI_ALLOC_LockH>
 800f634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f636:	6103      	str	r3, [r0, #16]
 800f638:	f10d 0b08 	add.w	fp, sp, #8
 800f63c:	4b2c      	ldr	r3, [pc, #176]	; (800f6f0 <WM_CreateWindowAsChild+0x154>)
 800f63e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f640:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800f644:	ea09 0303 	and.w	r3, r9, r3
 800f648:	8005      	strh	r5, [r0, #0]
 800f64a:	8046      	strh	r6, [r0, #2]
 800f64c:	443d      	add	r5, r7
 800f64e:	4446      	add	r6, r8
 800f650:	4313      	orrs	r3, r2
 800f652:	3d01      	subs	r5, #1
 800f654:	3e01      	subs	r6, #1
 800f656:	6283      	str	r3, [r0, #40]	; 0x28
 800f658:	8085      	strh	r5, [r0, #4]
 800f65a:	80c6      	strh	r6, [r0, #6]
 800f65c:	4658      	mov	r0, fp
 800f65e:	f7fb fc1d 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f662:	4b24      	ldr	r3, [pc, #144]	; (800f6f4 <WM_CreateWindowAsChild+0x158>)
 800f664:	6818      	ldr	r0, [r3, #0]
 800f666:	b148      	cbz	r0, 800f67c <WM_CreateWindowAsChild+0xe0>
 800f668:	f7fb fc00 	bl	800ae6c <GUI_ALLOC_h2p>
 800f66c:	4605      	mov	r5, r0
 800f66e:	4620      	mov	r0, r4
 800f670:	f7fb fbfc 	bl	800ae6c <GUI_ALLOC_h2p>
 800f674:	696b      	ldr	r3, [r5, #20]
 800f676:	6143      	str	r3, [r0, #20]
 800f678:	616c      	str	r4, [r5, #20]
 800f67a:	e000      	b.n	800f67e <WM_CreateWindowAsChild+0xe2>
 800f67c:	601c      	str	r4, [r3, #0]
 800f67e:	4651      	mov	r1, sl
 800f680:	4620      	mov	r0, r4
 800f682:	f7ff fcf9 	bl	800f078 <WM__InsertWindowIntoList>
 800f686:	f019 0f20 	tst.w	r9, #32
 800f68a:	d002      	beq.n	800f692 <WM_CreateWindowAsChild+0xf6>
 800f68c:	4620      	mov	r0, r4
 800f68e:	f7ff ff65 	bl	800f55c <WM_SelectWindow>
 800f692:	f019 0f01 	tst.w	r9, #1
 800f696:	bf1f      	itttt	ne
 800f698:	4a17      	ldrne	r2, [pc, #92]	; (800f6f8 <WM_CreateWindowAsChild+0x15c>)
 800f69a:	6813      	ldrne	r3, [r2, #0]
 800f69c:	3301      	addne	r3, #1
 800f69e:	6013      	strne	r3, [r2, #0]
 800f6a0:	f019 0f40 	tst.w	r9, #64	; 0x40
 800f6a4:	d002      	beq.n	800f6ac <WM_CreateWindowAsChild+0x110>
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f000 fc70 	bl	800ff8c <WM_BringToBottom>
 800f6ac:	f019 0f02 	tst.w	r9, #2
 800f6b0:	d00d      	beq.n	800f6ce <WM_CreateWindowAsChild+0x132>
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f7fb fbe4 	bl	800ae80 <GUI_ALLOC_LockH>
 800f6b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f6ba:	9000      	str	r0, [sp, #0]
 800f6bc:	f043 0302 	orr.w	r3, r3, #2
 800f6c0:	6283      	str	r3, [r0, #40]	; 0x28
 800f6c2:	4658      	mov	r0, fp
 800f6c4:	f7fb fbea 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7ff ff3a 	bl	800f542 <WM_InvalidateWindow>
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f7ff fde2 	bl	800f29a <WM__SendMsgNoData>
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	b003      	add	sp, #12
 800f6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6de:	bf00      	nop
 800f6e0:	2001e734 	.word	0x2001e734
 800f6e4:	2001e6fc 	.word	0x2001e6fc
 800f6e8:	20000014 	.word	0x20000014
 800f6ec:	2001e704 	.word	0x2001e704
 800f6f0:	003f3f9f 	.word	0x003f3f9f
 800f6f4:	2001e720 	.word	0x2001e720
 800f6f8:	2001e754 	.word	0x2001e754

0800f6fc <WM_DeleteWindow>:
 800f6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6fe:	4604      	mov	r4, r0
 800f700:	2800      	cmp	r0, #0
 800f702:	d072      	beq.n	800f7ea <WM_DeleteWindow+0xee>
 800f704:	f7ff fd80 	bl	800f208 <WM__IsWindow>
 800f708:	2800      	cmp	r0, #0
 800f70a:	d06e      	beq.n	800f7ea <WM_DeleteWindow+0xee>
 800f70c:	4620      	mov	r0, r4
 800f70e:	f7ff fddb 	bl	800f2c8 <WM__GetTopLevelLayer>
 800f712:	210b      	movs	r1, #11
 800f714:	4605      	mov	r5, r0
 800f716:	4620      	mov	r0, r4
 800f718:	f7ff fdbf 	bl	800f29a <WM__SendMsgNoData>
 800f71c:	4620      	mov	r0, r4
 800f71e:	f000 fdf0 	bl	8010302 <WM__DeleteAssocTimer>
 800f722:	4620      	mov	r0, r4
 800f724:	f7fb fbac 	bl	800ae80 <GUI_ALLOC_LockH>
 800f728:	9001      	str	r0, [sp, #4]
 800f72a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800f72c:	b108      	cbz	r0, 800f732 <WM_DeleteWindow+0x36>
 800f72e:	f002 fac9 	bl	8011cc4 <GUI_MEMDEV_Delete>
 800f732:	4b2f      	ldr	r3, [pc, #188]	; (800f7f0 <WM_DeleteWindow+0xf4>)
 800f734:	4a2f      	ldr	r2, [pc, #188]	; (800f7f4 <WM_DeleteWindow+0xf8>)
 800f736:	2100      	movs	r1, #0
 800f738:	6099      	str	r1, [r3, #8]
 800f73a:	4b2f      	ldr	r3, [pc, #188]	; (800f7f8 <WM_DeleteWindow+0xfc>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f742:	4284      	cmp	r4, r0
 800f744:	bf08      	it	eq
 800f746:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800f74a:	4a2c      	ldr	r2, [pc, #176]	; (800f7fc <WM_DeleteWindow+0x100>)
 800f74c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f750:	428c      	cmp	r4, r1
 800f752:	bf04      	itt	eq
 800f754:	2100      	moveq	r1, #0
 800f756:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800f75a:	4b29      	ldr	r3, [pc, #164]	; (800f800 <WM_DeleteWindow+0x104>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2200      	movs	r2, #0
 800f760:	b12b      	cbz	r3, 800f76e <WM_DeleteWindow+0x72>
 800f762:	6859      	ldr	r1, [r3, #4]
 800f764:	428c      	cmp	r4, r1
 800f766:	bf08      	it	eq
 800f768:	605a      	streq	r2, [r3, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	e7f8      	b.n	800f760 <WM_DeleteWindow+0x64>
 800f76e:	2107      	movs	r1, #7
 800f770:	4620      	mov	r0, r4
 800f772:	f000 fcf4 	bl	801015e <WM_NotifyParent>
 800f776:	9e01      	ldr	r6, [sp, #4]
 800f778:	69f0      	ldr	r0, [r6, #28]
 800f77a:	f7ff ffbf 	bl	800f6fc <WM_DeleteWindow>
 800f77e:	69f3      	ldr	r3, [r6, #28]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d1f9      	bne.n	800f778 <WM_DeleteWindow+0x7c>
 800f784:	4620      	mov	r0, r4
 800f786:	f7ff fe8b 	bl	800f4a0 <WM__DetachWindow>
 800f78a:	4b1e      	ldr	r3, [pc, #120]	; (800f804 <WM_DeleteWindow+0x108>)
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	b150      	cbz	r0, 800f7a6 <WM_DeleteWindow+0xaa>
 800f790:	f7fb fb6c 	bl	800ae6c <GUI_ALLOC_h2p>
 800f794:	4606      	mov	r6, r0
 800f796:	6940      	ldr	r0, [r0, #20]
 800f798:	4284      	cmp	r4, r0
 800f79a:	d1f8      	bne.n	800f78e <WM_DeleteWindow+0x92>
 800f79c:	4620      	mov	r0, r4
 800f79e:	f7fb fb65 	bl	800ae6c <GUI_ALLOC_h2p>
 800f7a2:	6943      	ldr	r3, [r0, #20]
 800f7a4:	6173      	str	r3, [r6, #20]
 800f7a6:	9b01      	ldr	r3, [sp, #4]
 800f7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7aa:	07d1      	lsls	r1, r2, #31
 800f7ac:	bf41      	itttt	mi
 800f7ae:	4916      	ldrmi	r1, [pc, #88]	; (800f808 <WM_DeleteWindow+0x10c>)
 800f7b0:	680b      	ldrmi	r3, [r1, #0]
 800f7b2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f7b6:	600b      	strmi	r3, [r1, #0]
 800f7b8:	0693      	lsls	r3, r2, #26
 800f7ba:	bf44      	itt	mi
 800f7bc:	4a13      	ldrmi	r2, [pc, #76]	; (800f80c <WM_DeleteWindow+0x110>)
 800f7be:	8813      	ldrhmi	r3, [r2, #0]
 800f7c0:	a801      	add	r0, sp, #4
 800f7c2:	bf44      	itt	mi
 800f7c4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f7c8:	8013      	strhmi	r3, [r2, #0]
 800f7ca:	f7fb fb67 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f7ce:	4a10      	ldr	r2, [pc, #64]	; (800f810 <WM_DeleteWindow+0x114>)
 800f7d0:	8813      	ldrh	r3, [r2, #0]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	8013      	strh	r3, [r2, #0]
 800f7d8:	f7fb fb80 	bl	800aedc <GUI_ALLOC_Free>
 800f7dc:	2d00      	cmp	r5, #0
 800f7de:	db04      	blt.n	800f7ea <WM_DeleteWindow+0xee>
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <WM_DeleteWindow+0x118>)
 800f7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7e6:	f7ff feb9 	bl	800f55c <WM_SelectWindow>
 800f7ea:	b002      	add	sp, #8
 800f7ec:	bd70      	pop	{r4, r5, r6, pc}
 800f7ee:	bf00      	nop
 800f7f0:	200003fc 	.word	0x200003fc
 800f7f4:	2001e714 	.word	0x2001e714
 800f7f8:	2001e724 	.word	0x2001e724
 800f7fc:	2001e748 	.word	0x2001e748
 800f800:	2001e740 	.word	0x2001e740
 800f804:	2001e720 	.word	0x2001e720
 800f808:	2001e754 	.word	0x2001e754
 800f80c:	2001e71c 	.word	0x2001e71c
 800f810:	2001e6fc 	.word	0x2001e6fc
 800f814:	2001e704 	.word	0x2001e704

0800f818 <_Exec1Input>:
 800f818:	4b1b      	ldr	r3, [pc, #108]	; (800f888 <_Exec1Input+0x70>)
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f81e:	461d      	mov	r5, r3
 800f820:	b1ca      	cbz	r2, 800f856 <_Exec1Input+0x3e>
 800f822:	4b1a      	ldr	r3, [pc, #104]	; (800f88c <_Exec1Input+0x74>)
 800f824:	681c      	ldr	r4, [r3, #0]
 800f826:	b1ac      	cbz	r4, 800f854 <_Exec1Input+0x3c>
 800f828:	4620      	mov	r0, r4
 800f82a:	f7fb fb29 	bl	800ae80 <GUI_ALLOC_LockH>
 800f82e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f830:	9001      	str	r0, [sp, #4]
 800f832:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f836:	6946      	ldr	r6, [r0, #20]
 800f838:	d007      	beq.n	800f84a <_Exec1Input+0x32>
 800f83a:	a801      	add	r0, sp, #4
 800f83c:	f7fb fb2e 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f840:	4620      	mov	r0, r4
 800f842:	f7ff ff5b 	bl	800f6fc <WM_DeleteWindow>
 800f846:	4634      	mov	r4, r6
 800f848:	e7ed      	b.n	800f826 <_Exec1Input+0xe>
 800f84a:	a801      	add	r0, sp, #4
 800f84c:	4634      	mov	r4, r6
 800f84e:	f7fb fb25 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f852:	e7e8      	b.n	800f826 <_Exec1Input+0xe>
 800f854:	606c      	str	r4, [r5, #4]
 800f856:	4b0e      	ldr	r3, [pc, #56]	; (800f890 <_Exec1Input+0x78>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_Exec1Input+0x46>
 800f85c:	4798      	blx	r3
 800f85e:	4b0d      	ldr	r3, [pc, #52]	; (800f894 <_Exec1Input+0x7c>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	b953      	cbnz	r3, 800f87a <_Exec1Input+0x62>
 800f864:	4b0c      	ldr	r3, [pc, #48]	; (800f898 <_Exec1Input+0x80>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800f86c:	b148      	cbz	r0, 800f882 <_Exec1Input+0x6a>
 800f86e:	f7fc f935 	bl	800badc <GUI_PollKeyMsg>
 800f872:	3000      	adds	r0, #0
 800f874:	bf18      	it	ne
 800f876:	2001      	movne	r0, #1
 800f878:	e003      	b.n	800f882 <_Exec1Input+0x6a>
 800f87a:	4798      	blx	r3
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d0f1      	beq.n	800f864 <_Exec1Input+0x4c>
 800f880:	2001      	movs	r0, #1
 800f882:	b002      	add	sp, #8
 800f884:	bd70      	pop	{r4, r5, r6, pc}
 800f886:	bf00      	nop
 800f888:	200003fc 	.word	0x200003fc
 800f88c:	2001e720 	.word	0x2001e720
 800f890:	2001e70c 	.word	0x2001e70c
 800f894:	2001e6f4 	.word	0x2001e6f4
 800f898:	20000014 	.word	0x20000014

0800f89c <WM__GetNextIVR>:
 800f89c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f8a0:	4f5d      	ldr	r7, [pc, #372]	; (800fa18 <WM__GetNextIVR+0x17c>)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	f000 80b1 	beq.w	800fa10 <WM__GetNextIVR+0x174>
 800f8ae:	4a5b      	ldr	r2, [pc, #364]	; (800fa1c <WM__GetNextIVR+0x180>)
 800f8b0:	6a13      	ldr	r3, [r2, #32]
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	dd03      	ble.n	800f8c0 <WM__GetNextIVR+0x24>
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	6213      	str	r3, [r2, #32]
 800f8bc:	2000      	movs	r0, #0
 800f8be:	e0a7      	b.n	800fa10 <WM__GetNextIVR+0x174>
 800f8c0:	f102 0614 	add.w	r6, r2, #20
 800f8c4:	69d3      	ldr	r3, [r2, #28]
 800f8c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	ad02      	add	r5, sp, #8
 800f8ce:	61d3      	str	r3, [r2, #28]
 800f8d0:	e885 0003 	stmia.w	r5, {r0, r1}
 800f8d4:	b923      	cbnz	r3, 800f8e0 <WM__GetNextIVR+0x44>
 800f8d6:	8993      	ldrh	r3, [r2, #12]
 800f8d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f8dc:	89d3      	ldrh	r3, [r2, #14]
 800f8de:	e010      	b.n	800f902 <WM__GetNextIVR+0x66>
 800f8e0:	8b13      	ldrh	r3, [r2, #24]
 800f8e2:	8ad2      	ldrh	r2, [r2, #22]
 800f8e4:	f8ad 200a 	strh.w	r2, [sp, #10]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800f8ee:	b21b      	sxth	r3, r3
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f8f6:	da06      	bge.n	800f906 <WM__GetNextIVR+0x6a>
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f8fe:	8b63      	ldrh	r3, [r4, #26]
 800f900:	3301      	adds	r3, #1
 800f902:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f906:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800f90a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800f90e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800fa1c <WM__GetNextIVR+0x180>
 800f912:	429a      	cmp	r2, r3
 800f914:	dd04      	ble.n	800f920 <WM__GetNextIVR+0x84>
 800f916:	6a23      	ldr	r3, [r4, #32]
 800f918:	3b01      	subs	r3, #1
 800f91a:	2000      	movs	r0, #0
 800f91c:	6223      	str	r3, [r4, #32]
 800f91e:	e077      	b.n	800fa10 <WM__GetNextIVR+0x174>
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800f924:	f7fb faac 	bl	800ae80 <GUI_ALLOC_LockH>
 800f928:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800f92c:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800f930:	9001      	str	r0, [sp, #4]
 800f932:	429a      	cmp	r2, r3
 800f934:	d11c      	bne.n	800f970 <WM__GetNextIVR+0xd4>
 800f936:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800f93a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f93e:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800f942:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f946:	4b34      	ldr	r3, [pc, #208]	; (800fa18 <WM__GetNextIVR+0x17c>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f94c:	b15a      	cbz	r2, 800f966 <WM__GetNextIVR+0xca>
 800f94e:	4610      	mov	r0, r2
 800f950:	f7fb fa8c 	bl	800ae6c <GUI_ALLOC_h2p>
 800f954:	4680      	mov	r8, r0
 800f956:	2200      	movs	r2, #0
 800f958:	4629      	mov	r1, r5
 800f95a:	6a00      	ldr	r0, [r0, #32]
 800f95c:	f7ff f97c 	bl	800ec58 <_Findy1>
 800f960:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f964:	e7f2      	b.n	800f94c <WM__GetNextIVR+0xb0>
 800f966:	9b01      	ldr	r3, [sp, #4]
 800f968:	4629      	mov	r1, r5
 800f96a:	69d8      	ldr	r0, [r3, #28]
 800f96c:	f7ff f974 	bl	800ec58 <_Findy1>
 800f970:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f974:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f97c:	b16a      	cbz	r2, 800f99a <WM__GetNextIVR+0xfe>
 800f97e:	4610      	mov	r0, r2
 800f980:	f7fb fa74 	bl	800ae6c <GUI_ALLOC_h2p>
 800f984:	2200      	movs	r2, #0
 800f986:	4680      	mov	r8, r0
 800f988:	4629      	mov	r1, r5
 800f98a:	6a00      	ldr	r0, [r0, #32]
 800f98c:	f7ff f9b7 	bl	800ecfe <_Findx0>
 800f990:	2800      	cmp	r0, #0
 800f992:	d1ed      	bne.n	800f970 <WM__GetNextIVR+0xd4>
 800f994:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f998:	e7f0      	b.n	800f97c <WM__GetNextIVR+0xe0>
 800f99a:	9b01      	ldr	r3, [sp, #4]
 800f99c:	4629      	mov	r1, r5
 800f99e:	69d8      	ldr	r0, [r3, #28]
 800f9a0:	f7ff f9ad 	bl	800ecfe <_Findx0>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	d1e3      	bne.n	800f970 <WM__GetNextIVR+0xd4>
 800f9a8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800f9ac:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800f9b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	dd07      	ble.n	800f9c8 <WM__GetNextIVR+0x12c>
 800f9b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f9bc:	e886 0003 	stmia.w	r6, {r0, r1}
 800f9c0:	a801      	add	r0, sp, #4
 800f9c2:	f7fb fa6b 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f9c6:	e797      	b.n	800f8f8 <WM__GetNextIVR+0x5c>
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f9cc:	b152      	cbz	r2, 800f9e4 <WM__GetNextIVR+0x148>
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	f7fb fa4c 	bl	800ae6c <GUI_ALLOC_h2p>
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	4629      	mov	r1, r5
 800f9da:	6a00      	ldr	r0, [r0, #32]
 800f9dc:	f7ff f9d2 	bl	800ed84 <_Findx1>
 800f9e0:	69ba      	ldr	r2, [r7, #24]
 800f9e2:	e7f3      	b.n	800f9cc <WM__GetNextIVR+0x130>
 800f9e4:	af04      	add	r7, sp, #16
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800f9ec:	69d8      	ldr	r0, [r3, #28]
 800f9ee:	f7ff f9c9 	bl	800ed84 <_Findx1>
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	f7fb fa52 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800f9f8:	69e2      	ldr	r2, [r4, #28]
 800f9fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	dc89      	bgt.n	800f916 <WM__GetNextIVR+0x7a>
 800fa02:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fa06:	e886 0003 	stmia.w	r6, {r0, r1}
 800fa0a:	f7ff fbd9 	bl	800f1c0 <WM__ActivateClipRect>
 800fa0e:	2001      	movs	r0, #1
 800fa10:	b004      	add	sp, #16
 800fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa16:	bf00      	nop
 800fa18:	20000014 	.word	0x20000014
 800fa1c:	200003fc 	.word	0x200003fc

0800fa20 <WM__InitIVRSearch>:
 800fa20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa24:	4e39      	ldr	r6, [pc, #228]	; (800fb0c <WM__InitIVRSearch+0xec>)
 800fa26:	6832      	ldr	r2, [r6, #0]
 800fa28:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800fa2c:	b086      	sub	sp, #24
 800fa2e:	4680      	mov	r8, r0
 800fa30:	b913      	cbnz	r3, 800fa38 <WM__InitIVRSearch+0x18>
 800fa32:	f7ff fbc5 	bl	800f1c0 <WM__ActivateClipRect>
 800fa36:	e064      	b.n	800fb02 <WM__InitIVRSearch+0xe2>
 800fa38:	4f35      	ldr	r7, [pc, #212]	; (800fb10 <WM__InitIVRSearch+0xf0>)
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	623b      	str	r3, [r7, #32]
 800fa42:	463d      	mov	r5, r7
 800fa44:	dc5d      	bgt.n	800fb02 <WM__InitIVRSearch+0xe2>
 800fa46:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800fa48:	f7fb fa1a 	bl	800ae80 <GUI_ALLOC_LockH>
 800fa4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa50:	61fb      	str	r3, [r7, #28]
 800fa52:	4b30      	ldr	r3, [pc, #192]	; (800fb14 <WM__InitIVRSearch+0xf4>)
 800fa54:	9000      	str	r0, [sp, #0]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	b113      	cbz	r3, 800fa60 <WM__InitIVRSearch+0x40>
 800fa5a:	ab02      	add	r3, sp, #8
 800fa5c:	3008      	adds	r0, #8
 800fa5e:	e004      	b.n	800fa6a <WM__InitIVRSearch+0x4a>
 800fa60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fa62:	f013 0402 	ands.w	r4, r3, #2
 800fa66:	d00c      	beq.n	800fa82 <WM__InitIVRSearch+0x62>
 800fa68:	ab02      	add	r3, sp, #8
 800fa6a:	c803      	ldmia	r0, {r0, r1}
 800fa6c:	ac02      	add	r4, sp, #8
 800fa6e:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa72:	f1b8 0f00 	cmp.w	r8, #0
 800fa76:	d00c      	beq.n	800fa92 <WM__InitIVRSearch+0x72>
 800fa78:	4641      	mov	r1, r8
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f7fc f8fa 	bl	800bc74 <GUI__IntersectRect>
 800fa80:	e007      	b.n	800fa92 <WM__InitIVRSearch+0x72>
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	4668      	mov	r0, sp
 800fa86:	3b01      	subs	r3, #1
 800fa88:	623b      	str	r3, [r7, #32]
 800fa8a:	f7fb fa07 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800fa8e:	4620      	mov	r0, r4
 800fa90:	e038      	b.n	800fb04 <WM__InitIVRSearch+0xe4>
 800fa92:	6833      	ldr	r3, [r6, #0]
 800fa94:	4f20      	ldr	r7, [pc, #128]	; (800fb18 <WM__InitIVRSearch+0xf8>)
 800fa96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa98:	b1c2      	cbz	r2, 800facc <WM__InitIVRSearch+0xac>
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	6810      	ldr	r0, [r2, #0]
 800fa9e:	6851      	ldr	r1, [r2, #4]
 800faa0:	9301      	str	r3, [sp, #4]
 800faa2:	ab04      	add	r3, sp, #16
 800faa4:	c303      	stmia	r3!, {r0, r1}
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	b133      	cbz	r3, 800fab8 <WM__InitIVRSearch+0x98>
 800faaa:	a801      	add	r0, sp, #4
 800faac:	f7fb f9f6 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800fab0:	6838      	ldr	r0, [r7, #0]
 800fab2:	f7fb f9e5 	bl	800ae80 <GUI_ALLOC_LockH>
 800fab6:	9001      	str	r0, [sp, #4]
 800fab8:	a904      	add	r1, sp, #16
 800faba:	9801      	ldr	r0, [sp, #4]
 800fabc:	f7ff fb50 	bl	800f160 <WM__Client2Screen>
 800fac0:	4620      	mov	r0, r4
 800fac2:	a904      	add	r1, sp, #16
 800fac4:	f7fc f8d6 	bl	800bc74 <GUI__IntersectRect>
 800fac8:	a801      	add	r0, sp, #4
 800faca:	e000      	b.n	800face <WM__InitIVRSearch+0xae>
 800facc:	4668      	mov	r0, sp
 800face:	f7fb f9e5 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	b119      	cbz	r1, 800fade <WM__InitIVRSearch+0xbe>
 800fad6:	4620      	mov	r0, r4
 800fad8:	f7ff faa2 	bl	800f020 <WM__ClipAtParentBorders>
 800fadc:	b128      	cbz	r0, 800faea <WM__InitIVRSearch+0xca>
 800fade:	6833      	ldr	r3, [r6, #0]
 800fae0:	4620      	mov	r0, r4
 800fae2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fae4:	f7ff fa9c 	bl	800f020 <WM__ClipAtParentBorders>
 800fae8:	b918      	cbnz	r0, 800faf2 <WM__InitIVRSearch+0xd2>
 800faea:	6a2b      	ldr	r3, [r5, #32]
 800faec:	3b01      	subs	r3, #1
 800faee:	622b      	str	r3, [r5, #32]
 800faf0:	e008      	b.n	800fb04 <WM__InitIVRSearch+0xe4>
 800faf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <WM__InitIVRSearch+0xfc>)
 800faf8:	e883 0003 	stmia.w	r3, {r0, r1}
 800fafc:	f7ff fece 	bl	800f89c <WM__GetNextIVR>
 800fb00:	e000      	b.n	800fb04 <WM__InitIVRSearch+0xe4>
 800fb02:	2001      	movs	r0, #1
 800fb04:	b006      	add	sp, #24
 800fb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb0a:	bf00      	nop
 800fb0c:	20000014 	.word	0x20000014
 800fb10:	200003fc 	.word	0x200003fc
 800fb14:	2001e730 	.word	0x2001e730
 800fb18:	2001e700 	.word	0x2001e700
 800fb1c:	20000408 	.word	0x20000408

0800fb20 <WM_SetDefault>:
 800fb20:	b508      	push	{r3, lr}
 800fb22:	f7fb fcd3 	bl	800b4cc <GL_SetDefault>
 800fb26:	4b02      	ldr	r3, [pc, #8]	; (800fb30 <WM_SetDefault+0x10>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	645a      	str	r2, [r3, #68]	; 0x44
 800fb2e:	bd08      	pop	{r3, pc}
 800fb30:	20000014 	.word	0x20000014

0800fb34 <WM__Paint1>:
 800fb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb36:	b089      	sub	sp, #36	; 0x24
 800fb38:	4604      	mov	r4, r0
 800fb3a:	f7fb f9a1 	bl	800ae80 <GUI_ALLOC_LockH>
 800fb3e:	6907      	ldr	r7, [r0, #16]
 800fb40:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800fb42:	9001      	str	r0, [sp, #4]
 800fb44:	3008      	adds	r0, #8
 800fb46:	c803      	ldmia	r0, {r0, r1}
 800fb48:	ae02      	add	r6, sp, #8
 800fb4a:	e886 0003 	stmia.w	r6, {r0, r1}
 800fb4e:	a801      	add	r0, sp, #4
 800fb50:	f7fb f9a4 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800fb54:	2f00      	cmp	r7, #0
 800fb56:	d032      	beq.n	800fbbe <WM__Paint1+0x8a>
 800fb58:	07ab      	lsls	r3, r5, #30
 800fb5a:	d530      	bpl.n	800fbbe <WM__Paint1+0x8a>
 800fb5c:	212e      	movs	r1, #46	; 0x2e
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f000 faed 	bl	801013e <WM_SendMessageNoPara>
 800fb64:	4b17      	ldr	r3, [pc, #92]	; (800fbc4 <WM__Paint1+0x90>)
 800fb66:	781a      	ldrb	r2, [r3, #0]
 800fb68:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800fb6c:	f102 0201 	add.w	r2, r2, #1
 800fb70:	701a      	strb	r2, [r3, #0]
 800fb72:	461d      	mov	r5, r3
 800fb74:	d00a      	beq.n	800fb8c <WM__Paint1+0x58>
 800fb76:	230f      	movs	r3, #15
 800fb78:	9405      	str	r4, [sp, #20]
 800fb7a:	9304      	str	r3, [sp, #16]
 800fb7c:	9607      	str	r6, [sp, #28]
 800fb7e:	f7ff ffcf 	bl	800fb20 <WM_SetDefault>
 800fb82:	a904      	add	r1, sp, #16
 800fb84:	4620      	mov	r0, r4
 800fb86:	f000 fbfd 	bl	8010384 <WM__SendMessage>
 800fb8a:	e011      	b.n	800fbb0 <WM__Paint1+0x7c>
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f7ff ff47 	bl	800fa20 <WM__InitIVRSearch>
 800fb92:	b168      	cbz	r0, 800fbb0 <WM__Paint1+0x7c>
 800fb94:	270f      	movs	r7, #15
 800fb96:	9405      	str	r4, [sp, #20]
 800fb98:	9704      	str	r7, [sp, #16]
 800fb9a:	9607      	str	r6, [sp, #28]
 800fb9c:	f7ff ffc0 	bl	800fb20 <WM_SetDefault>
 800fba0:	a904      	add	r1, sp, #16
 800fba2:	4620      	mov	r0, r4
 800fba4:	f000 fbee 	bl	8010384 <WM__SendMessage>
 800fba8:	f7ff fe78 	bl	800f89c <WM__GetNextIVR>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d1f2      	bne.n	800fb96 <WM__Paint1+0x62>
 800fbb0:	782b      	ldrb	r3, [r5, #0]
 800fbb2:	212f      	movs	r1, #47	; 0x2f
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	702b      	strb	r3, [r5, #0]
 800fbba:	f000 fac0 	bl	801013e <WM_SendMessageNoPara>
 800fbbe:	b009      	add	sp, #36	; 0x24
 800fbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	2001e730 	.word	0x2001e730

0800fbc8 <WM__Paint>:
 800fbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbcc:	b088      	sub	sp, #32
 800fbce:	ae06      	add	r6, sp, #24
 800fbd0:	9003      	str	r0, [sp, #12]
 800fbd2:	f7fb f955 	bl	800ae80 <GUI_ALLOC_LockH>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f100 0208 	add.w	r2, r0, #8
 800fbdc:	9005      	str	r0, [sp, #20]
 800fbde:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbe2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800fbe4:	699f      	ldr	r7, [r3, #24]
 800fbe6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800fbea:	f244 0420 	movw	r4, #16416	; 0x4020
 800fbee:	e886 0003 	stmia.w	r6, {r0, r1}
 800fbf2:	402c      	ands	r4, r5
 800fbf4:	a805      	add	r0, sp, #20
 800fbf6:	f7fb f951 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800fbfa:	2c00      	cmp	r4, #0
 800fbfc:	d035      	beq.n	800fc6a <WM__Paint+0xa2>
 800fbfe:	f1b8 0f00 	cmp.w	r8, #0
 800fc02:	d017      	beq.n	800fc34 <WM__Paint+0x6c>
 800fc04:	9903      	ldr	r1, [sp, #12]
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7ff fa0a 	bl	800f020 <WM__ClipAtParentBorders>
 800fc0c:	b190      	cbz	r0, 800fc34 <WM__Paint+0x6c>
 800fc0e:	9803      	ldr	r0, [sp, #12]
 800fc10:	f7ff fca4 	bl	800f55c <WM_SelectWindow>
 800fc14:	0769      	lsls	r1, r5, #29
 800fc16:	d50f      	bpl.n	800fc38 <WM__Paint+0x70>
 800fc18:	b127      	cbz	r7, 800fc24 <WM__Paint+0x5c>
 800fc1a:	f005 0501 	and.w	r5, r5, #1
 800fc1e:	f085 0501 	eor.w	r5, r5, #1
 800fc22:	e000      	b.n	800fc26 <WM__Paint+0x5e>
 800fc24:	2501      	movs	r5, #1
 800fc26:	9500      	str	r5, [sp, #0]
 800fc28:	2300      	movs	r3, #0
 800fc2a:	aa03      	add	r2, sp, #12
 800fc2c:	4911      	ldr	r1, [pc, #68]	; (800fc74 <WM__Paint+0xac>)
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f002 f924 	bl	8011e7c <GUI_MEMDEV_Draw>
 800fc34:	2400      	movs	r4, #0
 800fc36:	e003      	b.n	800fc40 <WM__Paint+0x78>
 800fc38:	9803      	ldr	r0, [sp, #12]
 800fc3a:	f7ff f97f 	bl	800ef3c <WM__PaintWinAndOverlays>
 800fc3e:	2401      	movs	r4, #1
 800fc40:	9803      	ldr	r0, [sp, #12]
 800fc42:	f7fb f91d 	bl	800ae80 <GUI_ALLOC_LockH>
 800fc46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fc48:	9005      	str	r0, [sp, #20]
 800fc4a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800fc4e:	f023 0320 	bic.w	r3, r3, #32
 800fc52:	0492      	lsls	r2, r2, #18
 800fc54:	bf48      	it	mi
 800fc56:	f043 0304 	orrmi.w	r3, r3, #4
 800fc5a:	6283      	str	r3, [r0, #40]	; 0x28
 800fc5c:	a805      	add	r0, sp, #20
 800fc5e:	f7fb f91d 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800fc62:	4a05      	ldr	r2, [pc, #20]	; (800fc78 <WM__Paint+0xb0>)
 800fc64:	8813      	ldrh	r3, [r2, #0]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	8013      	strh	r3, [r2, #0]
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	b008      	add	sp, #32
 800fc6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc72:	bf00      	nop
 800fc74:	0800efb5 	.word	0x0800efb5
 800fc78:	2001e71c 	.word	0x2001e71c

0800fc7c <_Exec1Draw>:
 800fc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc80:	4b1d      	ldr	r3, [pc, #116]	; (800fcf8 <_Exec1Draw+0x7c>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 800fc88:	b09f      	sub	sp, #124	; 0x7c
 800fc8a:	461d      	mov	r5, r3
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d02f      	beq.n	800fcf0 <_Exec1Draw+0x74>
 800fc90:	4b1a      	ldr	r3, [pc, #104]	; (800fcfc <_Exec1Draw+0x80>)
 800fc92:	8818      	ldrh	r0, [r3, #0]
 800fc94:	461f      	mov	r7, r3
 800fc96:	b358      	cbz	r0, 800fcf0 <_Exec1Draw+0x74>
 800fc98:	4b19      	ldr	r3, [pc, #100]	; (800fd00 <_Exec1Draw+0x84>)
 800fc9a:	689c      	ldr	r4, [r3, #8]
 800fc9c:	461e      	mov	r6, r3
 800fc9e:	b90c      	cbnz	r4, 800fca4 <_Exec1Draw+0x28>
 800fca0:	4b18      	ldr	r3, [pc, #96]	; (800fd04 <_Exec1Draw+0x88>)
 800fca2:	681c      	ldr	r4, [r3, #0]
 800fca4:	a801      	add	r0, sp, #4
 800fca6:	f7fb fbab 	bl	800b400 <GUI_SaveContext_W>
 800fcaa:	682b      	ldr	r3, [r5, #0]
 800fcac:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 800fcb0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800fcb2:	b924      	cbnz	r4, 800fcbe <_Exec1Draw+0x42>
 800fcb4:	2400      	movs	r4, #0
 800fcb6:	e00d      	b.n	800fcd4 <_Exec1Draw+0x58>
 800fcb8:	f1b9 0f00 	cmp.w	r9, #0
 800fcbc:	d10a      	bne.n	800fcd4 <_Exec1Draw+0x58>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f7ff ff82 	bl	800fbc8 <WM__Paint>
 800fcc4:	4681      	mov	r9, r0
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	f7fb f8d0 	bl	800ae6c <GUI_ALLOC_h2p>
 800fccc:	6944      	ldr	r4, [r0, #20]
 800fcce:	2c00      	cmp	r4, #0
 800fcd0:	d1f2      	bne.n	800fcb8 <_Exec1Draw+0x3c>
 800fcd2:	e7ef      	b.n	800fcb4 <_Exec1Draw+0x38>
 800fcd4:	4640      	mov	r0, r8
 800fcd6:	60b4      	str	r4, [r6, #8]
 800fcd8:	f7fb fbb1 	bl	800b43e <GUI_SetColor>
 800fcdc:	4628      	mov	r0, r5
 800fcde:	f7fb fbac 	bl	800b43a <GUI_SetBkColor>
 800fce2:	a801      	add	r0, sp, #4
 800fce4:	f7fb fb96 	bl	800b414 <GUI_RestoreContext>
 800fce8:	8838      	ldrh	r0, [r7, #0]
 800fcea:	3000      	adds	r0, #0
 800fcec:	bf18      	it	ne
 800fcee:	2001      	movne	r0, #1
 800fcf0:	b01f      	add	sp, #124	; 0x7c
 800fcf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	bf00      	nop
 800fcf8:	20000014 	.word	0x20000014
 800fcfc:	2001e71c 	.word	0x2001e71c
 800fd00:	200003fc 	.word	0x200003fc
 800fd04:	2001e720 	.word	0x2001e720

0800fd08 <WM_Exec>:
 800fd08:	4b18      	ldr	r3, [pc, #96]	; (800fd6c <WM_Exec+0x64>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	b103      	cbz	r3, 800fd12 <WM_Exec+0xa>
 800fd10:	4798      	blx	r3
 800fd12:	2500      	movs	r5, #0
 800fd14:	f7ff fd80 	bl	800f818 <_Exec1Input>
 800fd18:	b108      	cbz	r0, 800fd1e <WM_Exec+0x16>
 800fd1a:	2501      	movs	r5, #1
 800fd1c:	e7fa      	b.n	800fd14 <WM_Exec+0xc>
 800fd1e:	4b14      	ldr	r3, [pc, #80]	; (800fd70 <WM_Exec+0x68>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800fd26:	b144      	cbz	r4, 800fd3a <WM_Exec+0x32>
 800fd28:	4b12      	ldr	r3, [pc, #72]	; (800fd74 <WM_Exec+0x6c>)
 800fd2a:	881c      	ldrh	r4, [r3, #0]
 800fd2c:	b12c      	cbz	r4, 800fd3a <WM_Exec+0x32>
 800fd2e:	4b12      	ldr	r3, [pc, #72]	; (800fd78 <WM_Exec+0x70>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	b1a3      	cbz	r3, 800fd5e <WM_Exec+0x56>
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4798      	blx	r3
 800fd38:	2401      	movs	r4, #1
 800fd3a:	f7ff ff9f 	bl	800fc7c <_Exec1Draw>
 800fd3e:	4606      	mov	r6, r0
 800fd40:	b108      	cbz	r0, 800fd46 <WM_Exec+0x3e>
 800fd42:	2501      	movs	r5, #1
 800fd44:	e7f9      	b.n	800fd3a <WM_Exec+0x32>
 800fd46:	b174      	cbz	r4, 800fd66 <WM_Exec+0x5e>
 800fd48:	4b0b      	ldr	r3, [pc, #44]	; (800fd78 <WM_Exec+0x70>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	b123      	cbz	r3, 800fd58 <WM_Exec+0x50>
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	4798      	blx	r3
 800fd52:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <WM_Exec+0x74>)
 800fd54:	601e      	str	r6, [r3, #0]
 800fd56:	e006      	b.n	800fd66 <WM_Exec+0x5e>
 800fd58:	f001 fda2 	bl	80118a0 <GUI__ManageCache>
 800fd5c:	e003      	b.n	800fd66 <WM_Exec+0x5e>
 800fd5e:	2001      	movs	r0, #1
 800fd60:	f001 fd9e 	bl	80118a0 <GUI__ManageCache>
 800fd64:	e7e8      	b.n	800fd38 <WM_Exec+0x30>
 800fd66:	4628      	mov	r0, r5
 800fd68:	bd70      	pop	{r4, r5, r6, pc}
 800fd6a:	bf00      	nop
 800fd6c:	2001e710 	.word	0x2001e710
 800fd70:	20000014 	.word	0x20000014
 800fd74:	2001e71c 	.word	0x2001e71c
 800fd78:	2001e744 	.word	0x2001e744
 800fd7c:	2001e72c 	.word	0x2001e72c

0800fd80 <WM_Activate>:
 800fd80:	4b02      	ldr	r3, [pc, #8]	; (800fd8c <WM_Activate+0xc>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2201      	movs	r2, #1
 800fd86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800fd8a:	4770      	bx	lr
 800fd8c:	20000014 	.word	0x20000014

0800fd90 <WM_Deactivate>:
 800fd90:	4b03      	ldr	r3, [pc, #12]	; (800fda0 <WM_Deactivate+0x10>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800fd9a:	f7fc ba81 	b.w	800c2a0 <LCD_SetClipRectMax>
 800fd9e:	bf00      	nop
 800fda0:	20000014 	.word	0x20000014

0800fda4 <WM_DefaultProc>:
 800fda4:	b510      	push	{r4, lr}
 800fda6:	4604      	mov	r4, r0
 800fda8:	6840      	ldr	r0, [r0, #4]
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	2b17      	cmp	r3, #23
 800fdae:	d010      	beq.n	800fdd2 <WM_DefaultProc+0x2e>
 800fdb0:	dc07      	bgt.n	800fdc2 <WM_DefaultProc+0x1e>
 800fdb2:	2b0e      	cmp	r3, #14
 800fdb4:	d00f      	beq.n	800fdd6 <WM_DefaultProc+0x32>
 800fdb6:	2b14      	cmp	r3, #20
 800fdb8:	d115      	bne.n	800fde6 <WM_DefaultProc+0x42>
 800fdba:	68e1      	ldr	r1, [r4, #12]
 800fdbc:	f000 fb92 	bl	80104e4 <WM__GetClientRectEx>
 800fdc0:	e011      	b.n	800fde6 <WM_DefaultProc+0x42>
 800fdc2:	2b22      	cmp	r3, #34	; 0x22
 800fdc4:	d00c      	beq.n	800fde0 <WM_DefaultProc+0x3c>
 800fdc6:	2b28      	cmp	r3, #40	; 0x28
 800fdc8:	d10d      	bne.n	800fde6 <WM_DefaultProc+0x42>
 800fdca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdce:	f7ff bbb8 	b.w	800f542 <WM_InvalidateWindow>
 800fdd2:	60e0      	str	r0, [r4, #12]
 800fdd4:	bd10      	pop	{r4, pc}
 800fdd6:	4621      	mov	r1, r4
 800fdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fddc:	f000 b9b1 	b.w	8010142 <WM_SendToParent>
 800fde0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800fde4:	e000      	b.n	800fde8 <WM_DefaultProc+0x44>
 800fde6:	2300      	movs	r3, #0
 800fde8:	60e3      	str	r3, [r4, #12]
 800fdea:	bd10      	pop	{r4, pc}

0800fdec <_cbBackWin>:
 800fdec:	6803      	ldr	r3, [r0, #0]
 800fdee:	2b0e      	cmp	r3, #14
 800fdf0:	b510      	push	{r4, lr}
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	d002      	beq.n	800fdfc <_cbBackWin+0x10>
 800fdf6:	2b0f      	cmp	r3, #15
 800fdf8:	d009      	beq.n	800fe0e <_cbBackWin+0x22>
 800fdfa:	e020      	b.n	800fe3e <_cbBackWin+0x52>
 800fdfc:	68c3      	ldr	r3, [r0, #12]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	2a01      	cmp	r2, #1
 800fe02:	d121      	bne.n	800fe48 <_cbBackWin+0x5c>
 800fe04:	6818      	ldr	r0, [r3, #0]
 800fe06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe0a:	f7fb be5f 	b.w	800bacc <GUI_StoreKey>
 800fe0e:	4a0f      	ldr	r2, [pc, #60]	; (800fe4c <_cbBackWin+0x60>)
 800fe10:	6843      	ldr	r3, [r0, #4]
 800fe12:	6811      	ldr	r1, [r2, #0]
 800fe14:	428b      	cmp	r3, r1
 800fe16:	d006      	beq.n	800fe26 <_cbBackWin+0x3a>
 800fe18:	6852      	ldr	r2, [r2, #4]
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	bf0c      	ite	eq
 800fe1e:	2301      	moveq	r3, #1
 800fe20:	f04f 33ff 	movne.w	r3, #4294967295
 800fe24:	e000      	b.n	800fe28 <_cbBackWin+0x3c>
 800fe26:	2300      	movs	r3, #0
 800fe28:	4a09      	ldr	r2, [pc, #36]	; (800fe50 <_cbBackWin+0x64>)
 800fe2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe2e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800fe32:	4298      	cmp	r0, r3
 800fe34:	d003      	beq.n	800fe3e <_cbBackWin+0x52>
 800fe36:	f7fb fb00 	bl	800b43a <GUI_SetBkColor>
 800fe3a:	f7fb fc09 	bl	800b650 <GUI_Clear>
 800fe3e:	4620      	mov	r0, r4
 800fe40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe44:	f7ff bfae 	b.w	800fda4 <WM_DefaultProc>
 800fe48:	bd10      	pop	{r4, pc}
 800fe4a:	bf00      	nop
 800fe4c:	2001e704 	.word	0x2001e704
 800fe50:	2001e738 	.word	0x2001e738

0800fe54 <WM_Init>:
 800fe54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fe58:	4d2a      	ldr	r5, [pc, #168]	; (800ff04 <WM_Init+0xb0>)
 800fe5a:	7828      	ldrb	r0, [r5, #0]
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	d14d      	bne.n	800fefc <WM_Init+0xa8>
 800fe60:	4b29      	ldr	r3, [pc, #164]	; (800ff08 <WM_Init+0xb4>)
 800fe62:	4e2a      	ldr	r6, [pc, #168]	; (800ff0c <WM_Init+0xb8>)
 800fe64:	6018      	str	r0, [r3, #0]
 800fe66:	4b2a      	ldr	r3, [pc, #168]	; (800ff10 <WM_Init+0xbc>)
 800fe68:	4f2a      	ldr	r7, [pc, #168]	; (800ff14 <WM_Init+0xc0>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ff40 <WM_Init+0xec>
 800fe70:	6458      	str	r0, [r3, #68]	; 0x44
 800fe72:	4b29      	ldr	r3, [pc, #164]	; (800ff18 <WM_Init+0xc4>)
 800fe74:	60a8      	str	r0, [r5, #8]
 800fe76:	8018      	strh	r0, [r3, #0]
 800fe78:	4b28      	ldr	r3, [pc, #160]	; (800ff1c <WM_Init+0xc8>)
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	8018      	strh	r0, [r3, #0]
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f7fb fcd0 	bl	800b824 <GUI_DEVICE__GetpDriver>
 800fe84:	b1a8      	cbz	r0, 800feb2 <WM_Init+0x5e>
 800fe86:	f04f 32ff 	mov.w	r2, #4294967295
 800fe8a:	2302      	movs	r3, #2
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fe92:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800fe96:	461a      	mov	r2, r3
 800fe98:	9103      	str	r1, [sp, #12]
 800fe9a:	9602      	str	r6, [sp, #8]
 800fe9c:	4608      	mov	r0, r1
 800fe9e:	f7ff fb7d 	bl	800f59c <WM_CreateWindowAsChild>
 800fea2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800fea6:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800feaa:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800feae:	f7ff fb48 	bl	800f542 <WM_InvalidateWindow>
 800feb2:	3401      	adds	r4, #1
 800feb4:	2c02      	cmp	r4, #2
 800feb6:	d1e2      	bne.n	800fe7e <WM_Init+0x2a>
 800feb8:	4819      	ldr	r0, [pc, #100]	; (800ff20 <WM_Init+0xcc>)
 800feba:	f000 fb0b 	bl	80104d4 <WM__AddCriticalHandle>
 800febe:	4819      	ldr	r0, [pc, #100]	; (800ff24 <WM_Init+0xd0>)
 800fec0:	f000 fb08 	bl	80104d4 <WM__AddCriticalHandle>
 800fec4:	4818      	ldr	r0, [pc, #96]	; (800ff28 <WM_Init+0xd4>)
 800fec6:	f000 fb05 	bl	80104d4 <WM__AddCriticalHandle>
 800feca:	4818      	ldr	r0, [pc, #96]	; (800ff2c <WM_Init+0xd8>)
 800fecc:	f000 fb02 	bl	80104d4 <WM__AddCriticalHandle>
 800fed0:	4817      	ldr	r0, [pc, #92]	; (800ff30 <WM_Init+0xdc>)
 800fed2:	f000 faff 	bl	80104d4 <WM__AddCriticalHandle>
 800fed6:	4817      	ldr	r0, [pc, #92]	; (800ff34 <WM_Init+0xe0>)
 800fed8:	f000 fafc 	bl	80104d4 <WM__AddCriticalHandle>
 800fedc:	4b0d      	ldr	r3, [pc, #52]	; (800ff14 <WM_Init+0xc0>)
 800fede:	6818      	ldr	r0, [r3, #0]
 800fee0:	f7ff fb3c 	bl	800f55c <WM_SelectWindow>
 800fee4:	f7ff ff4c 	bl	800fd80 <WM_Activate>
 800fee8:	2301      	movs	r3, #1
 800feea:	702b      	strb	r3, [r5, #0]
 800feec:	4812      	ldr	r0, [pc, #72]	; (800ff38 <WM_Init+0xe4>)
 800feee:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <WM_Init+0xe8>)
 800fef0:	626b      	str	r3, [r5, #36]	; 0x24
 800fef2:	b004      	add	sp, #16
 800fef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fef8:	f7fb bc80 	b.w	800b7fc <GUI__RegisterExit>
 800fefc:	b004      	add	sp, #16
 800fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff02:	bf00      	nop
 800ff04:	200003fc 	.word	0x200003fc
 800ff08:	2001e720 	.word	0x2001e720
 800ff0c:	0800fded 	.word	0x0800fded
 800ff10:	20000014 	.word	0x20000014
 800ff14:	2001e704 	.word	0x2001e704
 800ff18:	2001e71c 	.word	0x2001e71c
 800ff1c:	2001e6fc 	.word	0x2001e6fc
 800ff20:	2001e778 	.word	0x2001e778
 800ff24:	2001e768 	.word	0x2001e768
 800ff28:	2001e758 	.word	0x2001e758
 800ff2c:	2001e780 	.word	0x2001e780
 800ff30:	2001e770 	.word	0x2001e770
 800ff34:	2001e760 	.word	0x2001e760
 800ff38:	20000420 	.word	0x20000420
 800ff3c:	0800eb95 	.word	0x0800eb95
 800ff40:	2001e738 	.word	0x2001e738

0800ff44 <WM_GetDesktopWindow>:
 800ff44:	4b03      	ldr	r3, [pc, #12]	; (800ff54 <WM_GetDesktopWindow+0x10>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	7c5a      	ldrb	r2, [r3, #17]
 800ff4a:	4b03      	ldr	r3, [pc, #12]	; (800ff58 <WM_GetDesktopWindow+0x14>)
 800ff4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	20000014 	.word	0x20000014
 800ff58:	2001e704 	.word	0x2001e704

0800ff5c <WM_GetFirstChild>:
 800ff5c:	b508      	push	{r3, lr}
 800ff5e:	4603      	mov	r3, r0
 800ff60:	b110      	cbz	r0, 800ff68 <WM_GetFirstChild+0xc>
 800ff62:	f7fa ff83 	bl	800ae6c <GUI_ALLOC_h2p>
 800ff66:	69c3      	ldr	r3, [r0, #28]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	bd08      	pop	{r3, pc}

0800ff6c <WM_GetWindowOrgX>:
 800ff6c:	b508      	push	{r3, lr}
 800ff6e:	b120      	cbz	r0, 800ff7a <WM_GetWindowOrgX+0xe>
 800ff70:	f7fa ff7c 	bl	800ae6c <GUI_ALLOC_h2p>
 800ff74:	f9b0 0000 	ldrsh.w	r0, [r0]
 800ff78:	bd08      	pop	{r3, pc}
 800ff7a:	bd08      	pop	{r3, pc}

0800ff7c <WM_GetParent>:
 800ff7c:	b508      	push	{r3, lr}
 800ff7e:	4603      	mov	r3, r0
 800ff80:	b110      	cbz	r0, 800ff88 <WM_GetParent+0xc>
 800ff82:	f7fa ff73 	bl	800ae6c <GUI_ALLOC_h2p>
 800ff86:	6983      	ldr	r3, [r0, #24]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	bd08      	pop	{r3, pc}

0800ff8c <WM_BringToBottom>:
 800ff8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff90:	4604      	mov	r4, r0
 800ff92:	b087      	sub	sp, #28
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d039      	beq.n	801000c <WM_BringToBottom+0x80>
 800ff98:	f7fa ff72 	bl	800ae80 <GUI_ALLOC_LockH>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	9001      	str	r0, [sp, #4]
 800ffa0:	c803      	ldmia	r0, {r0, r1}
 800ffa2:	ad04      	add	r5, sp, #16
 800ffa4:	e885 0003 	stmia.w	r5, {r0, r1}
 800ffa8:	a801      	add	r0, sp, #4
 800ffaa:	6a1e      	ldr	r6, [r3, #32]
 800ffac:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800ffb0:	f7fa ff74 	bl	800ae9c <GUI_ALLOC_UnlockH>
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f000 f9d2 	bl	801035e <WM__GetPrevSibling>
 800ffba:	4607      	mov	r7, r0
 800ffbc:	b330      	cbz	r0, 801000c <WM_BringToBottom+0x80>
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f7ff ffdc 	bl	800ff7c <WM_GetParent>
 800ffc4:	f019 0f02 	tst.w	r9, #2
 800ffc8:	4680      	mov	r8, r0
 800ffca:	d004      	beq.n	800ffd6 <WM_BringToBottom+0x4a>
 800ffcc:	4601      	mov	r1, r0
 800ffce:	4632      	mov	r2, r6
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	f7ff fa62 	bl	800f49a <WM__InvalidateRectEx>
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7fa ff52 	bl	800ae80 <GUI_ALLOC_LockH>
 800ffdc:	9001      	str	r0, [sp, #4]
 800ffde:	4640      	mov	r0, r8
 800ffe0:	f7fa ff4e 	bl	800ae80 <GUI_ALLOC_LockH>
 800ffe4:	9003      	str	r0, [sp, #12]
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	f7fa ff4a 	bl	800ae80 <GUI_ALLOC_LockH>
 800ffec:	9b03      	ldr	r3, [sp, #12]
 800ffee:	9a01      	ldr	r2, [sp, #4]
 800fff0:	69d9      	ldr	r1, [r3, #28]
 800fff2:	6206      	str	r6, [r0, #32]
 800fff4:	9002      	str	r0, [sp, #8]
 800fff6:	6211      	str	r1, [r2, #32]
 800fff8:	a801      	add	r0, sp, #4
 800fffa:	61dc      	str	r4, [r3, #28]
 800fffc:	f7fa ff4e 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010000:	a803      	add	r0, sp, #12
 8010002:	f7fa ff4b 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010006:	a802      	add	r0, sp, #8
 8010008:	f7fa ff48 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801000c:	b007      	add	sp, #28
 801000e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010014 <WM_OnKey>:
 8010014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010016:	4a0a      	ldr	r2, [pc, #40]	; (8010040 <WM_OnKey+0x2c>)
 8010018:	4603      	mov	r3, r0
 801001a:	6810      	ldr	r0, [r2, #0]
 801001c:	4a09      	ldr	r2, [pc, #36]	; (8010044 <WM_OnKey+0x30>)
 801001e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8010022:	b148      	cbz	r0, 8010038 <WM_OnKey+0x24>
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	9101      	str	r1, [sp, #4]
 8010028:	230e      	movs	r3, #14
 801002a:	a902      	add	r1, sp, #8
 801002c:	9302      	str	r3, [sp, #8]
 801002e:	f8cd d014 	str.w	sp, [sp, #20]
 8010032:	f000 f9a7 	bl	8010384 <WM__SendMessage>
 8010036:	2001      	movs	r0, #1
 8010038:	b007      	add	sp, #28
 801003a:	f85d fb04 	ldr.w	pc, [sp], #4
 801003e:	bf00      	nop
 8010040:	2001e724 	.word	0x2001e724
 8010044:	2001e714 	.word	0x2001e714

08010048 <WM_ResizeWindow>:
 8010048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004c:	ea51 0302 	orrs.w	r3, r1, r2
 8010050:	b08a      	sub	sp, #40	; 0x28
 8010052:	4680      	mov	r8, r0
 8010054:	460f      	mov	r7, r1
 8010056:	4616      	mov	r6, r2
 8010058:	d06e      	beq.n	8010138 <WM_ResizeWindow+0xf0>
 801005a:	2800      	cmp	r0, #0
 801005c:	d06c      	beq.n	8010138 <WM_ResizeWindow+0xf0>
 801005e:	f7fa ff0f 	bl	800ae80 <GUI_ALLOC_LockH>
 8010062:	4603      	mov	r3, r0
 8010064:	9003      	str	r0, [sp, #12]
 8010066:	c803      	ldmia	r0, {r0, r1}
 8010068:	ac04      	add	r4, sp, #16
 801006a:	ad06      	add	r5, sp, #24
 801006c:	e884 0003 	stmia.w	r4, {r0, r1}
 8010070:	e885 0003 	stmia.w	r5, {r0, r1}
 8010074:	b17f      	cbz	r7, 8010096 <WM_ResizeWindow+0x4e>
 8010076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010078:	f402 7220 	and.w	r2, r2, #640	; 0x280
 801007c:	2a80      	cmp	r2, #128	; 0x80
 801007e:	bf0b      	itete	eq
 8010080:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
 8010084:	f8bd 201c 	ldrhne.w	r2, [sp, #28]
 8010088:	1bd7      	subeq	r7, r2, r7
 801008a:	18bf      	addne	r7, r7, r2
 801008c:	bf0c      	ite	eq
 801008e:	f8ad 7018 	strheq.w	r7, [sp, #24]
 8010092:	f8ad 701c 	strhne.w	r7, [sp, #28]
 8010096:	b186      	cbz	r6, 80100ba <WM_ResizeWindow+0x72>
 8010098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801009a:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801009e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80100a2:	bf0b      	itete	eq
 80100a4:	f8bd 201a 	ldrheq.w	r2, [sp, #26]
 80100a8:	f8bd 201e 	ldrhne.w	r2, [sp, #30]
 80100ac:	1b96      	subeq	r6, r2, r6
 80100ae:	18b6      	addne	r6, r6, r2
 80100b0:	bf0c      	ite	eq
 80100b2:	f8ad 601a 	strheq.w	r6, [sp, #26]
 80100b6:	f8ad 601e 	strhne.w	r6, [sp, #30]
 80100ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100bc:	03da      	lsls	r2, r3, #15
 80100be:	d502      	bpl.n	80100c6 <WM_ResizeWindow+0x7e>
 80100c0:	4640      	mov	r0, r8
 80100c2:	f7ff f8b1 	bl	800f228 <WM__InvalidateDrawAndDescs>
 80100c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80100ca:	9b03      	ldr	r3, [sp, #12]
 80100cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80100d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d2:	079b      	lsls	r3, r3, #30
 80100d4:	d50a      	bpl.n	80100ec <WM_ResizeWindow+0xa4>
 80100d6:	462a      	mov	r2, r5
 80100d8:	4621      	mov	r1, r4
 80100da:	a808      	add	r0, sp, #32
 80100dc:	f7fb f8fc 	bl	800b2d8 <GUI_MergeRect>
 80100e0:	9b03      	ldr	r3, [sp, #12]
 80100e2:	a808      	add	r0, sp, #32
 80100e4:	6a1a      	ldr	r2, [r3, #32]
 80100e6:	6999      	ldr	r1, [r3, #24]
 80100e8:	f7ff f9d7 	bl	800f49a <WM__InvalidateRectEx>
 80100ec:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 80100f0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80100f4:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 80100f8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80100fc:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 8010100:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8010104:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8010108:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801010c:	1a61      	subs	r1, r4, r1
 801010e:	1bc0      	subs	r0, r0, r7
 8010110:	ac0a      	add	r4, sp, #40	; 0x28
 8010112:	1af3      	subs	r3, r6, r3
 8010114:	1aaa      	subs	r2, r5, r2
 8010116:	9000      	str	r0, [sp, #0]
 8010118:	9803      	ldr	r0, [sp, #12]
 801011a:	f000 f965 	bl	80103e8 <WM__UpdateChildPositions>
 801011e:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8010122:	f101 0008 	add.w	r0, r1, #8
 8010126:	f7fb fda5 	bl	800bc74 <GUI__IntersectRect>
 801012a:	4640      	mov	r0, r8
 801012c:	2105      	movs	r1, #5
 801012e:	f7ff f8b4 	bl	800f29a <WM__SendMsgNoData>
 8010132:	4620      	mov	r0, r4
 8010134:	f7fa feb2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010138:	b00a      	add	sp, #40	; 0x28
 801013a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801013e <WM_SendMessageNoPara>:
 801013e:	f000 b93f 	b.w	80103c0 <WM__SendMessageNoPara>

08010142 <WM_SendToParent>:
 8010142:	b538      	push	{r3, r4, r5, lr}
 8010144:	4605      	mov	r5, r0
 8010146:	460c      	mov	r4, r1
 8010148:	b141      	cbz	r1, 801015c <WM_SendToParent+0x1a>
 801014a:	f7ff ff17 	bl	800ff7c <WM_GetParent>
 801014e:	b128      	cbz	r0, 801015c <WM_SendToParent+0x1a>
 8010150:	60a5      	str	r5, [r4, #8]
 8010152:	4621      	mov	r1, r4
 8010154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010158:	f000 b914 	b.w	8010384 <WM__SendMessage>
 801015c:	bd38      	pop	{r3, r4, r5, pc}

0801015e <WM_NotifyParent>:
 801015e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010160:	2326      	movs	r3, #38	; 0x26
 8010162:	9103      	str	r1, [sp, #12]
 8010164:	4669      	mov	r1, sp
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	f7ff ffeb 	bl	8010142 <WM_SendToParent>
 801016c:	b005      	add	sp, #20
 801016e:	f85d fb04 	ldr.w	pc, [sp], #4

08010172 <WM_SetSize>:
 8010172:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010176:	460f      	mov	r7, r1
 8010178:	4690      	mov	r8, r2
 801017a:	4606      	mov	r6, r0
 801017c:	b1e0      	cbz	r0, 80101b8 <WM_SetSize+0x46>
 801017e:	f7fa fe7f 	bl	800ae80 <GUI_ALLOC_LockH>
 8010182:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8010186:	f9b0 4000 	ldrsh.w	r4, [r0]
 801018a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801018e:	1b2c      	subs	r4, r5, r4
 8010190:	3401      	adds	r4, #1
 8010192:	f10d 0e08 	add.w	lr, sp, #8
 8010196:	1b3d      	subs	r5, r7, r4
 8010198:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801019c:	f84e 0d04 	str.w	r0, [lr, #-4]!
 80101a0:	1ae3      	subs	r3, r4, r3
 80101a2:	3301      	adds	r3, #1
 80101a4:	ebc3 0408 	rsb	r4, r3, r8
 80101a8:	4670      	mov	r0, lr
 80101aa:	f7fa fe77 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80101ae:	4622      	mov	r2, r4
 80101b0:	4629      	mov	r1, r5
 80101b2:	4630      	mov	r0, r6
 80101b4:	f7ff ff48 	bl	8010048 <WM_ResizeWindow>
 80101b8:	b002      	add	sp, #8
 80101ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101be <_MoveDescendents>:
 80101be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c2:	4616      	mov	r6, r2
 80101c4:	b088      	sub	sp, #32
 80101c6:	2210      	movs	r2, #16
 80101c8:	4604      	mov	r4, r0
 80101ca:	460d      	mov	r5, r1
 80101cc:	eb0d 0002 	add.w	r0, sp, r2
 80101d0:	2100      	movs	r1, #0
 80101d2:	f002 ff97 	bl	8013104 <memset>
 80101d6:	2703      	movs	r7, #3
 80101d8:	f10d 0808 	add.w	r8, sp, #8
 80101dc:	b32c      	cbz	r4, 801022a <_MoveDescendents+0x6c>
 80101de:	4620      	mov	r0, r4
 80101e0:	f7fa fe4e 	bl	800ae80 <GUI_ALLOC_LockH>
 80101e4:	4632      	mov	r2, r6
 80101e6:	4629      	mov	r1, r5
 80101e8:	9001      	str	r0, [sp, #4]
 80101ea:	f7fb f8a0 	bl	800b32e <GUI_MoveRect>
 80101ee:	9801      	ldr	r0, [sp, #4]
 80101f0:	4632      	mov	r2, r6
 80101f2:	4629      	mov	r1, r5
 80101f4:	3008      	adds	r0, #8
 80101f6:	f7fb f89a 	bl	800b32e <GUI_MoveRect>
 80101fa:	9b01      	ldr	r3, [sp, #4]
 80101fc:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8010200:	f8d3 9020 	ldr.w	r9, [r3, #32]
 8010204:	a801      	add	r0, sp, #4
 8010206:	f7fa fe49 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801020a:	4632      	mov	r2, r6
 801020c:	4629      	mov	r1, r5
 801020e:	4650      	mov	r0, sl
 8010210:	f7ff ffd5 	bl	80101be <_MoveDescendents>
 8010214:	4620      	mov	r0, r4
 8010216:	a904      	add	r1, sp, #16
 8010218:	9704      	str	r7, [sp, #16]
 801021a:	f8cd 801c 	str.w	r8, [sp, #28]
 801021e:	9502      	str	r5, [sp, #8]
 8010220:	9603      	str	r6, [sp, #12]
 8010222:	464c      	mov	r4, r9
 8010224:	f000 f8ae 	bl	8010384 <WM__SendMessage>
 8010228:	e7d8      	b.n	80101dc <_MoveDescendents+0x1e>
 801022a:	b008      	add	sp, #32
 801022c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010230 <WM__MoveWindow>:
 8010230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010234:	b08b      	sub	sp, #44	; 0x2c
 8010236:	4606      	mov	r6, r0
 8010238:	460d      	mov	r5, r1
 801023a:	4614      	mov	r4, r2
 801023c:	2100      	movs	r1, #0
 801023e:	2210      	movs	r2, #16
 8010240:	a806      	add	r0, sp, #24
 8010242:	f002 ff5f 	bl	8013104 <memset>
 8010246:	2e00      	cmp	r6, #0
 8010248:	d043      	beq.n	80102d2 <WM__MoveWindow+0xa2>
 801024a:	b90d      	cbnz	r5, 8010250 <WM__MoveWindow+0x20>
 801024c:	2c00      	cmp	r4, #0
 801024e:	d040      	beq.n	80102d2 <WM__MoveWindow+0xa2>
 8010250:	4630      	mov	r0, r6
 8010252:	f7fa fe15 	bl	800ae80 <GUI_ALLOC_LockH>
 8010256:	4603      	mov	r3, r0
 8010258:	9001      	str	r0, [sp, #4]
 801025a:	c803      	ldmia	r0, {r0, r1}
 801025c:	f10d 0808 	add.w	r8, sp, #8
 8010260:	e888 0003 	stmia.w	r8, {r0, r1}
 8010264:	4622      	mov	r2, r4
 8010266:	4618      	mov	r0, r3
 8010268:	4629      	mov	r1, r5
 801026a:	f7fb f860 	bl	800b32e <GUI_MoveRect>
 801026e:	9801      	ldr	r0, [sp, #4]
 8010270:	af0a      	add	r7, sp, #40	; 0x28
 8010272:	4622      	mov	r2, r4
 8010274:	4629      	mov	r1, r5
 8010276:	3008      	adds	r0, #8
 8010278:	f7fb f859 	bl	800b32e <GUI_MoveRect>
 801027c:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8010280:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8010284:	4638      	mov	r0, r7
 8010286:	f7fa fe09 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801028a:	4622      	mov	r2, r4
 801028c:	4629      	mov	r1, r5
 801028e:	4648      	mov	r0, r9
 8010290:	f7ff ff95 	bl	80101be <_MoveDescendents>
 8010294:	4630      	mov	r0, r6
 8010296:	f7fa fdf3 	bl	800ae80 <GUI_ALLOC_LockH>
 801029a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801029c:	9001      	str	r0, [sp, #4]
 801029e:	0792      	lsls	r2, r2, #30
 80102a0:	d50a      	bpl.n	80102b8 <WM__MoveWindow+0x88>
 80102a2:	6981      	ldr	r1, [r0, #24]
 80102a4:	b141      	cbz	r1, 80102b8 <WM__MoveWindow+0x88>
 80102a6:	6a02      	ldr	r2, [r0, #32]
 80102a8:	f7ff f8e2 	bl	800f470 <WM__InvalidateParent>
 80102ac:	9b01      	ldr	r3, [sp, #4]
 80102ae:	4640      	mov	r0, r8
 80102b0:	6a1a      	ldr	r2, [r3, #32]
 80102b2:	6999      	ldr	r1, [r3, #24]
 80102b4:	f7ff f8dc 	bl	800f470 <WM__InvalidateParent>
 80102b8:	4638      	mov	r0, r7
 80102ba:	f7fa fdef 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80102be:	2303      	movs	r3, #3
 80102c0:	9306      	str	r3, [sp, #24]
 80102c2:	a906      	add	r1, sp, #24
 80102c4:	ab04      	add	r3, sp, #16
 80102c6:	4630      	mov	r0, r6
 80102c8:	9309      	str	r3, [sp, #36]	; 0x24
 80102ca:	9504      	str	r5, [sp, #16]
 80102cc:	9405      	str	r4, [sp, #20]
 80102ce:	f000 f859 	bl	8010384 <WM__SendMessage>
 80102d2:	b00b      	add	sp, #44	; 0x2c
 80102d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080102d8 <WM_MoveWindow>:
 80102d8:	f7ff bfaa 	b.w	8010230 <WM__MoveWindow>

080102dc <WM_DeleteTimer>:
 80102dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102de:	4605      	mov	r5, r0
 80102e0:	b168      	cbz	r0, 80102fe <WM_DeleteTimer+0x22>
 80102e2:	f7fa fdcd 	bl	800ae80 <GUI_ALLOC_LockH>
 80102e6:	ac02      	add	r4, sp, #8
 80102e8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80102ec:	6800      	ldr	r0, [r0, #0]
 80102ee:	f000 fe0b 	bl	8010f08 <GUI_TIMER_Delete>
 80102f2:	4620      	mov	r0, r4
 80102f4:	f7fa fdd2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80102f8:	4628      	mov	r0, r5
 80102fa:	f7fa fdef 	bl	800aedc <GUI_ALLOC_Free>
 80102fe:	b003      	add	sp, #12
 8010300:	bd30      	pop	{r4, r5, pc}

08010302 <WM__DeleteAssocTimer>:
 8010302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010304:	4605      	mov	r5, r0
 8010306:	a801      	add	r0, sp, #4
 8010308:	f000 fdca 	bl	8010ea0 <GUI_TIMER__GetFirstTimer>
 801030c:	4604      	mov	r4, r0
 801030e:	b1dc      	cbz	r4, 8010348 <WM__DeleteAssocTimer+0x46>
 8010310:	2101      	movs	r1, #1
 8010312:	4620      	mov	r0, r4
 8010314:	f000 fe2a 	bl	8010f6c <GUI_TIMER_GetFlag>
 8010318:	9b01      	ldr	r3, [sp, #4]
 801031a:	b183      	cbz	r3, 801033e <WM__DeleteAssocTimer+0x3c>
 801031c:	b178      	cbz	r0, 801033e <WM__DeleteAssocTimer+0x3c>
 801031e:	4618      	mov	r0, r3
 8010320:	f7fa fda4 	bl	800ae6c <GUI_ALLOC_h2p>
 8010324:	6843      	ldr	r3, [r0, #4]
 8010326:	42ab      	cmp	r3, r5
 8010328:	d109      	bne.n	801033e <WM__DeleteAssocTimer+0x3c>
 801032a:	a901      	add	r1, sp, #4
 801032c:	4620      	mov	r0, r4
 801032e:	9e01      	ldr	r6, [sp, #4]
 8010330:	f000 fdce 	bl	8010ed0 <GUI_TIMER__GetNextTimerLin>
 8010334:	4604      	mov	r4, r0
 8010336:	4630      	mov	r0, r6
 8010338:	f7ff ffd0 	bl	80102dc <WM_DeleteTimer>
 801033c:	e7e7      	b.n	801030e <WM__DeleteAssocTimer+0xc>
 801033e:	a901      	add	r1, sp, #4
 8010340:	4620      	mov	r0, r4
 8010342:	f000 fdc5 	bl	8010ed0 <GUI_TIMER__GetNextTimerLin>
 8010346:	e7e1      	b.n	801030c <WM__DeleteAssocTimer+0xa>
 8010348:	b002      	add	sp, #8
 801034a:	bd70      	pop	{r4, r5, r6, pc}

0801034c <WM__GetFirstSibling>:
 801034c:	b508      	push	{r3, lr}
 801034e:	f7ff fe15 	bl	800ff7c <WM_GetParent>
 8010352:	b118      	cbz	r0, 801035c <WM__GetFirstSibling+0x10>
 8010354:	f7fa fd8a 	bl	800ae6c <GUI_ALLOC_h2p>
 8010358:	69c0      	ldr	r0, [r0, #28]
 801035a:	bd08      	pop	{r3, pc}
 801035c:	bd08      	pop	{r3, pc}

0801035e <WM__GetPrevSibling>:
 801035e:	b538      	push	{r3, r4, r5, lr}
 8010360:	4605      	mov	r5, r0
 8010362:	f7ff fff3 	bl	801034c <WM__GetFirstSibling>
 8010366:	4604      	mov	r4, r0
 8010368:	b154      	cbz	r4, 8010380 <WM__GetPrevSibling+0x22>
 801036a:	42ac      	cmp	r4, r5
 801036c:	d007      	beq.n	801037e <WM__GetPrevSibling+0x20>
 801036e:	4620      	mov	r0, r4
 8010370:	f7fa fd7c 	bl	800ae6c <GUI_ALLOC_h2p>
 8010374:	6a03      	ldr	r3, [r0, #32]
 8010376:	429d      	cmp	r5, r3
 8010378:	d002      	beq.n	8010380 <WM__GetPrevSibling+0x22>
 801037a:	461c      	mov	r4, r3
 801037c:	e7f4      	b.n	8010368 <WM__GetPrevSibling+0xa>
 801037e:	2400      	movs	r4, #0
 8010380:	4620      	mov	r0, r4
 8010382:	bd38      	pop	{r3, r4, r5, pc}

08010384 <WM__SendMessage>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	4c0d      	ldr	r4, [pc, #52]	; (80103bc <WM__SendMessage+0x38>)
 8010388:	6823      	ldr	r3, [r4, #0]
 801038a:	2b13      	cmp	r3, #19
 801038c:	4606      	mov	r6, r0
 801038e:	460d      	mov	r5, r1
 8010390:	dc12      	bgt.n	80103b8 <WM__SendMessage+0x34>
 8010392:	f7fa fd6b 	bl	800ae6c <GUI_ALLOC_h2p>
 8010396:	6902      	ldr	r2, [r0, #16]
 8010398:	606e      	str	r6, [r5, #4]
 801039a:	b142      	cbz	r2, 80103ae <WM__SendMessage+0x2a>
 801039c:	6823      	ldr	r3, [r4, #0]
 801039e:	4628      	mov	r0, r5
 80103a0:	3301      	adds	r3, #1
 80103a2:	6023      	str	r3, [r4, #0]
 80103a4:	4790      	blx	r2
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	3b01      	subs	r3, #1
 80103aa:	6023      	str	r3, [r4, #0]
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	4628      	mov	r0, r5
 80103b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103b4:	f7ff bcf6 	b.w	800fda4 <WM_DefaultProc>
 80103b8:	bd70      	pop	{r4, r5, r6, pc}
 80103ba:	bf00      	nop
 80103bc:	2000042c 	.word	0x2000042c

080103c0 <WM__SendMessageNoPara>:
 80103c0:	b530      	push	{r4, r5, lr}
 80103c2:	b085      	sub	sp, #20
 80103c4:	4604      	mov	r4, r0
 80103c6:	2210      	movs	r2, #16
 80103c8:	460d      	mov	r5, r1
 80103ca:	4668      	mov	r0, sp
 80103cc:	2100      	movs	r1, #0
 80103ce:	f002 fe99 	bl	8013104 <memset>
 80103d2:	4620      	mov	r0, r4
 80103d4:	f7fa fd4a 	bl	800ae6c <GUI_ALLOC_h2p>
 80103d8:	6903      	ldr	r3, [r0, #16]
 80103da:	b11b      	cbz	r3, 80103e4 <WM__SendMessageNoPara+0x24>
 80103dc:	9401      	str	r4, [sp, #4]
 80103de:	9500      	str	r5, [sp, #0]
 80103e0:	4668      	mov	r0, sp
 80103e2:	4798      	blx	r3
 80103e4:	b005      	add	sp, #20
 80103e6:	bd30      	pop	{r4, r5, pc}

080103e8 <WM__UpdateChildPositions>:
 80103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	b08b      	sub	sp, #44	; 0x2c
 80103ee:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80103f2:	9303      	str	r3, [sp, #12]
 80103f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80103f8:	9101      	str	r1, [sp, #4]
 80103fa:	9304      	str	r3, [sp, #16]
 80103fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010400:	9305      	str	r3, [sp, #20]
 8010402:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010406:	9202      	str	r2, [sp, #8]
 8010408:	9306      	str	r3, [sp, #24]
 801040a:	f1bb 0f00 	cmp.w	fp, #0
 801040e:	d05e      	beq.n	80104ce <WM__UpdateChildPositions+0xe6>
 8010410:	4658      	mov	r0, fp
 8010412:	f7fa fd35 	bl	800ae80 <GUI_ALLOC_LockH>
 8010416:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010418:	9009      	str	r0, [sp, #36]	; 0x24
 801041a:	f402 7120 	and.w	r1, r2, #640	; 0x280
 801041e:	2980      	cmp	r1, #128	; 0x80
 8010420:	f9b0 a000 	ldrsh.w	sl, [r0]
 8010424:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010428:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801042c:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8010430:	d008      	beq.n	8010444 <WM__UpdateChildPositions+0x5c>
 8010432:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 8010436:	d107      	bne.n	8010448 <WM__UpdateChildPositions+0x60>
 8010438:	9901      	ldr	r1, [sp, #4]
 801043a:	eb0a 0601 	add.w	r6, sl, r1
 801043e:	b236      	sxth	r6, r6
 8010440:	9903      	ldr	r1, [sp, #12]
 8010442:	e005      	b.n	8010450 <WM__UpdateChildPositions+0x68>
 8010444:	9904      	ldr	r1, [sp, #16]
 8010446:	e000      	b.n	801044a <WM__UpdateChildPositions+0x62>
 8010448:	9905      	ldr	r1, [sp, #20]
 801044a:	eb01 060a 	add.w	r6, r1, sl
 801044e:	b236      	sxth	r6, r6
 8010450:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8010454:	eb01 0508 	add.w	r5, r1, r8
 8010458:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801045c:	b22d      	sxth	r5, r5
 801045e:	d007      	beq.n	8010470 <WM__UpdateChildPositions+0x88>
 8010460:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8010464:	d10a      	bne.n	801047c <WM__UpdateChildPositions+0x94>
 8010466:	9a02      	ldr	r2, [sp, #8]
 8010468:	189f      	adds	r7, r3, r2
 801046a:	b23f      	sxth	r7, r7
 801046c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801046e:	e002      	b.n	8010476 <WM__UpdateChildPositions+0x8e>
 8010470:	9a06      	ldr	r2, [sp, #24]
 8010472:	18d7      	adds	r7, r2, r3
 8010474:	b23f      	sxth	r7, r7
 8010476:	eb09 0402 	add.w	r4, r9, r2
 801047a:	e005      	b.n	8010488 <WM__UpdateChildPositions+0xa0>
 801047c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8010480:	18cf      	adds	r7, r1, r3
 8010482:	b23f      	sxth	r7, r7
 8010484:	eb01 0409 	add.w	r4, r1, r9
 8010488:	ebb6 010a 	subs.w	r1, r6, sl
 801048c:	b224      	sxth	r4, r4
 801048e:	eba7 0203 	sub.w	r2, r7, r3
 8010492:	d100      	bne.n	8010496 <WM__UpdateChildPositions+0xae>
 8010494:	b122      	cbz	r2, 80104a0 <WM__UpdateChildPositions+0xb8>
 8010496:	4658      	mov	r0, fp
 8010498:	9307      	str	r3, [sp, #28]
 801049a:	f7ff ff1d 	bl	80102d8 <WM_MoveWindow>
 801049e:	9b07      	ldr	r3, [sp, #28]
 80104a0:	1bad      	subs	r5, r5, r6
 80104a2:	ebca 0808 	rsb	r8, sl, r8
 80104a6:	1be4      	subs	r4, r4, r7
 80104a8:	ebc3 0909 	rsb	r9, r3, r9
 80104ac:	ebb5 0108 	subs.w	r1, r5, r8
 80104b0:	ebc9 0204 	rsb	r2, r9, r4
 80104b4:	d100      	bne.n	80104b8 <WM__UpdateChildPositions+0xd0>
 80104b6:	b112      	cbz	r2, 80104be <WM__UpdateChildPositions+0xd6>
 80104b8:	4658      	mov	r0, fp
 80104ba:	f7ff fdc5 	bl	8010048 <WM_ResizeWindow>
 80104be:	a80a      	add	r0, sp, #40	; 0x28
 80104c0:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 80104c4:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80104c8:	f7fa fce8 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80104cc:	e79d      	b.n	801040a <WM__UpdateChildPositions+0x22>
 80104ce:	b00b      	add	sp, #44	; 0x2c
 80104d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104d4 <WM__AddCriticalHandle>:
 80104d4:	4b02      	ldr	r3, [pc, #8]	; (80104e0 <WM__AddCriticalHandle+0xc>)
 80104d6:	681a      	ldr	r2, [r3, #0]
 80104d8:	6002      	str	r2, [r0, #0]
 80104da:	6018      	str	r0, [r3, #0]
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop
 80104e0:	2001e740 	.word	0x2001e740

080104e4 <WM__GetClientRectEx>:
 80104e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104e6:	460d      	mov	r5, r1
 80104e8:	b158      	cbz	r0, 8010502 <WM__GetClientRectEx+0x1e>
 80104ea:	b151      	cbz	r1, 8010502 <WM__GetClientRectEx+0x1e>
 80104ec:	f7fa fcc8 	bl	800ae80 <GUI_ALLOC_LockH>
 80104f0:	ac02      	add	r4, sp, #8
 80104f2:	4629      	mov	r1, r5
 80104f4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80104f8:	f7fe feda 	bl	800f2b0 <WM__GetClientRectWin>
 80104fc:	4620      	mov	r0, r4
 80104fe:	f7fa fccd 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010502:	b003      	add	sp, #12
 8010504:	bd30      	pop	{r4, r5, pc}

08010506 <_GetIndexMask_0>:
 8010506:	b508      	push	{r3, lr}
 8010508:	f7fc f888 	bl	800c61c <LCD_GetNumColors>
 801050c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010510:	d010      	beq.n	8010534 <_GetIndexMask_0+0x2e>
 8010512:	287f      	cmp	r0, #127	; 0x7f
 8010514:	d810      	bhi.n	8010538 <_GetIndexMask_0+0x32>
 8010516:	283f      	cmp	r0, #63	; 0x3f
 8010518:	d810      	bhi.n	801053c <_GetIndexMask_0+0x36>
 801051a:	281f      	cmp	r0, #31
 801051c:	d810      	bhi.n	8010540 <_GetIndexMask_0+0x3a>
 801051e:	280f      	cmp	r0, #15
 8010520:	d810      	bhi.n	8010544 <_GetIndexMask_0+0x3e>
 8010522:	2807      	cmp	r0, #7
 8010524:	d810      	bhi.n	8010548 <_GetIndexMask_0+0x42>
 8010526:	2803      	cmp	r0, #3
 8010528:	d810      	bhi.n	801054c <_GetIndexMask_0+0x46>
 801052a:	2801      	cmp	r0, #1
 801052c:	bf94      	ite	ls
 801052e:	2000      	movls	r0, #0
 8010530:	2001      	movhi	r0, #1
 8010532:	e00c      	b.n	801054e <_GetIndexMask_0+0x48>
 8010534:	2008      	movs	r0, #8
 8010536:	e00a      	b.n	801054e <_GetIndexMask_0+0x48>
 8010538:	2007      	movs	r0, #7
 801053a:	e008      	b.n	801054e <_GetIndexMask_0+0x48>
 801053c:	2006      	movs	r0, #6
 801053e:	e006      	b.n	801054e <_GetIndexMask_0+0x48>
 8010540:	2005      	movs	r0, #5
 8010542:	e004      	b.n	801054e <_GetIndexMask_0+0x48>
 8010544:	2004      	movs	r0, #4
 8010546:	e002      	b.n	801054e <_GetIndexMask_0+0x48>
 8010548:	2003      	movs	r0, #3
 801054a:	e000      	b.n	801054e <_GetIndexMask_0+0x48>
 801054c:	2002      	movs	r0, #2
 801054e:	2301      	movs	r3, #1
 8010550:	fa03 f000 	lsl.w	r0, r3, r0
 8010554:	3801      	subs	r0, #1
 8010556:	bd08      	pop	{r3, pc}

08010558 <_Index2Color_0>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4604      	mov	r4, r0
 801055c:	f7fc f85e 	bl	800c61c <LCD_GetNumColors>
 8010560:	4605      	mov	r5, r0
 8010562:	f7fc f881 	bl	800c668 <LCD_GetPalette>
 8010566:	42a5      	cmp	r5, r4
 8010568:	d903      	bls.n	8010572 <_Index2Color_0+0x1a>
 801056a:	b118      	cbz	r0, 8010574 <_Index2Color_0+0x1c>
 801056c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010570:	bd38      	pop	{r3, r4, r5, pc}
 8010572:	2000      	movs	r0, #0
 8010574:	bd38      	pop	{r3, r4, r5, pc}

08010576 <_Color2Index_0>:
 8010576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801057a:	4681      	mov	r9, r0
 801057c:	f7fc f84e 	bl	800c61c <LCD_GetNumColors>
 8010580:	4607      	mov	r7, r0
 8010582:	f7fc f871 	bl	800c668 <LCD_GetPalette>
 8010586:	4606      	mov	r6, r0
 8010588:	b1e0      	cbz	r0, 80105c4 <_Color2Index_0+0x4e>
 801058a:	2000      	movs	r0, #0
 801058c:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8010590:	454b      	cmp	r3, r9
 8010592:	d017      	beq.n	80105c4 <_Color2Index_0+0x4e>
 8010594:	3001      	adds	r0, #1
 8010596:	4287      	cmp	r7, r0
 8010598:	dcf8      	bgt.n	801058c <_Color2Index_0+0x16>
 801059a:	2400      	movs	r4, #0
 801059c:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 80105a0:	4625      	mov	r5, r4
 80105a2:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 80105a6:	4648      	mov	r0, r9
 80105a8:	f7fa fe48 	bl	800b23c <GUI_CalcColorDist>
 80105ac:	4580      	cmp	r8, r0
 80105ae:	bf88      	it	hi
 80105b0:	462c      	movhi	r4, r5
 80105b2:	f105 0501 	add.w	r5, r5, #1
 80105b6:	bf88      	it	hi
 80105b8:	4680      	movhi	r8, r0
 80105ba:	42af      	cmp	r7, r5
 80105bc:	dcf1      	bgt.n	80105a2 <_Color2Index_0+0x2c>
 80105be:	4620      	mov	r0, r4
 80105c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080105c8 <GUI_GetYAdjust>:
 80105c8:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <GUI_GetYAdjust+0x2c>)
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 80105ce:	f003 030c 	and.w	r3, r3, #12
 80105d2:	2b08      	cmp	r3, #8
 80105d4:	d007      	beq.n	80105e6 <GUI_GetYAdjust+0x1e>
 80105d6:	2b0c      	cmp	r3, #12
 80105d8:	d005      	beq.n	80105e6 <GUI_GetYAdjust+0x1e>
 80105da:	2b04      	cmp	r3, #4
 80105dc:	d107      	bne.n	80105ee <GUI_GetYAdjust+0x26>
 80105de:	69d3      	ldr	r3, [r2, #28]
 80105e0:	7e18      	ldrb	r0, [r3, #24]
 80105e2:	3801      	subs	r0, #1
 80105e4:	4770      	bx	lr
 80105e6:	69d3      	ldr	r3, [r2, #28]
 80105e8:	7e18      	ldrb	r0, [r3, #24]
 80105ea:	0840      	lsrs	r0, r0, #1
 80105ec:	4770      	bx	lr
 80105ee:	2000      	movs	r0, #0
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	20000014 	.word	0x20000014

080105f8 <GUI_GetFontDistY>:
 80105f8:	4b02      	ldr	r3, [pc, #8]	; (8010604 <GUI_GetFontDistY+0xc>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	69db      	ldr	r3, [r3, #28]
 80105fe:	7e58      	ldrb	r0, [r3, #25]
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	20000014 	.word	0x20000014

08010608 <GUI_GetCharDistX>:
 8010608:	4b02      	ldr	r3, [pc, #8]	; (8010614 <GUI_GetCharDistX+0xc>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	69db      	ldr	r3, [r3, #28]
 801060e:	2100      	movs	r1, #0
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	4718      	bx	r3
 8010614:	20000014 	.word	0x20000014

08010618 <GUI_GetCharDistXEx>:
 8010618:	4b02      	ldr	r3, [pc, #8]	; (8010624 <GUI_GetCharDistXEx+0xc>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	69db      	ldr	r3, [r3, #28]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	4718      	bx	r3
 8010622:	bf00      	nop
 8010624:	20000014 	.word	0x20000014

08010628 <_Log2VisBuffered>:
 8010628:	4770      	bx	lr
	...

0801062c <_DispLine>:
 801062c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801062e:	ab02      	add	r3, sp, #8
 8010630:	4615      	mov	r5, r2
 8010632:	f843 1d08 	str.w	r1, [r3, #-8]!
 8010636:	4a20      	ldr	r2, [pc, #128]	; (80106b8 <_DispLine+0x8c>)
 8010638:	9001      	str	r0, [sp, #4]
 801063a:	4619      	mov	r1, r3
 801063c:	6812      	ldr	r2, [r2, #0]
 801063e:	4c1f      	ldr	r4, [pc, #124]	; (80106bc <_DispLine+0x90>)
 8010640:	4790      	blx	r2
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	9001      	str	r0, [sp, #4]
 8010646:	6958      	ldr	r0, [r3, #20]
 8010648:	b940      	cbnz	r0, 801065c <_DispLine+0x30>
 801064a:	2001      	movs	r0, #1
 801064c:	f001 f928 	bl	80118a0 <GUI__ManageCache>
 8010650:	6822      	ldr	r2, [r4, #0]
 8010652:	69d3      	ldr	r3, [r2, #28]
 8010654:	695b      	ldr	r3, [r3, #20]
 8010656:	b93b      	cbnz	r3, 8010668 <_DispLine+0x3c>
 8010658:	4d19      	ldr	r5, [pc, #100]	; (80106c0 <_DispLine+0x94>)
 801065a:	e022      	b.n	80106a2 <_DispLine+0x76>
 801065c:	4629      	mov	r1, r5
 801065e:	f7fa feb1 	bl	800b3c4 <GUI_RectsIntersect>
 8010662:	2800      	cmp	r0, #0
 8010664:	d1f1      	bne.n	801064a <_DispLine+0x1e>
 8010666:	e024      	b.n	80106b2 <_DispLine+0x86>
 8010668:	4c16      	ldr	r4, [pc, #88]	; (80106c4 <_DispLine+0x98>)
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	6821      	ldr	r1, [r4, #0]
 801066e:	b141      	cbz	r1, 8010682 <_DispLine+0x56>
 8010670:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8010674:	9801      	ldr	r0, [sp, #4]
 8010676:	9900      	ldr	r1, [sp, #0]
 8010678:	4798      	blx	r3
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	4628      	mov	r0, r5
 801067e:	4798      	blx	r3
 8010680:	e014      	b.n	80106ac <_DispLine+0x80>
 8010682:	9900      	ldr	r1, [sp, #0]
 8010684:	9801      	ldr	r0, [sp, #4]
 8010686:	4798      	blx	r3
 8010688:	e010      	b.n	80106ac <_DispLine+0x80>
 801068a:	a801      	add	r0, sp, #4
 801068c:	f7fb faba 	bl	800bc04 <GUI_UC__GetCharCodeInc>
 8010690:	6823      	ldr	r3, [r4, #0]
 8010692:	69db      	ldr	r3, [r3, #28]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4606      	mov	r6, r0
 8010698:	4798      	blx	r3
 801069a:	682b      	ldr	r3, [r5, #0]
 801069c:	b10b      	cbz	r3, 80106a2 <_DispLine+0x76>
 801069e:	4630      	mov	r0, r6
 80106a0:	4798      	blx	r3
 80106a2:	9b00      	ldr	r3, [sp, #0]
 80106a4:	3b01      	subs	r3, #1
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	daee      	bge.n	801068a <_DispLine+0x5e>
 80106ac:	2000      	movs	r0, #0
 80106ae:	f001 f8f7 	bl	80118a0 <GUI__ManageCache>
 80106b2:	b002      	add	sp, #8
 80106b4:	bd70      	pop	{r4, r5, r6, pc}
 80106b6:	bf00      	nop
 80106b8:	2000003c 	.word	0x2000003c
 80106bc:	20000014 	.word	0x20000014
 80106c0:	2001e6c4 	.word	0x2001e6c4
 80106c4:	2001e6b8 	.word	0x2001e6b8

080106c8 <GUI__GetLineNumChars>:
 80106c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106ca:	460d      	mov	r5, r1
 80106cc:	9001      	str	r0, [sp, #4]
 80106ce:	4604      	mov	r4, r0
 80106d0:	b188      	cbz	r0, 80106f6 <GUI__GetLineNumChars+0x2e>
 80106d2:	4b0a      	ldr	r3, [pc, #40]	; (80106fc <GUI__GetLineNumChars+0x34>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	69db      	ldr	r3, [r3, #28]
 80106d8:	695c      	ldr	r4, [r3, #20]
 80106da:	b154      	cbz	r4, 80106f2 <GUI__GetLineNumChars+0x2a>
 80106dc:	6864      	ldr	r4, [r4, #4]
 80106de:	b144      	cbz	r4, 80106f2 <GUI__GetLineNumChars+0x2a>
 80106e0:	47a0      	blx	r4
 80106e2:	e009      	b.n	80106f8 <GUI__GetLineNumChars+0x30>
 80106e4:	a801      	add	r0, sp, #4
 80106e6:	f7fb fa8d 	bl	800bc04 <GUI_UC__GetCharCodeInc>
 80106ea:	b120      	cbz	r0, 80106f6 <GUI__GetLineNumChars+0x2e>
 80106ec:	280a      	cmp	r0, #10
 80106ee:	d002      	beq.n	80106f6 <GUI__GetLineNumChars+0x2e>
 80106f0:	3401      	adds	r4, #1
 80106f2:	42ac      	cmp	r4, r5
 80106f4:	dbf6      	blt.n	80106e4 <GUI__GetLineNumChars+0x1c>
 80106f6:	4620      	mov	r0, r4
 80106f8:	b003      	add	sp, #12
 80106fa:	bd30      	pop	{r4, r5, pc}
 80106fc:	20000014 	.word	0x20000014

08010700 <GUI__GetOverlap>:
 8010700:	b513      	push	{r0, r1, r4, lr}
 8010702:	a902      	add	r1, sp, #8
 8010704:	2400      	movs	r4, #0
 8010706:	f841 4d04 	str.w	r4, [r1, #-4]!
 801070a:	f7ff ff85 	bl	8010618 <GUI_GetCharDistXEx>
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	4298      	cmp	r0, r3
 8010712:	bfb4      	ite	lt
 8010714:	1a18      	sublt	r0, r3, r0
 8010716:	4620      	movge	r0, r4
 8010718:	b002      	add	sp, #8
 801071a:	bd10      	pop	{r4, pc}

0801071c <GUI__GetLineDistX>:
 801071c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801071e:	ab02      	add	r3, sp, #8
 8010720:	4a14      	ldr	r2, [pc, #80]	; (8010774 <GUI__GetLineDistX+0x58>)
 8010722:	f843 1d08 	str.w	r1, [r3, #-8]!
 8010726:	9001      	str	r0, [sp, #4]
 8010728:	6812      	ldr	r2, [r2, #0]
 801072a:	4619      	mov	r1, r3
 801072c:	4790      	blx	r2
 801072e:	9001      	str	r0, [sp, #4]
 8010730:	b1e8      	cbz	r0, 801076e <GUI__GetLineDistX+0x52>
 8010732:	4b11      	ldr	r3, [pc, #68]	; (8010778 <GUI__GetLineDistX+0x5c>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	69db      	ldr	r3, [r3, #28]
 8010738:	695c      	ldr	r4, [r3, #20]
 801073a:	b10c      	cbz	r4, 8010740 <GUI__GetLineDistX+0x24>
 801073c:	6824      	ldr	r4, [r4, #0]
 801073e:	b90c      	cbnz	r4, 8010744 <GUI__GetLineDistX+0x28>
 8010740:	4625      	mov	r5, r4
 8010742:	e002      	b.n	801074a <GUI__GetLineDistX+0x2e>
 8010744:	9900      	ldr	r1, [sp, #0]
 8010746:	47a0      	blx	r4
 8010748:	e011      	b.n	801076e <GUI__GetLineDistX+0x52>
 801074a:	9b00      	ldr	r3, [sp, #0]
 801074c:	3b01      	subs	r3, #1
 801074e:	2b00      	cmp	r3, #0
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	db07      	blt.n	8010764 <GUI__GetLineDistX+0x48>
 8010754:	a801      	add	r0, sp, #4
 8010756:	f7fb fa55 	bl	800bc04 <GUI_UC__GetCharCodeInc>
 801075a:	4604      	mov	r4, r0
 801075c:	f7ff ff54 	bl	8010608 <GUI_GetCharDistX>
 8010760:	4405      	add	r5, r0
 8010762:	e7f2      	b.n	801074a <GUI__GetLineDistX+0x2e>
 8010764:	4620      	mov	r0, r4
 8010766:	f7ff ffcb 	bl	8010700 <GUI__GetOverlap>
 801076a:	4428      	add	r0, r5
 801076c:	e7ff      	b.n	801076e <GUI__GetLineDistX+0x52>
 801076e:	b003      	add	sp, #12
 8010770:	bd30      	pop	{r4, r5, pc}
 8010772:	bf00      	nop
 8010774:	2000003c 	.word	0x2000003c
 8010778:	20000014 	.word	0x20000014

0801077c <GUI__DispLine>:
 801077c:	4b27      	ldr	r3, [pc, #156]	; (801081c <GUI__DispLine+0xa0>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010782:	4605      	mov	r5, r0
 8010784:	460e      	mov	r6, r1
 8010786:	b163      	cbz	r3, 80107a2 <GUI__DispLine+0x26>
 8010788:	2000      	movs	r0, #0
 801078a:	f7ff f949 	bl	800fa20 <WM__InitIVRSearch>
 801078e:	2800      	cmp	r0, #0
 8010790:	d041      	beq.n	8010816 <GUI__DispLine+0x9a>
 8010792:	466a      	mov	r2, sp
 8010794:	4631      	mov	r1, r6
 8010796:	4628      	mov	r0, r5
 8010798:	f7ff ff48 	bl	801062c <_DispLine>
 801079c:	f7ff f87e 	bl	800f89c <WM__GetNextIVR>
 80107a0:	e7f5      	b.n	801078e <GUI__DispLine+0x12>
 80107a2:	6810      	ldr	r0, [r2, #0]
 80107a4:	6851      	ldr	r1, [r2, #4]
 80107a6:	4c1e      	ldr	r4, [pc, #120]	; (8010820 <GUI__DispLine+0xa4>)
 80107a8:	466b      	mov	r3, sp
 80107aa:	c303      	stmia	r3!, {r0, r1}
 80107ac:	6822      	ldr	r2, [r4, #0]
 80107ae:	f8bd 3000 	ldrh.w	r3, [sp]
 80107b2:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 80107b6:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 80107ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80107be:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80107c2:	443b      	add	r3, r7
 80107c4:	f8ad 3000 	strh.w	r3, [sp]
 80107c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80107cc:	4401      	add	r1, r0
 80107ce:	4403      	add	r3, r0
 80107d0:	443a      	add	r2, r7
 80107d2:	4668      	mov	r0, sp
 80107d4:	f8ad 1002 	strh.w	r1, [sp, #2]
 80107d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80107dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107e0:	f7ff f91e 	bl	800fa20 <WM__InitIVRSearch>
 80107e4:	6823      	ldr	r3, [r4, #0]
 80107e6:	b940      	cbnz	r0, 80107fa <GUI__DispLine+0x7e>
 80107e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80107ea:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80107ec:	1a52      	subs	r2, r2, r1
 80107ee:	845a      	strh	r2, [r3, #34]	; 0x22
 80107f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80107f2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80107f4:	1a52      	subs	r2, r2, r1
 80107f6:	849a      	strh	r2, [r3, #36]	; 0x24
 80107f8:	e00d      	b.n	8010816 <GUI__DispLine+0x9a>
 80107fa:	f8bd 2000 	ldrh.w	r2, [sp]
 80107fe:	845a      	strh	r2, [r3, #34]	; 0x22
 8010800:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010804:	849a      	strh	r2, [r3, #36]	; 0x24
 8010806:	4631      	mov	r1, r6
 8010808:	466a      	mov	r2, sp
 801080a:	4628      	mov	r0, r5
 801080c:	f7ff ff0e 	bl	801062c <_DispLine>
 8010810:	f7ff f844 	bl	800f89c <WM__GetNextIVR>
 8010814:	e7e6      	b.n	80107e4 <GUI__DispLine+0x68>
 8010816:	b003      	add	sp, #12
 8010818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801081a:	bf00      	nop
 801081c:	2001e6a4 	.word	0x2001e6a4
 8010820:	20000014 	.word	0x20000014

08010824 <GUIMONO_DispChar>:
 8010824:	4b4d      	ldr	r3, [pc, #308]	; (801095c <GUIMONO_DispChar+0x138>)
 8010826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	69d1      	ldr	r1, [r2, #28]
 801082e:	69cc      	ldr	r4, [r1, #28]
 8010830:	89a3      	ldrh	r3, [r4, #12]
 8010832:	4283      	cmp	r3, r0
 8010834:	b08b      	sub	sp, #44	; 0x2c
 8010836:	d808      	bhi.n	801084a <GUIMONO_DispChar+0x26>
 8010838:	89e5      	ldrh	r5, [r4, #14]
 801083a:	4285      	cmp	r5, r0
 801083c:	d305      	bcc.n	801084a <GUIMONO_DispChar+0x26>
 801083e:	6825      	ldr	r5, [r4, #0]
 8010840:	9506      	str	r5, [sp, #24]
 8010842:	1ac3      	subs	r3, r0, r3
 8010844:	f04f 36ff 	mov.w	r6, #4294967295
 8010848:	e013      	b.n	8010872 <GUIMONO_DispChar+0x4e>
 801084a:	68a3      	ldr	r3, [r4, #8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d07c      	beq.n	801094a <GUIMONO_DispChar+0x126>
 8010850:	881d      	ldrh	r5, [r3, #0]
 8010852:	42a8      	cmp	r0, r5
 8010854:	d379      	bcc.n	801094a <GUIMONO_DispChar+0x126>
 8010856:	885e      	ldrh	r6, [r3, #2]
 8010858:	4286      	cmp	r6, r0
 801085a:	d376      	bcc.n	801094a <GUIMONO_DispChar+0x126>
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	6866      	ldr	r6, [r4, #4]
 8010860:	9606      	str	r6, [sp, #24]
 8010862:	1b40      	subs	r0, r0, r5
 8010864:	b280      	uxth	r0, r0
 8010866:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 801086a:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 801086e:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8010872:	9309      	str	r3, [sp, #36]	; 0x24
 8010874:	1c58      	adds	r0, r3, #1
 8010876:	d068      	beq.n	801094a <GUIMONO_DispChar+0x126>
 8010878:	f891 b018 	ldrb.w	fp, [r1, #24]
 801087c:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8010880:	7ca1      	ldrb	r1, [r4, #18]
 8010882:	4d36      	ldr	r5, [pc, #216]	; (801095c <GUIMONO_DispChar+0x138>)
 8010884:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8010888:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 801088c:	f894 a010 	ldrb.w	sl, [r4, #16]
 8010890:	fb1b f301 	smulbb	r3, fp, r1
 8010894:	4648      	mov	r0, r9
 8010896:	9307      	str	r3, [sp, #28]
 8010898:	f7fb fa7a 	bl	800bd90 <LCD_SetDrawMode>
 801089c:	6829      	ldr	r1, [r5, #0]
 801089e:	9b07      	ldr	r3, [sp, #28]
 80108a0:	69ca      	ldr	r2, [r1, #28]
 80108a2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80108a4:	9105      	str	r1, [sp, #20]
 80108a6:	9008      	str	r0, [sp, #32]
 80108a8:	9906      	ldr	r1, [sp, #24]
 80108aa:	4618      	mov	r0, r3
 80108ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108ae:	fb00 1003 	mla	r0, r0, r3, r1
 80108b2:	9004      	str	r0, [sp, #16]
 80108b4:	7ca3      	ldrb	r3, [r4, #18]
 80108b6:	9303      	str	r3, [sp, #12]
 80108b8:	2301      	movs	r3, #1
 80108ba:	9302      	str	r3, [sp, #8]
 80108bc:	7ed3      	ldrb	r3, [r2, #27]
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	7e93      	ldrb	r3, [r2, #26]
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	4652      	mov	r2, sl
 80108c6:	465b      	mov	r3, fp
 80108c8:	4641      	mov	r1, r8
 80108ca:	4638      	mov	r0, r7
 80108cc:	f7fb fbd6 	bl	800c07c <LCD_DrawBitmap>
 80108d0:	1c73      	adds	r3, r6, #1
 80108d2:	d01a      	beq.n	801090a <GUIMONO_DispChar+0xe6>
 80108d4:	f049 0002 	orr.w	r0, r9, #2
 80108d8:	f7fb fa5a 	bl	800bd90 <LCD_SetDrawMode>
 80108dc:	682a      	ldr	r2, [r5, #0]
 80108de:	9906      	ldr	r1, [sp, #24]
 80108e0:	69d3      	ldr	r3, [r2, #28]
 80108e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80108e4:	9205      	str	r2, [sp, #20]
 80108e6:	9a07      	ldr	r2, [sp, #28]
 80108e8:	fb02 1606 	mla	r6, r2, r6, r1
 80108ec:	9604      	str	r6, [sp, #16]
 80108ee:	7ca2      	ldrb	r2, [r4, #18]
 80108f0:	9203      	str	r2, [sp, #12]
 80108f2:	2201      	movs	r2, #1
 80108f4:	9202      	str	r2, [sp, #8]
 80108f6:	7eda      	ldrb	r2, [r3, #27]
 80108f8:	9201      	str	r2, [sp, #4]
 80108fa:	7e9b      	ldrb	r3, [r3, #26]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4652      	mov	r2, sl
 8010900:	465b      	mov	r3, fp
 8010902:	4641      	mov	r1, r8
 8010904:	4638      	mov	r0, r7
 8010906:	f7fb fbb9 	bl	800c07c <LCD_DrawBitmap>
 801090a:	682b      	ldr	r3, [r5, #0]
 801090c:	69db      	ldr	r3, [r3, #28]
 801090e:	7e5a      	ldrb	r2, [r3, #25]
 8010910:	7e1b      	ldrb	r3, [r3, #24]
 8010912:	429a      	cmp	r2, r3
 8010914:	d915      	bls.n	8010942 <GUIMONO_DispChar+0x11e>
 8010916:	f1b9 0f02 	cmp.w	r9, #2
 801091a:	d012      	beq.n	8010942 <GUIMONO_DispChar+0x11e>
 801091c:	f089 0004 	eor.w	r0, r9, #4
 8010920:	f7fb fa36 	bl	800bd90 <LCD_SetDrawMode>
 8010924:	4b0d      	ldr	r3, [pc, #52]	; (801095c <GUIMONO_DispChar+0x138>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	69db      	ldr	r3, [r3, #28]
 801092a:	7e18      	ldrb	r0, [r3, #24]
 801092c:	7ed9      	ldrb	r1, [r3, #27]
 801092e:	7e9a      	ldrb	r2, [r3, #26]
 8010930:	7e5b      	ldrb	r3, [r3, #25]
 8010932:	fb00 8101 	mla	r1, r0, r1, r8
 8010936:	4443      	add	r3, r8
 8010938:	fb0a 7202 	mla	r2, sl, r2, r7
 801093c:	4638      	mov	r0, r7
 801093e:	f7fb fa85 	bl	800be4c <LCD_FillRect>
 8010942:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8010946:	f7fb fa23 	bl	800bd90 <LCD_SetDrawMode>
 801094a:	4b04      	ldr	r3, [pc, #16]	; (801095c <GUIMONO_DispChar+0x138>)
 801094c:	7c61      	ldrb	r1, [r4, #17]
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8010952:	440b      	add	r3, r1
 8010954:	8453      	strh	r3, [r2, #34]	; 0x22
 8010956:	b00b      	add	sp, #44	; 0x2c
 8010958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095c:	20000014 	.word	0x20000014

08010960 <GUIMONO_GetCharDistX>:
 8010960:	4b04      	ldr	r3, [pc, #16]	; (8010974 <GUIMONO_GetCharDistX+0x14>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	69db      	ldr	r3, [r3, #28]
 8010968:	b109      	cbz	r1, 801096e <GUIMONO_GetCharDistX+0xe>
 801096a:	7c1a      	ldrb	r2, [r3, #16]
 801096c:	600a      	str	r2, [r1, #0]
 801096e:	7c58      	ldrb	r0, [r3, #17]
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	20000014 	.word	0x20000014

08010978 <GUIMONO_GetFontInfo>:
 8010978:	2302      	movs	r3, #2
 801097a:	800b      	strh	r3, [r1, #0]
 801097c:	4770      	bx	lr

0801097e <GUIMONO_IsInFont>:
 801097e:	69c3      	ldr	r3, [r0, #28]
 8010980:	899a      	ldrh	r2, [r3, #12]
 8010982:	428a      	cmp	r2, r1
 8010984:	d802      	bhi.n	801098c <GUIMONO_IsInFont+0xe>
 8010986:	89da      	ldrh	r2, [r3, #14]
 8010988:	428a      	cmp	r2, r1
 801098a:	d20f      	bcs.n	80109ac <GUIMONO_IsInFont+0x2e>
 801098c:	6898      	ldr	r0, [r3, #8]
 801098e:	b180      	cbz	r0, 80109b2 <GUIMONO_IsInFont+0x34>
 8010990:	8803      	ldrh	r3, [r0, #0]
 8010992:	4299      	cmp	r1, r3
 8010994:	d30c      	bcc.n	80109b0 <GUIMONO_IsInFont+0x32>
 8010996:	8842      	ldrh	r2, [r0, #2]
 8010998:	428a      	cmp	r2, r1
 801099a:	d309      	bcc.n	80109b0 <GUIMONO_IsInFont+0x32>
 801099c:	1ac9      	subs	r1, r1, r3
 801099e:	6843      	ldr	r3, [r0, #4]
 80109a0:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 80109a4:	43c0      	mvns	r0, r0
 80109a6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80109aa:	4770      	bx	lr
 80109ac:	2001      	movs	r0, #1
 80109ae:	4770      	bx	lr
 80109b0:	2000      	movs	r0, #0
 80109b2:	4770      	bx	lr

080109b4 <GUIPROP__FindChar>:
 80109b4:	b138      	cbz	r0, 80109c6 <GUIPROP__FindChar+0x12>
 80109b6:	8803      	ldrh	r3, [r0, #0]
 80109b8:	428b      	cmp	r3, r1
 80109ba:	d802      	bhi.n	80109c2 <GUIPROP__FindChar+0xe>
 80109bc:	8843      	ldrh	r3, [r0, #2]
 80109be:	428b      	cmp	r3, r1
 80109c0:	d201      	bcs.n	80109c6 <GUIPROP__FindChar+0x12>
 80109c2:	6880      	ldr	r0, [r0, #8]
 80109c4:	e7f6      	b.n	80109b4 <GUIPROP__FindChar>
 80109c6:	4770      	bx	lr

080109c8 <GUIPROP_DispChar>:
 80109c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109cc:	4c38      	ldr	r4, [pc, #224]	; (8010ab0 <GUIPROP_DispChar+0xe8>)
 80109ce:	6823      	ldr	r3, [r4, #0]
 80109d0:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 80109d4:	69db      	ldr	r3, [r3, #28]
 80109d6:	b089      	sub	sp, #36	; 0x24
 80109d8:	4606      	mov	r6, r0
 80109da:	4601      	mov	r1, r0
 80109dc:	69d8      	ldr	r0, [r3, #28]
 80109de:	f7ff ffe9 	bl	80109b4 <GUIPROP__FindChar>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	d060      	beq.n	8010aa8 <GUIPROP_DispChar+0xe0>
 80109e6:	8805      	ldrh	r5, [r0, #0]
 80109e8:	6847      	ldr	r7, [r0, #4]
 80109ea:	1b75      	subs	r5, r6, r5
 80109ec:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 80109f0:	4640      	mov	r0, r8
 80109f2:	f896 a002 	ldrb.w	sl, [r6, #2]
 80109f6:	f7fb f9cb 	bl	800bd90 <LCD_SetDrawMode>
 80109fa:	f8d4 c000 	ldr.w	ip, [r4]
 80109fe:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8010a02:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8010a06:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8010a0a:	f89e b018 	ldrb.w	fp, [lr, #24]
 8010a0e:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 8010a12:	4681      	mov	r9, r0
 8010a14:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 8010a18:	9305      	str	r3, [sp, #20]
 8010a1a:	6873      	ldr	r3, [r6, #4]
 8010a1c:	9304      	str	r3, [sp, #16]
 8010a1e:	f04f 0c01 	mov.w	ip, #1
 8010a22:	f8cd a00c 	str.w	sl, [sp, #12]
 8010a26:	f8cd c008 	str.w	ip, [sp, #8]
 8010a2a:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8010a2e:	f8cd c004 	str.w	ip, [sp, #4]
 8010a32:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8010a36:	f8cd e000 	str.w	lr, [sp]
 8010a3a:	465b      	mov	r3, fp
 8010a3c:	f7fb fb1e 	bl	800c07c <LCD_DrawBitmap>
 8010a40:	6823      	ldr	r3, [r4, #0]
 8010a42:	69db      	ldr	r3, [r3, #28]
 8010a44:	7e59      	ldrb	r1, [r3, #25]
 8010a46:	f893 a018 	ldrb.w	sl, [r3, #24]
 8010a4a:	9107      	str	r1, [sp, #28]
 8010a4c:	4551      	cmp	r1, sl
 8010a4e:	d920      	bls.n	8010a92 <GUIPROP_DispChar+0xca>
 8010a50:	f1b8 0f02 	cmp.w	r8, #2
 8010a54:	d01d      	beq.n	8010a92 <GUIPROP_DispChar+0xca>
 8010a56:	f893 b01b 	ldrb.w	fp, [r3, #27]
 8010a5a:	f7fa fc1b 	bl	800b294 <GUI_GetColor>
 8010a5e:	4680      	mov	r8, r0
 8010a60:	f7fa fc11 	bl	800b286 <GUI_GetBkColor>
 8010a64:	f7fa fceb 	bl	800b43e <GUI_SetColor>
 8010a68:	6823      	ldr	r3, [r4, #0]
 8010a6a:	9907      	ldr	r1, [sp, #28]
 8010a6c:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8010a70:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 8010a7a:	7eda      	ldrb	r2, [r3, #27]
 8010a7c:	fb0b e301 	mla	r3, fp, r1, lr
 8010a80:	fb05 0202 	mla	r2, r5, r2, r0
 8010a84:	fb0b e10a 	mla	r1, fp, sl, lr
 8010a88:	f7fb f9e0 	bl	800be4c <LCD_FillRect>
 8010a8c:	4640      	mov	r0, r8
 8010a8e:	f7fa fcd6 	bl	800b43e <GUI_SetColor>
 8010a92:	4648      	mov	r0, r9
 8010a94:	f7fb f97c 	bl	800bd90 <LCD_SetDrawMode>
 8010a98:	6823      	ldr	r3, [r4, #0]
 8010a9a:	7871      	ldrb	r1, [r6, #1]
 8010a9c:	69da      	ldr	r2, [r3, #28]
 8010a9e:	7e90      	ldrb	r0, [r2, #26]
 8010aa0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8010aa2:	fb00 2201 	mla	r2, r0, r1, r2
 8010aa6:	845a      	strh	r2, [r3, #34]	; 0x22
 8010aa8:	b009      	add	sp, #36	; 0x24
 8010aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aae:	bf00      	nop
 8010ab0:	20000014 	.word	0x20000014

08010ab4 <GUIPROP_GetCharDistX>:
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <GUIPROP_GetCharDistX+0x38>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	69dd      	ldr	r5, [r3, #28]
 8010abc:	4602      	mov	r2, r0
 8010abe:	460c      	mov	r4, r1
 8010ac0:	4601      	mov	r1, r0
 8010ac2:	69e8      	ldr	r0, [r5, #28]
 8010ac4:	f7ff ff76 	bl	80109b4 <GUIPROP__FindChar>
 8010ac8:	b170      	cbz	r0, 8010ae8 <GUIPROP_GetCharDistX+0x34>
 8010aca:	8803      	ldrh	r3, [r0, #0]
 8010acc:	1ad2      	subs	r2, r2, r3
 8010ace:	6843      	ldr	r3, [r0, #4]
 8010ad0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8010ad4:	7848      	ldrb	r0, [r1, #1]
 8010ad6:	7ea9      	ldrb	r1, [r5, #26]
 8010ad8:	fb10 f001 	smulbb	r0, r0, r1
 8010adc:	b124      	cbz	r4, 8010ae8 <GUIPROP_GetCharDistX+0x34>
 8010ade:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8010ae2:	fb11 f303 	smulbb	r3, r1, r3
 8010ae6:	6023      	str	r3, [r4, #0]
 8010ae8:	bd38      	pop	{r3, r4, r5, pc}
 8010aea:	bf00      	nop
 8010aec:	20000014 	.word	0x20000014

08010af0 <GUIPROP_GetFontInfo>:
 8010af0:	2301      	movs	r3, #1
 8010af2:	800b      	strh	r3, [r1, #0]
 8010af4:	4770      	bx	lr

08010af6 <GUIPROP_IsInFont>:
 8010af6:	b508      	push	{r3, lr}
 8010af8:	69c0      	ldr	r0, [r0, #28]
 8010afa:	f7ff ff5b 	bl	80109b4 <GUIPROP__FindChar>
 8010afe:	3000      	adds	r0, #0
 8010b00:	bf18      	it	ne
 8010b02:	2001      	movne	r0, #1
 8010b04:	bd08      	pop	{r3, pc}
	...

08010b08 <GUI_SelectLayer>:
 8010b08:	b570      	push	{r4, r5, r6, lr}
 8010b0a:	4d08      	ldr	r5, [pc, #32]	; (8010b2c <GUI_SelectLayer+0x24>)
 8010b0c:	682b      	ldr	r3, [r5, #0]
 8010b0e:	2801      	cmp	r0, #1
 8010b10:	4604      	mov	r4, r0
 8010b12:	7c5e      	ldrb	r6, [r3, #17]
 8010b14:	d808      	bhi.n	8010b28 <GUI_SelectLayer+0x20>
 8010b16:	f7fa fe85 	bl	800b824 <GUI_DEVICE__GetpDriver>
 8010b1a:	b128      	cbz	r0, 8010b28 <GUI_SelectLayer+0x20>
 8010b1c:	682b      	ldr	r3, [r5, #0]
 8010b1e:	745c      	strb	r4, [r3, #17]
 8010b20:	f7fa fc82 	bl	800b428 <GUI_SelectLCD>
 8010b24:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <GUI_SelectLayer+0x28>)
 8010b26:	601c      	str	r4, [r3, #0]
 8010b28:	4630      	mov	r0, r6
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	20000014 	.word	0x20000014
 8010b30:	2001e724 	.word	0x2001e724

08010b34 <GUI_TOUCH_CalcCoefficients>:
 8010b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b36:	ed2d 8b02 	vpush	{d8}
 8010b3a:	4dc5      	ldr	r5, [pc, #788]	; (8010e50 <GUI_TOUCH_CalcCoefficients+0x31c>)
 8010b3c:	b08d      	sub	sp, #52	; 0x34
 8010b3e:	2400      	movs	r4, #0
 8010b40:	2802      	cmp	r0, #2
 8010b42:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010b44:	602c      	str	r4, [r5, #0]
 8010b46:	d134      	bne.n	8010bb2 <GUI_TOUCH_CalcCoefficients+0x7e>
 8010b48:	6848      	ldr	r0, [r1, #4]
 8010b4a:	6809      	ldr	r1, [r1, #0]
 8010b4c:	681c      	ldr	r4, [r3, #0]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	1a40      	subs	r0, r0, r1
 8010b52:	ee07 0a90 	vmov	s15, r0
 8010b56:	1b1b      	subs	r3, r3, r4
 8010b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b5c:	ee07 3a90 	vmov	s15, r3
 8010b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b64:	2300      	movs	r3, #0
 8010b66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010b6a:	60ab      	str	r3, [r5, #8]
 8010b6c:	612b      	str	r3, [r5, #16]
 8010b6e:	ca0c      	ldmia	r2, {r2, r3}
 8010b70:	1a9b      	subs	r3, r3, r2
 8010b72:	6831      	ldr	r1, [r6, #0]
 8010b74:	ee07 4a90 	vmov	s15, r4
 8010b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b7c:	edc5 6a01 	vstr	s13, [r5, #4]
 8010b80:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 8010b84:	ee07 3a90 	vmov	s15, r3
 8010b88:	6873      	ldr	r3, [r6, #4]
 8010b8a:	edc5 6a03 	vstr	s13, [r5, #12]
 8010b8e:	1a5b      	subs	r3, r3, r1
 8010b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b94:	ee07 3a90 	vmov	s15, r3
 8010b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010ba0:	ee07 1a90 	vmov	s15, r1
 8010ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ba8:	edc5 6a05 	vstr	s13, [r5, #20]
 8010bac:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 8010bb0:	e13b      	b.n	8010e2a <GUI_TOUCH_CalcCoefficients+0x2f6>
 8010bb2:	f340 8145 	ble.w	8010e40 <GUI_TOUCH_CalcCoefficients+0x30c>
 8010bb6:	2803      	cmp	r0, #3
 8010bb8:	d128      	bne.n	8010c0c <GUI_TOUCH_CalcCoefficients+0xd8>
 8010bba:	4620      	mov	r0, r4
 8010bbc:	581f      	ldr	r7, [r3, r0]
 8010bbe:	ee07 7a90 	vmov	s15, r7
 8010bc2:	5837      	ldr	r7, [r6, r0]
 8010bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bc8:	eb0d 0400 	add.w	r4, sp, r0
 8010bcc:	edc4 7a00 	vstr	s15, [r4]
 8010bd0:	ee07 7a90 	vmov	s15, r7
 8010bd4:	ac03      	add	r4, sp, #12
 8010bd6:	580f      	ldr	r7, [r1, r0]
 8010bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bdc:	4404      	add	r4, r0
 8010bde:	edc4 7a00 	vstr	s15, [r4]
 8010be2:	ee07 7a90 	vmov	s15, r7
 8010be6:	ac06      	add	r4, sp, #24
 8010be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010bec:	5817      	ldr	r7, [r2, r0]
 8010bee:	4404      	add	r4, r0
 8010bf0:	edc4 7a00 	vstr	s15, [r4]
 8010bf4:	ee07 7a90 	vmov	s15, r7
 8010bf8:	ac09      	add	r4, sp, #36	; 0x24
 8010bfa:	4404      	add	r4, r0
 8010bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c00:	3004      	adds	r0, #4
 8010c02:	280c      	cmp	r0, #12
 8010c04:	edc4 7a00 	vstr	s15, [r4]
 8010c08:	d1d8      	bne.n	8010bbc <GUI_TOUCH_CalcCoefficients+0x88>
 8010c0a:	e093      	b.n	8010d34 <GUI_TOUCH_CalcCoefficients+0x200>
 8010c0c:	2700      	movs	r7, #0
 8010c0e:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8010c12:	44a6      	add	lr, r4
 8010c14:	f8ce 7000 	str.w	r7, [lr]
 8010c18:	f10d 0e18 	add.w	lr, sp, #24
 8010c1c:	44a6      	add	lr, r4
 8010c1e:	f8ce 7000 	str.w	r7, [lr]
 8010c22:	f10d 0e0c 	add.w	lr, sp, #12
 8010c26:	44a6      	add	lr, r4
 8010c28:	f8ce 7000 	str.w	r7, [lr]
 8010c2c:	eb0d 0e04 	add.w	lr, sp, r4
 8010c30:	3404      	adds	r4, #4
 8010c32:	2c0c      	cmp	r4, #12
 8010c34:	f8ce 7000 	str.w	r7, [lr]
 8010c38:	d1e9      	bne.n	8010c0e <GUI_TOUCH_CalcCoefficients+0xda>
 8010c3a:	ed9d 6a02 	vldr	s12, [sp, #8]
 8010c3e:	eddd 6a05 	vldr	s13, [sp, #20]
 8010c42:	eddd 3a08 	vldr	s7, [sp, #32]
 8010c46:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8010c4a:	eddd 0a00 	vldr	s1, [sp]
 8010c4e:	eddd 4a01 	vldr	s9, [sp, #4]
 8010c52:	ed9d 1a04 	vldr	s2, [sp, #16]
 8010c56:	eddd 1a06 	vldr	s3, [sp, #24]
 8010c5a:	ed9d 2a07 	vldr	s4, [sp, #28]
 8010c5e:	eddd 2a09 	vldr	s5, [sp, #36]	; 0x24
 8010c62:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 8010c66:	3e04      	subs	r6, #4
 8010c68:	3904      	subs	r1, #4
 8010c6a:	3a04      	subs	r2, #4
 8010c6c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8010c70:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8010c74:	ecb3 7a01 	vldmia	r3!, {s14}
 8010c78:	ee07 7a90 	vmov	s15, r7
 8010c7c:	f851 7f04 	ldr.w	r7, [r1, #4]!
 8010c80:	ee05 7a10 	vmov	s10, r7
 8010c84:	f852 7f04 	ldr.w	r7, [r2, #4]!
 8010c88:	ee05 7a90 	vmov	s11, r7
 8010c8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c94:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8010c98:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010ca2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010ca6:	ee73 3a85 	vadd.f32	s7, s7, s10
 8010caa:	ee34 4a25 	vadd.f32	s8, s8, s11
 8010cae:	eee7 0a07 	vfma.f32	s1, s14, s14
 8010cb2:	eee7 4a27 	vfma.f32	s9, s14, s15
 8010cb6:	eea7 1aa7 	vfma.f32	s2, s15, s15
 8010cba:	eee7 1a05 	vfma.f32	s3, s14, s10
 8010cbe:	eea7 2a85 	vfma.f32	s4, s15, s10
 8010cc2:	eee7 2a25 	vfma.f32	s5, s14, s11
 8010cc6:	eea7 3aa5 	vfma.f32	s6, s15, s11
 8010cca:	d1d1      	bne.n	8010c70 <GUI_TOUCH_CalcCoefficients+0x13c>
 8010ccc:	eec0 7a86 	vdiv.f32	s15, s1, s12
 8010cd0:	edcd 7a00 	vstr	s15, [sp]
 8010cd4:	eec4 7aa6 	vdiv.f32	s15, s9, s13
 8010cd8:	edcd 7a01 	vstr	s15, [sp, #4]
 8010cdc:	eec4 7a86 	vdiv.f32	s15, s9, s12
 8010ce0:	edcd 7a03 	vstr	s15, [sp, #12]
 8010ce4:	eec1 7a26 	vdiv.f32	s15, s2, s13
 8010ce8:	edcd 7a04 	vstr	s15, [sp, #16]
 8010cec:	eec1 7a86 	vdiv.f32	s15, s3, s12
 8010cf0:	edcd 7a06 	vstr	s15, [sp, #24]
 8010cf4:	eec2 7a26 	vdiv.f32	s15, s4, s13
 8010cf8:	edcd 7a07 	vstr	s15, [sp, #28]
 8010cfc:	eec2 7a86 	vdiv.f32	s15, s5, s12
 8010d00:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8010d04:	eec3 7a26 	vdiv.f32	s15, s6, s13
 8010d08:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8010d0c:	ee07 0a90 	vmov	s15, r0
 8010d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d14:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8010d18:	ed8d 7a02 	vstr	s14, [sp, #8]
 8010d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d20:	ed8d 7a05 	vstr	s14, [sp, #20]
 8010d24:	ee83 7aa7 	vdiv.f32	s14, s7, s15
 8010d28:	ed8d 7a08 	vstr	s14, [sp, #32]
 8010d2c:	ee84 7a27 	vdiv.f32	s14, s8, s15
 8010d30:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8010d34:	eddd 4a02 	vldr	s9, [sp, #8]
 8010d38:	ed9d 4a05 	vldr	s8, [sp, #20]
 8010d3c:	eddd 3a01 	vldr	s7, [sp, #4]
 8010d40:	eddd 2a03 	vldr	s5, [sp, #12]
 8010d44:	ed9d 3a00 	vldr	s6, [sp]
 8010d48:	eddd 1a04 	vldr	s3, [sp, #16]
 8010d4c:	ee33 1ae4 	vsub.f32	s2, s7, s9
 8010d50:	ee72 5ac4 	vsub.f32	s11, s5, s8
 8010d54:	ee33 7a64 	vsub.f32	s14, s6, s9
 8010d58:	ee71 0ac4 	vsub.f32	s1, s3, s8
 8010d5c:	ee65 7ac1 	vnmul.f32	s15, s11, s2
 8010d60:	eee7 7a20 	vfma.f32	s15, s14, s1
 8010d64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d6c:	d061      	beq.n	8010e32 <GUI_TOUCH_CalcCoefficients+0x2fe>
 8010d6e:	ed9d 6a08 	vldr	s12, [sp, #32]
 8010d72:	ed9d 5a07 	vldr	s10, [sp, #28]
 8010d76:	ed9d 2a06 	vldr	s4, [sp, #24]
 8010d7a:	ee35 8a46 	vsub.f32	s16, s10, s12
 8010d7e:	ee72 6a46 	vsub.f32	s13, s4, s12
 8010d82:	ee28 0a65 	vnmul.f32	s0, s16, s11
 8010d86:	eea0 0aa6 	vfma.f32	s0, s1, s13
 8010d8a:	ee66 6ac1 	vnmul.f32	s13, s13, s2
 8010d8e:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8010d92:	eee7 6a08 	vfma.f32	s13, s14, s16
 8010d96:	edc5 8a01 	vstr	s17, [r5, #4]
 8010d9a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8010d9e:	ee62 6a64 	vnmul.f32	s13, s4, s9
 8010da2:	ed85 0a02 	vstr	s0, [r5, #8]
 8010da6:	eee3 6a06 	vfma.f32	s13, s6, s12
 8010daa:	ee26 6a63 	vnmul.f32	s12, s12, s7
 8010dae:	ee66 6aa1 	vmul.f32	s13, s13, s3
 8010db2:	eea4 6a85 	vfma.f32	s12, s9, s10
 8010db6:	ee25 5a43 	vnmul.f32	s10, s10, s6
 8010dba:	eee2 6a86 	vfma.f32	s13, s5, s12
 8010dbe:	eea3 5a82 	vfma.f32	s10, s7, s4
 8010dc2:	ed9d 2a09 	vldr	s4, [sp, #36]	; 0x24
 8010dc6:	eee4 6a05 	vfma.f32	s13, s8, s10
 8010dca:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8010dce:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
 8010dd2:	ed85 6a03 	vstr	s12, [r5, #12]
 8010dd6:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
 8010dda:	ee36 0a66 	vsub.f32	s0, s12, s13
 8010dde:	ee32 5a66 	vsub.f32	s10, s4, s13
 8010de2:	ee60 5a65 	vnmul.f32	s11, s0, s11
 8010de6:	eee0 5a85 	vfma.f32	s11, s1, s10
 8010dea:	ee25 5a41 	vnmul.f32	s10, s10, s2
 8010dee:	eec5 0aa7 	vdiv.f32	s1, s11, s15
 8010df2:	eea7 5a00 	vfma.f32	s10, s14, s0
 8010df6:	edc5 0a04 	vstr	s1, [r5, #16]
 8010dfa:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8010dfe:	ed85 7a05 	vstr	s14, [r5, #20]
 8010e02:	ee22 7a64 	vnmul.f32	s14, s4, s9
 8010e06:	eea3 7a26 	vfma.f32	s14, s6, s13
 8010e0a:	ee66 6ae3 	vnmul.f32	s13, s13, s7
 8010e0e:	ee27 7a21 	vmul.f32	s14, s14, s3
 8010e12:	eee4 6a86 	vfma.f32	s13, s9, s12
 8010e16:	ee26 6a43 	vnmul.f32	s12, s12, s6
 8010e1a:	eea2 7aa6 	vfma.f32	s14, s5, s13
 8010e1e:	eea3 6a82 	vfma.f32	s12, s7, s4
 8010e22:	eea4 7a06 	vfma.f32	s14, s8, s12
 8010e26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	602b      	str	r3, [r5, #0]
 8010e2e:	edc5 6a06 	vstr	s13, [r5, #24]
 8010e32:	682c      	ldr	r4, [r5, #0]
 8010e34:	4b06      	ldr	r3, [pc, #24]	; (8010e50 <GUI_TOUCH_CalcCoefficients+0x31c>)
 8010e36:	b11c      	cbz	r4, 8010e40 <GUI_TOUCH_CalcCoefficients+0x30c>
 8010e38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010e3a:	61da      	str	r2, [r3, #28]
 8010e3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010e3e:	621a      	str	r2, [r3, #32]
 8010e40:	fab4 f084 	clz	r0, r4
 8010e44:	0940      	lsrs	r0, r0, #5
 8010e46:	b00d      	add	sp, #52	; 0x34
 8010e48:	ecbd 8b02 	vpop	{d8}
 8010e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	20000430 	.word	0x20000430

08010e54 <_Unlink>:
 8010e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e56:	4605      	mov	r5, r0
 8010e58:	b1e8      	cbz	r0, 8010e96 <_Unlink+0x42>
 8010e5a:	f7fa f811 	bl	800ae80 <GUI_ALLOC_LockH>
 8010e5e:	4b0f      	ldr	r3, [pc, #60]	; (8010e9c <_Unlink+0x48>)
 8010e60:	9000      	str	r0, [sp, #0]
 8010e62:	685c      	ldr	r4, [r3, #4]
 8010e64:	42a5      	cmp	r5, r4
 8010e66:	d105      	bne.n	8010e74 <_Unlink+0x20>
 8010e68:	6842      	ldr	r2, [r0, #4]
 8010e6a:	605a      	str	r2, [r3, #4]
 8010e6c:	e010      	b.n	8010e90 <_Unlink+0x3c>
 8010e6e:	a801      	add	r0, sp, #4
 8010e70:	f7fa f814 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010e74:	b164      	cbz	r4, 8010e90 <_Unlink+0x3c>
 8010e76:	4620      	mov	r0, r4
 8010e78:	f7fa f802 	bl	800ae80 <GUI_ALLOC_LockH>
 8010e7c:	6844      	ldr	r4, [r0, #4]
 8010e7e:	9001      	str	r0, [sp, #4]
 8010e80:	42a5      	cmp	r5, r4
 8010e82:	d1f4      	bne.n	8010e6e <_Unlink+0x1a>
 8010e84:	9b00      	ldr	r3, [sp, #0]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	6043      	str	r3, [r0, #4]
 8010e8a:	a801      	add	r0, sp, #4
 8010e8c:	f7fa f806 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010e90:	4668      	mov	r0, sp
 8010e92:	f7fa f803 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010e96:	b003      	add	sp, #12
 8010e98:	bd30      	pop	{r4, r5, pc}
 8010e9a:	bf00      	nop
 8010e9c:	20000454 	.word	0x20000454

08010ea0 <GUI_TIMER__GetFirstTimer>:
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ea4:	6003      	str	r3, [r0, #0]
 8010ea6:	4b09      	ldr	r3, [pc, #36]	; (8010ecc <GUI_TIMER__GetFirstTimer+0x2c>)
 8010ea8:	681c      	ldr	r4, [r3, #0]
 8010eaa:	4605      	mov	r5, r0
 8010eac:	b154      	cbz	r4, 8010ec4 <GUI_TIMER__GetFirstTimer+0x24>
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f7f9 ffe6 	bl	800ae80 <GUI_ALLOC_LockH>
 8010eb4:	ab02      	add	r3, sp, #8
 8010eb6:	6902      	ldr	r2, [r0, #16]
 8010eb8:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010ebc:	602a      	str	r2, [r5, #0]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7f9 ffec 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	b003      	add	sp, #12
 8010ec8:	bd30      	pop	{r4, r5, pc}
 8010eca:	bf00      	nop
 8010ecc:	20000454 	.word	0x20000454

08010ed0 <GUI_TIMER__GetNextTimerLin>:
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ed4:	600b      	str	r3, [r1, #0]
 8010ed6:	460e      	mov	r6, r1
 8010ed8:	4604      	mov	r4, r0
 8010eda:	b190      	cbz	r0, 8010f02 <GUI_TIMER__GetNextTimerLin+0x32>
 8010edc:	f7f9 ffd0 	bl	800ae80 <GUI_ALLOC_LockH>
 8010ee0:	ad02      	add	r5, sp, #8
 8010ee2:	6884      	ldr	r4, [r0, #8]
 8010ee4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010ee8:	b144      	cbz	r4, 8010efc <GUI_TIMER__GetNextTimerLin+0x2c>
 8010eea:	4628      	mov	r0, r5
 8010eec:	f7f9 ffd6 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f7f9 ffc5 	bl	800ae80 <GUI_ALLOC_LockH>
 8010ef6:	6903      	ldr	r3, [r0, #16]
 8010ef8:	9001      	str	r0, [sp, #4]
 8010efa:	6033      	str	r3, [r6, #0]
 8010efc:	4628      	mov	r0, r5
 8010efe:	f7f9 ffcd 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010f02:	4620      	mov	r0, r4
 8010f04:	b002      	add	sp, #8
 8010f06:	bd70      	pop	{r4, r5, r6, pc}

08010f08 <GUI_TIMER_Delete>:
 8010f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	b350      	cbz	r0, 8010f64 <GUI_TIMER_Delete+0x5c>
 8010f0e:	4e16      	ldr	r6, [pc, #88]	; (8010f68 <GUI_TIMER_Delete+0x60>)
 8010f10:	6835      	ldr	r5, [r6, #0]
 8010f12:	42a8      	cmp	r0, r5
 8010f14:	d10b      	bne.n	8010f2e <GUI_TIMER_Delete+0x26>
 8010f16:	f7f9 ffb3 	bl	800ae80 <GUI_ALLOC_LockH>
 8010f1a:	ab02      	add	r3, sp, #8
 8010f1c:	6882      	ldr	r2, [r0, #8]
 8010f1e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010f22:	6032      	str	r2, [r6, #0]
 8010f24:	4618      	mov	r0, r3
 8010f26:	e015      	b.n	8010f54 <GUI_TIMER_Delete+0x4c>
 8010f28:	4668      	mov	r0, sp
 8010f2a:	f7f9 ffb7 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010f2e:	b19d      	cbz	r5, 8010f58 <GUI_TIMER_Delete+0x50>
 8010f30:	4628      	mov	r0, r5
 8010f32:	f7f9 ffa5 	bl	800ae80 <GUI_ALLOC_LockH>
 8010f36:	6885      	ldr	r5, [r0, #8]
 8010f38:	9000      	str	r0, [sp, #0]
 8010f3a:	42ac      	cmp	r4, r5
 8010f3c:	d1f4      	bne.n	8010f28 <GUI_TIMER_Delete+0x20>
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f7f9 ff9e 	bl	800ae80 <GUI_ALLOC_LockH>
 8010f44:	9b00      	ldr	r3, [sp, #0]
 8010f46:	6882      	ldr	r2, [r0, #8]
 8010f48:	9001      	str	r0, [sp, #4]
 8010f4a:	609a      	str	r2, [r3, #8]
 8010f4c:	a801      	add	r0, sp, #4
 8010f4e:	f7f9 ffa5 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010f52:	4668      	mov	r0, sp
 8010f54:	f7f9 ffa2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f7ff ff7b 	bl	8010e54 <_Unlink>
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7f9 ffbc 	bl	800aedc <GUI_ALLOC_Free>
 8010f64:	b002      	add	sp, #8
 8010f66:	bd70      	pop	{r4, r5, r6, pc}
 8010f68:	20000454 	.word	0x20000454

08010f6c <GUI_TIMER_GetFlag>:
 8010f6c:	b513      	push	{r0, r1, r4, lr}
 8010f6e:	460c      	mov	r4, r1
 8010f70:	b168      	cbz	r0, 8010f8e <GUI_TIMER_GetFlag+0x22>
 8010f72:	f7f9 ff85 	bl	800ae80 <GUI_ALLOC_LockH>
 8010f76:	ab02      	add	r3, sp, #8
 8010f78:	8982      	ldrh	r2, [r0, #12]
 8010f7a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010f7e:	4222      	tst	r2, r4
 8010f80:	4618      	mov	r0, r3
 8010f82:	bf14      	ite	ne
 8010f84:	2401      	movne	r4, #1
 8010f86:	2400      	moveq	r4, #0
 8010f88:	f7f9 ff88 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8010f8c:	e000      	b.n	8010f90 <GUI_TIMER_GetFlag+0x24>
 8010f8e:	2401      	movs	r4, #1
 8010f90:	4620      	mov	r0, r4
 8010f92:	b002      	add	sp, #8
 8010f94:	bd10      	pop	{r4, pc}
	...

08010f98 <GUI__MixColorsBulk>:
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	b087      	sub	sp, #28
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010fa4:	9304      	str	r3, [sp, #16]
 8010fa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010fa8:	009d      	lsls	r5, r3, #2
 8010faa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010fac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010fb0:	9303      	str	r3, [sp, #12]
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	9301      	str	r3, [sp, #4]
 8010fb6:	4b19      	ldr	r3, [pc, #100]	; (801101c <GUI__MixColorsBulk+0x84>)
 8010fb8:	460f      	mov	r7, r1
 8010fba:	4690      	mov	r8, r2
 8010fbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010fbe:	9901      	ldr	r1, [sp, #4]
 8010fc0:	4291      	cmp	r1, r2
 8010fc2:	d028      	beq.n	8011016 <GUI__MixColorsBulk+0x7e>
 8010fc4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8010fc8:	9702      	str	r7, [sp, #8]
 8010fca:	46c2      	mov	sl, r8
 8010fcc:	46b3      	mov	fp, r6
 8010fce:	f85b 0b04 	ldr.w	r0, [fp], #4
 8010fd2:	9c02      	ldr	r4, [sp, #8]
 8010fd4:	9904      	ldr	r1, [sp, #16]
 8010fd6:	9305      	str	r3, [sp, #20]
 8010fd8:	0e02      	lsrs	r2, r0, #24
 8010fda:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8010fde:	434a      	muls	r2, r1
 8010fe0:	21ff      	movs	r1, #255	; 0xff
 8010fe2:	fbb2 f2f1 	udiv	r2, r2, r1
 8010fe6:	f854 1b04 	ldr.w	r1, [r4], #4
 8010fea:	9402      	str	r4, [sp, #8]
 8010fec:	b2d2      	uxtb	r2, r2
 8010fee:	681c      	ldr	r4, [r3, #0]
 8010ff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8010ff4:	47a0      	blx	r4
 8010ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8010ffa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8010ffe:	f84a 0b04 	str.w	r0, [sl], #4
 8011002:	9b05      	ldr	r3, [sp, #20]
 8011004:	d1e3      	bne.n	8010fce <GUI__MixColorsBulk+0x36>
 8011006:	9a03      	ldr	r2, [sp, #12]
 8011008:	4417      	add	r7, r2
 801100a:	9a01      	ldr	r2, [sp, #4]
 801100c:	3201      	adds	r2, #1
 801100e:	442e      	add	r6, r5
 8011010:	44a8      	add	r8, r5
 8011012:	9201      	str	r2, [sp, #4]
 8011014:	e7d2      	b.n	8010fbc <GUI__MixColorsBulk+0x24>
 8011016:	b007      	add	sp, #28
 8011018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	20000040 	.word	0x20000040

08011020 <GUI__MixColors>:
 8011020:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 8011024:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8011028:	0e0b      	lsrs	r3, r1, #24
 801102a:	ea4f 6310 	mov.w	r3, r0, lsr #24
 801102e:	bf08      	it	eq
 8011030:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8011034:	b530      	push	{r4, r5, lr}
 8011036:	435a      	muls	r2, r3
 8011038:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801103c:	23ff      	movs	r3, #255	; 0xff
 801103e:	fbb2 f2f3 	udiv	r2, r2, r3
 8011042:	1a9d      	subs	r5, r3, r2
 8011044:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 8011048:	0a0c      	lsrs	r4, r1, #8
 801104a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801104e:	436c      	muls	r4, r5
 8011050:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8011054:	fb02 4403 	mla	r4, r2, r3, r4
 8011058:	4342      	muls	r2, r0
 801105a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 801105e:	fb05 2103 	mla	r1, r5, r3, r2
 8011062:	0a09      	lsrs	r1, r1, #8
 8011064:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 8011068:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801106c:	ea44 0001 	orr.w	r0, r4, r1
 8011070:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 8011074:	bd30      	pop	{r4, r5, pc}
	...

08011078 <_OnExit>:
 8011078:	b510      	push	{r4, lr}
 801107a:	4c08      	ldr	r4, [pc, #32]	; (801109c <_OnExit+0x24>)
 801107c:	6820      	ldr	r0, [r4, #0]
 801107e:	f7f9 feeb 	bl	800ae58 <GUI_ALLOC_FreeFixedBlock>
 8011082:	6860      	ldr	r0, [r4, #4]
 8011084:	f7f9 fee8 	bl	800ae58 <GUI_ALLOC_FreeFixedBlock>
 8011088:	68a0      	ldr	r0, [r4, #8]
 801108a:	f7f9 fee5 	bl	800ae58 <GUI_ALLOC_FreeFixedBlock>
 801108e:	2300      	movs	r3, #0
 8011090:	60a3      	str	r3, [r4, #8]
 8011092:	6063      	str	r3, [r4, #4]
 8011094:	6023      	str	r3, [r4, #0]
 8011096:	60e3      	str	r3, [r4, #12]
 8011098:	6123      	str	r3, [r4, #16]
 801109a:	bd10      	pop	{r4, pc}
 801109c:	20000468 	.word	0x20000468

080110a0 <GUI__GetAlphaBuffer>:
 80110a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110a4:	4c29      	ldr	r4, [pc, #164]	; (801114c <GUI__GetAlphaBuffer+0xac>)
 80110a6:	461d      	mov	r5, r3
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	4606      	mov	r6, r0
 80110ac:	4688      	mov	r8, r1
 80110ae:	4617      	mov	r7, r2
 80110b0:	b93b      	cbnz	r3, 80110c2 <GUI__GetAlphaBuffer+0x22>
 80110b2:	2301      	movs	r3, #1
 80110b4:	4620      	mov	r0, r4
 80110b6:	6123      	str	r3, [r4, #16]
 80110b8:	4b25      	ldr	r3, [pc, #148]	; (8011150 <GUI__GetAlphaBuffer+0xb0>)
 80110ba:	f840 3f14 	str.w	r3, [r0, #20]!
 80110be:	f7fa fb9d 	bl	800b7fc <GUI__RegisterExit>
 80110c2:	68e3      	ldr	r3, [r4, #12]
 80110c4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 801114c <GUI__GetAlphaBuffer+0xac>
 80110c8:	b943      	cbnz	r3, 80110dc <GUI__GetAlphaBuffer+0x3c>
 80110ca:	4b22      	ldr	r3, [pc, #136]	; (8011154 <GUI__GetAlphaBuffer+0xb4>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f8c9 300c 	str.w	r3, [r9, #12]
 80110d2:	b91b      	cbnz	r3, 80110dc <GUI__GetAlphaBuffer+0x3c>
 80110d4:	f7fb fae6 	bl	800c6a4 <LCD_GetVXSizeMax>
 80110d8:	f8c9 000c 	str.w	r0, [r9, #12]
 80110dc:	b10d      	cbz	r5, 80110e2 <GUI__GetAlphaBuffer+0x42>
 80110de:	68e3      	ldr	r3, [r4, #12]
 80110e0:	602b      	str	r3, [r5, #0]
 80110e2:	b17e      	cbz	r6, 8011104 <GUI__GetAlphaBuffer+0x64>
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	4d19      	ldr	r5, [pc, #100]	; (801114c <GUI__GetAlphaBuffer+0xac>)
 80110e8:	b943      	cbnz	r3, 80110fc <GUI__GetAlphaBuffer+0x5c>
 80110ea:	68e8      	ldr	r0, [r5, #12]
 80110ec:	0080      	lsls	r0, r0, #2
 80110ee:	f7f9 ff8b 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 80110f2:	6028      	str	r0, [r5, #0]
 80110f4:	fab0 f580 	clz	r5, r0
 80110f8:	096d      	lsrs	r5, r5, #5
 80110fa:	e000      	b.n	80110fe <GUI__GetAlphaBuffer+0x5e>
 80110fc:	2500      	movs	r5, #0
 80110fe:	6823      	ldr	r3, [r4, #0]
 8011100:	6033      	str	r3, [r6, #0]
 8011102:	e000      	b.n	8011106 <GUI__GetAlphaBuffer+0x66>
 8011104:	4635      	mov	r5, r6
 8011106:	f1b8 0f00 	cmp.w	r8, #0
 801110a:	d00d      	beq.n	8011128 <GUI__GetAlphaBuffer+0x88>
 801110c:	6863      	ldr	r3, [r4, #4]
 801110e:	4e0f      	ldr	r6, [pc, #60]	; (801114c <GUI__GetAlphaBuffer+0xac>)
 8011110:	b93b      	cbnz	r3, 8011122 <GUI__GetAlphaBuffer+0x82>
 8011112:	68f0      	ldr	r0, [r6, #12]
 8011114:	0080      	lsls	r0, r0, #2
 8011116:	f7f9 ff77 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 801111a:	2800      	cmp	r0, #0
 801111c:	6070      	str	r0, [r6, #4]
 801111e:	bf08      	it	eq
 8011120:	2501      	moveq	r5, #1
 8011122:	6863      	ldr	r3, [r4, #4]
 8011124:	f8c8 3000 	str.w	r3, [r8]
 8011128:	b167      	cbz	r7, 8011144 <GUI__GetAlphaBuffer+0xa4>
 801112a:	68a3      	ldr	r3, [r4, #8]
 801112c:	4e07      	ldr	r6, [pc, #28]	; (801114c <GUI__GetAlphaBuffer+0xac>)
 801112e:	b93b      	cbnz	r3, 8011140 <GUI__GetAlphaBuffer+0xa0>
 8011130:	68f0      	ldr	r0, [r6, #12]
 8011132:	0080      	lsls	r0, r0, #2
 8011134:	f7f9 ff68 	bl	800b008 <GUI_ALLOC_GetFixedBlock>
 8011138:	2800      	cmp	r0, #0
 801113a:	60b0      	str	r0, [r6, #8]
 801113c:	bf08      	it	eq
 801113e:	2501      	moveq	r5, #1
 8011140:	68a3      	ldr	r3, [r4, #8]
 8011142:	603b      	str	r3, [r7, #0]
 8011144:	4628      	mov	r0, r5
 8011146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801114a:	bf00      	nop
 801114c:	20000468 	.word	0x20000468
 8011150:	08011079 	.word	0x08011079
 8011154:	2001e6f0 	.word	0x2001e6f0

08011158 <GUI__DoAlphaBlending>:
 8011158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115c:	b093      	sub	sp, #76	; 0x4c
 801115e:	2400      	movs	r4, #0
 8011160:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011162:	900a      	str	r0, [sp, #40]	; 0x28
 8011164:	910b      	str	r1, [sp, #44]	; 0x2c
 8011166:	4692      	mov	sl, r2
 8011168:	461e      	mov	r6, r3
 801116a:	603c      	str	r4, [r7, #0]
 801116c:	ab11      	add	r3, sp, #68	; 0x44
 801116e:	4622      	mov	r2, r4
 8011170:	a910      	add	r1, sp, #64	; 0x40
 8011172:	a80f      	add	r0, sp, #60	; 0x3c
 8011174:	f7ff ff94 	bl	80110a0 <GUI__GetAlphaBuffer>
 8011178:	4605      	mov	r5, r0
 801117a:	2800      	cmp	r0, #0
 801117c:	f040 80c5 	bne.w	801130a <GUI__DoAlphaBlending+0x1b2>
 8011180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011182:	4c64      	ldr	r4, [pc, #400]	; (8011314 <GUI__DoAlphaBlending+0x1bc>)
 8011184:	42b3      	cmp	r3, r6
 8011186:	bfa8      	it	ge
 8011188:	4633      	movge	r3, r6
 801118a:	9309      	str	r3, [sp, #36]	; 0x24
 801118c:	6823      	ldr	r3, [r4, #0]
 801118e:	7c58      	ldrb	r0, [r3, #17]
 8011190:	4b61      	ldr	r3, [pc, #388]	; (8011318 <GUI__DoAlphaBlending+0x1c0>)
 8011192:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011196:	9306      	str	r3, [sp, #24]
 8011198:	691b      	ldr	r3, [r3, #16]
 801119a:	930c      	str	r3, [sp, #48]	; 0x30
 801119c:	f7fb fa4e 	bl	800c63c <GUI_GetBitsPerPixelEx>
 80111a0:	6823      	ldr	r3, [r4, #0]
 80111a2:	9007      	str	r0, [sp, #28]
 80111a4:	7c58      	ldrb	r0, [r3, #17]
 80111a6:	f7fb fa67 	bl	800c678 <GUI_GetpfIndex2ColorEx>
 80111aa:	4b5c      	ldr	r3, [pc, #368]	; (801131c <GUI__DoAlphaBlending+0x1c4>)
 80111ac:	9003      	str	r0, [sp, #12]
 80111ae:	4298      	cmp	r0, r3
 80111b0:	d005      	beq.n	80111be <GUI__DoAlphaBlending+0x66>
 80111b2:	4b5b      	ldr	r3, [pc, #364]	; (8011320 <GUI__DoAlphaBlending+0x1c8>)
 80111b4:	1ac3      	subs	r3, r0, r3
 80111b6:	bf18      	it	ne
 80111b8:	2301      	movne	r3, #1
 80111ba:	9305      	str	r3, [sp, #20]
 80111bc:	e000      	b.n	80111c0 <GUI__DoAlphaBlending+0x68>
 80111be:	9505      	str	r5, [sp, #20]
 80111c0:	2600      	movs	r6, #0
 80111c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80111c6:	4635      	mov	r5, r6
 80111c8:	4653      	mov	r3, sl
 80111ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80111ce:	930d      	str	r3, [sp, #52]	; 0x34
 80111d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80111d2:	4798      	blx	r3
 80111d4:	0e03      	lsrs	r3, r0, #24
 80111d6:	9004      	str	r0, [sp, #16]
 80111d8:	9308      	str	r3, [sp, #32]
 80111da:	f000 8084 	beq.w	80112e6 <GUI__DoAlphaBlending+0x18e>
 80111de:	2d00      	cmp	r5, #0
 80111e0:	d139      	bne.n	8011256 <GUI__DoAlphaBlending+0xfe>
 80111e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111e6:	eb03 0906 	add.w	r9, r3, r6
 80111ea:	4b4a      	ldr	r3, [pc, #296]	; (8011314 <GUI__DoAlphaBlending+0x1bc>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80111f2:	454b      	cmp	r3, r9
 80111f4:	bfc4      	itt	gt
 80111f6:	ebc9 0503 	rsbgt	r5, r9, r3
 80111fa:	4699      	movgt	r9, r3
 80111fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111fe:	eb03 0802 	add.w	r8, r3, r2
 8011202:	9b06      	ldr	r3, [sp, #24]
 8011204:	9301      	str	r3, [sp, #4]
 8011206:	19ac      	adds	r4, r5, r6
 8011208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801120a:	00a4      	lsls	r4, r4, #2
 801120c:	4423      	add	r3, r4
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011212:	4648      	mov	r0, r9
 8011214:	4619      	mov	r1, r3
 8011216:	f108 32ff 	add.w	r2, r8, #4294967295
 801121a:	f000 fc47 	bl	8011aac <GUI_ReadRectEx>
 801121e:	9b07      	ldr	r3, [sp, #28]
 8011220:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011222:	2b17      	cmp	r3, #23
 8011224:	dc07      	bgt.n	8011236 <GUI__DoAlphaBlending+0xde>
 8011226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011228:	9a07      	ldr	r2, [sp, #28]
 801122a:	ebc5 010b 	rsb	r1, r5, fp
 801122e:	4420      	add	r0, r4
 8011230:	f000 fa0a 	bl	8011648 <GUI__ExpandPixelIndicesEx>
 8011234:	e001      	b.n	801123a <GUI__DoAlphaBlending+0xe2>
 8011236:	9b05      	ldr	r3, [sp, #20]
 8011238:	b90b      	cbnz	r3, 801123e <GUI__DoAlphaBlending+0xe6>
 801123a:	2501      	movs	r5, #1
 801123c:	e00b      	b.n	8011256 <GUI__DoAlphaBlending+0xfe>
 801123e:	4404      	add	r4, r0
 8011240:	ebc9 0808 	rsb	r8, r9, r8
 8011244:	6820      	ldr	r0, [r4, #0]
 8011246:	9b03      	ldr	r3, [sp, #12]
 8011248:	4798      	blx	r3
 801124a:	f1b8 0801 	subs.w	r8, r8, #1
 801124e:	f844 0b04 	str.w	r0, [r4], #4
 8011252:	d1f7      	bne.n	8011244 <GUI__DoAlphaBlending+0xec>
 8011254:	e7f1      	b.n	801123a <GUI__DoAlphaBlending+0xe2>
 8011256:	4b33      	ldr	r3, [pc, #204]	; (8011324 <GUI__DoAlphaBlending+0x1cc>)
 8011258:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801125c:	00b4      	lsls	r4, r6, #2
 801125e:	f1b8 0f00 	cmp.w	r8, #0
 8011262:	d027      	beq.n	80112b4 <GUI__DoAlphaBlending+0x15c>
 8011264:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011266:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011268:	192a      	adds	r2, r5, r4
 801126a:	4421      	add	r1, r4
 801126c:	910f      	str	r1, [sp, #60]	; 0x3c
 801126e:	465b      	mov	r3, fp
 8011270:	9210      	str	r2, [sp, #64]	; 0x40
 8011272:	4650      	mov	r0, sl
 8011274:	47c0      	blx	r8
 8011276:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011278:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801127a:	2300      	movs	r3, #0
 801127c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8011280:	f000 427f 	and.w	r2, r0, #4278190080	; 0xff000000
 8011284:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8011288:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 801128c:	d102      	bne.n	8011294 <GUI__DoAlphaBlending+0x13c>
 801128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011292:	e006      	b.n	80112a2 <GUI__DoAlphaBlending+0x14a>
 8011294:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8011298:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801129c:	bf08      	it	eq
 801129e:	f841 0023 	streq.w	r0, [r1, r3, lsl #2]
 80112a2:	3301      	adds	r3, #1
 80112a4:	459b      	cmp	fp, r3
 80112a6:	d1e9      	bne.n	801127c <GUI__DoAlphaBlending+0x124>
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	9510      	str	r5, [sp, #64]	; 0x40
 80112ac:	f043 0301 	orr.w	r3, r3, #1
 80112b0:	603b      	str	r3, [r7, #0]
 80112b2:	e028      	b.n	8011306 <GUI__DoAlphaBlending+0x1ae>
 80112b4:	9b08      	ldr	r3, [sp, #32]
 80112b6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80112ba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80112be:	2bff      	cmp	r3, #255	; 0xff
 80112c0:	d104      	bne.n	80112cc <GUI__DoAlphaBlending+0x174>
 80112c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112c4:	591b      	ldr	r3, [r3, r4]
 80112c6:	f848 3004 	str.w	r3, [r8, r4]
 80112ca:	e014      	b.n	80112f6 <GUI__DoAlphaBlending+0x19e>
 80112cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112ce:	5919      	ldr	r1, [r3, r4]
 80112d0:	9b04      	ldr	r3, [sp, #16]
 80112d2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80112d6:	4b14      	ldr	r3, [pc, #80]	; (8011328 <GUI__DoAlphaBlending+0x1d0>)
 80112d8:	43d2      	mvns	r2, r2
 80112da:	b2d2      	uxtb	r2, r2
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4798      	blx	r3
 80112e0:	f848 0004 	str.w	r0, [r8, r4]
 80112e4:	e003      	b.n	80112ee <GUI__DoAlphaBlending+0x196>
 80112e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80112e8:	9a04      	ldr	r2, [sp, #16]
 80112ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	f043 0301 	orr.w	r3, r3, #1
 80112f4:	603b      	str	r3, [r7, #0]
 80112f6:	f1bb 0b01 	subs.w	fp, fp, #1
 80112fa:	f106 0601 	add.w	r6, r6, #1
 80112fe:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8011302:	f47f af61 	bne.w	80111c8 <GUI__DoAlphaBlending+0x70>
 8011306:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011308:	e000      	b.n	801130c <GUI__DoAlphaBlending+0x1b4>
 801130a:	4620      	mov	r0, r4
 801130c:	b013      	add	sp, #76	; 0x4c
 801130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011312:	bf00      	nop
 8011314:	20000014 	.word	0x20000014
 8011318:	2001e6e8 	.word	0x2001e6e8
 801131c:	080124a5 	.word	0x080124a5
 8011320:	080124a7 	.word	0x080124a7
 8011324:	20000468 	.word	0x20000468
 8011328:	20000040 	.word	0x20000040

0801132c <GUI__AllocAlphaBuffer>:
 801132c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801132e:	b908      	cbnz	r0, 8011334 <GUI__AllocAlphaBuffer+0x8>
 8011330:	4602      	mov	r2, r0
 8011332:	e000      	b.n	8011336 <GUI__AllocAlphaBuffer+0xa>
 8011334:	aa03      	add	r2, sp, #12
 8011336:	2300      	movs	r3, #0
 8011338:	a902      	add	r1, sp, #8
 801133a:	a801      	add	r0, sp, #4
 801133c:	f7ff feb0 	bl	80110a0 <GUI__GetAlphaBuffer>
 8011340:	b005      	add	sp, #20
 8011342:	f85d fb04 	ldr.w	pc, [sp], #4

08011346 <GUI__CompactPixelIndices>:
 8011346:	2a08      	cmp	r2, #8
 8011348:	b510      	push	{r4, lr}
 801134a:	dd0e      	ble.n	801136a <GUI__CompactPixelIndices+0x24>
 801134c:	2a10      	cmp	r2, #16
 801134e:	dc0a      	bgt.n	8011366 <GUI__CompactPixelIndices+0x20>
 8011350:	4603      	mov	r3, r0
 8011352:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011356:	f850 2b04 	ldr.w	r2, [r0], #4
 801135a:	f823 2b02 	strh.w	r2, [r3], #2
 801135e:	428b      	cmp	r3, r1
 8011360:	d1f9      	bne.n	8011356 <GUI__CompactPixelIndices+0x10>
 8011362:	2001      	movs	r0, #1
 8011364:	bd10      	pop	{r4, pc}
 8011366:	2000      	movs	r0, #0
 8011368:	bd10      	pop	{r4, pc}
 801136a:	2a02      	cmp	r2, #2
 801136c:	d128      	bne.n	80113c0 <GUI__CompactPixelIndices+0x7a>
 801136e:	4604      	mov	r4, r0
 8011370:	6803      	ldr	r3, [r0, #0]
 8011372:	2901      	cmp	r1, #1
 8011374:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8011378:	b2db      	uxtb	r3, r3
 801137a:	d01e      	beq.n	80113ba <GUI__CompactPixelIndices+0x74>
 801137c:	6842      	ldr	r2, [r0, #4]
 801137e:	0112      	lsls	r2, r2, #4
 8011380:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8011384:	2902      	cmp	r1, #2
 8011386:	ea43 0302 	orr.w	r3, r3, r2
 801138a:	d101      	bne.n	8011390 <GUI__CompactPixelIndices+0x4a>
 801138c:	3008      	adds	r0, #8
 801138e:	e015      	b.n	80113bc <GUI__CompactPixelIndices+0x76>
 8011390:	6882      	ldr	r2, [r0, #8]
 8011392:	0092      	lsls	r2, r2, #2
 8011394:	f002 020c 	and.w	r2, r2, #12
 8011398:	2903      	cmp	r1, #3
 801139a:	ea43 0302 	orr.w	r3, r3, r2
 801139e:	d101      	bne.n	80113a4 <GUI__CompactPixelIndices+0x5e>
 80113a0:	300c      	adds	r0, #12
 80113a2:	e00b      	b.n	80113bc <GUI__CompactPixelIndices+0x76>
 80113a4:	68c2      	ldr	r2, [r0, #12]
 80113a6:	f002 0203 	and.w	r2, r2, #3
 80113aa:	4313      	orrs	r3, r2
 80113ac:	3904      	subs	r1, #4
 80113ae:	3010      	adds	r0, #16
 80113b0:	f804 3b01 	strb.w	r3, [r4], #1
 80113b4:	2900      	cmp	r1, #0
 80113b6:	d1db      	bne.n	8011370 <GUI__CompactPixelIndices+0x2a>
 80113b8:	e7d3      	b.n	8011362 <GUI__CompactPixelIndices+0x1c>
 80113ba:	3004      	adds	r0, #4
 80113bc:	2100      	movs	r1, #0
 80113be:	e7f7      	b.n	80113b0 <GUI__CompactPixelIndices+0x6a>
 80113c0:	2a04      	cmp	r2, #4
 80113c2:	d115      	bne.n	80113f0 <GUI__CompactPixelIndices+0xaa>
 80113c4:	4604      	mov	r4, r0
 80113c6:	2901      	cmp	r1, #1
 80113c8:	6803      	ldr	r3, [r0, #0]
 80113ca:	bf18      	it	ne
 80113cc:	6842      	ldrne	r2, [r0, #4]
 80113ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	bf1b      	ittet	ne
 80113d6:	f002 020f 	andne.w	r2, r2, #15
 80113da:	4313      	orrne	r3, r2
 80113dc:	2100      	moveq	r1, #0
 80113de:	3902      	subne	r1, #2
 80113e0:	bf0c      	ite	eq
 80113e2:	3004      	addeq	r0, #4
 80113e4:	3008      	addne	r0, #8
 80113e6:	f804 3b01 	strb.w	r3, [r4], #1
 80113ea:	2900      	cmp	r1, #0
 80113ec:	d1eb      	bne.n	80113c6 <GUI__CompactPixelIndices+0x80>
 80113ee:	e7b8      	b.n	8011362 <GUI__CompactPixelIndices+0x1c>
 80113f0:	2a01      	cmp	r2, #1
 80113f2:	4603      	mov	r3, r0
 80113f4:	d14e      	bne.n	8011494 <GUI__CompactPixelIndices+0x14e>
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	2901      	cmp	r1, #1
 80113fa:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 80113fe:	b2d2      	uxtb	r2, r2
 8011400:	d045      	beq.n	801148e <GUI__CompactPixelIndices+0x148>
 8011402:	685c      	ldr	r4, [r3, #4]
 8011404:	01a4      	lsls	r4, r4, #6
 8011406:	f004 0440 	and.w	r4, r4, #64	; 0x40
 801140a:	2902      	cmp	r1, #2
 801140c:	ea42 0204 	orr.w	r2, r2, r4
 8011410:	d101      	bne.n	8011416 <GUI__CompactPixelIndices+0xd0>
 8011412:	3308      	adds	r3, #8
 8011414:	e03c      	b.n	8011490 <GUI__CompactPixelIndices+0x14a>
 8011416:	689c      	ldr	r4, [r3, #8]
 8011418:	0164      	lsls	r4, r4, #5
 801141a:	f004 0420 	and.w	r4, r4, #32
 801141e:	2903      	cmp	r1, #3
 8011420:	ea42 0204 	orr.w	r2, r2, r4
 8011424:	d101      	bne.n	801142a <GUI__CompactPixelIndices+0xe4>
 8011426:	330c      	adds	r3, #12
 8011428:	e032      	b.n	8011490 <GUI__CompactPixelIndices+0x14a>
 801142a:	68dc      	ldr	r4, [r3, #12]
 801142c:	0124      	lsls	r4, r4, #4
 801142e:	f004 0410 	and.w	r4, r4, #16
 8011432:	2904      	cmp	r1, #4
 8011434:	ea42 0204 	orr.w	r2, r2, r4
 8011438:	d101      	bne.n	801143e <GUI__CompactPixelIndices+0xf8>
 801143a:	3310      	adds	r3, #16
 801143c:	e028      	b.n	8011490 <GUI__CompactPixelIndices+0x14a>
 801143e:	691c      	ldr	r4, [r3, #16]
 8011440:	00e4      	lsls	r4, r4, #3
 8011442:	f004 0408 	and.w	r4, r4, #8
 8011446:	2905      	cmp	r1, #5
 8011448:	ea42 0204 	orr.w	r2, r2, r4
 801144c:	d101      	bne.n	8011452 <GUI__CompactPixelIndices+0x10c>
 801144e:	3314      	adds	r3, #20
 8011450:	e01e      	b.n	8011490 <GUI__CompactPixelIndices+0x14a>
 8011452:	695c      	ldr	r4, [r3, #20]
 8011454:	00a4      	lsls	r4, r4, #2
 8011456:	f004 0404 	and.w	r4, r4, #4
 801145a:	2906      	cmp	r1, #6
 801145c:	ea42 0204 	orr.w	r2, r2, r4
 8011460:	d101      	bne.n	8011466 <GUI__CompactPixelIndices+0x120>
 8011462:	3318      	adds	r3, #24
 8011464:	e014      	b.n	8011490 <GUI__CompactPixelIndices+0x14a>
 8011466:	699c      	ldr	r4, [r3, #24]
 8011468:	0064      	lsls	r4, r4, #1
 801146a:	3907      	subs	r1, #7
 801146c:	f004 0402 	and.w	r4, r4, #2
 8011470:	ea42 0204 	orr.w	r2, r2, r4
 8011474:	bf1b      	ittet	ne
 8011476:	69dc      	ldrne	r4, [r3, #28]
 8011478:	f004 0401 	andne.w	r4, r4, #1
 801147c:	331c      	addeq	r3, #28
 801147e:	4322      	orrne	r2, r4
 8011480:	bf18      	it	ne
 8011482:	3320      	addne	r3, #32
 8011484:	f800 2b01 	strb.w	r2, [r0], #1
 8011488:	2900      	cmp	r1, #0
 801148a:	d1b4      	bne.n	80113f6 <GUI__CompactPixelIndices+0xb0>
 801148c:	e769      	b.n	8011362 <GUI__CompactPixelIndices+0x1c>
 801148e:	3304      	adds	r3, #4
 8011490:	2100      	movs	r1, #0
 8011492:	e7f7      	b.n	8011484 <GUI__CompactPixelIndices+0x13e>
 8011494:	4401      	add	r1, r0
 8011496:	f850 2b04 	ldr.w	r2, [r0], #4
 801149a:	f803 2b01 	strb.w	r2, [r3], #1
 801149e:	4299      	cmp	r1, r3
 80114a0:	d1f9      	bne.n	8011496 <GUI__CompactPixelIndices+0x150>
 80114a2:	e75e      	b.n	8011362 <GUI__CompactPixelIndices+0x1c>

080114a4 <GUI__ConvertColor2Index>:
 80114a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a8:	9f08      	ldr	r7, [sp, #32]
 80114aa:	f8d3 8000 	ldr.w	r8, [r3]
 80114ae:	2f00      	cmp	r7, #0
 80114b0:	bf08      	it	eq
 80114b2:	4607      	moveq	r7, r0
 80114b4:	2a08      	cmp	r2, #8
 80114b6:	4604      	mov	r4, r0
 80114b8:	460d      	mov	r5, r1
 80114ba:	dd05      	ble.n	80114c8 <GUI__ConvertColor2Index+0x24>
 80114bc:	2a10      	cmp	r2, #16
 80114be:	f340 80ad 	ble.w	801161c <GUI__ConvertColor2Index+0x178>
 80114c2:	2000      	movs	r0, #0
 80114c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114c8:	3a01      	subs	r2, #1
 80114ca:	2a07      	cmp	r2, #7
 80114cc:	f200 809d 	bhi.w	801160a <GUI__ConvertColor2Index+0x166>
 80114d0:	e8df f002 	tbb	[pc, r2]
 80114d4:	7f9b5b11 	.word	0x7f9b5b11
 80114d8:	899b9b9b 	.word	0x899b9b9b
 80114dc:	69e0      	ldr	r0, [r4, #28]
 80114de:	47c0      	blx	r8
 80114e0:	f104 0920 	add.w	r9, r4, #32
 80114e4:	4330      	orrs	r0, r6
 80114e6:	b2c6      	uxtb	r6, r0
 80114e8:	3d08      	subs	r5, #8
 80114ea:	464c      	mov	r4, r9
 80114ec:	f807 6b01 	strb.w	r6, [r7], #1
 80114f0:	2d00      	cmp	r5, #0
 80114f2:	f000 808a 	beq.w	801160a <GUI__ConvertColor2Index+0x166>
 80114f6:	6820      	ldr	r0, [r4, #0]
 80114f8:	47c0      	blx	r8
 80114fa:	2d01      	cmp	r5, #1
 80114fc:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8011500:	b2c6      	uxtb	r6, r0
 8011502:	f000 8085 	beq.w	8011610 <GUI__ConvertColor2Index+0x16c>
 8011506:	6860      	ldr	r0, [r4, #4]
 8011508:	47c0      	blx	r8
 801150a:	2d02      	cmp	r5, #2
 801150c:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 8011510:	b2c6      	uxtb	r6, r0
 8011512:	d101      	bne.n	8011518 <GUI__ConvertColor2Index+0x74>
 8011514:	3408      	adds	r4, #8
 8011516:	e07c      	b.n	8011612 <GUI__ConvertColor2Index+0x16e>
 8011518:	68a0      	ldr	r0, [r4, #8]
 801151a:	47c0      	blx	r8
 801151c:	2d03      	cmp	r5, #3
 801151e:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 8011522:	b2c6      	uxtb	r6, r0
 8011524:	d101      	bne.n	801152a <GUI__ConvertColor2Index+0x86>
 8011526:	340c      	adds	r4, #12
 8011528:	e073      	b.n	8011612 <GUI__ConvertColor2Index+0x16e>
 801152a:	68e0      	ldr	r0, [r4, #12]
 801152c:	47c0      	blx	r8
 801152e:	2d04      	cmp	r5, #4
 8011530:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8011534:	b2c6      	uxtb	r6, r0
 8011536:	d101      	bne.n	801153c <GUI__ConvertColor2Index+0x98>
 8011538:	3410      	adds	r4, #16
 801153a:	e06a      	b.n	8011612 <GUI__ConvertColor2Index+0x16e>
 801153c:	6920      	ldr	r0, [r4, #16]
 801153e:	47c0      	blx	r8
 8011540:	2d05      	cmp	r5, #5
 8011542:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 8011546:	b2c6      	uxtb	r6, r0
 8011548:	d101      	bne.n	801154e <GUI__ConvertColor2Index+0xaa>
 801154a:	3414      	adds	r4, #20
 801154c:	e061      	b.n	8011612 <GUI__ConvertColor2Index+0x16e>
 801154e:	6960      	ldr	r0, [r4, #20]
 8011550:	47c0      	blx	r8
 8011552:	2d06      	cmp	r5, #6
 8011554:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8011558:	b2c6      	uxtb	r6, r0
 801155a:	d101      	bne.n	8011560 <GUI__ConvertColor2Index+0xbc>
 801155c:	3418      	adds	r4, #24
 801155e:	e058      	b.n	8011612 <GUI__ConvertColor2Index+0x16e>
 8011560:	69a0      	ldr	r0, [r4, #24]
 8011562:	47c0      	blx	r8
 8011564:	2d07      	cmp	r5, #7
 8011566:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 801156a:	b2c6      	uxtb	r6, r0
 801156c:	d1b6      	bne.n	80114dc <GUI__ConvertColor2Index+0x38>
 801156e:	341c      	adds	r4, #28
 8011570:	e04f      	b.n	8011612 <GUI__ConvertColor2Index+0x16e>
 8011572:	68e0      	ldr	r0, [r4, #12]
 8011574:	47c0      	blx	r8
 8011576:	f104 0910 	add.w	r9, r4, #16
 801157a:	4330      	orrs	r0, r6
 801157c:	b2c6      	uxtb	r6, r0
 801157e:	3d04      	subs	r5, #4
 8011580:	464c      	mov	r4, r9
 8011582:	f807 6b01 	strb.w	r6, [r7], #1
 8011586:	2d00      	cmp	r5, #0
 8011588:	d03f      	beq.n	801160a <GUI__ConvertColor2Index+0x166>
 801158a:	6820      	ldr	r0, [r4, #0]
 801158c:	47c0      	blx	r8
 801158e:	2d01      	cmp	r5, #1
 8011590:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8011594:	b2c6      	uxtb	r6, r0
 8011596:	d03e      	beq.n	8011616 <GUI__ConvertColor2Index+0x172>
 8011598:	6860      	ldr	r0, [r4, #4]
 801159a:	47c0      	blx	r8
 801159c:	2d02      	cmp	r5, #2
 801159e:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 80115a2:	b2c6      	uxtb	r6, r0
 80115a4:	d101      	bne.n	80115aa <GUI__ConvertColor2Index+0x106>
 80115a6:	3408      	adds	r4, #8
 80115a8:	e036      	b.n	8011618 <GUI__ConvertColor2Index+0x174>
 80115aa:	68a0      	ldr	r0, [r4, #8]
 80115ac:	47c0      	blx	r8
 80115ae:	2d03      	cmp	r5, #3
 80115b0:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 80115b4:	b2c6      	uxtb	r6, r0
 80115b6:	d1dc      	bne.n	8011572 <GUI__ConvertColor2Index+0xce>
 80115b8:	340c      	adds	r4, #12
 80115ba:	e02d      	b.n	8011618 <GUI__ConvertColor2Index+0x174>
 80115bc:	6860      	ldr	r0, [r4, #4]
 80115be:	47c0      	blx	r8
 80115c0:	f104 0908 	add.w	r9, r4, #8
 80115c4:	4330      	orrs	r0, r6
 80115c6:	b2c6      	uxtb	r6, r0
 80115c8:	3d02      	subs	r5, #2
 80115ca:	464c      	mov	r4, r9
 80115cc:	f807 6b01 	strb.w	r6, [r7], #1
 80115d0:	b1dd      	cbz	r5, 801160a <GUI__ConvertColor2Index+0x166>
 80115d2:	6820      	ldr	r0, [r4, #0]
 80115d4:	47c0      	blx	r8
 80115d6:	2d01      	cmp	r5, #1
 80115d8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80115dc:	b2c6      	uxtb	r6, r0
 80115de:	d1ed      	bne.n	80115bc <GUI__ConvertColor2Index+0x118>
 80115e0:	3404      	adds	r4, #4
 80115e2:	2500      	movs	r5, #0
 80115e4:	e7f2      	b.n	80115cc <GUI__ConvertColor2Index+0x128>
 80115e6:	691e      	ldr	r6, [r3, #16]
 80115e8:	b12e      	cbz	r6, 80115f6 <GUI__ConvertColor2Index+0x152>
 80115ea:	2301      	movs	r3, #1
 80115ec:	462a      	mov	r2, r5
 80115ee:	4639      	mov	r1, r7
 80115f0:	4620      	mov	r0, r4
 80115f2:	47b0      	blx	r6
 80115f4:	e009      	b.n	801160a <GUI__ConvertColor2Index+0x166>
 80115f6:	1e7e      	subs	r6, r7, #1
 80115f8:	f854 0b04 	ldr.w	r0, [r4], #4
 80115fc:	47c0      	blx	r8
 80115fe:	f806 0f01 	strb.w	r0, [r6, #1]!
 8011602:	43f3      	mvns	r3, r6
 8011604:	442b      	add	r3, r5
 8011606:	42df      	cmn	r7, r3
 8011608:	d1f6      	bne.n	80115f8 <GUI__ConvertColor2Index+0x154>
 801160a:	2001      	movs	r0, #1
 801160c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011610:	3404      	adds	r4, #4
 8011612:	2500      	movs	r5, #0
 8011614:	e76a      	b.n	80114ec <GUI__ConvertColor2Index+0x48>
 8011616:	3404      	adds	r4, #4
 8011618:	2500      	movs	r5, #0
 801161a:	e7b2      	b.n	8011582 <GUI__ConvertColor2Index+0xde>
 801161c:	691e      	ldr	r6, [r3, #16]
 801161e:	b11e      	cbz	r6, 8011628 <GUI__ConvertColor2Index+0x184>
 8011620:	2302      	movs	r3, #2
 8011622:	462a      	mov	r2, r5
 8011624:	4639      	mov	r1, r7
 8011626:	e7e4      	b.n	80115f2 <GUI__ConvertColor2Index+0x14e>
 8011628:	3f02      	subs	r7, #2
 801162a:	f854 0b04 	ldr.w	r0, [r4], #4
 801162e:	47c0      	blx	r8
 8011630:	3d01      	subs	r5, #1
 8011632:	f827 0f02 	strh.w	r0, [r7, #2]!
 8011636:	d1f8      	bne.n	801162a <GUI__ConvertColor2Index+0x186>
 8011638:	e7e7      	b.n	801160a <GUI__ConvertColor2Index+0x166>

0801163a <GUI__CompactPixelIndicesEx>:
 801163a:	b513      	push	{r0, r1, r4, lr}
 801163c:	2400      	movs	r4, #0
 801163e:	9400      	str	r4, [sp, #0]
 8011640:	f7ff ff30 	bl	80114a4 <GUI__ConvertColor2Index>
 8011644:	b002      	add	sp, #8
 8011646:	bd10      	pop	{r4, pc}

08011648 <GUI__ExpandPixelIndicesEx>:
 8011648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801164c:	1e0c      	subs	r4, r1, #0
 801164e:	4605      	mov	r5, r0
 8011650:	f340 80b6 	ble.w	80117c0 <GUI__ExpandPixelIndicesEx+0x178>
 8011654:	2a08      	cmp	r2, #8
 8011656:	685e      	ldr	r6, [r3, #4]
 8011658:	dd04      	ble.n	8011664 <GUI__ExpandPixelIndicesEx+0x1c>
 801165a:	2a10      	cmp	r2, #16
 801165c:	f340 809a 	ble.w	8011794 <GUI__ExpandPixelIndicesEx+0x14c>
 8011660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011664:	3a01      	subs	r2, #1
 8011666:	2a07      	cmp	r2, #7
 8011668:	f200 80aa 	bhi.w	80117c0 <GUI__ExpandPixelIndicesEx+0x178>
 801166c:	e8df f002 	tbb	[pc, r2]
 8011670:	59a82d04 	.word	0x59a82d04
 8011674:	85a8a8a8 	.word	0x85a8a8a8
 8011678:	1e67      	subs	r7, r4, #1
 801167a:	10fb      	asrs	r3, r7, #3
 801167c:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 8011680:	f108 38ff 	add.w	r8, r8, #4294967295
 8011684:	f103 39ff 	add.w	r9, r3, #4294967295
 8011688:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 801168c:	f007 0707 	and.w	r7, r7, #7
 8011690:	44a9      	add	r9, r5
 8011692:	f815 a003 	ldrb.w	sl, [r5, r3]
 8011696:	2580      	movs	r5, #128	; 0x80
 8011698:	413d      	asrs	r5, r7
 801169a:	b2ed      	uxtb	r5, r5
 801169c:	f1c7 0307 	rsb	r3, r7, #7
 80116a0:	ea05 000a 	and.w	r0, r5, sl
 80116a4:	4118      	asrs	r0, r3
 80116a6:	47b0      	blx	r6
 80116a8:	f848 0904 	str.w	r0, [r8], #-4
 80116ac:	b937      	cbnz	r7, 80116bc <GUI__ExpandPixelIndicesEx+0x74>
 80116ae:	f899 a000 	ldrb.w	sl, [r9]
 80116b2:	2501      	movs	r5, #1
 80116b4:	f109 39ff 	add.w	r9, r9, #4294967295
 80116b8:	2707      	movs	r7, #7
 80116ba:	e002      	b.n	80116c2 <GUI__ExpandPixelIndicesEx+0x7a>
 80116bc:	006d      	lsls	r5, r5, #1
 80116be:	3f01      	subs	r7, #1
 80116c0:	b2ed      	uxtb	r5, r5
 80116c2:	3c01      	subs	r4, #1
 80116c4:	d1ea      	bne.n	801169c <GUI__ExpandPixelIndicesEx+0x54>
 80116c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ca:	1e67      	subs	r7, r4, #1
 80116cc:	10bb      	asrs	r3, r7, #2
 80116ce:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 80116d2:	f103 39ff 	add.w	r9, r3, #4294967295
 80116d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80116da:	f007 0703 	and.w	r7, r7, #3
 80116de:	f815 a003 	ldrb.w	sl, [r5, r3]
 80116e2:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 80116e6:	44a9      	add	r9, r5
 80116e8:	23c0      	movs	r3, #192	; 0xc0
 80116ea:	007d      	lsls	r5, r7, #1
 80116ec:	fa43 f505 	asr.w	r5, r3, r5
 80116f0:	b2ed      	uxtb	r5, r5
 80116f2:	007b      	lsls	r3, r7, #1
 80116f4:	f1c3 0306 	rsb	r3, r3, #6
 80116f8:	ea05 000a 	and.w	r0, r5, sl
 80116fc:	4118      	asrs	r0, r3
 80116fe:	47b0      	blx	r6
 8011700:	f848 0904 	str.w	r0, [r8], #-4
 8011704:	b937      	cbnz	r7, 8011714 <GUI__ExpandPixelIndicesEx+0xcc>
 8011706:	2503      	movs	r5, #3
 8011708:	f899 a000 	ldrb.w	sl, [r9]
 801170c:	462f      	mov	r7, r5
 801170e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011712:	e002      	b.n	801171a <GUI__ExpandPixelIndicesEx+0xd2>
 8011714:	00ad      	lsls	r5, r5, #2
 8011716:	3f01      	subs	r7, #1
 8011718:	b2ed      	uxtb	r5, r5
 801171a:	3c01      	subs	r4, #1
 801171c:	d1e9      	bne.n	80116f2 <GUI__ExpandPixelIndicesEx+0xaa>
 801171e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011722:	1e67      	subs	r7, r4, #1
 8011724:	107b      	asrs	r3, r7, #1
 8011726:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 801172a:	f103 39ff 	add.w	r9, r3, #4294967295
 801172e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011732:	f007 0701 	and.w	r7, r7, #1
 8011736:	f815 a003 	ldrb.w	sl, [r5, r3]
 801173a:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 801173e:	44a9      	add	r9, r5
 8011740:	23f0      	movs	r3, #240	; 0xf0
 8011742:	00bd      	lsls	r5, r7, #2
 8011744:	fa43 f505 	asr.w	r5, r3, r5
 8011748:	b2ed      	uxtb	r5, r5
 801174a:	00bb      	lsls	r3, r7, #2
 801174c:	f1c3 0304 	rsb	r3, r3, #4
 8011750:	ea05 000a 	and.w	r0, r5, sl
 8011754:	4118      	asrs	r0, r3
 8011756:	47b0      	blx	r6
 8011758:	f848 0904 	str.w	r0, [r8], #-4
 801175c:	b937      	cbnz	r7, 801176c <GUI__ExpandPixelIndicesEx+0x124>
 801175e:	f899 a000 	ldrb.w	sl, [r9]
 8011762:	250f      	movs	r5, #15
 8011764:	f109 39ff 	add.w	r9, r9, #4294967295
 8011768:	2701      	movs	r7, #1
 801176a:	e002      	b.n	8011772 <GUI__ExpandPixelIndicesEx+0x12a>
 801176c:	012d      	lsls	r5, r5, #4
 801176e:	b2ed      	uxtb	r5, r5
 8011770:	2700      	movs	r7, #0
 8011772:	3c01      	subs	r4, #1
 8011774:	d1e9      	bne.n	801174a <GUI__ExpandPixelIndicesEx+0x102>
 8011776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801177a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 801177e:	4425      	add	r5, r4
 8011780:	1b64      	subs	r4, r4, r5
 8011782:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8011786:	47b0      	blx	r6
 8011788:	42e5      	cmn	r5, r4
 801178a:	f847 0d04 	str.w	r0, [r7, #-4]!
 801178e:	d1f8      	bne.n	8011782 <GUI__ExpandPixelIndicesEx+0x13a>
 8011790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011794:	695f      	ldr	r7, [r3, #20]
 8011796:	b137      	cbz	r7, 80117a6 <GUI__ExpandPixelIndicesEx+0x15e>
 8011798:	4622      	mov	r2, r4
 801179a:	4629      	mov	r1, r5
 801179c:	46bc      	mov	ip, r7
 801179e:	2302      	movs	r3, #2
 80117a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a4:	4760      	bx	ip
 80117a6:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 80117aa:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80117ae:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 80117b2:	47b0      	blx	r6
 80117b4:	3c01      	subs	r4, #1
 80117b6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80117ba:	d1f8      	bne.n	80117ae <GUI__ExpandPixelIndicesEx+0x166>
 80117bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080117c4 <GUI__ManageCacheEx>:
 80117c4:	2801      	cmp	r0, #1
 80117c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117c8:	4606      	mov	r6, r0
 80117ca:	460c      	mov	r4, r1
 80117cc:	dc62      	bgt.n	8011894 <GUI__ManageCacheEx+0xd0>
 80117ce:	4d33      	ldr	r5, [pc, #204]	; (801189c <GUI__ManageCacheEx+0xd8>)
 80117d0:	686b      	ldr	r3, [r5, #4]
 80117d2:	b103      	cbz	r3, 80117d6 <GUI__ManageCacheEx+0x12>
 80117d4:	4798      	blx	r3
 80117d6:	2c01      	cmp	r4, #1
 80117d8:	d004      	beq.n	80117e4 <GUI__ManageCacheEx+0x20>
 80117da:	2c02      	cmp	r4, #2
 80117dc:	d020      	beq.n	8011820 <GUI__ManageCacheEx+0x5c>
 80117de:	2c00      	cmp	r4, #0
 80117e0:	d158      	bne.n	8011894 <GUI__ManageCacheEx+0xd0>
 80117e2:	e033      	b.n	801184c <GUI__ManageCacheEx+0x88>
 80117e4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80117e8:	68af      	ldr	r7, [r5, #8]
 80117ea:	b9af      	cbnz	r7, 8011818 <GUI__ManageCacheEx+0x54>
 80117ec:	4630      	mov	r0, r6
 80117ee:	f7fa f819 	bl	800b824 <GUI_DEVICE__GetpDriver>
 80117f2:	9001      	str	r0, [sp, #4]
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d04d      	beq.n	8011894 <GUI__ManageCacheEx+0xd0>
 80117f8:	68c3      	ldr	r3, [r0, #12]
 80117fa:	210d      	movs	r1, #13
 80117fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fe:	a801      	add	r0, sp, #4
 8011800:	4798      	blx	r3
 8011802:	4603      	mov	r3, r0
 8011804:	2800      	cmp	r0, #0
 8011806:	d045      	beq.n	8011894 <GUI__ManageCacheEx+0xd0>
 8011808:	4621      	mov	r1, r4
 801180a:	9801      	ldr	r0, [sp, #4]
 801180c:	4798      	blx	r3
 801180e:	68ab      	ldr	r3, [r5, #8]
 8011810:	3301      	adds	r3, #1
 8011812:	60ab      	str	r3, [r5, #8]
 8011814:	4638      	mov	r0, r7
 8011816:	e03e      	b.n	8011896 <GUI__ManageCacheEx+0xd2>
 8011818:	1c78      	adds	r0, r7, #1
 801181a:	60a8      	str	r0, [r5, #8]
 801181c:	4620      	mov	r0, r4
 801181e:	e03a      	b.n	8011896 <GUI__ManageCacheEx+0xd2>
 8011820:	4630      	mov	r0, r6
 8011822:	f7f9 ffff 	bl	800b824 <GUI_DEVICE__GetpDriver>
 8011826:	9001      	str	r0, [sp, #4]
 8011828:	2800      	cmp	r0, #0
 801182a:	d033      	beq.n	8011894 <GUI__ManageCacheEx+0xd0>
 801182c:	68c3      	ldr	r3, [r0, #12]
 801182e:	210d      	movs	r1, #13
 8011830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011832:	a801      	add	r0, sp, #4
 8011834:	4798      	blx	r3
 8011836:	4604      	mov	r4, r0
 8011838:	2800      	cmp	r0, #0
 801183a:	d02b      	beq.n	8011894 <GUI__ManageCacheEx+0xd0>
 801183c:	682b      	ldr	r3, [r5, #0]
 801183e:	b103      	cbz	r3, 8011842 <GUI__ManageCacheEx+0x7e>
 8011840:	4798      	blx	r3
 8011842:	2102      	movs	r1, #2
 8011844:	9801      	ldr	r0, [sp, #4]
 8011846:	47a0      	blx	r4
 8011848:	2000      	movs	r0, #0
 801184a:	e024      	b.n	8011896 <GUI__ManageCacheEx+0xd2>
 801184c:	00b4      	lsls	r4, r6, #2
 801184e:	192b      	adds	r3, r5, r4
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	2b01      	cmp	r3, #1
 8011854:	d001      	beq.n	801185a <GUI__ManageCacheEx+0x96>
 8011856:	2001      	movs	r0, #1
 8011858:	e015      	b.n	8011886 <GUI__ManageCacheEx+0xc2>
 801185a:	4630      	mov	r0, r6
 801185c:	f7f9 ffe2 	bl	800b824 <GUI_DEVICE__GetpDriver>
 8011860:	9001      	str	r0, [sp, #4]
 8011862:	2800      	cmp	r0, #0
 8011864:	d0f7      	beq.n	8011856 <GUI__ManageCacheEx+0x92>
 8011866:	68c3      	ldr	r3, [r0, #12]
 8011868:	210d      	movs	r1, #13
 801186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801186c:	a801      	add	r0, sp, #4
 801186e:	4798      	blx	r3
 8011870:	4606      	mov	r6, r0
 8011872:	2800      	cmp	r0, #0
 8011874:	d0ef      	beq.n	8011856 <GUI__ManageCacheEx+0x92>
 8011876:	4b09      	ldr	r3, [pc, #36]	; (801189c <GUI__ManageCacheEx+0xd8>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	b103      	cbz	r3, 801187e <GUI__ManageCacheEx+0xba>
 801187c:	4798      	blx	r3
 801187e:	2100      	movs	r1, #0
 8011880:	9801      	ldr	r0, [sp, #4]
 8011882:	47b0      	blx	r6
 8011884:	2000      	movs	r0, #0
 8011886:	4425      	add	r5, r4
 8011888:	68ab      	ldr	r3, [r5, #8]
 801188a:	2b00      	cmp	r3, #0
 801188c:	bf18      	it	ne
 801188e:	3b01      	subne	r3, #1
 8011890:	60ab      	str	r3, [r5, #8]
 8011892:	e000      	b.n	8011896 <GUI__ManageCacheEx+0xd2>
 8011894:	2001      	movs	r0, #1
 8011896:	b003      	add	sp, #12
 8011898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801189a:	bf00      	nop
 801189c:	20000488 	.word	0x20000488

080118a0 <GUI__ManageCache>:
 80118a0:	4b02      	ldr	r3, [pc, #8]	; (80118ac <GUI__ManageCache+0xc>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4601      	mov	r1, r0
 80118a6:	7c58      	ldrb	r0, [r3, #17]
 80118a8:	f7ff bf8c 	b.w	80117c4 <GUI__ManageCacheEx>
 80118ac:	20000014 	.word	0x20000014

080118b0 <LCD_AA_MixColors16>:
 80118b0:	0e0b      	lsrs	r3, r1, #24
 80118b2:	2bff      	cmp	r3, #255	; 0xff
 80118b4:	b510      	push	{r4, lr}
 80118b6:	4c0e      	ldr	r4, [pc, #56]	; (80118f0 <LCD_AA_MixColors16+0x40>)
 80118b8:	d110      	bne.n	80118dc <LCD_AA_MixColors16+0x2c>
 80118ba:	0e03      	lsrs	r3, r0, #24
 80118bc:	d108      	bne.n	80118d0 <LCD_AA_MixColors16+0x20>
 80118be:	f06f 0310 	mvn.w	r3, #16
 80118c2:	435a      	muls	r2, r3
 80118c4:	32ff      	adds	r2, #255	; 0xff
 80118c6:	6963      	ldr	r3, [r4, #20]
 80118c8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80118cc:	4018      	ands	r0, r3
 80118ce:	bd10      	pop	{r4, pc}
 80118d0:	2bff      	cmp	r3, #255	; 0xff
 80118d2:	d103      	bne.n	80118dc <LCD_AA_MixColors16+0x2c>
 80118d4:	6963      	ldr	r3, [r4, #20]
 80118d6:	ea01 0003 	and.w	r0, r1, r3
 80118da:	bd10      	pop	{r4, pc}
 80118dc:	4b05      	ldr	r3, [pc, #20]	; (80118f4 <LCD_AA_MixColors16+0x44>)
 80118de:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	b2d2      	uxtb	r2, r2
 80118e6:	4798      	blx	r3
 80118e8:	6961      	ldr	r1, [r4, #20]
 80118ea:	4008      	ands	r0, r1
 80118ec:	bd10      	pop	{r4, pc}
 80118ee:	bf00      	nop
 80118f0:	20000048 	.word	0x20000048
 80118f4:	20000040 	.word	0x20000040

080118f8 <LCD_AA_SetAndMask>:
 80118f8:	4b02      	ldr	r3, [pc, #8]	; (8011904 <LCD_AA_SetAndMask+0xc>)
 80118fa:	695a      	ldr	r2, [r3, #20]
 80118fc:	6158      	str	r0, [r3, #20]
 80118fe:	4610      	mov	r0, r2
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
 8011904:	20000048 	.word	0x20000048

08011908 <LCD_ReadRectEx>:
 8011908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801190c:	b087      	sub	sp, #28
 801190e:	4690      	mov	r8, r2
 8011910:	9303      	str	r3, [sp, #12]
 8011912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011914:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011916:	68da      	ldr	r2, [r3, #12]
 8011918:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801191a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 801191e:	4607      	mov	r7, r0
 8011920:	460e      	mov	r6, r1
 8011922:	b96b      	cbnz	r3, 8011940 <LCD_ReadRectEx+0x38>
 8011924:	4b60      	ldr	r3, [pc, #384]	; (8011aa8 <LCD_ReadRectEx+0x1a0>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	7c58      	ldrb	r0, [r3, #17]
 801192a:	f7fa fe87 	bl	800c63c <GUI_GetBitsPerPixelEx>
 801192e:	2808      	cmp	r0, #8
 8011930:	dd15      	ble.n	801195e <LCD_ReadRectEx+0x56>
 8011932:	2811      	cmp	r0, #17
 8011934:	bfb4      	ite	lt
 8011936:	f04f 0a02 	movlt.w	sl, #2
 801193a:	f04f 0a04 	movge.w	sl, #4
 801193e:	e010      	b.n	8011962 <LCD_ReadRectEx+0x5a>
 8011940:	2101      	movs	r1, #1
 8011942:	a811      	add	r0, sp, #68	; 0x44
 8011944:	4798      	blx	r3
 8011946:	4605      	mov	r5, r0
 8011948:	2800      	cmp	r0, #0
 801194a:	d0eb      	beq.n	8011924 <LCD_ReadRectEx+0x1c>
 801194c:	9b03      	ldr	r3, [sp, #12]
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	9401      	str	r4, [sp, #4]
 8011952:	4643      	mov	r3, r8
 8011954:	4632      	mov	r2, r6
 8011956:	4639      	mov	r1, r7
 8011958:	9811      	ldr	r0, [sp, #68]	; 0x44
 801195a:	47a8      	blx	r5
 801195c:	e0a0      	b.n	8011aa0 <LCD_ReadRectEx+0x198>
 801195e:	f04f 0a01 	mov.w	sl, #1
 8011962:	1e43      	subs	r3, r0, #1
 8011964:	2500      	movs	r5, #0
 8011966:	9304      	str	r3, [sp, #16]
 8011968:	9b03      	ldr	r3, [sp, #12]
 801196a:	429e      	cmp	r6, r3
 801196c:	f300 8098 	bgt.w	8011aa0 <LCD_ReadRectEx+0x198>
 8011970:	f1ba 0f02 	cmp.w	sl, #2
 8011974:	d009      	beq.n	801198a <LCD_ReadRectEx+0x82>
 8011976:	f1ba 0f04 	cmp.w	sl, #4
 801197a:	d004      	beq.n	8011986 <LCD_ReadRectEx+0x7e>
 801197c:	f1ba 0f01 	cmp.w	sl, #1
 8011980:	f040 808c 	bne.w	8011a9c <LCD_ReadRectEx+0x194>
 8011984:	e003      	b.n	801198e <LCD_ReadRectEx+0x86>
 8011986:	46bb      	mov	fp, r7
 8011988:	e07d      	b.n	8011a86 <LCD_ReadRectEx+0x17e>
 801198a:	46bb      	mov	fp, r7
 801198c:	e070      	b.n	8011a70 <LCD_ReadRectEx+0x168>
 801198e:	9b04      	ldr	r3, [sp, #16]
 8011990:	2b07      	cmp	r3, #7
 8011992:	f200 8083 	bhi.w	8011a9c <LCD_ReadRectEx+0x194>
 8011996:	e8df f003 	tbb	[pc, r3]
 801199a:	0a0e      	.short	0x0a0e
 801199c:	04040707 	.word	0x04040707
 80119a0:	0404      	.short	0x0404
 80119a2:	ebc4 0b07 	rsb	fp, r4, r7
 80119a6:	e059      	b.n	8011a5c <LCD_ReadRectEx+0x154>
 80119a8:	46bb      	mov	fp, r7
 80119aa:	230f      	movs	r3, #15
 80119ac:	e03b      	b.n	8011a26 <LCD_ReadRectEx+0x11e>
 80119ae:	46bb      	mov	fp, r7
 80119b0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80119b4:	e019      	b.n	80119ea <LCD_ReadRectEx+0xe2>
 80119b6:	46bb      	mov	fp, r7
 80119b8:	45c3      	cmp	fp, r8
 80119ba:	dc6f      	bgt.n	8011a9c <LCD_ReadRectEx+0x194>
 80119bc:	4632      	mov	r2, r6
 80119be:	4659      	mov	r1, fp
 80119c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80119c2:	47c8      	blx	r9
 80119c4:	7822      	ldrb	r2, [r4, #0]
 80119c6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80119ca:	412b      	asrs	r3, r5
 80119cc:	401a      	ands	r2, r3
 80119ce:	f1c5 0307 	rsb	r3, r5, #7
 80119d2:	4098      	lsls	r0, r3
 80119d4:	3501      	adds	r5, #1
 80119d6:	4310      	orrs	r0, r2
 80119d8:	f025 0307 	bic.w	r3, r5, #7
 80119dc:	7020      	strb	r0, [r4, #0]
 80119de:	f10b 0b01 	add.w	fp, fp, #1
 80119e2:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 80119e6:	411d      	asrs	r5, r3
 80119e8:	e7e6      	b.n	80119b8 <LCD_ReadRectEx+0xb0>
 80119ea:	45c3      	cmp	fp, r8
 80119ec:	dc56      	bgt.n	8011a9c <LCD_ReadRectEx+0x194>
 80119ee:	4659      	mov	r1, fp
 80119f0:	4632      	mov	r2, r6
 80119f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80119f4:	9305      	str	r3, [sp, #20]
 80119f6:	47c8      	blx	r9
 80119f8:	9b05      	ldr	r3, [sp, #20]
 80119fa:	f894 e000 	ldrb.w	lr, [r4]
 80119fe:	006a      	lsls	r2, r5, #1
 8011a00:	fa43 f102 	asr.w	r1, r3, r2
 8011a04:	f1c2 0206 	rsb	r2, r2, #6
 8011a08:	ea0e 0101 	and.w	r1, lr, r1
 8011a0c:	4090      	lsls	r0, r2
 8011a0e:	3501      	adds	r5, #1
 8011a10:	ea41 0200 	orr.w	r2, r1, r0
 8011a14:	7022      	strb	r2, [r4, #0]
 8011a16:	f025 0203 	bic.w	r2, r5, #3
 8011a1a:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 8011a1e:	f10b 0b01 	add.w	fp, fp, #1
 8011a22:	4115      	asrs	r5, r2
 8011a24:	e7e1      	b.n	80119ea <LCD_ReadRectEx+0xe2>
 8011a26:	45c3      	cmp	fp, r8
 8011a28:	dc38      	bgt.n	8011a9c <LCD_ReadRectEx+0x194>
 8011a2a:	4659      	mov	r1, fp
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a30:	9305      	str	r3, [sp, #20]
 8011a32:	47c8      	blx	r9
 8011a34:	9b05      	ldr	r3, [sp, #20]
 8011a36:	f894 e000 	ldrb.w	lr, [r4]
 8011a3a:	00aa      	lsls	r2, r5, #2
 8011a3c:	fa03 f102 	lsl.w	r1, r3, r2
 8011a40:	f1c2 0204 	rsb	r2, r2, #4
 8011a44:	ea0e 0101 	and.w	r1, lr, r1
 8011a48:	4090      	lsls	r0, r2
 8011a4a:	ea41 0200 	orr.w	r2, r1, r0
 8011a4e:	7022      	strb	r2, [r4, #0]
 8011a50:	f10b 0b01 	add.w	fp, fp, #1
 8011a54:	442c      	add	r4, r5
 8011a56:	f085 0501 	eor.w	r5, r5, #1
 8011a5a:	e7e4      	b.n	8011a26 <LCD_ReadRectEx+0x11e>
 8011a5c:	eb04 010b 	add.w	r1, r4, fp
 8011a60:	4588      	cmp	r8, r1
 8011a62:	db1b      	blt.n	8011a9c <LCD_ReadRectEx+0x194>
 8011a64:	4632      	mov	r2, r6
 8011a66:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a68:	47c8      	blx	r9
 8011a6a:	f804 0b01 	strb.w	r0, [r4], #1
 8011a6e:	e7f5      	b.n	8011a5c <LCD_ReadRectEx+0x154>
 8011a70:	45c3      	cmp	fp, r8
 8011a72:	dc13      	bgt.n	8011a9c <LCD_ReadRectEx+0x194>
 8011a74:	4659      	mov	r1, fp
 8011a76:	4632      	mov	r2, r6
 8011a78:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a7a:	47c8      	blx	r9
 8011a7c:	f10b 0b01 	add.w	fp, fp, #1
 8011a80:	f824 0b02 	strh.w	r0, [r4], #2
 8011a84:	e7f4      	b.n	8011a70 <LCD_ReadRectEx+0x168>
 8011a86:	45c3      	cmp	fp, r8
 8011a88:	dc08      	bgt.n	8011a9c <LCD_ReadRectEx+0x194>
 8011a8a:	4659      	mov	r1, fp
 8011a8c:	4632      	mov	r2, r6
 8011a8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a90:	47c8      	blx	r9
 8011a92:	f10b 0b01 	add.w	fp, fp, #1
 8011a96:	f844 0b04 	str.w	r0, [r4], #4
 8011a9a:	e7f4      	b.n	8011a86 <LCD_ReadRectEx+0x17e>
 8011a9c:	3601      	adds	r6, #1
 8011a9e:	e763      	b.n	8011968 <LCD_ReadRectEx+0x60>
 8011aa0:	b007      	add	sp, #28
 8011aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa6:	bf00      	nop
 8011aa8:	20000014 	.word	0x20000014

08011aac <GUI_ReadRectEx>:
 8011aac:	b4f0      	push	{r4, r5, r6, r7}
 8011aae:	4d16      	ldr	r5, [pc, #88]	; (8011b08 <GUI_ReadRectEx+0x5c>)
 8011ab0:	9e04      	ldr	r6, [sp, #16]
 8011ab2:	682d      	ldr	r5, [r5, #0]
 8011ab4:	9c05      	ldr	r4, [sp, #20]
 8011ab6:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8011aba:	42b8      	cmp	r0, r7
 8011abc:	bfb8      	it	lt
 8011abe:	4638      	movlt	r0, r7
 8011ac0:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8011ac4:	42ba      	cmp	r2, r7
 8011ac6:	bfa8      	it	ge
 8011ac8:	463a      	movge	r2, r7
 8011aca:	4290      	cmp	r0, r2
 8011acc:	dc1a      	bgt.n	8011b04 <GUI_ReadRectEx+0x58>
 8011ace:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8011ad2:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8011ad6:	42b9      	cmp	r1, r7
 8011ad8:	bfb8      	it	lt
 8011ada:	4639      	movlt	r1, r7
 8011adc:	42ab      	cmp	r3, r5
 8011ade:	bfa8      	it	ge
 8011ae0:	462b      	movge	r3, r5
 8011ae2:	428b      	cmp	r3, r1
 8011ae4:	db0e      	blt.n	8011b04 <GUI_ReadRectEx+0x58>
 8011ae6:	68e5      	ldr	r5, [r4, #12]
 8011ae8:	682d      	ldr	r5, [r5, #0]
 8011aea:	f035 0504 	bics.w	r5, r5, #4
 8011aee:	d104      	bne.n	8011afa <GUI_ReadRectEx+0x4e>
 8011af0:	9405      	str	r4, [sp, #20]
 8011af2:	9604      	str	r6, [sp, #16]
 8011af4:	bcf0      	pop	{r4, r5, r6, r7}
 8011af6:	f7ff bf07 	b.w	8011908 <LCD_ReadRectEx>
 8011afa:	6825      	ldr	r5, [r4, #0]
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	d0f7      	beq.n	8011af0 <GUI_ReadRectEx+0x44>
 8011b00:	462c      	mov	r4, r5
 8011b02:	e7f0      	b.n	8011ae6 <GUI_ReadRectEx+0x3a>
 8011b04:	bcf0      	pop	{r4, r5, r6, r7}
 8011b06:	4770      	bx	lr
 8011b08:	20000014 	.word	0x20000014

08011b0c <LCD_SetClipRectEx>:
 8011b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b0e:	4c09      	ldr	r4, [pc, #36]	; (8011b34 <LCD_SetClipRectEx+0x28>)
 8011b10:	6823      	ldr	r3, [r4, #0]
 8011b12:	7c5a      	ldrb	r2, [r3, #17]
 8011b14:	4b08      	ldr	r3, [pc, #32]	; (8011b38 <LCD_SetClipRectEx+0x2c>)
 8011b16:	4605      	mov	r5, r0
 8011b18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011b1c:	68c3      	ldr	r3, [r0, #12]
 8011b1e:	4669      	mov	r1, sp
 8011b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b22:	4798      	blx	r3
 8011b24:	6820      	ldr	r0, [r4, #0]
 8011b26:	466a      	mov	r2, sp
 8011b28:	4629      	mov	r1, r5
 8011b2a:	3008      	adds	r0, #8
 8011b2c:	f7fa f8bf 	bl	800bcae <GUI__IntersectRects>
 8011b30:	b003      	add	sp, #12
 8011b32:	bd30      	pop	{r4, r5, pc}
 8011b34:	20000014 	.word	0x20000014
 8011b38:	2001e6e8 	.word	0x2001e6e8

08011b3c <GUI_MEMDEV__WriteToActiveAt>:
 8011b3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011b40:	460f      	mov	r7, r1
 8011b42:	4690      	mov	r8, r2
 8011b44:	4606      	mov	r6, r0
 8011b46:	f7f9 f99b 	bl	800ae80 <GUI_ALLOC_LockH>
 8011b4a:	6803      	ldr	r3, [r0, #0]
 8011b4c:	ac02      	add	r4, sp, #8
 8011b4e:	68db      	ldr	r3, [r3, #12]
 8011b50:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b56:	2116      	movs	r1, #22
 8011b58:	2000      	movs	r0, #0
 8011b5a:	4798      	blx	r3
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f7f9 f99c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011b64:	b11d      	cbz	r5, 8011b6e <GUI_MEMDEV__WriteToActiveAt+0x32>
 8011b66:	4642      	mov	r2, r8
 8011b68:	4639      	mov	r1, r7
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	47a8      	blx	r5
 8011b6e:	b002      	add	sp, #8
 8011b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b74 <GUI_MEMDEV__CreateFixed>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	4d46      	ldr	r5, [pc, #280]	; (8011c94 <GUI_MEMDEV__CreateFixed+0x120>)
 8011b7a:	b087      	sub	sp, #28
 8011b7c:	461c      	mov	r4, r3
 8011b7e:	682b      	ldr	r3, [r5, #0]
 8011b80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011b82:	7c5b      	ldrb	r3, [r3, #17]
 8011b84:	4681      	mov	r9, r0
 8011b86:	468a      	mov	sl, r1
 8011b88:	4690      	mov	r8, r2
 8011b8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011b8c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011b8e:	2200      	movs	r2, #0
 8011b90:	f7f9 fe5a 	bl	800b848 <GUI_DEVICE_Create>
 8011b94:	9503      	str	r5, [sp, #12]
 8011b96:	4606      	mov	r6, r0
 8011b98:	b380      	cbz	r0, 8011bfc <GUI_MEMDEV__CreateFixed+0x88>
 8011b9a:	6903      	ldr	r3, [r0, #16]
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	4798      	blx	r3
 8011ba0:	f7fa fdd5 	bl	800c74e <LCD__GetBPPDevice>
 8011ba4:	fb00 f508 	mul.w	r5, r0, r8
 8011ba8:	9002      	str	r0, [sp, #8]
 8011baa:	f7f9 fa9d 	bl	800b0e8 <GUI_ALLOC_RequestSize>
 8011bae:	f017 0701 	ands.w	r7, r7, #1
 8011bb2:	bf08      	it	eq
 8011bb4:	2304      	moveq	r3, #4
 8011bb6:	f105 0507 	add.w	r5, r5, #7
 8011bba:	bf04      	itt	eq
 8011bbc:	fb90 f0f3 	sdiveq	r0, r0, r3
 8011bc0:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 8011bc4:	2c00      	cmp	r4, #0
 8011bc6:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 8011bca:	dc44      	bgt.n	8011c56 <GUI_MEMDEV__CreateFixed+0xe2>
 8011bcc:	b11d      	cbz	r5, 8011bd6 <GUI_MEMDEV__CreateFixed+0x62>
 8011bce:	3818      	subs	r0, #24
 8011bd0:	fbb0 f0f5 	udiv	r0, r0, r5
 8011bd4:	e000      	b.n	8011bd8 <GUI_MEMDEV__CreateFixed+0x64>
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	4264      	negs	r4, r4
 8011bda:	4284      	cmp	r4, r0
 8011bdc:	bfa8      	it	ge
 8011bde:	4604      	movge	r4, r0
 8011be0:	b977      	cbnz	r7, 8011c00 <GUI_MEMDEV__CreateFixed+0x8c>
 8011be2:	9700      	str	r7, [sp, #0]
 8011be4:	4623      	mov	r3, r4
 8011be6:	4642      	mov	r2, r8
 8011be8:	4651      	mov	r1, sl
 8011bea:	4648      	mov	r0, r9
 8011bec:	f000 fbe6 	bl	80123bc <GUI_USAGE_BM_Create>
 8011bf0:	2c00      	cmp	r4, #0
 8011bf2:	4683      	mov	fp, r0
 8011bf4:	dc39      	bgt.n	8011c6a <GUI_MEMDEV__CreateFixed+0xf6>
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f7f9 fe24 	bl	800b844 <GUI_DEVICE_Delete>
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	e046      	b.n	8011c8e <GUI_MEMDEV__CreateFixed+0x11a>
 8011c00:	2c00      	cmp	r4, #0
 8011c02:	ddf8      	ble.n	8011bf6 <GUI_MEMDEV__CreateFixed+0x82>
 8011c04:	fb05 f004 	mul.w	r0, r5, r4
 8011c08:	3018      	adds	r0, #24
 8011c0a:	f7f9 fafb 	bl	800b204 <GUI_ALLOC_AllocNoInit>
 8011c0e:	4607      	mov	r7, r0
 8011c10:	2800      	cmp	r0, #0
 8011c12:	d0f0      	beq.n	8011bf6 <GUI_MEMDEV__CreateFixed+0x82>
 8011c14:	f04f 0b00 	mov.w	fp, #0
 8011c18:	4638      	mov	r0, r7
 8011c1a:	f7f9 f931 	bl	800ae80 <GUI_ALLOC_LockH>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	a806      	add	r0, sp, #24
 8011c22:	9a02      	ldr	r2, [sp, #8]
 8011c24:	f840 3d04 	str.w	r3, [r0, #-4]!
 8011c28:	f8a3 9004 	strh.w	r9, [r3, #4]
 8011c2c:	601e      	str	r6, [r3, #0]
 8011c2e:	f8a3 a006 	strh.w	sl, [r3, #6]
 8011c32:	f8a3 8008 	strh.w	r8, [r3, #8]
 8011c36:	815c      	strh	r4, [r3, #10]
 8011c38:	60dd      	str	r5, [r3, #12]
 8011c3a:	611a      	str	r2, [r3, #16]
 8011c3c:	f8c3 b014 	str.w	fp, [r3, #20]
 8011c40:	f7f9 f92c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c46:	6133      	str	r3, [r6, #16]
 8011c48:	9b03      	ldr	r3, [sp, #12]
 8011c4a:	60b7      	str	r7, [r6, #8]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	7c5b      	ldrb	r3, [r3, #17]
 8011c50:	61b3      	str	r3, [r6, #24]
 8011c52:	4638      	mov	r0, r7
 8011c54:	e01b      	b.n	8011c8e <GUI_MEMDEV__CreateFixed+0x11a>
 8011c56:	2f00      	cmp	r7, #0
 8011c58:	d1d4      	bne.n	8011c04 <GUI_MEMDEV__CreateFixed+0x90>
 8011c5a:	9700      	str	r7, [sp, #0]
 8011c5c:	4623      	mov	r3, r4
 8011c5e:	4642      	mov	r2, r8
 8011c60:	4651      	mov	r1, sl
 8011c62:	4648      	mov	r0, r9
 8011c64:	f000 fbaa 	bl	80123bc <GUI_USAGE_BM_Create>
 8011c68:	4683      	mov	fp, r0
 8011c6a:	fb05 f004 	mul.w	r0, r5, r4
 8011c6e:	3018      	adds	r0, #24
 8011c70:	f7f9 facc 	bl	800b20c <GUI_ALLOC_AllocZero>
 8011c74:	4607      	mov	r7, r0
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d1ce      	bne.n	8011c18 <GUI_MEMDEV__CreateFixed+0xa4>
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7f9 fde2 	bl	800b844 <GUI_DEVICE_Delete>
 8011c80:	f1bb 0f00 	cmp.w	fp, #0
 8011c84:	d0ba      	beq.n	8011bfc <GUI_MEMDEV__CreateFixed+0x88>
 8011c86:	4658      	mov	r0, fp
 8011c88:	f7f9 f928 	bl	800aedc <GUI_ALLOC_Free>
 8011c8c:	e7e1      	b.n	8011c52 <GUI_MEMDEV__CreateFixed+0xde>
 8011c8e:	b007      	add	sp, #28
 8011c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c94:	20000014 	.word	0x20000014

08011c98 <GUI_MEMDEV_GetBitsPerPixel>:
 8011c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	b170      	cbz	r0, 8011cbc <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8011c9e:	f7f9 f8ef 	bl	800ae80 <GUI_ALLOC_LockH>
 8011ca2:	6803      	ldr	r3, [r0, #0]
 8011ca4:	ad02      	add	r5, sp, #8
 8011ca6:	691b      	ldr	r3, [r3, #16]
 8011ca8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	4798      	blx	r3
 8011cb0:	f7fa fd4d 	bl	800c74e <LCD__GetBPPDevice>
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f7f9 f8f0 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	b003      	add	sp, #12
 8011cc0:	bd30      	pop	{r4, r5, pc}
	...

08011cc4 <GUI_MEMDEV_Delete>:
 8011cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	b1d0      	cbz	r0, 8011d00 <GUI_MEMDEV_Delete+0x3c>
 8011cca:	4b0e      	ldr	r3, [pc, #56]	; (8011d04 <GUI_MEMDEV_Delete+0x40>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cd0:	4298      	cmp	r0, r3
 8011cd2:	d101      	bne.n	8011cd8 <GUI_MEMDEV_Delete+0x14>
 8011cd4:	f7f9 fba8 	bl	800b428 <GUI_SelectLCD>
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f7f9 f8d1 	bl	800ae80 <GUI_ALLOC_LockH>
 8011cde:	9001      	str	r0, [sp, #4]
 8011ce0:	6940      	ldr	r0, [r0, #20]
 8011ce2:	b108      	cbz	r0, 8011ce8 <GUI_MEMDEV_Delete+0x24>
 8011ce4:	f7fc fb48 	bl	800e378 <GUI_USAGE_DecUseCnt>
 8011ce8:	ad02      	add	r5, sp, #8
 8011cea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011cee:	6818      	ldr	r0, [r3, #0]
 8011cf0:	f7f9 fda8 	bl	800b844 <GUI_DEVICE_Delete>
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f7f9 f8d1 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f7f9 f8ee 	bl	800aedc <GUI_ALLOC_Free>
 8011d00:	b003      	add	sp, #12
 8011d02:	bd30      	pop	{r4, r5, pc}
 8011d04:	20000014 	.word	0x20000014

08011d08 <GUI_MEMDEV_CreateEx>:
 8011d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d0c:	4699      	mov	r9, r3
 8011d0e:	4b19      	ldr	r3, [pc, #100]	; (8011d74 <GUI_MEMDEV_CreateEx+0x6c>)
 8011d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4606      	mov	r6, r0
 8011d16:	7c58      	ldrb	r0, [r3, #17]
 8011d18:	4b17      	ldr	r3, [pc, #92]	; (8011d78 <GUI_MEMDEV_CreateEx+0x70>)
 8011d1a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8011d1e:	460f      	mov	r7, r1
 8011d20:	4690      	mov	r8, r2
 8011d22:	68e3      	ldr	r3, [r4, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2b04      	cmp	r3, #4
 8011d28:	d006      	beq.n	8011d38 <GUI_MEMDEV_CreateEx+0x30>
 8011d2a:	6824      	ldr	r4, [r4, #0]
 8011d2c:	2c00      	cmp	r4, #0
 8011d2e:	d1f8      	bne.n	8011d22 <GUI_MEMDEV_CreateEx+0x1a>
 8011d30:	f7f9 fd78 	bl	800b824 <GUI_DEVICE__GetpDriver>
 8011d34:	4604      	mov	r4, r0
 8011d36:	b130      	cbz	r0, 8011d46 <GUI_MEMDEV_CreateEx+0x3e>
 8011d38:	68e3      	ldr	r3, [r4, #12]
 8011d3a:	2101      	movs	r1, #1
 8011d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3e:	4620      	mov	r0, r4
 8011d40:	4798      	blx	r3
 8011d42:	4682      	mov	sl, r0
 8011d44:	b908      	cbnz	r0, 8011d4a <GUI_MEMDEV_CreateEx+0x42>
 8011d46:	2000      	movs	r0, #0
 8011d48:	e010      	b.n	8011d6c <GUI_MEMDEV_CreateEx+0x64>
 8011d4a:	6924      	ldr	r4, [r4, #16]
 8011d4c:	68a3      	ldr	r3, [r4, #8]
 8011d4e:	4798      	blx	r3
 8011d50:	3001      	adds	r0, #1
 8011d52:	bf04      	itt	eq
 8011d54:	f045 0501 	orreq.w	r5, r5, #1
 8011d58:	4c08      	ldreq	r4, [pc, #32]	; (8011d7c <GUI_MEMDEV_CreateEx+0x74>)
 8011d5a:	9402      	str	r4, [sp, #8]
 8011d5c:	e88d 0420 	stmia.w	sp, {r5, sl}
 8011d60:	464b      	mov	r3, r9
 8011d62:	4642      	mov	r2, r8
 8011d64:	4639      	mov	r1, r7
 8011d66:	4630      	mov	r0, r6
 8011d68:	f7ff ff04 	bl	8011b74 <GUI_MEMDEV__CreateFixed>
 8011d6c:	b004      	add	sp, #16
 8011d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d72:	bf00      	nop
 8011d74:	20000014 	.word	0x20000014
 8011d78:	2001e6e8 	.word	0x2001e6e8
 8011d7c:	0801aa08 	.word	0x0801aa08

08011d80 <GUI_MEMDEV_Select>:
 8011d80:	4b11      	ldr	r3, [pc, #68]	; (8011dc8 <GUI_MEMDEV_Select+0x48>)
 8011d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d84:	681a      	ldr	r2, [r3, #0]
 8011d86:	4606      	mov	r6, r0
 8011d88:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8011d8a:	461c      	mov	r4, r3
 8011d8c:	b910      	cbnz	r0, 8011d94 <GUI_MEMDEV_Select+0x14>
 8011d8e:	f7f9 fb4b 	bl	800b428 <GUI_SelectLCD>
 8011d92:	e016      	b.n	8011dc2 <GUI_MEMDEV_Select+0x42>
 8011d94:	b10f      	cbz	r7, 8011d9a <GUI_MEMDEV_Select+0x1a>
 8011d96:	f7f9 fb47 	bl	800b428 <GUI_SelectLCD>
 8011d9a:	f7fd fff9 	bl	800fd90 <WM_Deactivate>
 8011d9e:	4630      	mov	r0, r6
 8011da0:	f7f9 f86e 	bl	800ae80 <GUI_ALLOC_LockH>
 8011da4:	ad02      	add	r5, sp, #8
 8011da6:	6823      	ldr	r3, [r4, #0]
 8011da8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011dac:	661e      	str	r6, [r3, #96]	; 0x60
 8011dae:	6800      	ldr	r0, [r0, #0]
 8011db0:	f7f9 fd88 	bl	800b8c4 <GUI_DEVICE_Link>
 8011db4:	4628      	mov	r0, r5
 8011db6:	f7f9 f871 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011dba:	f7fa fd55 	bl	800c868 <LCD_UpdateColorIndices>
 8011dbe:	f7fa fa6f 	bl	800c2a0 <LCD_SetClipRectMax>
 8011dc2:	4638      	mov	r0, r7
 8011dc4:	b003      	add	sp, #12
 8011dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dc8:	20000014 	.word	0x20000014

08011dcc <GUI_MEMDEV_CopyToLCDAt>:
 8011dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	4615      	mov	r5, r2
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d041      	beq.n	8011e60 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	f7f9 fb30 	bl	800b442 <GUI_SetDrawMode>
 8011de2:	4b21      	ldr	r3, [pc, #132]	; (8011e68 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4607      	mov	r7, r0
 8011de8:	4630      	mov	r0, r6
 8011dea:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8011dee:	f7f9 f847 	bl	800ae80 <GUI_ALLOC_LockH>
 8011df2:	6803      	ldr	r3, [r0, #0]
 8011df4:	9001      	str	r0, [sp, #4]
 8011df6:	6998      	ldr	r0, [r3, #24]
 8011df8:	f7fe fe86 	bl	8010b08 <GUI_SelectLayer>
 8011dfc:	9a01      	ldr	r2, [sp, #4]
 8011dfe:	4b1b      	ldr	r3, [pc, #108]	; (8011e6c <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 8011e00:	429c      	cmp	r4, r3
 8011e02:	8913      	ldrh	r3, [r2, #8]
 8011e04:	bf04      	itt	eq
 8011e06:	f9b2 4004 	ldrsheq.w	r4, [r2, #4]
 8011e0a:	f9b2 5006 	ldrsheq.w	r5, [r2, #6]
 8011e0e:	f8ad 4008 	strh.w	r4, [sp, #8]
 8011e12:	3b01      	subs	r3, #1
 8011e14:	4423      	add	r3, r4
 8011e16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011e1a:	8953      	ldrh	r3, [r2, #10]
 8011e1c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8011e20:	3b01      	subs	r3, #1
 8011e22:	442b      	add	r3, r5
 8011e24:	4681      	mov	r9, r0
 8011e26:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011e2a:	f7fd ffa9 	bl	800fd80 <WM_Activate>
 8011e2e:	a801      	add	r0, sp, #4
 8011e30:	f7f9 f834 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011e34:	a802      	add	r0, sp, #8
 8011e36:	f7fd fdf3 	bl	800fa20 <WM__InitIVRSearch>
 8011e3a:	b948      	cbnz	r0, 8011e50 <GUI_MEMDEV_CopyToLCDAt+0x84>
 8011e3c:	4648      	mov	r0, r9
 8011e3e:	f7fe fe63 	bl	8010b08 <GUI_SelectLayer>
 8011e42:	4640      	mov	r0, r8
 8011e44:	f7ff ff9c 	bl	8011d80 <GUI_MEMDEV_Select>
 8011e48:	4638      	mov	r0, r7
 8011e4a:	f7f9 fafa 	bl	800b442 <GUI_SetDrawMode>
 8011e4e:	e007      	b.n	8011e60 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8011e50:	462a      	mov	r2, r5
 8011e52:	4621      	mov	r1, r4
 8011e54:	4630      	mov	r0, r6
 8011e56:	f7fc faf7 	bl	800e448 <GUI_MEMDEV__WriteToActiveOpaque>
 8011e5a:	f7fd fd1f 	bl	800f89c <WM__GetNextIVR>
 8011e5e:	e7ec      	b.n	8011e3a <GUI_MEMDEV_CopyToLCDAt+0x6e>
 8011e60:	b005      	add	sp, #20
 8011e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e66:	bf00      	nop
 8011e68:	20000014 	.word	0x20000014
 8011e6c:	fffff001 	.word	0xfffff001

08011e70 <GUI_MEMDEV_CopyToLCD>:
 8011e70:	4a01      	ldr	r2, [pc, #4]	; (8011e78 <GUI_MEMDEV_CopyToLCD+0x8>)
 8011e72:	4611      	mov	r1, r2
 8011e74:	f7ff bfaa 	b.w	8011dcc <GUI_MEMDEV_CopyToLCDAt>
 8011e78:	fffff001 	.word	0xfffff001

08011e7c <GUI_MEMDEV_Draw>:
 8011e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e80:	4698      	mov	r8, r3
 8011e82:	b087      	sub	sp, #28
 8011e84:	4b51      	ldr	r3, [pc, #324]	; (8011fcc <GUI_MEMDEV_Draw+0x150>)
 8011e86:	9203      	str	r2, [sp, #12]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	9102      	str	r1, [sp, #8]
 8011e8c:	7c54      	ldrb	r4, [r2, #17]
 8011e8e:	4a50      	ldr	r2, [pc, #320]	; (8011fd0 <GUI_MEMDEV_Draw+0x154>)
 8011e90:	5712      	ldrsb	r2, [r2, r4]
 8011e92:	2a01      	cmp	r2, #1
 8011e94:	4606      	mov	r6, r0
 8011e96:	469b      	mov	fp, r3
 8011e98:	4620      	mov	r0, r4
 8011e9a:	dd06      	ble.n	8011eaa <GUI_MEMDEV_Draw+0x2e>
 8011e9c:	f7fa fb98 	bl	800c5d0 <LCD_GetXSizeEx>
 8011ea0:	4681      	mov	r9, r0
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f7fa fb97 	bl	800c5d6 <LCD_GetYSizeEx>
 8011ea8:	e005      	b.n	8011eb6 <GUI_MEMDEV_Draw+0x3a>
 8011eaa:	f7fa fb97 	bl	800c5dc <LCD_GetVXSizeEx>
 8011eae:	4681      	mov	r9, r0
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f7fa fb96 	bl	800c5e2 <LCD_GetVYSizeEx>
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	b336      	cbz	r6, 8011f08 <GUI_MEMDEV_Draw+0x8c>
 8011eba:	a905      	add	r1, sp, #20
 8011ebc:	a804      	add	r0, sp, #16
 8011ebe:	f7f9 f9f1 	bl	800b2a4 <GUI_GetOrg>
 8011ec2:	9a04      	ldr	r2, [sp, #16]
 8011ec4:	9b05      	ldr	r3, [sp, #20]
 8011ec6:	f9b6 7000 	ldrsh.w	r7, [r6]
 8011eca:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 8011ece:	4491      	add	r9, r2
 8011ed0:	f109 32ff 	add.w	r2, r9, #4294967295
 8011ed4:	441c      	add	r4, r3
 8011ed6:	f9b6 9004 	ldrsh.w	r9, [r6, #4]
 8011eda:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011ede:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8011ee2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011ee6:	3c01      	subs	r4, #1
 8011ee8:	454a      	cmp	r2, r9
 8011eea:	bfd4      	ite	le
 8011eec:	ebc7 0902 	rsble	r9, r7, r2
 8011ef0:	ebc7 0909 	rsbgt	r9, r7, r9
 8011ef4:	429c      	cmp	r4, r3
 8011ef6:	bfd4      	ite	le
 8011ef8:	ebc5 0404 	rsble	r4, r5, r4
 8011efc:	ebc5 0403 	rsbgt	r4, r5, r3
 8011f00:	f109 0901 	add.w	r9, r9, #1
 8011f04:	3401      	adds	r4, #1
 8011f06:	e001      	b.n	8011f0c <GUI_MEMDEV_Draw+0x90>
 8011f08:	4635      	mov	r5, r6
 8011f0a:	4637      	mov	r7, r6
 8011f0c:	f1b8 0f00 	cmp.w	r8, #0
 8011f10:	d101      	bne.n	8011f16 <GUI_MEMDEV_Draw+0x9a>
 8011f12:	f1c4 0800 	rsb	r8, r4, #0
 8011f16:	f1b9 0f00 	cmp.w	r9, #0
 8011f1a:	dd53      	ble.n	8011fc4 <GUI_MEMDEV_Draw+0x148>
 8011f1c:	2c00      	cmp	r4, #0
 8011f1e:	dd51      	ble.n	8011fc4 <GUI_MEMDEV_Draw+0x148>
 8011f20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f22:	9300      	str	r3, [sp, #0]
 8011f24:	464a      	mov	r2, r9
 8011f26:	4643      	mov	r3, r8
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	f7ff feec 	bl	8011d08 <GUI_MEMDEV_CreateEx>
 8011f30:	4606      	mov	r6, r0
 8011f32:	b920      	cbnz	r0, 8011f3e <GUI_MEMDEV_Draw+0xc2>
 8011f34:	9803      	ldr	r0, [sp, #12]
 8011f36:	9b02      	ldr	r3, [sp, #8]
 8011f38:	4798      	blx	r3
 8011f3a:	2001      	movs	r0, #1
 8011f3c:	e043      	b.n	8011fc6 <GUI_MEMDEV_Draw+0x14a>
 8011f3e:	f000 f87b 	bl	8012038 <GUI_MEMDEV_GetYSize>
 8011f42:	4284      	cmp	r4, r0
 8011f44:	4680      	mov	r8, r0
 8011f46:	d006      	beq.n	8011f56 <GUI_MEMDEV_Draw+0xda>
 8011f48:	f8db 3000 	ldr.w	r3, [fp]
 8011f4c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011f4e:	b110      	cbz	r0, 8011f56 <GUI_MEMDEV_Draw+0xda>
 8011f50:	2132      	movs	r1, #50	; 0x32
 8011f52:	f7fe fa35 	bl	80103c0 <WM__SendMessageNoPara>
 8011f56:	4630      	mov	r0, r6
 8011f58:	f7ff ff12 	bl	8011d80 <GUI_MEMDEV_Select>
 8011f5c:	46a2      	mov	sl, r4
 8011f5e:	f04f 0900 	mov.w	r9, #0
 8011f62:	45d0      	cmp	r8, sl
 8011f64:	dd03      	ble.n	8011f6e <GUI_MEMDEV_Draw+0xf2>
 8011f66:	4651      	mov	r1, sl
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f000 f87d 	bl	8012068 <GUI_MEMDEV_ReduceYSize>
 8011f6e:	f1b9 0f00 	cmp.w	r9, #0
 8011f72:	d008      	beq.n	8011f86 <GUI_MEMDEV_Draw+0x10a>
 8011f74:	4630      	mov	r0, r6
 8011f76:	eb09 0205 	add.w	r2, r9, r5
 8011f7a:	4639      	mov	r1, r7
 8011f7c:	f000 f88a 	bl	8012094 <GUI_MEMDEV_SetOrg>
 8011f80:	4630      	mov	r0, r6
 8011f82:	f000 f829 	bl	8011fd8 <GUI_MEMDEV_Clear>
 8011f86:	9b02      	ldr	r3, [sp, #8]
 8011f88:	9803      	ldr	r0, [sp, #12]
 8011f8a:	4798      	blx	r3
 8011f8c:	4b11      	ldr	r3, [pc, #68]	; (8011fd4 <GUI_MEMDEV_Draw+0x158>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	b10b      	cbz	r3, 8011f96 <GUI_MEMDEV_Draw+0x11a>
 8011f92:	2000      	movs	r0, #0
 8011f94:	4798      	blx	r3
 8011f96:	4630      	mov	r0, r6
 8011f98:	44c1      	add	r9, r8
 8011f9a:	f7ff ff69 	bl	8011e70 <GUI_MEMDEV_CopyToLCD>
 8011f9e:	454c      	cmp	r4, r9
 8011fa0:	ebc8 0a0a 	rsb	sl, r8, sl
 8011fa4:	dcdd      	bgt.n	8011f62 <GUI_MEMDEV_Draw+0xe6>
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f7ff fe8c 	bl	8011cc4 <GUI_MEMDEV_Delete>
 8011fac:	2000      	movs	r0, #0
 8011fae:	f7ff fee7 	bl	8011d80 <GUI_MEMDEV_Select>
 8011fb2:	4544      	cmp	r4, r8
 8011fb4:	d006      	beq.n	8011fc4 <GUI_MEMDEV_Draw+0x148>
 8011fb6:	f8db 3000 	ldr.w	r3, [fp]
 8011fba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011fbc:	b110      	cbz	r0, 8011fc4 <GUI_MEMDEV_Draw+0x148>
 8011fbe:	2133      	movs	r1, #51	; 0x33
 8011fc0:	f7fe f9fe 	bl	80103c0 <WM__SendMessageNoPara>
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	b007      	add	sp, #28
 8011fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fcc:	20000014 	.word	0x20000014
 8011fd0:	2001e698 	.word	0x2001e698
 8011fd4:	200004a0 	.word	0x200004a0

08011fd8 <GUI_MEMDEV_Clear>:
 8011fd8:	b513      	push	{r0, r1, r4, lr}
 8011fda:	b918      	cbnz	r0, 8011fe4 <GUI_MEMDEV_Clear+0xc>
 8011fdc:	4b0d      	ldr	r3, [pc, #52]	; (8012014 <GUI_MEMDEV_Clear+0x3c>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011fe2:	b1a8      	cbz	r0, 8012010 <GUI_MEMDEV_Clear+0x38>
 8011fe4:	f7f8 ff4c 	bl	800ae80 <GUI_ALLOC_LockH>
 8011fe8:	ab02      	add	r3, sp, #8
 8011fea:	6944      	ldr	r4, [r0, #20]
 8011fec:	f843 0d08 	str.w	r0, [r3, #-8]!
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7f8 ff53 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8011ff6:	b15c      	cbz	r4, 8012010 <GUI_MEMDEV_Clear+0x38>
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f7f8 ff41 	bl	800ae80 <GUI_ALLOC_LockH>
 8011ffe:	ac02      	add	r4, sp, #8
 8012000:	6883      	ldr	r3, [r0, #8]
 8012002:	f844 0d04 	str.w	r0, [r4, #-4]!
 8012006:	689b      	ldr	r3, [r3, #8]
 8012008:	4798      	blx	r3
 801200a:	4620      	mov	r0, r4
 801200c:	f7f8 ff46 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012010:	b002      	add	sp, #8
 8012012:	bd10      	pop	{r4, pc}
 8012014:	20000014 	.word	0x20000014

08012018 <GUI_MEMDEV_GetDataPtr>:
 8012018:	b513      	push	{r0, r1, r4, lr}
 801201a:	b158      	cbz	r0, 8012034 <GUI_MEMDEV_GetDataPtr+0x1c>
 801201c:	f7f8 ff30 	bl	800ae80 <GUI_ALLOC_LockH>
 8012020:	ab02      	add	r3, sp, #8
 8012022:	f100 0418 	add.w	r4, r0, #24
 8012026:	f843 0d04 	str.w	r0, [r3, #-4]!
 801202a:	4618      	mov	r0, r3
 801202c:	f7f8 ff36 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012030:	4620      	mov	r0, r4
 8012032:	e7ff      	b.n	8012034 <GUI_MEMDEV_GetDataPtr+0x1c>
 8012034:	b002      	add	sp, #8
 8012036:	bd10      	pop	{r4, pc}

08012038 <GUI_MEMDEV_GetYSize>:
 8012038:	b513      	push	{r0, r1, r4, lr}
 801203a:	b918      	cbnz	r0, 8012044 <GUI_MEMDEV_GetYSize+0xc>
 801203c:	4b09      	ldr	r3, [pc, #36]	; (8012064 <GUI_MEMDEV_GetYSize+0x2c>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012042:	b150      	cbz	r0, 801205a <GUI_MEMDEV_GetYSize+0x22>
 8012044:	f7f8 ff1c 	bl	800ae80 <GUI_ALLOC_LockH>
 8012048:	ab02      	add	r3, sp, #8
 801204a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801204e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012052:	4618      	mov	r0, r3
 8012054:	f7f8 ff22 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012058:	e000      	b.n	801205c <GUI_MEMDEV_GetYSize+0x24>
 801205a:	4604      	mov	r4, r0
 801205c:	4620      	mov	r0, r4
 801205e:	b002      	add	sp, #8
 8012060:	bd10      	pop	{r4, pc}
 8012062:	bf00      	nop
 8012064:	20000014 	.word	0x20000014

08012068 <GUI_MEMDEV_ReduceYSize>:
 8012068:	b513      	push	{r0, r1, r4, lr}
 801206a:	460c      	mov	r4, r1
 801206c:	b918      	cbnz	r0, 8012076 <GUI_MEMDEV_ReduceYSize+0xe>
 801206e:	4b08      	ldr	r3, [pc, #32]	; (8012090 <GUI_MEMDEV_ReduceYSize+0x28>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012074:	b150      	cbz	r0, 801208c <GUI_MEMDEV_ReduceYSize+0x24>
 8012076:	f7f8 ff03 	bl	800ae80 <GUI_ALLOC_LockH>
 801207a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801207e:	9001      	str	r0, [sp, #4]
 8012080:	42a3      	cmp	r3, r4
 8012082:	bfc8      	it	gt
 8012084:	8144      	strhgt	r4, [r0, #10]
 8012086:	a801      	add	r0, sp, #4
 8012088:	f7f8 ff08 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801208c:	b002      	add	sp, #8
 801208e:	bd10      	pop	{r4, pc}
 8012090:	20000014 	.word	0x20000014

08012094 <GUI_MEMDEV_SetOrg>:
 8012094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012096:	460d      	mov	r5, r1
 8012098:	4614      	mov	r4, r2
 801209a:	b918      	cbnz	r0, 80120a4 <GUI_MEMDEV_SetOrg+0x10>
 801209c:	4b12      	ldr	r3, [pc, #72]	; (80120e8 <GUI_MEMDEV_SetOrg+0x54>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80120a2:	b1f8      	cbz	r0, 80120e4 <GUI_MEMDEV_SetOrg+0x50>
 80120a4:	f7f8 feec 	bl	800ae80 <GUI_ALLOC_LockH>
 80120a8:	b224      	sxth	r4, r4
 80120aa:	b22d      	sxth	r5, r5
 80120ac:	80c4      	strh	r4, [r0, #6]
 80120ae:	8085      	strh	r5, [r0, #4]
 80120b0:	9000      	str	r0, [sp, #0]
 80120b2:	f7fa f8f5 	bl	800c2a0 <LCD_SetClipRectMax>
 80120b6:	9b00      	ldr	r3, [sp, #0]
 80120b8:	6958      	ldr	r0, [r3, #20]
 80120ba:	b180      	cbz	r0, 80120de <GUI_MEMDEV_SetOrg+0x4a>
 80120bc:	f7f8 fee0 	bl	800ae80 <GUI_ALLOC_LockH>
 80120c0:	9b00      	ldr	r3, [sp, #0]
 80120c2:	9001      	str	r0, [sp, #4]
 80120c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80120c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80120cc:	8082      	strh	r2, [r0, #4]
 80120ce:	80c3      	strh	r3, [r0, #6]
 80120d0:	b112      	cbz	r2, 80120d8 <GUI_MEMDEV_SetOrg+0x44>
 80120d2:	b10b      	cbz	r3, 80120d8 <GUI_MEMDEV_SetOrg+0x44>
 80120d4:	8005      	strh	r5, [r0, #0]
 80120d6:	8044      	strh	r4, [r0, #2]
 80120d8:	a801      	add	r0, sp, #4
 80120da:	f7f8 fedf 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80120de:	4668      	mov	r0, sp
 80120e0:	f7f8 fedc 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80120e4:	b003      	add	sp, #12
 80120e6:	bd30      	pop	{r4, r5, pc}
 80120e8:	20000014 	.word	0x20000014

080120ec <_CreateStaticDevice>:
 80120ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f0:	b087      	sub	sp, #28
 80120f2:	4607      	mov	r7, r0
 80120f4:	f7f8 fec4 	bl	800ae80 <GUI_ALLOC_LockH>
 80120f8:	f10d 0818 	add.w	r8, sp, #24
 80120fc:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012100:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8012104:	f848 0d04 	str.w	r0, [r8, #-4]!
 8012108:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801210c:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8012110:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8012114:	ebc9 0606 	rsb	r6, r9, r6
 8012118:	4640      	mov	r0, r8
 801211a:	3601      	adds	r6, #1
 801211c:	f7f8 febe 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012120:	ebc5 040b 	rsb	r4, r5, fp
 8012124:	2e00      	cmp	r6, #0
 8012126:	f104 0401 	add.w	r4, r4, #1
 801212a:	dd4c      	ble.n	80121c6 <_CreateStaticDevice+0xda>
 801212c:	2c00      	cmp	r4, #0
 801212e:	dd4a      	ble.n	80121c6 <_CreateStaticDevice+0xda>
 8012130:	f1ba 0f00 	cmp.w	sl, #0
 8012134:	d049      	beq.n	80121ca <_CreateStaticDevice+0xde>
 8012136:	4650      	mov	r0, sl
 8012138:	f7f8 fea2 	bl	800ae80 <GUI_ALLOC_LockH>
 801213c:	ab06      	add	r3, sp, #24
 801213e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8012142:	f843 0d08 	str.w	r0, [r3, #-8]!
 8012146:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 801214a:	4618      	mov	r0, r3
 801214c:	f7f8 fea6 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012150:	454e      	cmp	r6, r9
 8012152:	d101      	bne.n	8012158 <_CreateStaticDevice+0x6c>
 8012154:	42ac      	cmp	r4, r5
 8012156:	d031      	beq.n	80121bc <_CreateStaticDevice+0xd0>
 8012158:	462a      	mov	r2, r5
 801215a:	4649      	mov	r1, r9
 801215c:	4650      	mov	r0, sl
 801215e:	f7ff ff99 	bl	8012094 <GUI_MEMDEV_SetOrg>
 8012162:	e02b      	b.n	80121bc <_CreateStaticDevice+0xd0>
 8012164:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801216a:	6283      	str	r3, [r0, #40]	; 0x28
 801216c:	4640      	mov	r0, r8
 801216e:	f7f8 fe95 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012172:	4628      	mov	r0, r5
 8012174:	f7ff fe04 	bl	8011d80 <GUI_MEMDEV_Select>
 8012178:	4680      	mov	r8, r0
 801217a:	4650      	mov	r0, sl
 801217c:	f000 f994 	bl	80124a8 <GUI__AlphaPreserveTrans>
 8012180:	4628      	mov	r0, r5
 8012182:	f7ff ff49 	bl	8012018 <GUI_MEMDEV_GetDataPtr>
 8012186:	4b2c      	ldr	r3, [pc, #176]	; (8012238 <_CreateStaticDevice+0x14c>)
 8012188:	492c      	ldr	r1, [pc, #176]	; (801223c <_CreateStaticDevice+0x150>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	7809      	ldrb	r1, [r1, #0]
 801218e:	4d2c      	ldr	r5, [pc, #176]	; (8012240 <_CreateStaticDevice+0x154>)
 8012190:	fb04 f206 	mul.w	r2, r4, r6
 8012194:	0092      	lsls	r2, r2, #2
 8012196:	4c2b      	ldr	r4, [pc, #172]	; (8012244 <_CreateStaticDevice+0x158>)
 8012198:	4798      	blx	r3
 801219a:	4638      	mov	r0, r7
 801219c:	6826      	ldr	r6, [r4, #0]
 801219e:	602f      	str	r7, [r5, #0]
 80121a0:	f7fd fee4 	bl	800ff6c <WM_GetWindowOrgX>
 80121a4:	6020      	str	r0, [r4, #0]
 80121a6:	4638      	mov	r0, r7
 80121a8:	f7fd fcc4 	bl	800fb34 <WM__Paint1>
 80121ac:	2000      	movs	r0, #0
 80121ae:	6026      	str	r6, [r4, #0]
 80121b0:	6028      	str	r0, [r5, #0]
 80121b2:	f000 f979 	bl	80124a8 <GUI__AlphaPreserveTrans>
 80121b6:	4640      	mov	r0, r8
 80121b8:	f7ff fde2 	bl	8011d80 <GUI_MEMDEV_Select>
 80121bc:	4638      	mov	r0, r7
 80121be:	f7f8 fe55 	bl	800ae6c <GUI_ALLOC_h2p>
 80121c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80121c4:	e035      	b.n	8012232 <_CreateStaticDevice+0x146>
 80121c6:	2000      	movs	r0, #0
 80121c8:	e033      	b.n	8012232 <_CreateStaticDevice+0x146>
 80121ca:	f7fd febb 	bl	800ff44 <WM_GetDesktopWindow>
 80121ce:	4287      	cmp	r7, r0
 80121d0:	d112      	bne.n	80121f8 <_CreateStaticDevice+0x10c>
 80121d2:	f7fa fa13 	bl	800c5fc <LCD_GetXSize>
 80121d6:	4682      	mov	sl, r0
 80121d8:	f7fa fa18 	bl	800c60c <LCD_GetYSize>
 80121dc:	4556      	cmp	r6, sl
 80121de:	dc02      	bgt.n	80121e6 <_CreateStaticDevice+0xfa>
 80121e0:	4284      	cmp	r4, r0
 80121e2:	dd09      	ble.n	80121f8 <_CreateStaticDevice+0x10c>
 80121e4:	e000      	b.n	80121e8 <_CreateStaticDevice+0xfc>
 80121e6:	4656      	mov	r6, sl
 80121e8:	4284      	cmp	r4, r0
 80121ea:	bfa8      	it	ge
 80121ec:	4604      	movge	r4, r0
 80121ee:	4622      	mov	r2, r4
 80121f0:	4631      	mov	r1, r6
 80121f2:	4638      	mov	r0, r7
 80121f4:	f7fd ffbd 	bl	8010172 <WM_SetSize>
 80121f8:	4b13      	ldr	r3, [pc, #76]	; (8012248 <_CreateStaticDevice+0x15c>)
 80121fa:	9302      	str	r3, [sp, #8]
 80121fc:	f04f 0a01 	mov.w	sl, #1
 8012200:	4b12      	ldr	r3, [pc, #72]	; (801224c <_CreateStaticDevice+0x160>)
 8012202:	9301      	str	r3, [sp, #4]
 8012204:	4629      	mov	r1, r5
 8012206:	4623      	mov	r3, r4
 8012208:	4632      	mov	r2, r6
 801220a:	f8cd a000 	str.w	sl, [sp]
 801220e:	4648      	mov	r0, r9
 8012210:	f7ff fcb0 	bl	8011b74 <GUI_MEMDEV__CreateFixed>
 8012214:	4605      	mov	r5, r0
 8012216:	4638      	mov	r0, r7
 8012218:	f7f8 fe32 	bl	800ae80 <GUI_ALLOC_LockH>
 801221c:	9005      	str	r0, [sp, #20]
 801221e:	6245      	str	r5, [r0, #36]	; 0x24
 8012220:	2d00      	cmp	r5, #0
 8012222:	d19f      	bne.n	8012164 <_CreateStaticDevice+0x78>
 8012224:	4640      	mov	r0, r8
 8012226:	f7f8 fe39 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801222a:	4638      	mov	r0, r7
 801222c:	f7fd fc82 	bl	800fb34 <WM__Paint1>
 8012230:	4628      	mov	r0, r5
 8012232:	b007      	add	sp, #28
 8012234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012238:	20000028 	.word	0x20000028
 801223c:	20000060 	.word	0x20000060
 8012240:	2001e750 	.word	0x2001e750
 8012244:	2001e6a8 	.word	0x2001e6a8
 8012248:	0801aa08 	.word	0x0801aa08
 801224c:	0801aa20 	.word	0x0801aa20

08012250 <GUI_MEMDEV_Paint1Static>:
 8012250:	b538      	push	{r3, r4, r5, lr}
 8012252:	4605      	mov	r5, r0
 8012254:	2405      	movs	r4, #5
 8012256:	4628      	mov	r0, r5
 8012258:	f7ff ff48 	bl	80120ec <_CreateStaticDevice>
 801225c:	b910      	cbnz	r0, 8012264 <GUI_MEMDEV_Paint1Static+0x14>
 801225e:	3c01      	subs	r4, #1
 8012260:	d1f9      	bne.n	8012256 <GUI_MEMDEV_Paint1Static+0x6>
 8012262:	bd38      	pop	{r3, r4, r5, pc}
 8012264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012268:	f000 b902 	b.w	8012470 <GUI_MEMDEV_Write>

0801226c <GUI_USAGE_BM_AddPixel>:
 801226c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012270:	1ac9      	subs	r1, r1, r3
 8012272:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012276:	1ad2      	subs	r2, r2, r3
 8012278:	6903      	ldr	r3, [r0, #16]
 801227a:	435a      	muls	r2, r3
 801227c:	3214      	adds	r2, #20
 801227e:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 8012282:	2380      	movs	r3, #128	; 0x80
 8012284:	f001 0107 	and.w	r1, r1, #7
 8012288:	fa43 f101 	asr.w	r1, r3, r1
 801228c:	5c83      	ldrb	r3, [r0, r2]
 801228e:	4319      	orrs	r1, r3
 8012290:	5481      	strb	r1, [r0, r2]
 8012292:	4770      	bx	lr

08012294 <GUI_USAGE_BM_GetNextDirty>:
 8012294:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012298:	4293      	cmp	r3, r2
 801229a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801229c:	dd44      	ble.n	8012328 <GUI_USAGE_BM_GetNextDirty+0x94>
 801229e:	680c      	ldr	r4, [r1, #0]
 80122a0:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80122a4:	42b4      	cmp	r4, r6
 80122a6:	da3f      	bge.n	8012328 <GUI_USAGE_BM_GetNextDirty+0x94>
 80122a8:	6907      	ldr	r7, [r0, #16]
 80122aa:	10e3      	asrs	r3, r4, #3
 80122ac:	461d      	mov	r5, r3
 80122ae:	fb07 3202 	mla	r2, r7, r2, r3
 80122b2:	1e73      	subs	r3, r6, #1
 80122b4:	ebc5 03e3 	rsb	r3, r5, r3, asr #3
 80122b8:	f102 0515 	add.w	r5, r2, #21
 80122bc:	3214      	adds	r2, #20
 80122be:	4405      	add	r5, r0
 80122c0:	5c82      	ldrb	r2, [r0, r2]
 80122c2:	f004 0007 	and.w	r0, r4, #7
 80122c6:	4082      	lsls	r2, r0
 80122c8:	b2d2      	uxtb	r2, r2
 80122ca:	b93a      	cbnz	r2, 80122dc <GUI_USAGE_BM_GetNextDirty+0x48>
 80122cc:	b373      	cbz	r3, 801232c <GUI_USAGE_BM_GetNextDirty+0x98>
 80122ce:	3408      	adds	r4, #8
 80122d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80122d4:	3b01      	subs	r3, #1
 80122d6:	f024 0407 	bic.w	r4, r4, #7
 80122da:	e7f6      	b.n	80122ca <GUI_USAGE_BM_GetNextDirty+0x36>
 80122dc:	0617      	lsls	r7, r2, #24
 80122de:	d403      	bmi.n	80122e8 <GUI_USAGE_BM_GetNextDirty+0x54>
 80122e0:	0052      	lsls	r2, r2, #1
 80122e2:	b2d2      	uxtb	r2, r2
 80122e4:	3401      	adds	r4, #1
 80122e6:	e7f9      	b.n	80122dc <GUI_USAGE_BM_GetNextDirty+0x48>
 80122e8:	2aff      	cmp	r2, #255	; 0xff
 80122ea:	d006      	beq.n	80122fa <GUI_USAGE_BM_GetNextDirty+0x66>
 80122ec:	4620      	mov	r0, r4
 80122ee:	0656      	lsls	r6, r2, #25
 80122f0:	d504      	bpl.n	80122fc <GUI_USAGE_BM_GetNextDirty+0x68>
 80122f2:	0052      	lsls	r2, r2, #1
 80122f4:	b2d2      	uxtb	r2, r2
 80122f6:	3001      	adds	r0, #1
 80122f8:	e7f9      	b.n	80122ee <GUI_USAGE_BM_GetNextDirty+0x5a>
 80122fa:	1de0      	adds	r0, r4, #7
 80122fc:	f000 0207 	and.w	r2, r0, #7
 8012300:	2a07      	cmp	r2, #7
 8012302:	d10d      	bne.n	8012320 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8012304:	3b01      	subs	r3, #1
 8012306:	d40b      	bmi.n	8012320 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8012308:	f815 2b01 	ldrb.w	r2, [r5], #1
 801230c:	2aff      	cmp	r2, #255	; 0xff
 801230e:	d101      	bne.n	8012314 <GUI_USAGE_BM_GetNextDirty+0x80>
 8012310:	3008      	adds	r0, #8
 8012312:	e7f7      	b.n	8012304 <GUI_USAGE_BM_GetNextDirty+0x70>
 8012314:	0613      	lsls	r3, r2, #24
 8012316:	d503      	bpl.n	8012320 <GUI_USAGE_BM_GetNextDirty+0x8c>
 8012318:	0052      	lsls	r2, r2, #1
 801231a:	b2d2      	uxtb	r2, r2
 801231c:	3001      	adds	r0, #1
 801231e:	e7f9      	b.n	8012314 <GUI_USAGE_BM_GetNextDirty+0x80>
 8012320:	1b00      	subs	r0, r0, r4
 8012322:	600c      	str	r4, [r1, #0]
 8012324:	3001      	adds	r0, #1
 8012326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012328:	2000      	movs	r0, #0
 801232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801232c:	4618      	mov	r0, r3
 801232e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012330 <_GUI_USAGE_BM_Delete>:
 8012330:	f7f8 bdd4 	b.w	800aedc <GUI_ALLOC_Free>

08012334 <GUI_USAGE_BM_Clear>:
 8012334:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012338:	6902      	ldr	r2, [r0, #16]
 801233a:	2100      	movs	r1, #0
 801233c:	435a      	muls	r2, r3
 801233e:	3014      	adds	r0, #20
 8012340:	f000 bee0 	b.w	8013104 <memset>

08012344 <GUI_USAGE_BM_AddHLine>:
 8012344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012346:	f9b0 4000 	ldrsh.w	r4, [r0]
 801234a:	1b09      	subs	r1, r1, r4
 801234c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8012350:	42a1      	cmp	r1, r4
 8012352:	da32      	bge.n	80123ba <GUI_USAGE_BM_AddHLine+0x76>
 8012354:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8012358:	440b      	add	r3, r1
 801235a:	1b52      	subs	r2, r2, r5
 801235c:	6905      	ldr	r5, [r0, #16]
 801235e:	10ce      	asrs	r6, r1, #3
 8012360:	3b01      	subs	r3, #1
 8012362:	fb05 6502 	mla	r5, r5, r2, r6
 8012366:	43df      	mvns	r7, r3
 8012368:	3514      	adds	r5, #20
 801236a:	f001 0407 	and.w	r4, r1, #7
 801236e:	f007 0707 	and.w	r7, r7, #7
 8012372:	21ff      	movs	r1, #255	; 0xff
 8012374:	fa41 f404 	asr.w	r4, r1, r4
 8012378:	fa01 f707 	lsl.w	r7, r1, r7
 801237c:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 8012380:	eb00 0205 	add.w	r2, r0, r5
 8012384:	b2e4      	uxtb	r4, r4
 8012386:	b2ff      	uxtb	r7, r7
 8012388:	f810 e005 	ldrb.w	lr, [r0, r5]
 801238c:	d104      	bne.n	8012398 <GUI_USAGE_BM_AddHLine+0x54>
 801238e:	403c      	ands	r4, r7
 8012390:	ea4e 0404 	orr.w	r4, lr, r4
 8012394:	5544      	strb	r4, [r0, r5]
 8012396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012398:	ea44 040e 	orr.w	r4, r4, lr
 801239c:	5544      	strb	r4, [r0, r5]
 801239e:	1e75      	subs	r5, r6, #1
 80123a0:	2d00      	cmp	r5, #0
 80123a2:	f102 0301 	add.w	r3, r2, #1
 80123a6:	dd05      	ble.n	80123b4 <GUI_USAGE_BM_AddHLine+0x70>
 80123a8:	4618      	mov	r0, r3
 80123aa:	462a      	mov	r2, r5
 80123ac:	f000 feaa 	bl	8013104 <memset>
 80123b0:	4603      	mov	r3, r0
 80123b2:	442b      	add	r3, r5
 80123b4:	781c      	ldrb	r4, [r3, #0]
 80123b6:	433c      	orrs	r4, r7
 80123b8:	701c      	strb	r4, [r3, #0]
 80123ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080123bc <GUI_USAGE_BM_Create>:
 80123bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80123c0:	f102 040f 	add.w	r4, r2, #15
 80123c4:	1124      	asrs	r4, r4, #4
 80123c6:	0064      	lsls	r4, r4, #1
 80123c8:	4680      	mov	r8, r0
 80123ca:	fb03 f004 	mul.w	r0, r3, r4
 80123ce:	3014      	adds	r0, #20
 80123d0:	460f      	mov	r7, r1
 80123d2:	4616      	mov	r6, r2
 80123d4:	461d      	mov	r5, r3
 80123d6:	f7f8 ff19 	bl	800b20c <GUI_ALLOC_AllocZero>
 80123da:	4681      	mov	r9, r0
 80123dc:	b188      	cbz	r0, 8012402 <GUI_USAGE_BM_Create+0x46>
 80123de:	f7f8 fd4f 	bl	800ae80 <GUI_ALLOC_LockH>
 80123e2:	4603      	mov	r3, r0
 80123e4:	4a09      	ldr	r2, [pc, #36]	; (801240c <GUI_USAGE_BM_Create+0x50>)
 80123e6:	609a      	str	r2, [r3, #8]
 80123e8:	a802      	add	r0, sp, #8
 80123ea:	2201      	movs	r2, #1
 80123ec:	f840 3d04 	str.w	r3, [r0, #-4]!
 80123f0:	809e      	strh	r6, [r3, #4]
 80123f2:	f8a3 8000 	strh.w	r8, [r3]
 80123f6:	805f      	strh	r7, [r3, #2]
 80123f8:	80dd      	strh	r5, [r3, #6]
 80123fa:	819a      	strh	r2, [r3, #12]
 80123fc:	611c      	str	r4, [r3, #16]
 80123fe:	f7f8 fd4d 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012402:	4648      	mov	r0, r9
 8012404:	b003      	add	sp, #12
 8012406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801240a:	bf00      	nop
 801240c:	0801a9f0 	.word	0x0801a9f0

08012410 <GUI_MEMDEV_WriteAt>:
 8012410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012412:	460c      	mov	r4, r1
 8012414:	4615      	mov	r5, r2
 8012416:	4606      	mov	r6, r0
 8012418:	b330      	cbz	r0, 8012468 <GUI_MEMDEV_WriteAt+0x58>
 801241a:	f7f8 fd31 	bl	800ae80 <GUI_ALLOC_LockH>
 801241e:	4b13      	ldr	r3, [pc, #76]	; (801246c <GUI_MEMDEV_WriteAt+0x5c>)
 8012420:	9001      	str	r0, [sp, #4]
 8012422:	429c      	cmp	r4, r3
 8012424:	8903      	ldrh	r3, [r0, #8]
 8012426:	bf04      	itt	eq
 8012428:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 801242c:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8012430:	f8ad 4008 	strh.w	r4, [sp, #8]
 8012434:	3b01      	subs	r3, #1
 8012436:	4423      	add	r3, r4
 8012438:	f8ad 300c 	strh.w	r3, [sp, #12]
 801243c:	8943      	ldrh	r3, [r0, #10]
 801243e:	f8ad 500a 	strh.w	r5, [sp, #10]
 8012442:	3b01      	subs	r3, #1
 8012444:	442b      	add	r3, r5
 8012446:	a801      	add	r0, sp, #4
 8012448:	f8ad 300e 	strh.w	r3, [sp, #14]
 801244c:	f7f8 fd26 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012450:	a802      	add	r0, sp, #8
 8012452:	f7fd fae5 	bl	800fa20 <WM__InitIVRSearch>
 8012456:	b138      	cbz	r0, 8012468 <GUI_MEMDEV_WriteAt+0x58>
 8012458:	462a      	mov	r2, r5
 801245a:	4621      	mov	r1, r4
 801245c:	4630      	mov	r0, r6
 801245e:	f7ff fb6d 	bl	8011b3c <GUI_MEMDEV__WriteToActiveAt>
 8012462:	f7fd fa1b 	bl	800f89c <WM__GetNextIVR>
 8012466:	e7f6      	b.n	8012456 <GUI_MEMDEV_WriteAt+0x46>
 8012468:	b004      	add	sp, #16
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	fffff001 	.word	0xfffff001

08012470 <GUI_MEMDEV_Write>:
 8012470:	4a01      	ldr	r2, [pc, #4]	; (8012478 <GUI_MEMDEV_Write+0x8>)
 8012472:	4611      	mov	r1, r2
 8012474:	f7ff bfcc 	b.w	8012410 <GUI_MEMDEV_WriteAt>
 8012478:	fffff001 	.word	0xfffff001

0801247c <_Color2Index_8888>:
 801247c:	4770      	bx	lr

0801247e <_GetIndexMask_8888>:
 801247e:	f04f 30ff 	mov.w	r0, #4294967295
 8012482:	4770      	bx	lr

08012484 <_Color2IndexBulk>:
 8012484:	b510      	push	{r4, lr}
 8012486:	f850 4b04 	ldr.w	r4, [r0], #4
 801248a:	600c      	str	r4, [r1, #0]
 801248c:	3a01      	subs	r2, #1
 801248e:	4419      	add	r1, r3
 8012490:	d1f9      	bne.n	8012486 <_Color2IndexBulk+0x2>
 8012492:	bd10      	pop	{r4, pc}

08012494 <_Index2ColorBulk>:
 8012494:	b510      	push	{r4, lr}
 8012496:	6804      	ldr	r4, [r0, #0]
 8012498:	f841 4b04 	str.w	r4, [r1], #4
 801249c:	3a01      	subs	r2, #1
 801249e:	4418      	add	r0, r3
 80124a0:	d1f9      	bne.n	8012496 <_Index2ColorBulk+0x2>
 80124a2:	bd10      	pop	{r4, pc}

080124a4 <LCD_Index2Color_8888>:
 80124a4:	4770      	bx	lr

080124a6 <LCD_Index2Color_888>:
 80124a6:	4770      	bx	lr

080124a8 <GUI__AlphaPreserveTrans>:
 80124a8:	b510      	push	{r4, lr}
 80124aa:	4b07      	ldr	r3, [pc, #28]	; (80124c8 <GUI__AlphaPreserveTrans+0x20>)
 80124ac:	781c      	ldrb	r4, [r3, #0]
 80124ae:	b120      	cbz	r0, 80124ba <GUI__AlphaPreserveTrans+0x12>
 80124b0:	2201      	movs	r2, #1
 80124b2:	701a      	strb	r2, [r3, #0]
 80124b4:	f04f 30ff 	mov.w	r0, #4294967295
 80124b8:	e002      	b.n	80124c0 <GUI__AlphaPreserveTrans+0x18>
 80124ba:	7018      	strb	r0, [r3, #0]
 80124bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80124c0:	f7ff fa1a 	bl	80118f8 <LCD_AA_SetAndMask>
 80124c4:	4620      	mov	r0, r4
 80124c6:	bd10      	pop	{r4, pc}
 80124c8:	2001e6d0 	.word	0x2001e6d0

080124cc <_GetDevData>:
 80124cc:	2901      	cmp	r1, #1
 80124ce:	4802      	ldr	r0, [pc, #8]	; (80124d8 <_GetDevData+0xc>)
 80124d0:	bf18      	it	ne
 80124d2:	2000      	movne	r0, #0
 80124d4:	4770      	bx	lr
 80124d6:	bf00      	nop
 80124d8:	0801aa20 	.word	0x0801aa20

080124dc <_GetDevFunc>:
 80124dc:	2916      	cmp	r1, #22
 80124de:	4802      	ldr	r0, [pc, #8]	; (80124e8 <_GetDevFunc+0xc>)
 80124e0:	bf18      	it	ne
 80124e2:	2000      	movne	r0, #0
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop
 80124e8:	08012ebd 	.word	0x08012ebd

080124ec <_GetDevProp>:
 80124ec:	2908      	cmp	r1, #8
 80124ee:	bf0c      	ite	eq
 80124f0:	2020      	moveq	r0, #32
 80124f2:	2000      	movne	r0, #0
 80124f4:	4770      	bx	lr

080124f6 <_SetOrg>:
 80124f6:	6800      	ldr	r0, [r0, #0]
 80124f8:	68c3      	ldr	r3, [r0, #12]
 80124fa:	6a1b      	ldr	r3, [r3, #32]
 80124fc:	4718      	bx	r3

080124fe <_GetRect>:
 80124fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012500:	6880      	ldr	r0, [r0, #8]
 8012502:	460d      	mov	r5, r1
 8012504:	f7f8 fcbc 	bl	800ae80 <GUI_ALLOC_LockH>
 8012508:	4602      	mov	r2, r0
 801250a:	a802      	add	r0, sp, #8
 801250c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8012510:	8914      	ldrh	r4, [r2, #8]
 8012512:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8012516:	802b      	strh	r3, [r5, #0]
 8012518:	441c      	add	r4, r3
 801251a:	8953      	ldrh	r3, [r2, #10]
 801251c:	f840 2d04 	str.w	r2, [r0, #-4]!
 8012520:	440b      	add	r3, r1
 8012522:	3b01      	subs	r3, #1
 8012524:	3c01      	subs	r4, #1
 8012526:	8069      	strh	r1, [r5, #2]
 8012528:	80ac      	strh	r4, [r5, #4]
 801252a:	80eb      	strh	r3, [r5, #6]
 801252c:	f7f8 fcb6 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012530:	b003      	add	sp, #12
 8012532:	bd30      	pop	{r4, r5, pc}

08012534 <_XY2PTR>:
 8012534:	4b0e      	ldr	r3, [pc, #56]	; (8012570 <_XY2PTR+0x3c>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801253a:	4606      	mov	r6, r0
 801253c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801253e:	460d      	mov	r5, r1
 8012540:	f7f8 fc9e 	bl	800ae80 <GUI_ALLOC_LockH>
 8012544:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012548:	68c4      	ldr	r4, [r0, #12]
 801254a:	1a69      	subs	r1, r5, r1
 801254c:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8012550:	ab02      	add	r3, sp, #8
 8012552:	1b76      	subs	r6, r6, r5
 8012554:	00b6      	lsls	r6, r6, #2
 8012556:	f843 0d04 	str.w	r0, [r3, #-4]!
 801255a:	3618      	adds	r6, #24
 801255c:	fb04 6501 	mla	r5, r4, r1, r6
 8012560:	1944      	adds	r4, r0, r5
 8012562:	4618      	mov	r0, r3
 8012564:	f7f8 fc9a 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012568:	4620      	mov	r0, r4
 801256a:	b002      	add	sp, #8
 801256c:	bd70      	pop	{r4, r5, r6, pc}
 801256e:	bf00      	nop
 8012570:	20000014 	.word	0x20000014

08012574 <_GetPixelIndex>:
 8012574:	b508      	push	{r3, lr}
 8012576:	4608      	mov	r0, r1
 8012578:	4611      	mov	r1, r2
 801257a:	f7ff ffdb 	bl	8012534 <_XY2PTR>
 801257e:	6800      	ldr	r0, [r0, #0]
 8012580:	bd08      	pop	{r3, pc}
	...

08012584 <_XorPixel>:
 8012584:	4b15      	ldr	r3, [pc, #84]	; (80125dc <_XorPixel+0x58>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801258a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801258c:	4616      	mov	r6, r2
 801258e:	460d      	mov	r5, r1
 8012590:	f7f8 fc76 	bl	800ae80 <GUI_ALLOC_LockH>
 8012594:	4631      	mov	r1, r6
 8012596:	9000      	str	r0, [sp, #0]
 8012598:	4628      	mov	r0, r5
 801259a:	f7ff ffcb 	bl	8012534 <_XY2PTR>
 801259e:	9b00      	ldr	r3, [sp, #0]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	691b      	ldr	r3, [r3, #16]
 80125a4:	4604      	mov	r4, r0
 80125a6:	689b      	ldr	r3, [r3, #8]
 80125a8:	4798      	blx	r3
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	4058      	eors	r0, r3
 80125ae:	9b00      	ldr	r3, [sp, #0]
 80125b0:	6020      	str	r0, [r4, #0]
 80125b2:	6958      	ldr	r0, [r3, #20]
 80125b4:	b160      	cbz	r0, 80125d0 <_XorPixel+0x4c>
 80125b6:	f7f8 fc63 	bl	800ae80 <GUI_ALLOC_LockH>
 80125ba:	ac02      	add	r4, sp, #8
 80125bc:	6883      	ldr	r3, [r0, #8]
 80125be:	f844 0d04 	str.w	r0, [r4, #-4]!
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	4632      	mov	r2, r6
 80125c6:	4629      	mov	r1, r5
 80125c8:	4798      	blx	r3
 80125ca:	4620      	mov	r0, r4
 80125cc:	f7f8 fc66 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80125d0:	4668      	mov	r0, sp
 80125d2:	f7f8 fc63 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80125d6:	b002      	add	sp, #8
 80125d8:	bd70      	pop	{r4, r5, r6, pc}
 80125da:	bf00      	nop
 80125dc:	20000014 	.word	0x20000014

080125e0 <_SetPixelIndex>:
 80125e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80125e2:	461c      	mov	r4, r3
 80125e4:	4b10      	ldr	r3, [pc, #64]	; (8012628 <_SetPixelIndex+0x48>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80125ea:	460d      	mov	r5, r1
 80125ec:	4616      	mov	r6, r2
 80125ee:	f7f8 fc47 	bl	800ae80 <GUI_ALLOC_LockH>
 80125f2:	4631      	mov	r1, r6
 80125f4:	9000      	str	r0, [sp, #0]
 80125f6:	4628      	mov	r0, r5
 80125f8:	f7ff ff9c 	bl	8012534 <_XY2PTR>
 80125fc:	9b00      	ldr	r3, [sp, #0]
 80125fe:	6004      	str	r4, [r0, #0]
 8012600:	6958      	ldr	r0, [r3, #20]
 8012602:	b160      	cbz	r0, 801261e <_SetPixelIndex+0x3e>
 8012604:	f7f8 fc3c 	bl	800ae80 <GUI_ALLOC_LockH>
 8012608:	ac02      	add	r4, sp, #8
 801260a:	6883      	ldr	r3, [r0, #8]
 801260c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4632      	mov	r2, r6
 8012614:	4629      	mov	r1, r5
 8012616:	4798      	blx	r3
 8012618:	4620      	mov	r0, r4
 801261a:	f7f8 fc3f 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801261e:	4668      	mov	r0, sp
 8012620:	f7f8 fc3c 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012624:	b002      	add	sp, #8
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	20000014 	.word	0x20000014

0801262c <_DrawVLine>:
 801262c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012630:	4c2a      	ldr	r4, [pc, #168]	; (80126dc <_DrawVLine+0xb0>)
 8012632:	461e      	mov	r6, r3
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012638:	4688      	mov	r8, r1
 801263a:	4615      	mov	r5, r2
 801263c:	f7f8 fc20 	bl	800ae80 <GUI_ALLOC_LockH>
 8012640:	9000      	str	r0, [sp, #0]
 8012642:	6940      	ldr	r0, [r0, #20]
 8012644:	4627      	mov	r7, r4
 8012646:	b108      	cbz	r0, 801264c <_DrawVLine+0x20>
 8012648:	f7f8 fc1a 	bl	800ae80 <GUI_ALLOC_LockH>
 801264c:	9001      	str	r0, [sp, #4]
 801264e:	4629      	mov	r1, r5
 8012650:	4640      	mov	r0, r8
 8012652:	f7ff ff6f 	bl	8012534 <_XY2PTR>
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	9a00      	ldr	r2, [sp, #0]
 801265a:	7c19      	ldrb	r1, [r3, #16]
 801265c:	07c9      	lsls	r1, r1, #31
 801265e:	4604      	mov	r4, r0
 8012660:	d51d      	bpl.n	801269e <_DrawVLine+0x72>
 8012662:	6813      	ldr	r3, [r2, #0]
 8012664:	691b      	ldr	r3, [r3, #16]
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	4798      	blx	r3
 801266a:	4607      	mov	r7, r0
 801266c:	9801      	ldr	r0, [sp, #4]
 801266e:	b120      	cbz	r0, 801267a <_DrawVLine+0x4e>
 8012670:	6883      	ldr	r3, [r0, #8]
 8012672:	462a      	mov	r2, r5
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4641      	mov	r1, r8
 8012678:	4798      	blx	r3
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	407b      	eors	r3, r7
 801267e:	6023      	str	r3, [r4, #0]
 8012680:	9b00      	ldr	r3, [sp, #0]
 8012682:	3501      	adds	r5, #1
 8012684:	68db      	ldr	r3, [r3, #12]
 8012686:	42b5      	cmp	r5, r6
 8012688:	441c      	add	r4, r3
 801268a:	ddef      	ble.n	801266c <_DrawVLine+0x40>
 801268c:	4668      	mov	r0, sp
 801268e:	f7f8 fc05 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012692:	9b01      	ldr	r3, [sp, #4]
 8012694:	b1f3      	cbz	r3, 80126d4 <_DrawVLine+0xa8>
 8012696:	a801      	add	r0, sp, #4
 8012698:	f7f8 fc00 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801269c:	e01a      	b.n	80126d4 <_DrawVLine+0xa8>
 801269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126a0:	68d7      	ldr	r7, [r2, #12]
 80126a2:	f8d3 9000 	ldr.w	r9, [r3]
 80126a6:	9b01      	ldr	r3, [sp, #4]
 80126a8:	b163      	cbz	r3, 80126c4 <_DrawVLine+0x98>
 80126aa:	9801      	ldr	r0, [sp, #4]
 80126ac:	6883      	ldr	r3, [r0, #8]
 80126ae:	462a      	mov	r2, r5
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	4641      	mov	r1, r8
 80126b4:	3501      	adds	r5, #1
 80126b6:	4798      	blx	r3
 80126b8:	42ae      	cmp	r6, r5
 80126ba:	f8c4 9000 	str.w	r9, [r4]
 80126be:	443c      	add	r4, r7
 80126c0:	daf3      	bge.n	80126aa <_DrawVLine+0x7e>
 80126c2:	e7e3      	b.n	801268c <_DrawVLine+0x60>
 80126c4:	1b75      	subs	r5, r6, r5
 80126c6:	3501      	adds	r5, #1
 80126c8:	3d01      	subs	r5, #1
 80126ca:	f8c4 9000 	str.w	r9, [r4]
 80126ce:	443c      	add	r4, r7
 80126d0:	d1fa      	bne.n	80126c8 <_DrawVLine+0x9c>
 80126d2:	e7db      	b.n	801268c <_DrawVLine+0x60>
 80126d4:	b003      	add	sp, #12
 80126d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126da:	bf00      	nop
 80126dc:	20000014 	.word	0x20000014

080126e0 <_FillRect>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	4e2a      	ldr	r6, [pc, #168]	; (8012790 <_FillRect+0xb0>)
 80126e6:	461c      	mov	r4, r3
 80126e8:	6833      	ldr	r3, [r6, #0]
 80126ea:	b085      	sub	sp, #20
 80126ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80126ee:	4689      	mov	r9, r1
 80126f0:	4615      	mov	r5, r2
 80126f2:	f7f8 fbc5 	bl	800ae80 <GUI_ALLOC_LockH>
 80126f6:	4629      	mov	r1, r5
 80126f8:	9002      	str	r0, [sp, #8]
 80126fa:	4648      	mov	r0, r9
 80126fc:	f7ff ff1a 	bl	8012534 <_XY2PTR>
 8012700:	9b02      	ldr	r3, [sp, #8]
 8012702:	6832      	ldr	r2, [r6, #0]
 8012704:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8012708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801270a:	4607      	mov	r7, r0
 801270c:	6958      	ldr	r0, [r3, #20]
 801270e:	f8d2 b000 	ldr.w	fp, [r2]
 8012712:	ebc9 0404 	rsb	r4, r9, r4
 8012716:	3401      	adds	r4, #1
 8012718:	b330      	cbz	r0, 8012768 <_FillRect+0x88>
 801271a:	f7f8 fbb1 	bl	800ae80 <GUI_ALLOC_LockH>
 801271e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012720:	f10d 0810 	add.w	r8, sp, #16
 8012724:	1b5b      	subs	r3, r3, r5
 8012726:	f848 0d04 	str.w	r0, [r8, #-4]!
 801272a:	3301      	adds	r3, #1
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	462a      	mov	r2, r5
 8012730:	4623      	mov	r3, r4
 8012732:	4649      	mov	r1, r9
 8012734:	f7fb fe34 	bl	800e3a0 <GUI_USAGE_AddRect>
 8012738:	4640      	mov	r0, r8
 801273a:	f7f8 fbaf 	bl	800ae9c <GUI_ALLOC_UnlockH>
 801273e:	e013      	b.n	8012768 <_FillRect+0x88>
 8012740:	6833      	ldr	r3, [r6, #0]
 8012742:	7c1b      	ldrb	r3, [r3, #16]
 8012744:	07db      	lsls	r3, r3, #31
 8012746:	d513      	bpl.n	8012770 <_FillRect+0x90>
 8012748:	9b02      	ldr	r3, [sp, #8]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	691b      	ldr	r3, [r3, #16]
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	4798      	blx	r3
 8012752:	463a      	mov	r2, r7
 8012754:	4623      	mov	r3, r4
 8012756:	6811      	ldr	r1, [r2, #0]
 8012758:	3b01      	subs	r3, #1
 801275a:	ea81 0100 	eor.w	r1, r1, r0
 801275e:	f842 1b04 	str.w	r1, [r2], #4
 8012762:	d1f8      	bne.n	8012756 <_FillRect+0x76>
 8012764:	4457      	add	r7, sl
 8012766:	3501      	adds	r5, #1
 8012768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801276a:	429d      	cmp	r5, r3
 801276c:	dde8      	ble.n	8012740 <_FillRect+0x60>
 801276e:	e008      	b.n	8012782 <_FillRect+0xa2>
 8012770:	2c00      	cmp	r4, #0
 8012772:	ddf7      	ble.n	8012764 <_FillRect+0x84>
 8012774:	4623      	mov	r3, r4
 8012776:	463a      	mov	r2, r7
 8012778:	3b01      	subs	r3, #1
 801277a:	f842 bb04 	str.w	fp, [r2], #4
 801277e:	d1fb      	bne.n	8012778 <_FillRect+0x98>
 8012780:	e7f0      	b.n	8012764 <_FillRect+0x84>
 8012782:	a802      	add	r0, sp, #8
 8012784:	f7f8 fb8a 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012788:	b005      	add	sp, #20
 801278a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278e:	bf00      	nop
 8012790:	20000014 	.word	0x20000014

08012794 <_DrawHLine>:
 8012794:	b507      	push	{r0, r1, r2, lr}
 8012796:	9200      	str	r2, [sp, #0]
 8012798:	f7ff ffa2 	bl	80126e0 <_FillRect>
 801279c:	b003      	add	sp, #12
 801279e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080127a4 <_DrawBitmap>:
 80127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	4da8      	ldr	r5, [pc, #672]	; (8012a4c <_DrawBitmap+0x2a8>)
 80127aa:	b091      	sub	sp, #68	; 0x44
 80127ac:	460e      	mov	r6, r1
 80127ae:	9302      	str	r3, [sp, #8]
 80127b0:	682b      	ldr	r3, [r5, #0]
 80127b2:	9005      	str	r0, [sp, #20]
 80127b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80127b6:	9206      	str	r2, [sp, #24]
 80127b8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80127ba:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 80127be:	2800      	cmp	r0, #0
 80127c0:	f000 8379 	beq.w	8012eb6 <_DrawBitmap+0x712>
 80127c4:	f7f8 fb5c 	bl	800ae80 <GUI_ALLOC_LockH>
 80127c8:	900e      	str	r0, [sp, #56]	; 0x38
 80127ca:	6940      	ldr	r0, [r0, #20]
 80127cc:	b108      	cbz	r0, 80127d2 <_DrawBitmap+0x2e>
 80127ce:	f7f8 fb57 	bl	800ae80 <GUI_ALLOC_LockH>
 80127d2:	900f      	str	r0, [sp, #60]	; 0x3c
 80127d4:	a810      	add	r0, sp, #64	; 0x40
 80127d6:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	9308      	str	r3, [sp, #32]
 80127de:	f7f8 fb5d 	bl	800ae9c <GUI_ALLOC_UnlockH>
 80127e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80127e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80127e6:	18f3      	adds	r3, r6, r3
 80127e8:	9303      	str	r3, [sp, #12]
 80127ea:	b150      	cbz	r0, 8012802 <_DrawBitmap+0x5e>
 80127ec:	682b      	ldr	r3, [r5, #0]
 80127ee:	7c1b      	ldrb	r3, [r3, #16]
 80127f0:	079d      	lsls	r5, r3, #30
 80127f2:	d406      	bmi.n	8012802 <_DrawBitmap+0x5e>
 80127f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	9a06      	ldr	r2, [sp, #24]
 80127fa:	9b02      	ldr	r3, [sp, #8]
 80127fc:	9903      	ldr	r1, [sp, #12]
 80127fe:	f7fb fdcf 	bl	800e3a0 <GUI_USAGE_AddRect>
 8012802:	9906      	ldr	r1, [sp, #24]
 8012804:	9803      	ldr	r0, [sp, #12]
 8012806:	f7ff fe95 	bl	8012534 <_XY2PTR>
 801280a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801280c:	2b17      	cmp	r3, #23
 801280e:	4605      	mov	r5, r0
 8012810:	dd68      	ble.n	80128e4 <_DrawBitmap+0x140>
 8012812:	9b02      	ldr	r3, [sp, #8]
 8012814:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8012a54 <_DrawBitmap+0x2b0>
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	9307      	str	r3, [sp, #28]
 801281c:	f04f 0b00 	mov.w	fp, #0
 8012820:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012822:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012824:	459b      	cmp	fp, r3
 8012826:	da59      	bge.n	80128dc <_DrawBitmap+0x138>
 8012828:	b130      	cbz	r0, 8012838 <_DrawBitmap+0x94>
 801282a:	6883      	ldr	r3, [r0, #8]
 801282c:	9a06      	ldr	r2, [sp, #24]
 801282e:	685e      	ldr	r6, [r3, #4]
 8012830:	9903      	ldr	r1, [sp, #12]
 8012832:	9b02      	ldr	r3, [sp, #8]
 8012834:	445a      	add	r2, fp
 8012836:	47b0      	blx	r6
 8012838:	9b05      	ldr	r3, [sp, #20]
 801283a:	691b      	ldr	r3, [r3, #16]
 801283c:	68d8      	ldr	r0, [r3, #12]
 801283e:	b130      	cbz	r0, 801284e <_DrawBitmap+0xaa>
 8012840:	f8d9 3000 	ldr.w	r3, [r9]
 8012844:	9a07      	ldr	r2, [sp, #28]
 8012846:	4621      	mov	r1, r4
 8012848:	4628      	mov	r0, r5
 801284a:	4798      	blx	r3
 801284c:	e03f      	b.n	80128ce <_DrawBitmap+0x12a>
 801284e:	685b      	ldr	r3, [r3, #4]
 8012850:	4798      	blx	r3
 8012852:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012856:	0e03      	lsrs	r3, r0, #24
 8012858:	9304      	str	r3, [sp, #16]
 801285a:	462f      	mov	r7, r5
 801285c:	4626      	mov	r6, r4
 801285e:	4642      	mov	r2, r8
 8012860:	4631      	mov	r1, r6
 8012862:	f04f 0a00 	mov.w	sl, #0
 8012866:	f851 3b04 	ldr.w	r3, [r1], #4
 801286a:	9804      	ldr	r0, [sp, #16]
 801286c:	0e1b      	lsrs	r3, r3, #24
 801286e:	4298      	cmp	r0, r3
 8012870:	9804      	ldr	r0, [sp, #16]
 8012872:	bf08      	it	eq
 8012874:	f10a 0a01 	addeq.w	sl, sl, #1
 8012878:	4298      	cmp	r0, r3
 801287a:	f102 32ff 	add.w	r2, r2, #4294967295
 801287e:	d011      	beq.n	80128a4 <_DrawBitmap+0x100>
 8012880:	f1ba 0f00 	cmp.w	sl, #0
 8012884:	d011      	beq.n	80128aa <_DrawBitmap+0x106>
 8012886:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801288a:	461a      	mov	r2, r3
 801288c:	9309      	str	r3, [sp, #36]	; 0x24
 801288e:	4631      	mov	r1, r6
 8012890:	4638      	mov	r0, r7
 8012892:	f8d9 3000 	ldr.w	r3, [r9]
 8012896:	4798      	blx	r3
 8012898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801289a:	ebca 0808 	rsb	r8, sl, r8
 801289e:	441f      	add	r7, r3
 80128a0:	441e      	add	r6, r3
 80128a2:	e011      	b.n	80128c8 <_DrawBitmap+0x124>
 80128a4:	2a00      	cmp	r2, #0
 80128a6:	d1de      	bne.n	8012866 <_DrawBitmap+0xc2>
 80128a8:	e7ea      	b.n	8012880 <_DrawBitmap+0xdc>
 80128aa:	6830      	ldr	r0, [r6, #0]
 80128ac:	0e02      	lsrs	r2, r0, #24
 80128ae:	2aff      	cmp	r2, #255	; 0xff
 80128b0:	d006      	beq.n	80128c0 <_DrawBitmap+0x11c>
 80128b2:	4b67      	ldr	r3, [pc, #412]	; (8012a50 <_DrawBitmap+0x2ac>)
 80128b4:	6839      	ldr	r1, [r7, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	43d2      	mvns	r2, r2
 80128ba:	b2d2      	uxtb	r2, r2
 80128bc:	4798      	blx	r3
 80128be:	6038      	str	r0, [r7, #0]
 80128c0:	3704      	adds	r7, #4
 80128c2:	3604      	adds	r6, #4
 80128c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80128c8:	f1b8 0f00 	cmp.w	r8, #0
 80128cc:	d1c7      	bne.n	801285e <_DrawBitmap+0xba>
 80128ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80128d0:	441c      	add	r4, r3
 80128d2:	9b08      	ldr	r3, [sp, #32]
 80128d4:	f10b 0b01 	add.w	fp, fp, #1
 80128d8:	441d      	add	r5, r3
 80128da:	e7a1      	b.n	8012820 <_DrawBitmap+0x7c>
 80128dc:	2800      	cmp	r0, #0
 80128de:	f040 82e7 	bne.w	8012eb0 <_DrawBitmap+0x70c>
 80128e2:	e2e8      	b.n	8012eb6 <_DrawBitmap+0x712>
 80128e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80128e6:	2b10      	cmp	r3, #16
 80128e8:	d137      	bne.n	801295a <_DrawBitmap+0x1b6>
 80128ea:	9b03      	ldr	r3, [sp, #12]
 80128ec:	9a03      	ldr	r2, [sp, #12]
 80128ee:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 80128f2:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 80128f6:	9b02      	ldr	r3, [sp, #8]
 80128f8:	f04f 0800 	mov.w	r8, #0
 80128fc:	eb03 0a02 	add.w	sl, r3, r2
 8012900:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012902:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012904:	4598      	cmp	r8, r3
 8012906:	da24      	bge.n	8012952 <_DrawBitmap+0x1ae>
 8012908:	9b06      	ldr	r3, [sp, #24]
 801290a:	eb03 0908 	add.w	r9, r3, r8
 801290e:	b136      	cbz	r6, 801291e <_DrawBitmap+0x17a>
 8012910:	68b3      	ldr	r3, [r6, #8]
 8012912:	9903      	ldr	r1, [sp, #12]
 8012914:	685f      	ldr	r7, [r3, #4]
 8012916:	9b02      	ldr	r3, [sp, #8]
 8012918:	464a      	mov	r2, r9
 801291a:	4630      	mov	r0, r6
 801291c:	47b8      	blx	r7
 801291e:	9f03      	ldr	r7, [sp, #12]
 8012920:	9b05      	ldr	r3, [sp, #20]
 8012922:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 8012926:	691b      	ldr	r3, [r3, #16]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	4798      	blx	r3
 801292c:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 8012930:	b12e      	cbz	r6, 801293e <_DrawBitmap+0x19a>
 8012932:	68b3      	ldr	r3, [r6, #8]
 8012934:	464a      	mov	r2, r9
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4639      	mov	r1, r7
 801293a:	4630      	mov	r0, r6
 801293c:	4798      	blx	r3
 801293e:	3701      	adds	r7, #1
 8012940:	4557      	cmp	r7, sl
 8012942:	d1ed      	bne.n	8012920 <_DrawBitmap+0x17c>
 8012944:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012946:	441c      	add	r4, r3
 8012948:	9b08      	ldr	r3, [sp, #32]
 801294a:	f108 0801 	add.w	r8, r8, #1
 801294e:	441d      	add	r5, r3
 8012950:	e7d6      	b.n	8012900 <_DrawBitmap+0x15c>
 8012952:	2e00      	cmp	r6, #0
 8012954:	f040 82ac 	bne.w	8012eb0 <_DrawBitmap+0x70c>
 8012958:	e2ad      	b.n	8012eb6 <_DrawBitmap+0x712>
 801295a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801295c:	2b08      	cmp	r3, #8
 801295e:	f040 8081 	bne.w	8012a64 <_DrawBitmap+0x2c0>
 8012962:	9a03      	ldr	r2, [sp, #12]
 8012964:	9e06      	ldr	r6, [sp, #24]
 8012966:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8012a4c <_DrawBitmap+0x2a8>
 801296a:	f06f 0303 	mvn.w	r3, #3
 801296e:	4353      	muls	r3, r2
 8012970:	9304      	str	r3, [sp, #16]
 8012972:	9b02      	ldr	r3, [sp, #8]
 8012974:	4413      	add	r3, r2
 8012976:	9305      	str	r3, [sp, #20]
 8012978:	9b06      	ldr	r3, [sp, #24]
 801297a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801297c:	1af3      	subs	r3, r6, r3
 801297e:	429a      	cmp	r2, r3
 8012980:	f340 8294 	ble.w	8012eac <_DrawBitmap+0x708>
 8012984:	f8d9 3000 	ldr.w	r3, [r9]
 8012988:	7c1b      	ldrb	r3, [r3, #16]
 801298a:	f1bb 0f00 	cmp.w	fp, #0
 801298e:	d032      	beq.n	80129f6 <_DrawBitmap+0x252>
 8012990:	f013 0303 	ands.w	r3, r3, #3
 8012994:	d00a      	beq.n	80129ac <_DrawBitmap+0x208>
 8012996:	2b02      	cmp	r3, #2
 8012998:	d15e      	bne.n	8012a58 <_DrawBitmap+0x2b4>
 801299a:	9b04      	ldr	r3, [sp, #16]
 801299c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80129a0:	9f03      	ldr	r7, [sp, #12]
 80129a2:	18eb      	adds	r3, r5, r3
 80129a4:	f104 3aff 	add.w	sl, r4, #4294967295
 80129a8:	9307      	str	r3, [sp, #28]
 80129aa:	e01f      	b.n	80129ec <_DrawBitmap+0x248>
 80129ac:	9a02      	ldr	r2, [sp, #8]
 80129ae:	4623      	mov	r3, r4
 80129b0:	18a1      	adds	r1, r4, r2
 80129b2:	462a      	mov	r2, r5
 80129b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80129b8:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 80129bc:	f842 0b04 	str.w	r0, [r2], #4
 80129c0:	428b      	cmp	r3, r1
 80129c2:	d1f7      	bne.n	80129b4 <_DrawBitmap+0x210>
 80129c4:	e048      	b.n	8012a58 <_DrawBitmap+0x2b4>
 80129c6:	9a07      	ldr	r2, [sp, #28]
 80129c8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 80129cc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 80129d0:	f1b8 0f00 	cmp.w	r8, #0
 80129d4:	d006      	beq.n	80129e4 <_DrawBitmap+0x240>
 80129d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129da:	4632      	mov	r2, r6
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	4639      	mov	r1, r7
 80129e0:	4640      	mov	r0, r8
 80129e2:	4798      	blx	r3
 80129e4:	9b05      	ldr	r3, [sp, #20]
 80129e6:	3701      	adds	r7, #1
 80129e8:	42bb      	cmp	r3, r7
 80129ea:	d035      	beq.n	8012a58 <_DrawBitmap+0x2b4>
 80129ec:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d0f7      	beq.n	80129e4 <_DrawBitmap+0x240>
 80129f4:	e7e7      	b.n	80129c6 <_DrawBitmap+0x222>
 80129f6:	f013 0303 	ands.w	r3, r3, #3
 80129fa:	d00a      	beq.n	8012a12 <_DrawBitmap+0x26e>
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d12b      	bne.n	8012a58 <_DrawBitmap+0x2b4>
 8012a00:	9b04      	ldr	r3, [sp, #16]
 8012a02:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8012a06:	9f03      	ldr	r7, [sp, #12]
 8012a08:	18eb      	adds	r3, r5, r3
 8012a0a:	f104 3aff 	add.w	sl, r4, #4294967295
 8012a0e:	9307      	str	r3, [sp, #28]
 8012a10:	e017      	b.n	8012a42 <_DrawBitmap+0x29e>
 8012a12:	4b10      	ldr	r3, [pc, #64]	; (8012a54 <_DrawBitmap+0x2b0>)
 8012a14:	9a02      	ldr	r2, [sp, #8]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4621      	mov	r1, r4
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	4798      	blx	r3
 8012a1e:	e01b      	b.n	8012a58 <_DrawBitmap+0x2b4>
 8012a20:	9a07      	ldr	r2, [sp, #28]
 8012a22:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8012a26:	f1b8 0f00 	cmp.w	r8, #0
 8012a2a:	d006      	beq.n	8012a3a <_DrawBitmap+0x296>
 8012a2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012a30:	4632      	mov	r2, r6
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	4639      	mov	r1, r7
 8012a36:	4640      	mov	r0, r8
 8012a38:	4798      	blx	r3
 8012a3a:	9b05      	ldr	r3, [sp, #20]
 8012a3c:	3701      	adds	r7, #1
 8012a3e:	42bb      	cmp	r3, r7
 8012a40:	d00a      	beq.n	8012a58 <_DrawBitmap+0x2b4>
 8012a42:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d0f7      	beq.n	8012a3a <_DrawBitmap+0x296>
 8012a4a:	e7e9      	b.n	8012a20 <_DrawBitmap+0x27c>
 8012a4c:	20000014 	.word	0x20000014
 8012a50:	20000040 	.word	0x20000040
 8012a54:	20000024 	.word	0x20000024
 8012a58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012a5a:	441c      	add	r4, r3
 8012a5c:	9b08      	ldr	r3, [sp, #32]
 8012a5e:	3601      	adds	r6, #1
 8012a60:	441d      	add	r5, r3
 8012a62:	e789      	b.n	8012978 <_DrawBitmap+0x1d4>
 8012a64:	4bb0      	ldr	r3, [pc, #704]	; (8012d28 <_DrawBitmap+0x584>)
 8012a66:	f1bb 0f00 	cmp.w	fp, #0
 8012a6a:	bf08      	it	eq
 8012a6c:	469b      	moveq	fp, r3
 8012a6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	930a      	str	r3, [sp, #40]	; 0x28
 8012a74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a7a:	1c63      	adds	r3, r4, #1
 8012a7c:	9304      	str	r3, [sp, #16]
 8012a7e:	1d03      	adds	r3, r0, #4
 8012a80:	9307      	str	r3, [sp, #28]
 8012a82:	9b06      	ldr	r3, [sp, #24]
 8012a84:	9305      	str	r3, [sp, #20]
 8012a86:	9b07      	ldr	r3, [sp, #28]
 8012a88:	9a06      	ldr	r2, [sp, #24]
 8012a8a:	1f1c      	subs	r4, r3, #4
 8012a8c:	9b04      	ldr	r3, [sp, #16]
 8012a8e:	f103 3aff 	add.w	sl, r3, #4294967295
 8012a92:	9b05      	ldr	r3, [sp, #20]
 8012a94:	1a9b      	subs	r3, r3, r2
 8012a96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	f340 8207 	ble.w	8012eac <_DrawBitmap+0x708>
 8012a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	f000 8098 	beq.w	8012bd6 <_DrawBitmap+0x432>
 8012aa6:	2b04      	cmp	r3, #4
 8012aa8:	f000 812b 	beq.w	8012d02 <_DrawBitmap+0x55e>
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	f040 81f1 	bne.w	8012e94 <_DrawBitmap+0x6f0>
 8012ab2:	4b9e      	ldr	r3, [pc, #632]	; (8012d2c <_DrawBitmap+0x588>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8012ab8:	f7f8 f9e2 	bl	800ae80 <GUI_ALLOC_LockH>
 8012abc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012abe:	4a9c      	ldr	r2, [pc, #624]	; (8012d30 <_DrawBitmap+0x58c>)
 8012ac0:	900e      	str	r0, [sp, #56]	; 0x38
 8012ac2:	f1c3 0508 	rsb	r5, r3, #8
 8012ac6:	9b04      	ldr	r3, [sp, #16]
 8012ac8:	9f02      	ldr	r7, [sp, #8]
 8012aca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012ace:	5cd6      	ldrb	r6, [r2, r3]
 8012ad0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012ad2:	411e      	asrs	r6, r3
 8012ad4:	4b95      	ldr	r3, [pc, #596]	; (8012d2c <_DrawBitmap+0x588>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	7c1b      	ldrb	r3, [r3, #16]
 8012ada:	f003 0303 	and.w	r3, r3, #3
 8012ade:	2b02      	cmp	r3, #2
 8012ae0:	d01d      	beq.n	8012b1e <_DrawBitmap+0x37a>
 8012ae2:	2b03      	cmp	r3, #3
 8012ae4:	d055      	beq.n	8012b92 <_DrawBitmap+0x3ee>
 8012ae6:	2b01      	cmp	r3, #1
 8012ae8:	d053      	beq.n	8012b92 <_DrawBitmap+0x3ee>
 8012aea:	42bd      	cmp	r5, r7
 8012aec:	bf28      	it	cs
 8012aee:	463d      	movcs	r5, r7
 8012af0:	1b7f      	subs	r7, r7, r5
 8012af2:	462b      	mov	r3, r5
 8012af4:	4622      	mov	r2, r4
 8012af6:	f006 0101 	and.w	r1, r6, #1
 8012afa:	3b01      	subs	r3, #1
 8012afc:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8012b00:	f842 1b04 	str.w	r1, [r2], #4
 8012b04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012b08:	d1f5      	bne.n	8012af6 <_DrawBitmap+0x352>
 8012b0a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8012b0e:	2f00      	cmp	r7, #0
 8012b10:	d05d      	beq.n	8012bce <_DrawBitmap+0x42a>
 8012b12:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8012b16:	4a86      	ldr	r2, [pc, #536]	; (8012d30 <_DrawBitmap+0x58c>)
 8012b18:	2508      	movs	r5, #8
 8012b1a:	5cd6      	ldrb	r6, [r2, r3]
 8012b1c:	e7e5      	b.n	8012aea <_DrawBitmap+0x346>
 8012b1e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012b22:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8012b26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b2c:	42bd      	cmp	r5, r7
 8012b2e:	bf28      	it	cs
 8012b30:	463d      	movcs	r5, r7
 8012b32:	1b7f      	subs	r7, r7, r5
 8012b34:	f1b9 0f00 	cmp.w	r9, #0
 8012b38:	d020      	beq.n	8012b7c <_DrawBitmap+0x3d8>
 8012b3a:	b91e      	cbnz	r6, 8012b44 <_DrawBitmap+0x3a0>
 8012b3c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8012b40:	44a8      	add	r8, r5
 8012b42:	e01f      	b.n	8012b84 <_DrawBitmap+0x3e0>
 8012b44:	07f0      	lsls	r0, r6, #31
 8012b46:	d508      	bpl.n	8012b5a <_DrawBitmap+0x3b6>
 8012b48:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012b4c:	9a05      	ldr	r2, [sp, #20]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4641      	mov	r1, r8
 8012b52:	4648      	mov	r0, r9
 8012b54:	4798      	blx	r3
 8012b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	3d01      	subs	r5, #1
 8012b5c:	f108 0801 	add.w	r8, r8, #1
 8012b60:	f104 0404 	add.w	r4, r4, #4
 8012b64:	d00e      	beq.n	8012b84 <_DrawBitmap+0x3e0>
 8012b66:	0876      	lsrs	r6, r6, #1
 8012b68:	e7e7      	b.n	8012b3a <_DrawBitmap+0x396>
 8012b6a:	07f1      	lsls	r1, r6, #31
 8012b6c:	bf44      	itt	mi
 8012b6e:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 8012b70:	6023      	strmi	r3, [r4, #0]
 8012b72:	3d01      	subs	r5, #1
 8012b74:	f104 0404 	add.w	r4, r4, #4
 8012b78:	d004      	beq.n	8012b84 <_DrawBitmap+0x3e0>
 8012b7a:	0876      	lsrs	r6, r6, #1
 8012b7c:	2e00      	cmp	r6, #0
 8012b7e:	d1f4      	bne.n	8012b6a <_DrawBitmap+0x3c6>
 8012b80:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8012b84:	b31f      	cbz	r7, 8012bce <_DrawBitmap+0x42a>
 8012b86:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8012b8a:	4a69      	ldr	r2, [pc, #420]	; (8012d30 <_DrawBitmap+0x58c>)
 8012b8c:	2508      	movs	r5, #8
 8012b8e:	5cd6      	ldrb	r6, [r2, r3]
 8012b90:	e7cc      	b.n	8012b2c <_DrawBitmap+0x388>
 8012b92:	6803      	ldr	r3, [r0, #0]
 8012b94:	691b      	ldr	r3, [r3, #16]
 8012b96:	689b      	ldr	r3, [r3, #8]
 8012b98:	4798      	blx	r3
 8012b9a:	42bd      	cmp	r5, r7
 8012b9c:	bf28      	it	cs
 8012b9e:	463d      	movcs	r5, r7
 8012ba0:	1b7f      	subs	r7, r7, r5
 8012ba2:	4629      	mov	r1, r5
 8012ba4:	4623      	mov	r3, r4
 8012ba6:	07f2      	lsls	r2, r6, #31
 8012ba8:	bf42      	ittt	mi
 8012baa:	681a      	ldrmi	r2, [r3, #0]
 8012bac:	4042      	eormi	r2, r0
 8012bae:	601a      	strmi	r2, [r3, #0]
 8012bb0:	3901      	subs	r1, #1
 8012bb2:	f103 0304 	add.w	r3, r3, #4
 8012bb6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012bba:	d1f4      	bne.n	8012ba6 <_DrawBitmap+0x402>
 8012bbc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8012bc0:	b12f      	cbz	r7, 8012bce <_DrawBitmap+0x42a>
 8012bc2:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8012bc6:	4a5a      	ldr	r2, [pc, #360]	; (8012d30 <_DrawBitmap+0x58c>)
 8012bc8:	2508      	movs	r5, #8
 8012bca:	5cd6      	ldrb	r6, [r2, r3]
 8012bcc:	e7e5      	b.n	8012b9a <_DrawBitmap+0x3f6>
 8012bce:	a80e      	add	r0, sp, #56	; 0x38
 8012bd0:	f7f8 f964 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012bd4:	e15e      	b.n	8012e94 <_DrawBitmap+0x6f0>
 8012bd6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012bd8:	f1c3 0504 	rsb	r5, r3, #4
 8012bdc:	9b04      	ldr	r3, [sp, #16]
 8012bde:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8012be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012be4:	409e      	lsls	r6, r3
 8012be6:	4b51      	ldr	r3, [pc, #324]	; (8012d2c <_DrawBitmap+0x588>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	7c1b      	ldrb	r3, [r3, #16]
 8012bec:	f003 0303 	and.w	r3, r3, #3
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	b2ed      	uxtb	r5, r5
 8012bf4:	b2f6      	uxtb	r6, r6
 8012bf6:	d009      	beq.n	8012c0c <_DrawBitmap+0x468>
 8012bf8:	d30a      	bcc.n	8012c10 <_DrawBitmap+0x46c>
 8012bfa:	2b02      	cmp	r3, #2
 8012bfc:	f040 814a 	bne.w	8012e94 <_DrawBitmap+0x6f0>
 8012c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c02:	9309      	str	r3, [sp, #36]	; 0x24
 8012c04:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012c08:	9f03      	ldr	r7, [sp, #12]
 8012c0a:	e035      	b.n	8012c78 <_DrawBitmap+0x4d4>
 8012c0c:	9b02      	ldr	r3, [sp, #8]
 8012c0e:	e071      	b.n	8012cf4 <_DrawBitmap+0x550>
 8012c10:	9b02      	ldr	r3, [sp, #8]
 8012c12:	429d      	cmp	r5, r3
 8012c14:	bfc8      	it	gt
 8012c16:	b2dd      	uxtbgt	r5, r3
 8012c18:	1b5b      	subs	r3, r3, r5
 8012c1a:	462a      	mov	r2, r5
 8012c1c:	4621      	mov	r1, r4
 8012c1e:	09b0      	lsrs	r0, r6, #6
 8012c20:	3a01      	subs	r2, #1
 8012c22:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 8012c26:	f841 0b04 	str.w	r0, [r1], #4
 8012c2a:	00b6      	lsls	r6, r6, #2
 8012c2c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8012c30:	b2f6      	uxtb	r6, r6
 8012c32:	d1f4      	bne.n	8012c1e <_DrawBitmap+0x47a>
 8012c34:	3d01      	subs	r5, #1
 8012c36:	b2ed      	uxtb	r5, r5
 8012c38:	3501      	adds	r5, #1
 8012c3a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f000 8128 	beq.w	8012e94 <_DrawBitmap+0x6f0>
 8012c44:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8012c48:	2504      	movs	r5, #4
 8012c4a:	e7e2      	b.n	8012c12 <_DrawBitmap+0x46e>
 8012c4c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8012c50:	d124      	bne.n	8012c9c <_DrawBitmap+0x4f8>
 8012c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c54:	f109 0901 	add.w	r9, r9, #1
 8012c58:	00b6      	lsls	r6, r6, #2
 8012c5a:	4599      	cmp	r9, r3
 8012c5c:	b2f6      	uxtb	r6, r6
 8012c5e:	d1f5      	bne.n	8012c4c <_DrawBitmap+0x4a8>
 8012c60:	1c6b      	adds	r3, r5, #1
 8012c62:	3701      	adds	r7, #1
 8012c64:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012c68:	442f      	add	r7, r5
 8012c6a:	f1b8 0f00 	cmp.w	r8, #0
 8012c6e:	f000 8111 	beq.w	8012e94 <_DrawBitmap+0x6f0>
 8012c72:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8012c76:	2504      	movs	r5, #4
 8012c78:	4545      	cmp	r5, r8
 8012c7a:	bfc8      	it	gt
 8012c7c:	fa5f f588 	uxtbgt.w	r5, r8
 8012c80:	ebc5 0808 	rsb	r8, r5, r8
 8012c84:	3d01      	subs	r5, #1
 8012c86:	b2ed      	uxtb	r5, r5
 8012c88:	1c7b      	adds	r3, r7, #1
 8012c8a:	442b      	add	r3, r5
 8012c8c:	930d      	str	r3, [sp, #52]	; 0x34
 8012c8e:	f06f 0303 	mvn.w	r3, #3
 8012c92:	fb03 4307 	mla	r3, r3, r7, r4
 8012c96:	930c      	str	r3, [sp, #48]	; 0x30
 8012c98:	46b9      	mov	r9, r7
 8012c9a:	e7d7      	b.n	8012c4c <_DrawBitmap+0x4a8>
 8012c9c:	09b3      	lsrs	r3, r6, #6
 8012c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ca0:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8012ca4:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 8012ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d0d1      	beq.n	8012c52 <_DrawBitmap+0x4ae>
 8012cae:	689b      	ldr	r3, [r3, #8]
 8012cb0:	9a05      	ldr	r2, [sp, #20]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cb6:	4649      	mov	r1, r9
 8012cb8:	4798      	blx	r3
 8012cba:	e7ca      	b.n	8012c52 <_DrawBitmap+0x4ae>
 8012cbc:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8012cc0:	bf18      	it	ne
 8012cc2:	6801      	ldrne	r1, [r0, #0]
 8012cc4:	f102 32ff 	add.w	r2, r2, #4294967295
 8012cc8:	bf1c      	itt	ne
 8012cca:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 8012cce:	6001      	strne	r1, [r0, #0]
 8012cd0:	00b6      	lsls	r6, r6, #2
 8012cd2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8012cd6:	f100 0004 	add.w	r0, r0, #4
 8012cda:	b2f6      	uxtb	r6, r6
 8012cdc:	d1ee      	bne.n	8012cbc <_DrawBitmap+0x518>
 8012cde:	3d01      	subs	r5, #1
 8012ce0:	b2ed      	uxtb	r5, r5
 8012ce2:	3501      	adds	r5, #1
 8012ce4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 80d3 	beq.w	8012e94 <_DrawBitmap+0x6f0>
 8012cee:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8012cf2:	2504      	movs	r5, #4
 8012cf4:	429d      	cmp	r5, r3
 8012cf6:	bfc8      	it	gt
 8012cf8:	b2dd      	uxtbgt	r5, r3
 8012cfa:	1b5b      	subs	r3, r3, r5
 8012cfc:	462a      	mov	r2, r5
 8012cfe:	4620      	mov	r0, r4
 8012d00:	e7dc      	b.n	8012cbc <_DrawBitmap+0x518>
 8012d02:	9b04      	ldr	r3, [sp, #16]
 8012d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012d0a:	4093      	lsls	r3, r2
 8012d0c:	4a07      	ldr	r2, [pc, #28]	; (8012d2c <_DrawBitmap+0x588>)
 8012d0e:	6812      	ldr	r2, [r2, #0]
 8012d10:	7c12      	ldrb	r2, [r2, #16]
 8012d12:	f002 0203 	and.w	r2, r2, #3
 8012d16:	2a01      	cmp	r2, #1
 8012d18:	b2dd      	uxtb	r5, r3
 8012d1a:	f000 8095 	beq.w	8012e48 <_DrawBitmap+0x6a4>
 8012d1e:	d309      	bcc.n	8012d34 <_DrawBitmap+0x590>
 8012d20:	2a02      	cmp	r2, #2
 8012d22:	d039      	beq.n	8012d98 <_DrawBitmap+0x5f4>
 8012d24:	e0b6      	b.n	8012e94 <_DrawBitmap+0x6f0>
 8012d26:	bf00      	nop
 8012d28:	0801aa54 	.word	0x0801aa54
 8012d2c:	20000014 	.word	0x20000014
 8012d30:	0801a8f0 	.word	0x0801a8f0
 8012d34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012d36:	b153      	cbz	r3, 8012d4e <_DrawBitmap+0x5aa>
 8012d38:	092d      	lsrs	r5, r5, #4
 8012d3a:	9a04      	ldr	r2, [sp, #16]
 8012d3c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8012d40:	6023      	str	r3, [r4, #0]
 8012d42:	9b02      	ldr	r3, [sp, #8]
 8012d44:	9c07      	ldr	r4, [sp, #28]
 8012d46:	7815      	ldrb	r5, [r2, #0]
 8012d48:	3b01      	subs	r3, #1
 8012d4a:	4692      	mov	sl, r2
 8012d4c:	e000      	b.n	8012d50 <_DrawBitmap+0x5ac>
 8012d4e:	9b02      	ldr	r3, [sp, #8]
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	dd19      	ble.n	8012d88 <_DrawBitmap+0x5e4>
 8012d54:	1058      	asrs	r0, r3, #1
 8012d56:	f104 0208 	add.w	r2, r4, #8
 8012d5a:	f003 0301 	and.w	r3, r3, #1
 8012d5e:	eb0a 0600 	add.w	r6, sl, r0
 8012d62:	0929      	lsrs	r1, r5, #4
 8012d64:	f005 050f 	and.w	r5, r5, #15
 8012d68:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 8012d6c:	f842 1c08 	str.w	r1, [r2, #-8]
 8012d70:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8012d74:	f842 1c04 	str.w	r1, [r2, #-4]
 8012d78:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8012d7c:	45b2      	cmp	sl, r6
 8012d7e:	f102 0208 	add.w	r2, r2, #8
 8012d82:	d1ee      	bne.n	8012d62 <_DrawBitmap+0x5be>
 8012d84:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	f000 8083 	beq.w	8012e94 <_DrawBitmap+0x6f0>
 8012d8e:	092d      	lsrs	r5, r5, #4
 8012d90:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8012d94:	6023      	str	r3, [r4, #0]
 8012d96:	e07d      	b.n	8012e94 <_DrawBitmap+0x6f0>
 8012d98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012d9a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8012d9c:	b1ba      	cbz	r2, 8012dce <_DrawBitmap+0x62a>
 8012d9e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8012da2:	d00a      	beq.n	8012dba <_DrawBitmap+0x616>
 8012da4:	092d      	lsrs	r5, r5, #4
 8012da6:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	b12e      	cbz	r6, 8012dba <_DrawBitmap+0x616>
 8012dae:	68b3      	ldr	r3, [r6, #8]
 8012db0:	9a05      	ldr	r2, [sp, #20]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	9903      	ldr	r1, [sp, #12]
 8012db6:	4630      	mov	r0, r6
 8012db8:	4798      	blx	r3
 8012dba:	9b03      	ldr	r3, [sp, #12]
 8012dbc:	9c07      	ldr	r4, [sp, #28]
 8012dbe:	1c5f      	adds	r7, r3, #1
 8012dc0:	9b02      	ldr	r3, [sp, #8]
 8012dc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8012dc6:	9b04      	ldr	r3, [sp, #16]
 8012dc8:	781d      	ldrb	r5, [r3, #0]
 8012dca:	469a      	mov	sl, r3
 8012dcc:	e00f      	b.n	8012dee <_DrawBitmap+0x64a>
 8012dce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012dd2:	9f03      	ldr	r7, [sp, #12]
 8012dd4:	e00b      	b.n	8012dee <_DrawBitmap+0x64a>
 8012dd6:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8012dda:	d10c      	bne.n	8012df6 <_DrawBitmap+0x652>
 8012ddc:	f015 050f 	ands.w	r5, r5, #15
 8012de0:	d116      	bne.n	8012e10 <_DrawBitmap+0x66c>
 8012de2:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8012de6:	3408      	adds	r4, #8
 8012de8:	3702      	adds	r7, #2
 8012dea:	f1a8 0802 	sub.w	r8, r8, #2
 8012dee:	f1b8 0f01 	cmp.w	r8, #1
 8012df2:	dcf0      	bgt.n	8012dd6 <_DrawBitmap+0x632>
 8012df4:	e018      	b.n	8012e28 <_DrawBitmap+0x684>
 8012df6:	092b      	lsrs	r3, r5, #4
 8012df8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	2e00      	cmp	r6, #0
 8012e00:	d0ec      	beq.n	8012ddc <_DrawBitmap+0x638>
 8012e02:	68b3      	ldr	r3, [r6, #8]
 8012e04:	9a05      	ldr	r2, [sp, #20]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4639      	mov	r1, r7
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	4798      	blx	r3
 8012e0e:	e7e5      	b.n	8012ddc <_DrawBitmap+0x638>
 8012e10:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8012e14:	6063      	str	r3, [r4, #4]
 8012e16:	2e00      	cmp	r6, #0
 8012e18:	d0e3      	beq.n	8012de2 <_DrawBitmap+0x63e>
 8012e1a:	68b3      	ldr	r3, [r6, #8]
 8012e1c:	9a05      	ldr	r2, [sp, #20]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	1c79      	adds	r1, r7, #1
 8012e22:	4630      	mov	r0, r6
 8012e24:	4798      	blx	r3
 8012e26:	e7dc      	b.n	8012de2 <_DrawBitmap+0x63e>
 8012e28:	f1b8 0f00 	cmp.w	r8, #0
 8012e2c:	d032      	beq.n	8012e94 <_DrawBitmap+0x6f0>
 8012e2e:	092d      	lsrs	r5, r5, #4
 8012e30:	d030      	beq.n	8012e94 <_DrawBitmap+0x6f0>
 8012e32:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8012e36:	6023      	str	r3, [r4, #0]
 8012e38:	b366      	cbz	r6, 8012e94 <_DrawBitmap+0x6f0>
 8012e3a:	68b3      	ldr	r3, [r6, #8]
 8012e3c:	9a05      	ldr	r2, [sp, #20]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	4639      	mov	r1, r7
 8012e42:	4630      	mov	r0, r6
 8012e44:	4798      	blx	r3
 8012e46:	e025      	b.n	8012e94 <_DrawBitmap+0x6f0>
 8012e48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012e4a:	9a02      	ldr	r2, [sp, #8]
 8012e4c:	f1c3 0302 	rsb	r3, r3, #2
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	4293      	cmp	r3, r2
 8012e54:	bfc8      	it	gt
 8012e56:	b2d3      	uxtbgt	r3, r2
 8012e58:	1ad2      	subs	r2, r2, r3
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	4626      	mov	r6, r4
 8012e5e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8012e62:	bf18      	it	ne
 8012e64:	6830      	ldrne	r0, [r6, #0]
 8012e66:	f101 31ff 	add.w	r1, r1, #4294967295
 8012e6a:	bf1c      	itt	ne
 8012e6c:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8012e70:	6030      	strne	r0, [r6, #0]
 8012e72:	012d      	lsls	r5, r5, #4
 8012e74:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8012e78:	f106 0604 	add.w	r6, r6, #4
 8012e7c:	b2ed      	uxtb	r5, r5
 8012e7e:	d1ee      	bne.n	8012e5e <_DrawBitmap+0x6ba>
 8012e80:	3b01      	subs	r3, #1
 8012e82:	b2db      	uxtb	r3, r3
 8012e84:	3301      	adds	r3, #1
 8012e86:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012e8a:	b11a      	cbz	r2, 8012e94 <_DrawBitmap+0x6f0>
 8012e8c:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8012e90:	2302      	movs	r3, #2
 8012e92:	e7de      	b.n	8012e52 <_DrawBitmap+0x6ae>
 8012e94:	9b05      	ldr	r3, [sp, #20]
 8012e96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012e98:	3301      	adds	r3, #1
 8012e9a:	9305      	str	r3, [sp, #20]
 8012e9c:	9b04      	ldr	r3, [sp, #16]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	9304      	str	r3, [sp, #16]
 8012ea2:	9a08      	ldr	r2, [sp, #32]
 8012ea4:	9b07      	ldr	r3, [sp, #28]
 8012ea6:	4413      	add	r3, r2
 8012ea8:	9307      	str	r3, [sp, #28]
 8012eaa:	e5ec      	b.n	8012a86 <_DrawBitmap+0x2e2>
 8012eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012eae:	b113      	cbz	r3, 8012eb6 <_DrawBitmap+0x712>
 8012eb0:	a80f      	add	r0, sp, #60	; 0x3c
 8012eb2:	f7f7 fff3 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012eb6:	b011      	add	sp, #68	; 0x44
 8012eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012ebc <GUI_MEMDEV__WriteToActiveAlpha>:
 8012ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec0:	4c5c      	ldr	r4, [pc, #368]	; (8013034 <GUI_MEMDEV__WriteToActiveAlpha+0x178>)
 8012ec2:	4f5d      	ldr	r7, [pc, #372]	; (8013038 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>)
 8012ec4:	6823      	ldr	r3, [r4, #0]
 8012ec6:	7c5b      	ldrb	r3, [r3, #17]
 8012ec8:	b091      	sub	sp, #68	; 0x44
 8012eca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8012ece:	900c      	str	r0, [sp, #48]	; 0x30
 8012ed0:	4688      	mov	r8, r1
 8012ed2:	4615      	mov	r5, r2
 8012ed4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8012ed8:	f7f7 ffd2 	bl	800ae80 <GUI_ALLOC_LockH>
 8012edc:	4603      	mov	r3, r0
 8012ede:	a810      	add	r0, sp, #64	; 0x40
 8012ee0:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 8012ee4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012ee8:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	691b      	ldr	r3, [r3, #16]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	9308      	str	r3, [sp, #32]
 8012ef4:	f7f7 ffd2 	bl	800ae9c <GUI_ALLOC_UnlockH>
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	7c5b      	ldrb	r3, [r3, #17]
 8012efc:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8012f00:	68c3      	ldr	r3, [r0, #12]
 8012f02:	2108      	movs	r1, #8
 8012f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f06:	4798      	blx	r3
 8012f08:	2817      	cmp	r0, #23
 8012f0a:	4607      	mov	r7, r0
 8012f0c:	d804      	bhi.n	8012f18 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 8012f0e:	2803      	cmp	r0, #3
 8012f10:	bf14      	ite	ne
 8012f12:	4607      	movne	r7, r0
 8012f14:	2708      	moveq	r7, #8
 8012f16:	e000      	b.n	8012f1a <GUI_MEMDEV__WriteToActiveAlpha+0x5e>
 8012f18:	2720      	movs	r7, #32
 8012f1a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012f20:	2000      	movs	r0, #0
 8012f22:	f8da 3000 	ldr.w	r3, [sl]
 8012f26:	930a      	str	r3, [sp, #40]	; 0x28
 8012f28:	f7fe fa00 	bl	801132c <GUI__AllocAlphaBuffer>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d17e      	bne.n	801302e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 8012f30:	6822      	ldr	r2, [r4, #0]
 8012f32:	eb08 0406 	add.w	r4, r8, r6
 8012f36:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8012f3a:	3c01      	subs	r4, #1
 8012f3c:	1ae4      	subs	r4, r4, r3
 8012f3e:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8012f42:	2c00      	cmp	r4, #0
 8012f44:	bfcc      	ite	gt
 8012f46:	1b34      	subgt	r4, r6, r4
 8012f48:	4634      	movle	r4, r6
 8012f4a:	4598      	cmp	r8, r3
 8012f4c:	bfbd      	ittte	lt
 8012f4e:	ebc8 0103 	rsblt	r1, r8, r3
 8012f52:	1a64      	sublt	r4, r4, r1
 8012f54:	4698      	movlt	r8, r3
 8012f56:	2100      	movge	r1, #0
 8012f58:	2c00      	cmp	r4, #0
 8012f5a:	dd68      	ble.n	801302e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 8012f5c:	eb05 0309 	add.w	r3, r5, r9
 8012f60:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 8012f64:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	1a1b      	subs	r3, r3, r0
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	bfc8      	it	gt
 8012f70:	ebc3 0909 	rsbgt	r9, r3, r9
 8012f74:	4295      	cmp	r5, r2
 8012f76:	bfbd      	ittte	lt
 8012f78:	1b53      	sublt	r3, r2, r5
 8012f7a:	ebc3 0909 	rsblt	r9, r3, r9
 8012f7e:	4615      	movlt	r5, r2
 8012f80:	2300      	movge	r3, #0
 8012f82:	f1b9 0f00 	cmp.w	r9, #0
 8012f86:	dd52      	ble.n	801302e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 8012f88:	fb03 1106 	mla	r1, r3, r6, r1
 8012f8c:	008b      	lsls	r3, r1, #2
 8012f8e:	9307      	str	r3, [sp, #28]
 8012f90:	eb05 0309 	add.w	r3, r5, r9
 8012f94:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012f98:	f7ff f83e 	bl	8012018 <GUI_MEMDEV_GetDataPtr>
 8012f9c:	ab0f      	add	r3, sp, #60	; 0x3c
 8012f9e:	9a07      	ldr	r2, [sp, #28]
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	9b08      	ldr	r3, [sp, #32]
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	1882      	adds	r2, r0, r2
 8012fa8:	4623      	mov	r3, r4
 8012faa:	4629      	mov	r1, r5
 8012fac:	4640      	mov	r0, r8
 8012fae:	f7fe f8d3 	bl	8011158 <GUI__DoAlphaBlending>
 8012fb2:	4681      	mov	r9, r0
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d03a      	beq.n	801302e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 8012fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fba:	461a      	mov	r2, r3
 8012fbc:	4b1f      	ldr	r3, [pc, #124]	; (801303c <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d01c      	beq.n	8012ffc <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8012fc2:	4653      	mov	r3, sl
 8012fc4:	463a      	mov	r2, r7
 8012fc6:	4621      	mov	r1, r4
 8012fc8:	f7fe fb37 	bl	801163a <GUI__CompactPixelIndicesEx>
 8012fcc:	b9b0      	cbnz	r0, 8012ffc <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8012fce:	f8da b010 	ldr.w	fp, [sl, #16]
 8012fd2:	f1bb 0f00 	cmp.w	fp, #0
 8012fd6:	d005      	beq.n	8012fe4 <GUI_MEMDEV__WriteToActiveAlpha+0x128>
 8012fd8:	2304      	movs	r3, #4
 8012fda:	4632      	mov	r2, r6
 8012fdc:	4649      	mov	r1, r9
 8012fde:	4648      	mov	r0, r9
 8012fe0:	47d8      	blx	fp
 8012fe2:	e00b      	b.n	8012ffc <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8012fe4:	464b      	mov	r3, r9
 8012fe6:	46b3      	mov	fp, r6
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	930d      	str	r3, [sp, #52]	; 0x34
 8012fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fee:	4798      	blx	r3
 8012ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ff2:	f1bb 0b01 	subs.w	fp, fp, #1
 8012ff6:	f843 0b04 	str.w	r0, [r3], #4
 8012ffa:	d1f5      	bne.n	8012fe8 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	9305      	str	r3, [sp, #20]
 8013000:	9303      	str	r3, [sp, #12]
 8013002:	2301      	movs	r3, #1
 8013004:	9301      	str	r3, [sp, #4]
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	f8cd 9010 	str.w	r9, [sp, #16]
 801300c:	9702      	str	r7, [sp, #8]
 801300e:	4622      	mov	r2, r4
 8013010:	4629      	mov	r1, r5
 8013012:	4640      	mov	r0, r8
 8013014:	f7f9 f832 	bl	800c07c <LCD_DrawBitmap>
 8013018:	9b07      	ldr	r3, [sp, #28]
 801301a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801301e:	9307      	str	r3, [sp, #28]
 8013020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013022:	f105 0b01 	add.w	fp, r5, #1
 8013026:	459b      	cmp	fp, r3
 8013028:	d001      	beq.n	801302e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 801302a:	465d      	mov	r5, fp
 801302c:	e7b3      	b.n	8012f96 <GUI_MEMDEV__WriteToActiveAlpha+0xda>
 801302e:	b011      	add	sp, #68	; 0x44
 8013030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013034:	20000014 	.word	0x20000014
 8013038:	2001e6e8 	.word	0x2001e6e8
 801303c:	080124a5 	.word	0x080124a5

08013040 <__errno>:
 8013040:	4b01      	ldr	r3, [pc, #4]	; (8013048 <__errno+0x8>)
 8013042:	6818      	ldr	r0, [r3, #0]
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20000090 	.word	0x20000090

0801304c <__libc_init_array>:
 801304c:	b570      	push	{r4, r5, r6, lr}
 801304e:	4d0d      	ldr	r5, [pc, #52]	; (8013084 <__libc_init_array+0x38>)
 8013050:	4c0d      	ldr	r4, [pc, #52]	; (8013088 <__libc_init_array+0x3c>)
 8013052:	1b64      	subs	r4, r4, r5
 8013054:	10a4      	asrs	r4, r4, #2
 8013056:	2600      	movs	r6, #0
 8013058:	42a6      	cmp	r6, r4
 801305a:	d109      	bne.n	8013070 <__libc_init_array+0x24>
 801305c:	4d0b      	ldr	r5, [pc, #44]	; (801308c <__libc_init_array+0x40>)
 801305e:	4c0c      	ldr	r4, [pc, #48]	; (8013090 <__libc_init_array+0x44>)
 8013060:	f002 fed4 	bl	8015e0c <_init>
 8013064:	1b64      	subs	r4, r4, r5
 8013066:	10a4      	asrs	r4, r4, #2
 8013068:	2600      	movs	r6, #0
 801306a:	42a6      	cmp	r6, r4
 801306c:	d105      	bne.n	801307a <__libc_init_array+0x2e>
 801306e:	bd70      	pop	{r4, r5, r6, pc}
 8013070:	f855 3b04 	ldr.w	r3, [r5], #4
 8013074:	4798      	blx	r3
 8013076:	3601      	adds	r6, #1
 8013078:	e7ee      	b.n	8013058 <__libc_init_array+0xc>
 801307a:	f855 3b04 	ldr.w	r3, [r5], #4
 801307e:	4798      	blx	r3
 8013080:	3601      	adds	r6, #1
 8013082:	e7f2      	b.n	801306a <__libc_init_array+0x1e>
 8013084:	0801ae9c 	.word	0x0801ae9c
 8013088:	0801ae9c 	.word	0x0801ae9c
 801308c:	0801ae9c 	.word	0x0801ae9c
 8013090:	0801aea0 	.word	0x0801aea0

08013094 <malloc>:
 8013094:	4b02      	ldr	r3, [pc, #8]	; (80130a0 <malloc+0xc>)
 8013096:	4601      	mov	r1, r0
 8013098:	6818      	ldr	r0, [r3, #0]
 801309a:	f000 b88b 	b.w	80131b4 <_malloc_r>
 801309e:	bf00      	nop
 80130a0:	20000090 	.word	0x20000090

080130a4 <free>:
 80130a4:	4b02      	ldr	r3, [pc, #8]	; (80130b0 <free+0xc>)
 80130a6:	4601      	mov	r1, r0
 80130a8:	6818      	ldr	r0, [r3, #0]
 80130aa:	f000 b833 	b.w	8013114 <_free_r>
 80130ae:	bf00      	nop
 80130b0:	20000090 	.word	0x20000090

080130b4 <memcpy>:
 80130b4:	440a      	add	r2, r1
 80130b6:	4291      	cmp	r1, r2
 80130b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80130bc:	d100      	bne.n	80130c0 <memcpy+0xc>
 80130be:	4770      	bx	lr
 80130c0:	b510      	push	{r4, lr}
 80130c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130ca:	4291      	cmp	r1, r2
 80130cc:	d1f9      	bne.n	80130c2 <memcpy+0xe>
 80130ce:	bd10      	pop	{r4, pc}

080130d0 <memmove>:
 80130d0:	4288      	cmp	r0, r1
 80130d2:	b510      	push	{r4, lr}
 80130d4:	eb01 0402 	add.w	r4, r1, r2
 80130d8:	d902      	bls.n	80130e0 <memmove+0x10>
 80130da:	4284      	cmp	r4, r0
 80130dc:	4623      	mov	r3, r4
 80130de:	d807      	bhi.n	80130f0 <memmove+0x20>
 80130e0:	1e43      	subs	r3, r0, #1
 80130e2:	42a1      	cmp	r1, r4
 80130e4:	d008      	beq.n	80130f8 <memmove+0x28>
 80130e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130ee:	e7f8      	b.n	80130e2 <memmove+0x12>
 80130f0:	4402      	add	r2, r0
 80130f2:	4601      	mov	r1, r0
 80130f4:	428a      	cmp	r2, r1
 80130f6:	d100      	bne.n	80130fa <memmove+0x2a>
 80130f8:	bd10      	pop	{r4, pc}
 80130fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013102:	e7f7      	b.n	80130f4 <memmove+0x24>

08013104 <memset>:
 8013104:	4402      	add	r2, r0
 8013106:	4603      	mov	r3, r0
 8013108:	4293      	cmp	r3, r2
 801310a:	d100      	bne.n	801310e <memset+0xa>
 801310c:	4770      	bx	lr
 801310e:	f803 1b01 	strb.w	r1, [r3], #1
 8013112:	e7f9      	b.n	8013108 <memset+0x4>

08013114 <_free_r>:
 8013114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013116:	2900      	cmp	r1, #0
 8013118:	d048      	beq.n	80131ac <_free_r+0x98>
 801311a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801311e:	9001      	str	r0, [sp, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	f1a1 0404 	sub.w	r4, r1, #4
 8013126:	bfb8      	it	lt
 8013128:	18e4      	addlt	r4, r4, r3
 801312a:	f001 fcc7 	bl	8014abc <__malloc_lock>
 801312e:	4a20      	ldr	r2, [pc, #128]	; (80131b0 <_free_r+0x9c>)
 8013130:	9801      	ldr	r0, [sp, #4]
 8013132:	6813      	ldr	r3, [r2, #0]
 8013134:	4615      	mov	r5, r2
 8013136:	b933      	cbnz	r3, 8013146 <_free_r+0x32>
 8013138:	6063      	str	r3, [r4, #4]
 801313a:	6014      	str	r4, [r2, #0]
 801313c:	b003      	add	sp, #12
 801313e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013142:	f001 bcc1 	b.w	8014ac8 <__malloc_unlock>
 8013146:	42a3      	cmp	r3, r4
 8013148:	d90b      	bls.n	8013162 <_free_r+0x4e>
 801314a:	6821      	ldr	r1, [r4, #0]
 801314c:	1862      	adds	r2, r4, r1
 801314e:	4293      	cmp	r3, r2
 8013150:	bf04      	itt	eq
 8013152:	681a      	ldreq	r2, [r3, #0]
 8013154:	685b      	ldreq	r3, [r3, #4]
 8013156:	6063      	str	r3, [r4, #4]
 8013158:	bf04      	itt	eq
 801315a:	1852      	addeq	r2, r2, r1
 801315c:	6022      	streq	r2, [r4, #0]
 801315e:	602c      	str	r4, [r5, #0]
 8013160:	e7ec      	b.n	801313c <_free_r+0x28>
 8013162:	461a      	mov	r2, r3
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	b10b      	cbz	r3, 801316c <_free_r+0x58>
 8013168:	42a3      	cmp	r3, r4
 801316a:	d9fa      	bls.n	8013162 <_free_r+0x4e>
 801316c:	6811      	ldr	r1, [r2, #0]
 801316e:	1855      	adds	r5, r2, r1
 8013170:	42a5      	cmp	r5, r4
 8013172:	d10b      	bne.n	801318c <_free_r+0x78>
 8013174:	6824      	ldr	r4, [r4, #0]
 8013176:	4421      	add	r1, r4
 8013178:	1854      	adds	r4, r2, r1
 801317a:	42a3      	cmp	r3, r4
 801317c:	6011      	str	r1, [r2, #0]
 801317e:	d1dd      	bne.n	801313c <_free_r+0x28>
 8013180:	681c      	ldr	r4, [r3, #0]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	6053      	str	r3, [r2, #4]
 8013186:	4421      	add	r1, r4
 8013188:	6011      	str	r1, [r2, #0]
 801318a:	e7d7      	b.n	801313c <_free_r+0x28>
 801318c:	d902      	bls.n	8013194 <_free_r+0x80>
 801318e:	230c      	movs	r3, #12
 8013190:	6003      	str	r3, [r0, #0]
 8013192:	e7d3      	b.n	801313c <_free_r+0x28>
 8013194:	6825      	ldr	r5, [r4, #0]
 8013196:	1961      	adds	r1, r4, r5
 8013198:	428b      	cmp	r3, r1
 801319a:	bf04      	itt	eq
 801319c:	6819      	ldreq	r1, [r3, #0]
 801319e:	685b      	ldreq	r3, [r3, #4]
 80131a0:	6063      	str	r3, [r4, #4]
 80131a2:	bf04      	itt	eq
 80131a4:	1949      	addeq	r1, r1, r5
 80131a6:	6021      	streq	r1, [r4, #0]
 80131a8:	6054      	str	r4, [r2, #4]
 80131aa:	e7c7      	b.n	801313c <_free_r+0x28>
 80131ac:	b003      	add	sp, #12
 80131ae:	bd30      	pop	{r4, r5, pc}
 80131b0:	2001d97c 	.word	0x2001d97c

080131b4 <_malloc_r>:
 80131b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b6:	1ccd      	adds	r5, r1, #3
 80131b8:	f025 0503 	bic.w	r5, r5, #3
 80131bc:	3508      	adds	r5, #8
 80131be:	2d0c      	cmp	r5, #12
 80131c0:	bf38      	it	cc
 80131c2:	250c      	movcc	r5, #12
 80131c4:	2d00      	cmp	r5, #0
 80131c6:	4606      	mov	r6, r0
 80131c8:	db01      	blt.n	80131ce <_malloc_r+0x1a>
 80131ca:	42a9      	cmp	r1, r5
 80131cc:	d903      	bls.n	80131d6 <_malloc_r+0x22>
 80131ce:	230c      	movs	r3, #12
 80131d0:	6033      	str	r3, [r6, #0]
 80131d2:	2000      	movs	r0, #0
 80131d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131d6:	f001 fc71 	bl	8014abc <__malloc_lock>
 80131da:	4921      	ldr	r1, [pc, #132]	; (8013260 <_malloc_r+0xac>)
 80131dc:	680a      	ldr	r2, [r1, #0]
 80131de:	4614      	mov	r4, r2
 80131e0:	b99c      	cbnz	r4, 801320a <_malloc_r+0x56>
 80131e2:	4f20      	ldr	r7, [pc, #128]	; (8013264 <_malloc_r+0xb0>)
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	b923      	cbnz	r3, 80131f2 <_malloc_r+0x3e>
 80131e8:	4621      	mov	r1, r4
 80131ea:	4630      	mov	r0, r6
 80131ec:	f000 fcbe 	bl	8013b6c <_sbrk_r>
 80131f0:	6038      	str	r0, [r7, #0]
 80131f2:	4629      	mov	r1, r5
 80131f4:	4630      	mov	r0, r6
 80131f6:	f000 fcb9 	bl	8013b6c <_sbrk_r>
 80131fa:	1c43      	adds	r3, r0, #1
 80131fc:	d123      	bne.n	8013246 <_malloc_r+0x92>
 80131fe:	230c      	movs	r3, #12
 8013200:	6033      	str	r3, [r6, #0]
 8013202:	4630      	mov	r0, r6
 8013204:	f001 fc60 	bl	8014ac8 <__malloc_unlock>
 8013208:	e7e3      	b.n	80131d2 <_malloc_r+0x1e>
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	1b5b      	subs	r3, r3, r5
 801320e:	d417      	bmi.n	8013240 <_malloc_r+0x8c>
 8013210:	2b0b      	cmp	r3, #11
 8013212:	d903      	bls.n	801321c <_malloc_r+0x68>
 8013214:	6023      	str	r3, [r4, #0]
 8013216:	441c      	add	r4, r3
 8013218:	6025      	str	r5, [r4, #0]
 801321a:	e004      	b.n	8013226 <_malloc_r+0x72>
 801321c:	6863      	ldr	r3, [r4, #4]
 801321e:	42a2      	cmp	r2, r4
 8013220:	bf0c      	ite	eq
 8013222:	600b      	streq	r3, [r1, #0]
 8013224:	6053      	strne	r3, [r2, #4]
 8013226:	4630      	mov	r0, r6
 8013228:	f001 fc4e 	bl	8014ac8 <__malloc_unlock>
 801322c:	f104 000b 	add.w	r0, r4, #11
 8013230:	1d23      	adds	r3, r4, #4
 8013232:	f020 0007 	bic.w	r0, r0, #7
 8013236:	1ac2      	subs	r2, r0, r3
 8013238:	d0cc      	beq.n	80131d4 <_malloc_r+0x20>
 801323a:	1a1b      	subs	r3, r3, r0
 801323c:	50a3      	str	r3, [r4, r2]
 801323e:	e7c9      	b.n	80131d4 <_malloc_r+0x20>
 8013240:	4622      	mov	r2, r4
 8013242:	6864      	ldr	r4, [r4, #4]
 8013244:	e7cc      	b.n	80131e0 <_malloc_r+0x2c>
 8013246:	1cc4      	adds	r4, r0, #3
 8013248:	f024 0403 	bic.w	r4, r4, #3
 801324c:	42a0      	cmp	r0, r4
 801324e:	d0e3      	beq.n	8013218 <_malloc_r+0x64>
 8013250:	1a21      	subs	r1, r4, r0
 8013252:	4630      	mov	r0, r6
 8013254:	f000 fc8a 	bl	8013b6c <_sbrk_r>
 8013258:	3001      	adds	r0, #1
 801325a:	d1dd      	bne.n	8013218 <_malloc_r+0x64>
 801325c:	e7cf      	b.n	80131fe <_malloc_r+0x4a>
 801325e:	bf00      	nop
 8013260:	2001d97c 	.word	0x2001d97c
 8013264:	2001d980 	.word	0x2001d980

08013268 <__cvt>:
 8013268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801326c:	ec55 4b10 	vmov	r4, r5, d0
 8013270:	2d00      	cmp	r5, #0
 8013272:	460e      	mov	r6, r1
 8013274:	4619      	mov	r1, r3
 8013276:	462b      	mov	r3, r5
 8013278:	bfbb      	ittet	lt
 801327a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801327e:	461d      	movlt	r5, r3
 8013280:	2300      	movge	r3, #0
 8013282:	232d      	movlt	r3, #45	; 0x2d
 8013284:	700b      	strb	r3, [r1, #0]
 8013286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013288:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801328c:	4691      	mov	r9, r2
 801328e:	f023 0820 	bic.w	r8, r3, #32
 8013292:	bfbc      	itt	lt
 8013294:	4622      	movlt	r2, r4
 8013296:	4614      	movlt	r4, r2
 8013298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801329c:	d005      	beq.n	80132aa <__cvt+0x42>
 801329e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80132a2:	d100      	bne.n	80132a6 <__cvt+0x3e>
 80132a4:	3601      	adds	r6, #1
 80132a6:	2102      	movs	r1, #2
 80132a8:	e000      	b.n	80132ac <__cvt+0x44>
 80132aa:	2103      	movs	r1, #3
 80132ac:	ab03      	add	r3, sp, #12
 80132ae:	9301      	str	r3, [sp, #4]
 80132b0:	ab02      	add	r3, sp, #8
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	ec45 4b10 	vmov	d0, r4, r5
 80132b8:	4653      	mov	r3, sl
 80132ba:	4632      	mov	r2, r6
 80132bc:	f000 fd14 	bl	8013ce8 <_dtoa_r>
 80132c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80132c4:	4607      	mov	r7, r0
 80132c6:	d102      	bne.n	80132ce <__cvt+0x66>
 80132c8:	f019 0f01 	tst.w	r9, #1
 80132cc:	d022      	beq.n	8013314 <__cvt+0xac>
 80132ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132d2:	eb07 0906 	add.w	r9, r7, r6
 80132d6:	d110      	bne.n	80132fa <__cvt+0x92>
 80132d8:	783b      	ldrb	r3, [r7, #0]
 80132da:	2b30      	cmp	r3, #48	; 0x30
 80132dc:	d10a      	bne.n	80132f4 <__cvt+0x8c>
 80132de:	2200      	movs	r2, #0
 80132e0:	2300      	movs	r3, #0
 80132e2:	4620      	mov	r0, r4
 80132e4:	4629      	mov	r1, r5
 80132e6:	f7ed fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80132ea:	b918      	cbnz	r0, 80132f4 <__cvt+0x8c>
 80132ec:	f1c6 0601 	rsb	r6, r6, #1
 80132f0:	f8ca 6000 	str.w	r6, [sl]
 80132f4:	f8da 3000 	ldr.w	r3, [sl]
 80132f8:	4499      	add	r9, r3
 80132fa:	2200      	movs	r2, #0
 80132fc:	2300      	movs	r3, #0
 80132fe:	4620      	mov	r0, r4
 8013300:	4629      	mov	r1, r5
 8013302:	f7ed fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013306:	b108      	cbz	r0, 801330c <__cvt+0xa4>
 8013308:	f8cd 900c 	str.w	r9, [sp, #12]
 801330c:	2230      	movs	r2, #48	; 0x30
 801330e:	9b03      	ldr	r3, [sp, #12]
 8013310:	454b      	cmp	r3, r9
 8013312:	d307      	bcc.n	8013324 <__cvt+0xbc>
 8013314:	9b03      	ldr	r3, [sp, #12]
 8013316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013318:	1bdb      	subs	r3, r3, r7
 801331a:	4638      	mov	r0, r7
 801331c:	6013      	str	r3, [r2, #0]
 801331e:	b004      	add	sp, #16
 8013320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013324:	1c59      	adds	r1, r3, #1
 8013326:	9103      	str	r1, [sp, #12]
 8013328:	701a      	strb	r2, [r3, #0]
 801332a:	e7f0      	b.n	801330e <__cvt+0xa6>

0801332c <__exponent>:
 801332c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801332e:	4603      	mov	r3, r0
 8013330:	2900      	cmp	r1, #0
 8013332:	bfb8      	it	lt
 8013334:	4249      	neglt	r1, r1
 8013336:	f803 2b02 	strb.w	r2, [r3], #2
 801333a:	bfb4      	ite	lt
 801333c:	222d      	movlt	r2, #45	; 0x2d
 801333e:	222b      	movge	r2, #43	; 0x2b
 8013340:	2909      	cmp	r1, #9
 8013342:	7042      	strb	r2, [r0, #1]
 8013344:	dd2a      	ble.n	801339c <__exponent+0x70>
 8013346:	f10d 0407 	add.w	r4, sp, #7
 801334a:	46a4      	mov	ip, r4
 801334c:	270a      	movs	r7, #10
 801334e:	46a6      	mov	lr, r4
 8013350:	460a      	mov	r2, r1
 8013352:	fb91 f6f7 	sdiv	r6, r1, r7
 8013356:	fb07 1516 	mls	r5, r7, r6, r1
 801335a:	3530      	adds	r5, #48	; 0x30
 801335c:	2a63      	cmp	r2, #99	; 0x63
 801335e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013362:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013366:	4631      	mov	r1, r6
 8013368:	dcf1      	bgt.n	801334e <__exponent+0x22>
 801336a:	3130      	adds	r1, #48	; 0x30
 801336c:	f1ae 0502 	sub.w	r5, lr, #2
 8013370:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013374:	1c44      	adds	r4, r0, #1
 8013376:	4629      	mov	r1, r5
 8013378:	4561      	cmp	r1, ip
 801337a:	d30a      	bcc.n	8013392 <__exponent+0x66>
 801337c:	f10d 0209 	add.w	r2, sp, #9
 8013380:	eba2 020e 	sub.w	r2, r2, lr
 8013384:	4565      	cmp	r5, ip
 8013386:	bf88      	it	hi
 8013388:	2200      	movhi	r2, #0
 801338a:	4413      	add	r3, r2
 801338c:	1a18      	subs	r0, r3, r0
 801338e:	b003      	add	sp, #12
 8013390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013396:	f804 2f01 	strb.w	r2, [r4, #1]!
 801339a:	e7ed      	b.n	8013378 <__exponent+0x4c>
 801339c:	2330      	movs	r3, #48	; 0x30
 801339e:	3130      	adds	r1, #48	; 0x30
 80133a0:	7083      	strb	r3, [r0, #2]
 80133a2:	70c1      	strb	r1, [r0, #3]
 80133a4:	1d03      	adds	r3, r0, #4
 80133a6:	e7f1      	b.n	801338c <__exponent+0x60>

080133a8 <_printf_float>:
 80133a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ac:	ed2d 8b02 	vpush	{d8}
 80133b0:	b08d      	sub	sp, #52	; 0x34
 80133b2:	460c      	mov	r4, r1
 80133b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80133b8:	4616      	mov	r6, r2
 80133ba:	461f      	mov	r7, r3
 80133bc:	4605      	mov	r5, r0
 80133be:	f001 fb75 	bl	8014aac <_localeconv_r>
 80133c2:	f8d0 a000 	ldr.w	sl, [r0]
 80133c6:	4650      	mov	r0, sl
 80133c8:	f7ec ff02 	bl	80001d0 <strlen>
 80133cc:	2300      	movs	r3, #0
 80133ce:	930a      	str	r3, [sp, #40]	; 0x28
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	9305      	str	r3, [sp, #20]
 80133d4:	f8d8 3000 	ldr.w	r3, [r8]
 80133d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80133dc:	3307      	adds	r3, #7
 80133de:	f023 0307 	bic.w	r3, r3, #7
 80133e2:	f103 0208 	add.w	r2, r3, #8
 80133e6:	f8c8 2000 	str.w	r2, [r8]
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80133f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80133f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80133fa:	9307      	str	r3, [sp, #28]
 80133fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8013400:	ee08 0a10 	vmov	s16, r0
 8013404:	4b9f      	ldr	r3, [pc, #636]	; (8013684 <_printf_float+0x2dc>)
 8013406:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801340a:	f04f 32ff 	mov.w	r2, #4294967295
 801340e:	f7ed fb8d 	bl	8000b2c <__aeabi_dcmpun>
 8013412:	bb88      	cbnz	r0, 8013478 <_printf_float+0xd0>
 8013414:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013418:	4b9a      	ldr	r3, [pc, #616]	; (8013684 <_printf_float+0x2dc>)
 801341a:	f04f 32ff 	mov.w	r2, #4294967295
 801341e:	f7ed fb67 	bl	8000af0 <__aeabi_dcmple>
 8013422:	bb48      	cbnz	r0, 8013478 <_printf_float+0xd0>
 8013424:	2200      	movs	r2, #0
 8013426:	2300      	movs	r3, #0
 8013428:	4640      	mov	r0, r8
 801342a:	4649      	mov	r1, r9
 801342c:	f7ed fb56 	bl	8000adc <__aeabi_dcmplt>
 8013430:	b110      	cbz	r0, 8013438 <_printf_float+0x90>
 8013432:	232d      	movs	r3, #45	; 0x2d
 8013434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013438:	4b93      	ldr	r3, [pc, #588]	; (8013688 <_printf_float+0x2e0>)
 801343a:	4894      	ldr	r0, [pc, #592]	; (801368c <_printf_float+0x2e4>)
 801343c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013440:	bf94      	ite	ls
 8013442:	4698      	movls	r8, r3
 8013444:	4680      	movhi	r8, r0
 8013446:	2303      	movs	r3, #3
 8013448:	6123      	str	r3, [r4, #16]
 801344a:	9b05      	ldr	r3, [sp, #20]
 801344c:	f023 0204 	bic.w	r2, r3, #4
 8013450:	6022      	str	r2, [r4, #0]
 8013452:	f04f 0900 	mov.w	r9, #0
 8013456:	9700      	str	r7, [sp, #0]
 8013458:	4633      	mov	r3, r6
 801345a:	aa0b      	add	r2, sp, #44	; 0x2c
 801345c:	4621      	mov	r1, r4
 801345e:	4628      	mov	r0, r5
 8013460:	f000 f9d8 	bl	8013814 <_printf_common>
 8013464:	3001      	adds	r0, #1
 8013466:	f040 8090 	bne.w	801358a <_printf_float+0x1e2>
 801346a:	f04f 30ff 	mov.w	r0, #4294967295
 801346e:	b00d      	add	sp, #52	; 0x34
 8013470:	ecbd 8b02 	vpop	{d8}
 8013474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013478:	4642      	mov	r2, r8
 801347a:	464b      	mov	r3, r9
 801347c:	4640      	mov	r0, r8
 801347e:	4649      	mov	r1, r9
 8013480:	f7ed fb54 	bl	8000b2c <__aeabi_dcmpun>
 8013484:	b140      	cbz	r0, 8013498 <_printf_float+0xf0>
 8013486:	464b      	mov	r3, r9
 8013488:	2b00      	cmp	r3, #0
 801348a:	bfbc      	itt	lt
 801348c:	232d      	movlt	r3, #45	; 0x2d
 801348e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013492:	487f      	ldr	r0, [pc, #508]	; (8013690 <_printf_float+0x2e8>)
 8013494:	4b7f      	ldr	r3, [pc, #508]	; (8013694 <_printf_float+0x2ec>)
 8013496:	e7d1      	b.n	801343c <_printf_float+0x94>
 8013498:	6863      	ldr	r3, [r4, #4]
 801349a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801349e:	9206      	str	r2, [sp, #24]
 80134a0:	1c5a      	adds	r2, r3, #1
 80134a2:	d13f      	bne.n	8013524 <_printf_float+0x17c>
 80134a4:	2306      	movs	r3, #6
 80134a6:	6063      	str	r3, [r4, #4]
 80134a8:	9b05      	ldr	r3, [sp, #20]
 80134aa:	6861      	ldr	r1, [r4, #4]
 80134ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80134b0:	2300      	movs	r3, #0
 80134b2:	9303      	str	r3, [sp, #12]
 80134b4:	ab0a      	add	r3, sp, #40	; 0x28
 80134b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80134ba:	ab09      	add	r3, sp, #36	; 0x24
 80134bc:	ec49 8b10 	vmov	d0, r8, r9
 80134c0:	9300      	str	r3, [sp, #0]
 80134c2:	6022      	str	r2, [r4, #0]
 80134c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80134c8:	4628      	mov	r0, r5
 80134ca:	f7ff fecd 	bl	8013268 <__cvt>
 80134ce:	9b06      	ldr	r3, [sp, #24]
 80134d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134d2:	2b47      	cmp	r3, #71	; 0x47
 80134d4:	4680      	mov	r8, r0
 80134d6:	d108      	bne.n	80134ea <_printf_float+0x142>
 80134d8:	1cc8      	adds	r0, r1, #3
 80134da:	db02      	blt.n	80134e2 <_printf_float+0x13a>
 80134dc:	6863      	ldr	r3, [r4, #4]
 80134de:	4299      	cmp	r1, r3
 80134e0:	dd41      	ble.n	8013566 <_printf_float+0x1be>
 80134e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80134e6:	fa5f fb8b 	uxtb.w	fp, fp
 80134ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80134ee:	d820      	bhi.n	8013532 <_printf_float+0x18a>
 80134f0:	3901      	subs	r1, #1
 80134f2:	465a      	mov	r2, fp
 80134f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80134f8:	9109      	str	r1, [sp, #36]	; 0x24
 80134fa:	f7ff ff17 	bl	801332c <__exponent>
 80134fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013500:	1813      	adds	r3, r2, r0
 8013502:	2a01      	cmp	r2, #1
 8013504:	4681      	mov	r9, r0
 8013506:	6123      	str	r3, [r4, #16]
 8013508:	dc02      	bgt.n	8013510 <_printf_float+0x168>
 801350a:	6822      	ldr	r2, [r4, #0]
 801350c:	07d2      	lsls	r2, r2, #31
 801350e:	d501      	bpl.n	8013514 <_printf_float+0x16c>
 8013510:	3301      	adds	r3, #1
 8013512:	6123      	str	r3, [r4, #16]
 8013514:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013518:	2b00      	cmp	r3, #0
 801351a:	d09c      	beq.n	8013456 <_printf_float+0xae>
 801351c:	232d      	movs	r3, #45	; 0x2d
 801351e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013522:	e798      	b.n	8013456 <_printf_float+0xae>
 8013524:	9a06      	ldr	r2, [sp, #24]
 8013526:	2a47      	cmp	r2, #71	; 0x47
 8013528:	d1be      	bne.n	80134a8 <_printf_float+0x100>
 801352a:	2b00      	cmp	r3, #0
 801352c:	d1bc      	bne.n	80134a8 <_printf_float+0x100>
 801352e:	2301      	movs	r3, #1
 8013530:	e7b9      	b.n	80134a6 <_printf_float+0xfe>
 8013532:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013536:	d118      	bne.n	801356a <_printf_float+0x1c2>
 8013538:	2900      	cmp	r1, #0
 801353a:	6863      	ldr	r3, [r4, #4]
 801353c:	dd0b      	ble.n	8013556 <_printf_float+0x1ae>
 801353e:	6121      	str	r1, [r4, #16]
 8013540:	b913      	cbnz	r3, 8013548 <_printf_float+0x1a0>
 8013542:	6822      	ldr	r2, [r4, #0]
 8013544:	07d0      	lsls	r0, r2, #31
 8013546:	d502      	bpl.n	801354e <_printf_float+0x1a6>
 8013548:	3301      	adds	r3, #1
 801354a:	440b      	add	r3, r1
 801354c:	6123      	str	r3, [r4, #16]
 801354e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013550:	f04f 0900 	mov.w	r9, #0
 8013554:	e7de      	b.n	8013514 <_printf_float+0x16c>
 8013556:	b913      	cbnz	r3, 801355e <_printf_float+0x1b6>
 8013558:	6822      	ldr	r2, [r4, #0]
 801355a:	07d2      	lsls	r2, r2, #31
 801355c:	d501      	bpl.n	8013562 <_printf_float+0x1ba>
 801355e:	3302      	adds	r3, #2
 8013560:	e7f4      	b.n	801354c <_printf_float+0x1a4>
 8013562:	2301      	movs	r3, #1
 8013564:	e7f2      	b.n	801354c <_printf_float+0x1a4>
 8013566:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801356a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801356c:	4299      	cmp	r1, r3
 801356e:	db05      	blt.n	801357c <_printf_float+0x1d4>
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	6121      	str	r1, [r4, #16]
 8013574:	07d8      	lsls	r0, r3, #31
 8013576:	d5ea      	bpl.n	801354e <_printf_float+0x1a6>
 8013578:	1c4b      	adds	r3, r1, #1
 801357a:	e7e7      	b.n	801354c <_printf_float+0x1a4>
 801357c:	2900      	cmp	r1, #0
 801357e:	bfd4      	ite	le
 8013580:	f1c1 0202 	rsble	r2, r1, #2
 8013584:	2201      	movgt	r2, #1
 8013586:	4413      	add	r3, r2
 8013588:	e7e0      	b.n	801354c <_printf_float+0x1a4>
 801358a:	6823      	ldr	r3, [r4, #0]
 801358c:	055a      	lsls	r2, r3, #21
 801358e:	d407      	bmi.n	80135a0 <_printf_float+0x1f8>
 8013590:	6923      	ldr	r3, [r4, #16]
 8013592:	4642      	mov	r2, r8
 8013594:	4631      	mov	r1, r6
 8013596:	4628      	mov	r0, r5
 8013598:	47b8      	blx	r7
 801359a:	3001      	adds	r0, #1
 801359c:	d12c      	bne.n	80135f8 <_printf_float+0x250>
 801359e:	e764      	b.n	801346a <_printf_float+0xc2>
 80135a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135a4:	f240 80e0 	bls.w	8013768 <_printf_float+0x3c0>
 80135a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80135ac:	2200      	movs	r2, #0
 80135ae:	2300      	movs	r3, #0
 80135b0:	f7ed fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d034      	beq.n	8013622 <_printf_float+0x27a>
 80135b8:	4a37      	ldr	r2, [pc, #220]	; (8013698 <_printf_float+0x2f0>)
 80135ba:	2301      	movs	r3, #1
 80135bc:	4631      	mov	r1, r6
 80135be:	4628      	mov	r0, r5
 80135c0:	47b8      	blx	r7
 80135c2:	3001      	adds	r0, #1
 80135c4:	f43f af51 	beq.w	801346a <_printf_float+0xc2>
 80135c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135cc:	429a      	cmp	r2, r3
 80135ce:	db02      	blt.n	80135d6 <_printf_float+0x22e>
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	07d8      	lsls	r0, r3, #31
 80135d4:	d510      	bpl.n	80135f8 <_printf_float+0x250>
 80135d6:	ee18 3a10 	vmov	r3, s16
 80135da:	4652      	mov	r2, sl
 80135dc:	4631      	mov	r1, r6
 80135de:	4628      	mov	r0, r5
 80135e0:	47b8      	blx	r7
 80135e2:	3001      	adds	r0, #1
 80135e4:	f43f af41 	beq.w	801346a <_printf_float+0xc2>
 80135e8:	f04f 0800 	mov.w	r8, #0
 80135ec:	f104 091a 	add.w	r9, r4, #26
 80135f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135f2:	3b01      	subs	r3, #1
 80135f4:	4543      	cmp	r3, r8
 80135f6:	dc09      	bgt.n	801360c <_printf_float+0x264>
 80135f8:	6823      	ldr	r3, [r4, #0]
 80135fa:	079b      	lsls	r3, r3, #30
 80135fc:	f100 8105 	bmi.w	801380a <_printf_float+0x462>
 8013600:	68e0      	ldr	r0, [r4, #12]
 8013602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013604:	4298      	cmp	r0, r3
 8013606:	bfb8      	it	lt
 8013608:	4618      	movlt	r0, r3
 801360a:	e730      	b.n	801346e <_printf_float+0xc6>
 801360c:	2301      	movs	r3, #1
 801360e:	464a      	mov	r2, r9
 8013610:	4631      	mov	r1, r6
 8013612:	4628      	mov	r0, r5
 8013614:	47b8      	blx	r7
 8013616:	3001      	adds	r0, #1
 8013618:	f43f af27 	beq.w	801346a <_printf_float+0xc2>
 801361c:	f108 0801 	add.w	r8, r8, #1
 8013620:	e7e6      	b.n	80135f0 <_printf_float+0x248>
 8013622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013624:	2b00      	cmp	r3, #0
 8013626:	dc39      	bgt.n	801369c <_printf_float+0x2f4>
 8013628:	4a1b      	ldr	r2, [pc, #108]	; (8013698 <_printf_float+0x2f0>)
 801362a:	2301      	movs	r3, #1
 801362c:	4631      	mov	r1, r6
 801362e:	4628      	mov	r0, r5
 8013630:	47b8      	blx	r7
 8013632:	3001      	adds	r0, #1
 8013634:	f43f af19 	beq.w	801346a <_printf_float+0xc2>
 8013638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801363c:	4313      	orrs	r3, r2
 801363e:	d102      	bne.n	8013646 <_printf_float+0x29e>
 8013640:	6823      	ldr	r3, [r4, #0]
 8013642:	07d9      	lsls	r1, r3, #31
 8013644:	d5d8      	bpl.n	80135f8 <_printf_float+0x250>
 8013646:	ee18 3a10 	vmov	r3, s16
 801364a:	4652      	mov	r2, sl
 801364c:	4631      	mov	r1, r6
 801364e:	4628      	mov	r0, r5
 8013650:	47b8      	blx	r7
 8013652:	3001      	adds	r0, #1
 8013654:	f43f af09 	beq.w	801346a <_printf_float+0xc2>
 8013658:	f04f 0900 	mov.w	r9, #0
 801365c:	f104 0a1a 	add.w	sl, r4, #26
 8013660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013662:	425b      	negs	r3, r3
 8013664:	454b      	cmp	r3, r9
 8013666:	dc01      	bgt.n	801366c <_printf_float+0x2c4>
 8013668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801366a:	e792      	b.n	8013592 <_printf_float+0x1ea>
 801366c:	2301      	movs	r3, #1
 801366e:	4652      	mov	r2, sl
 8013670:	4631      	mov	r1, r6
 8013672:	4628      	mov	r0, r5
 8013674:	47b8      	blx	r7
 8013676:	3001      	adds	r0, #1
 8013678:	f43f aef7 	beq.w	801346a <_printf_float+0xc2>
 801367c:	f109 0901 	add.w	r9, r9, #1
 8013680:	e7ee      	b.n	8013660 <_printf_float+0x2b8>
 8013682:	bf00      	nop
 8013684:	7fefffff 	.word	0x7fefffff
 8013688:	0801aab8 	.word	0x0801aab8
 801368c:	0801aabc 	.word	0x0801aabc
 8013690:	0801aac4 	.word	0x0801aac4
 8013694:	0801aac0 	.word	0x0801aac0
 8013698:	0801aac8 	.word	0x0801aac8
 801369c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801369e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136a0:	429a      	cmp	r2, r3
 80136a2:	bfa8      	it	ge
 80136a4:	461a      	movge	r2, r3
 80136a6:	2a00      	cmp	r2, #0
 80136a8:	4691      	mov	r9, r2
 80136aa:	dc37      	bgt.n	801371c <_printf_float+0x374>
 80136ac:	f04f 0b00 	mov.w	fp, #0
 80136b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136b4:	f104 021a 	add.w	r2, r4, #26
 80136b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136ba:	9305      	str	r3, [sp, #20]
 80136bc:	eba3 0309 	sub.w	r3, r3, r9
 80136c0:	455b      	cmp	r3, fp
 80136c2:	dc33      	bgt.n	801372c <_printf_float+0x384>
 80136c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136c8:	429a      	cmp	r2, r3
 80136ca:	db3b      	blt.n	8013744 <_printf_float+0x39c>
 80136cc:	6823      	ldr	r3, [r4, #0]
 80136ce:	07da      	lsls	r2, r3, #31
 80136d0:	d438      	bmi.n	8013744 <_printf_float+0x39c>
 80136d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136d4:	9b05      	ldr	r3, [sp, #20]
 80136d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136d8:	1ad3      	subs	r3, r2, r3
 80136da:	eba2 0901 	sub.w	r9, r2, r1
 80136de:	4599      	cmp	r9, r3
 80136e0:	bfa8      	it	ge
 80136e2:	4699      	movge	r9, r3
 80136e4:	f1b9 0f00 	cmp.w	r9, #0
 80136e8:	dc35      	bgt.n	8013756 <_printf_float+0x3ae>
 80136ea:	f04f 0800 	mov.w	r8, #0
 80136ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136f2:	f104 0a1a 	add.w	sl, r4, #26
 80136f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136fa:	1a9b      	subs	r3, r3, r2
 80136fc:	eba3 0309 	sub.w	r3, r3, r9
 8013700:	4543      	cmp	r3, r8
 8013702:	f77f af79 	ble.w	80135f8 <_printf_float+0x250>
 8013706:	2301      	movs	r3, #1
 8013708:	4652      	mov	r2, sl
 801370a:	4631      	mov	r1, r6
 801370c:	4628      	mov	r0, r5
 801370e:	47b8      	blx	r7
 8013710:	3001      	adds	r0, #1
 8013712:	f43f aeaa 	beq.w	801346a <_printf_float+0xc2>
 8013716:	f108 0801 	add.w	r8, r8, #1
 801371a:	e7ec      	b.n	80136f6 <_printf_float+0x34e>
 801371c:	4613      	mov	r3, r2
 801371e:	4631      	mov	r1, r6
 8013720:	4642      	mov	r2, r8
 8013722:	4628      	mov	r0, r5
 8013724:	47b8      	blx	r7
 8013726:	3001      	adds	r0, #1
 8013728:	d1c0      	bne.n	80136ac <_printf_float+0x304>
 801372a:	e69e      	b.n	801346a <_printf_float+0xc2>
 801372c:	2301      	movs	r3, #1
 801372e:	4631      	mov	r1, r6
 8013730:	4628      	mov	r0, r5
 8013732:	9205      	str	r2, [sp, #20]
 8013734:	47b8      	blx	r7
 8013736:	3001      	adds	r0, #1
 8013738:	f43f ae97 	beq.w	801346a <_printf_float+0xc2>
 801373c:	9a05      	ldr	r2, [sp, #20]
 801373e:	f10b 0b01 	add.w	fp, fp, #1
 8013742:	e7b9      	b.n	80136b8 <_printf_float+0x310>
 8013744:	ee18 3a10 	vmov	r3, s16
 8013748:	4652      	mov	r2, sl
 801374a:	4631      	mov	r1, r6
 801374c:	4628      	mov	r0, r5
 801374e:	47b8      	blx	r7
 8013750:	3001      	adds	r0, #1
 8013752:	d1be      	bne.n	80136d2 <_printf_float+0x32a>
 8013754:	e689      	b.n	801346a <_printf_float+0xc2>
 8013756:	9a05      	ldr	r2, [sp, #20]
 8013758:	464b      	mov	r3, r9
 801375a:	4442      	add	r2, r8
 801375c:	4631      	mov	r1, r6
 801375e:	4628      	mov	r0, r5
 8013760:	47b8      	blx	r7
 8013762:	3001      	adds	r0, #1
 8013764:	d1c1      	bne.n	80136ea <_printf_float+0x342>
 8013766:	e680      	b.n	801346a <_printf_float+0xc2>
 8013768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801376a:	2a01      	cmp	r2, #1
 801376c:	dc01      	bgt.n	8013772 <_printf_float+0x3ca>
 801376e:	07db      	lsls	r3, r3, #31
 8013770:	d538      	bpl.n	80137e4 <_printf_float+0x43c>
 8013772:	2301      	movs	r3, #1
 8013774:	4642      	mov	r2, r8
 8013776:	4631      	mov	r1, r6
 8013778:	4628      	mov	r0, r5
 801377a:	47b8      	blx	r7
 801377c:	3001      	adds	r0, #1
 801377e:	f43f ae74 	beq.w	801346a <_printf_float+0xc2>
 8013782:	ee18 3a10 	vmov	r3, s16
 8013786:	4652      	mov	r2, sl
 8013788:	4631      	mov	r1, r6
 801378a:	4628      	mov	r0, r5
 801378c:	47b8      	blx	r7
 801378e:	3001      	adds	r0, #1
 8013790:	f43f ae6b 	beq.w	801346a <_printf_float+0xc2>
 8013794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013798:	2200      	movs	r2, #0
 801379a:	2300      	movs	r3, #0
 801379c:	f7ed f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80137a0:	b9d8      	cbnz	r0, 80137da <_printf_float+0x432>
 80137a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137a4:	f108 0201 	add.w	r2, r8, #1
 80137a8:	3b01      	subs	r3, #1
 80137aa:	4631      	mov	r1, r6
 80137ac:	4628      	mov	r0, r5
 80137ae:	47b8      	blx	r7
 80137b0:	3001      	adds	r0, #1
 80137b2:	d10e      	bne.n	80137d2 <_printf_float+0x42a>
 80137b4:	e659      	b.n	801346a <_printf_float+0xc2>
 80137b6:	2301      	movs	r3, #1
 80137b8:	4652      	mov	r2, sl
 80137ba:	4631      	mov	r1, r6
 80137bc:	4628      	mov	r0, r5
 80137be:	47b8      	blx	r7
 80137c0:	3001      	adds	r0, #1
 80137c2:	f43f ae52 	beq.w	801346a <_printf_float+0xc2>
 80137c6:	f108 0801 	add.w	r8, r8, #1
 80137ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137cc:	3b01      	subs	r3, #1
 80137ce:	4543      	cmp	r3, r8
 80137d0:	dcf1      	bgt.n	80137b6 <_printf_float+0x40e>
 80137d2:	464b      	mov	r3, r9
 80137d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80137d8:	e6dc      	b.n	8013594 <_printf_float+0x1ec>
 80137da:	f04f 0800 	mov.w	r8, #0
 80137de:	f104 0a1a 	add.w	sl, r4, #26
 80137e2:	e7f2      	b.n	80137ca <_printf_float+0x422>
 80137e4:	2301      	movs	r3, #1
 80137e6:	4642      	mov	r2, r8
 80137e8:	e7df      	b.n	80137aa <_printf_float+0x402>
 80137ea:	2301      	movs	r3, #1
 80137ec:	464a      	mov	r2, r9
 80137ee:	4631      	mov	r1, r6
 80137f0:	4628      	mov	r0, r5
 80137f2:	47b8      	blx	r7
 80137f4:	3001      	adds	r0, #1
 80137f6:	f43f ae38 	beq.w	801346a <_printf_float+0xc2>
 80137fa:	f108 0801 	add.w	r8, r8, #1
 80137fe:	68e3      	ldr	r3, [r4, #12]
 8013800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013802:	1a5b      	subs	r3, r3, r1
 8013804:	4543      	cmp	r3, r8
 8013806:	dcf0      	bgt.n	80137ea <_printf_float+0x442>
 8013808:	e6fa      	b.n	8013600 <_printf_float+0x258>
 801380a:	f04f 0800 	mov.w	r8, #0
 801380e:	f104 0919 	add.w	r9, r4, #25
 8013812:	e7f4      	b.n	80137fe <_printf_float+0x456>

08013814 <_printf_common>:
 8013814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013818:	4616      	mov	r6, r2
 801381a:	4699      	mov	r9, r3
 801381c:	688a      	ldr	r2, [r1, #8]
 801381e:	690b      	ldr	r3, [r1, #16]
 8013820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013824:	4293      	cmp	r3, r2
 8013826:	bfb8      	it	lt
 8013828:	4613      	movlt	r3, r2
 801382a:	6033      	str	r3, [r6, #0]
 801382c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013830:	4607      	mov	r7, r0
 8013832:	460c      	mov	r4, r1
 8013834:	b10a      	cbz	r2, 801383a <_printf_common+0x26>
 8013836:	3301      	adds	r3, #1
 8013838:	6033      	str	r3, [r6, #0]
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	0699      	lsls	r1, r3, #26
 801383e:	bf42      	ittt	mi
 8013840:	6833      	ldrmi	r3, [r6, #0]
 8013842:	3302      	addmi	r3, #2
 8013844:	6033      	strmi	r3, [r6, #0]
 8013846:	6825      	ldr	r5, [r4, #0]
 8013848:	f015 0506 	ands.w	r5, r5, #6
 801384c:	d106      	bne.n	801385c <_printf_common+0x48>
 801384e:	f104 0a19 	add.w	sl, r4, #25
 8013852:	68e3      	ldr	r3, [r4, #12]
 8013854:	6832      	ldr	r2, [r6, #0]
 8013856:	1a9b      	subs	r3, r3, r2
 8013858:	42ab      	cmp	r3, r5
 801385a:	dc26      	bgt.n	80138aa <_printf_common+0x96>
 801385c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013860:	1e13      	subs	r3, r2, #0
 8013862:	6822      	ldr	r2, [r4, #0]
 8013864:	bf18      	it	ne
 8013866:	2301      	movne	r3, #1
 8013868:	0692      	lsls	r2, r2, #26
 801386a:	d42b      	bmi.n	80138c4 <_printf_common+0xb0>
 801386c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013870:	4649      	mov	r1, r9
 8013872:	4638      	mov	r0, r7
 8013874:	47c0      	blx	r8
 8013876:	3001      	adds	r0, #1
 8013878:	d01e      	beq.n	80138b8 <_printf_common+0xa4>
 801387a:	6823      	ldr	r3, [r4, #0]
 801387c:	68e5      	ldr	r5, [r4, #12]
 801387e:	6832      	ldr	r2, [r6, #0]
 8013880:	f003 0306 	and.w	r3, r3, #6
 8013884:	2b04      	cmp	r3, #4
 8013886:	bf08      	it	eq
 8013888:	1aad      	subeq	r5, r5, r2
 801388a:	68a3      	ldr	r3, [r4, #8]
 801388c:	6922      	ldr	r2, [r4, #16]
 801388e:	bf0c      	ite	eq
 8013890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013894:	2500      	movne	r5, #0
 8013896:	4293      	cmp	r3, r2
 8013898:	bfc4      	itt	gt
 801389a:	1a9b      	subgt	r3, r3, r2
 801389c:	18ed      	addgt	r5, r5, r3
 801389e:	2600      	movs	r6, #0
 80138a0:	341a      	adds	r4, #26
 80138a2:	42b5      	cmp	r5, r6
 80138a4:	d11a      	bne.n	80138dc <_printf_common+0xc8>
 80138a6:	2000      	movs	r0, #0
 80138a8:	e008      	b.n	80138bc <_printf_common+0xa8>
 80138aa:	2301      	movs	r3, #1
 80138ac:	4652      	mov	r2, sl
 80138ae:	4649      	mov	r1, r9
 80138b0:	4638      	mov	r0, r7
 80138b2:	47c0      	blx	r8
 80138b4:	3001      	adds	r0, #1
 80138b6:	d103      	bne.n	80138c0 <_printf_common+0xac>
 80138b8:	f04f 30ff 	mov.w	r0, #4294967295
 80138bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c0:	3501      	adds	r5, #1
 80138c2:	e7c6      	b.n	8013852 <_printf_common+0x3e>
 80138c4:	18e1      	adds	r1, r4, r3
 80138c6:	1c5a      	adds	r2, r3, #1
 80138c8:	2030      	movs	r0, #48	; 0x30
 80138ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138ce:	4422      	add	r2, r4
 80138d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138d8:	3302      	adds	r3, #2
 80138da:	e7c7      	b.n	801386c <_printf_common+0x58>
 80138dc:	2301      	movs	r3, #1
 80138de:	4622      	mov	r2, r4
 80138e0:	4649      	mov	r1, r9
 80138e2:	4638      	mov	r0, r7
 80138e4:	47c0      	blx	r8
 80138e6:	3001      	adds	r0, #1
 80138e8:	d0e6      	beq.n	80138b8 <_printf_common+0xa4>
 80138ea:	3601      	adds	r6, #1
 80138ec:	e7d9      	b.n	80138a2 <_printf_common+0x8e>
	...

080138f0 <_printf_i>:
 80138f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138f4:	460c      	mov	r4, r1
 80138f6:	4691      	mov	r9, r2
 80138f8:	7e27      	ldrb	r7, [r4, #24]
 80138fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138fc:	2f78      	cmp	r7, #120	; 0x78
 80138fe:	4680      	mov	r8, r0
 8013900:	469a      	mov	sl, r3
 8013902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013906:	d807      	bhi.n	8013918 <_printf_i+0x28>
 8013908:	2f62      	cmp	r7, #98	; 0x62
 801390a:	d80a      	bhi.n	8013922 <_printf_i+0x32>
 801390c:	2f00      	cmp	r7, #0
 801390e:	f000 80d8 	beq.w	8013ac2 <_printf_i+0x1d2>
 8013912:	2f58      	cmp	r7, #88	; 0x58
 8013914:	f000 80a3 	beq.w	8013a5e <_printf_i+0x16e>
 8013918:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801391c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013920:	e03a      	b.n	8013998 <_printf_i+0xa8>
 8013922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013926:	2b15      	cmp	r3, #21
 8013928:	d8f6      	bhi.n	8013918 <_printf_i+0x28>
 801392a:	a001      	add	r0, pc, #4	; (adr r0, 8013930 <_printf_i+0x40>)
 801392c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013930:	08013989 	.word	0x08013989
 8013934:	0801399d 	.word	0x0801399d
 8013938:	08013919 	.word	0x08013919
 801393c:	08013919 	.word	0x08013919
 8013940:	08013919 	.word	0x08013919
 8013944:	08013919 	.word	0x08013919
 8013948:	0801399d 	.word	0x0801399d
 801394c:	08013919 	.word	0x08013919
 8013950:	08013919 	.word	0x08013919
 8013954:	08013919 	.word	0x08013919
 8013958:	08013919 	.word	0x08013919
 801395c:	08013aa9 	.word	0x08013aa9
 8013960:	080139cd 	.word	0x080139cd
 8013964:	08013a8b 	.word	0x08013a8b
 8013968:	08013919 	.word	0x08013919
 801396c:	08013919 	.word	0x08013919
 8013970:	08013acb 	.word	0x08013acb
 8013974:	08013919 	.word	0x08013919
 8013978:	080139cd 	.word	0x080139cd
 801397c:	08013919 	.word	0x08013919
 8013980:	08013919 	.word	0x08013919
 8013984:	08013a93 	.word	0x08013a93
 8013988:	680b      	ldr	r3, [r1, #0]
 801398a:	1d1a      	adds	r2, r3, #4
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	600a      	str	r2, [r1, #0]
 8013990:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013998:	2301      	movs	r3, #1
 801399a:	e0a3      	b.n	8013ae4 <_printf_i+0x1f4>
 801399c:	6825      	ldr	r5, [r4, #0]
 801399e:	6808      	ldr	r0, [r1, #0]
 80139a0:	062e      	lsls	r6, r5, #24
 80139a2:	f100 0304 	add.w	r3, r0, #4
 80139a6:	d50a      	bpl.n	80139be <_printf_i+0xce>
 80139a8:	6805      	ldr	r5, [r0, #0]
 80139aa:	600b      	str	r3, [r1, #0]
 80139ac:	2d00      	cmp	r5, #0
 80139ae:	da03      	bge.n	80139b8 <_printf_i+0xc8>
 80139b0:	232d      	movs	r3, #45	; 0x2d
 80139b2:	426d      	negs	r5, r5
 80139b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139b8:	485e      	ldr	r0, [pc, #376]	; (8013b34 <_printf_i+0x244>)
 80139ba:	230a      	movs	r3, #10
 80139bc:	e019      	b.n	80139f2 <_printf_i+0x102>
 80139be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80139c2:	6805      	ldr	r5, [r0, #0]
 80139c4:	600b      	str	r3, [r1, #0]
 80139c6:	bf18      	it	ne
 80139c8:	b22d      	sxthne	r5, r5
 80139ca:	e7ef      	b.n	80139ac <_printf_i+0xbc>
 80139cc:	680b      	ldr	r3, [r1, #0]
 80139ce:	6825      	ldr	r5, [r4, #0]
 80139d0:	1d18      	adds	r0, r3, #4
 80139d2:	6008      	str	r0, [r1, #0]
 80139d4:	0628      	lsls	r0, r5, #24
 80139d6:	d501      	bpl.n	80139dc <_printf_i+0xec>
 80139d8:	681d      	ldr	r5, [r3, #0]
 80139da:	e002      	b.n	80139e2 <_printf_i+0xf2>
 80139dc:	0669      	lsls	r1, r5, #25
 80139de:	d5fb      	bpl.n	80139d8 <_printf_i+0xe8>
 80139e0:	881d      	ldrh	r5, [r3, #0]
 80139e2:	4854      	ldr	r0, [pc, #336]	; (8013b34 <_printf_i+0x244>)
 80139e4:	2f6f      	cmp	r7, #111	; 0x6f
 80139e6:	bf0c      	ite	eq
 80139e8:	2308      	moveq	r3, #8
 80139ea:	230a      	movne	r3, #10
 80139ec:	2100      	movs	r1, #0
 80139ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139f2:	6866      	ldr	r6, [r4, #4]
 80139f4:	60a6      	str	r6, [r4, #8]
 80139f6:	2e00      	cmp	r6, #0
 80139f8:	bfa2      	ittt	ge
 80139fa:	6821      	ldrge	r1, [r4, #0]
 80139fc:	f021 0104 	bicge.w	r1, r1, #4
 8013a00:	6021      	strge	r1, [r4, #0]
 8013a02:	b90d      	cbnz	r5, 8013a08 <_printf_i+0x118>
 8013a04:	2e00      	cmp	r6, #0
 8013a06:	d04d      	beq.n	8013aa4 <_printf_i+0x1b4>
 8013a08:	4616      	mov	r6, r2
 8013a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8013a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8013a12:	5dc7      	ldrb	r7, [r0, r7]
 8013a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013a18:	462f      	mov	r7, r5
 8013a1a:	42bb      	cmp	r3, r7
 8013a1c:	460d      	mov	r5, r1
 8013a1e:	d9f4      	bls.n	8013a0a <_printf_i+0x11a>
 8013a20:	2b08      	cmp	r3, #8
 8013a22:	d10b      	bne.n	8013a3c <_printf_i+0x14c>
 8013a24:	6823      	ldr	r3, [r4, #0]
 8013a26:	07df      	lsls	r7, r3, #31
 8013a28:	d508      	bpl.n	8013a3c <_printf_i+0x14c>
 8013a2a:	6923      	ldr	r3, [r4, #16]
 8013a2c:	6861      	ldr	r1, [r4, #4]
 8013a2e:	4299      	cmp	r1, r3
 8013a30:	bfde      	ittt	le
 8013a32:	2330      	movle	r3, #48	; 0x30
 8013a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013a3c:	1b92      	subs	r2, r2, r6
 8013a3e:	6122      	str	r2, [r4, #16]
 8013a40:	f8cd a000 	str.w	sl, [sp]
 8013a44:	464b      	mov	r3, r9
 8013a46:	aa03      	add	r2, sp, #12
 8013a48:	4621      	mov	r1, r4
 8013a4a:	4640      	mov	r0, r8
 8013a4c:	f7ff fee2 	bl	8013814 <_printf_common>
 8013a50:	3001      	adds	r0, #1
 8013a52:	d14c      	bne.n	8013aee <_printf_i+0x1fe>
 8013a54:	f04f 30ff 	mov.w	r0, #4294967295
 8013a58:	b004      	add	sp, #16
 8013a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a5e:	4835      	ldr	r0, [pc, #212]	; (8013b34 <_printf_i+0x244>)
 8013a60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013a64:	6823      	ldr	r3, [r4, #0]
 8013a66:	680e      	ldr	r6, [r1, #0]
 8013a68:	061f      	lsls	r7, r3, #24
 8013a6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8013a6e:	600e      	str	r6, [r1, #0]
 8013a70:	d514      	bpl.n	8013a9c <_printf_i+0x1ac>
 8013a72:	07d9      	lsls	r1, r3, #31
 8013a74:	bf44      	itt	mi
 8013a76:	f043 0320 	orrmi.w	r3, r3, #32
 8013a7a:	6023      	strmi	r3, [r4, #0]
 8013a7c:	b91d      	cbnz	r5, 8013a86 <_printf_i+0x196>
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	f023 0320 	bic.w	r3, r3, #32
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	2310      	movs	r3, #16
 8013a88:	e7b0      	b.n	80139ec <_printf_i+0xfc>
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	f043 0320 	orr.w	r3, r3, #32
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	2378      	movs	r3, #120	; 0x78
 8013a94:	4828      	ldr	r0, [pc, #160]	; (8013b38 <_printf_i+0x248>)
 8013a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a9a:	e7e3      	b.n	8013a64 <_printf_i+0x174>
 8013a9c:	065e      	lsls	r6, r3, #25
 8013a9e:	bf48      	it	mi
 8013aa0:	b2ad      	uxthmi	r5, r5
 8013aa2:	e7e6      	b.n	8013a72 <_printf_i+0x182>
 8013aa4:	4616      	mov	r6, r2
 8013aa6:	e7bb      	b.n	8013a20 <_printf_i+0x130>
 8013aa8:	680b      	ldr	r3, [r1, #0]
 8013aaa:	6826      	ldr	r6, [r4, #0]
 8013aac:	6960      	ldr	r0, [r4, #20]
 8013aae:	1d1d      	adds	r5, r3, #4
 8013ab0:	600d      	str	r5, [r1, #0]
 8013ab2:	0635      	lsls	r5, r6, #24
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	d501      	bpl.n	8013abc <_printf_i+0x1cc>
 8013ab8:	6018      	str	r0, [r3, #0]
 8013aba:	e002      	b.n	8013ac2 <_printf_i+0x1d2>
 8013abc:	0671      	lsls	r1, r6, #25
 8013abe:	d5fb      	bpl.n	8013ab8 <_printf_i+0x1c8>
 8013ac0:	8018      	strh	r0, [r3, #0]
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	6123      	str	r3, [r4, #16]
 8013ac6:	4616      	mov	r6, r2
 8013ac8:	e7ba      	b.n	8013a40 <_printf_i+0x150>
 8013aca:	680b      	ldr	r3, [r1, #0]
 8013acc:	1d1a      	adds	r2, r3, #4
 8013ace:	600a      	str	r2, [r1, #0]
 8013ad0:	681e      	ldr	r6, [r3, #0]
 8013ad2:	6862      	ldr	r2, [r4, #4]
 8013ad4:	2100      	movs	r1, #0
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	f7ec fb82 	bl	80001e0 <memchr>
 8013adc:	b108      	cbz	r0, 8013ae2 <_printf_i+0x1f2>
 8013ade:	1b80      	subs	r0, r0, r6
 8013ae0:	6060      	str	r0, [r4, #4]
 8013ae2:	6863      	ldr	r3, [r4, #4]
 8013ae4:	6123      	str	r3, [r4, #16]
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013aec:	e7a8      	b.n	8013a40 <_printf_i+0x150>
 8013aee:	6923      	ldr	r3, [r4, #16]
 8013af0:	4632      	mov	r2, r6
 8013af2:	4649      	mov	r1, r9
 8013af4:	4640      	mov	r0, r8
 8013af6:	47d0      	blx	sl
 8013af8:	3001      	adds	r0, #1
 8013afa:	d0ab      	beq.n	8013a54 <_printf_i+0x164>
 8013afc:	6823      	ldr	r3, [r4, #0]
 8013afe:	079b      	lsls	r3, r3, #30
 8013b00:	d413      	bmi.n	8013b2a <_printf_i+0x23a>
 8013b02:	68e0      	ldr	r0, [r4, #12]
 8013b04:	9b03      	ldr	r3, [sp, #12]
 8013b06:	4298      	cmp	r0, r3
 8013b08:	bfb8      	it	lt
 8013b0a:	4618      	movlt	r0, r3
 8013b0c:	e7a4      	b.n	8013a58 <_printf_i+0x168>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	4632      	mov	r2, r6
 8013b12:	4649      	mov	r1, r9
 8013b14:	4640      	mov	r0, r8
 8013b16:	47d0      	blx	sl
 8013b18:	3001      	adds	r0, #1
 8013b1a:	d09b      	beq.n	8013a54 <_printf_i+0x164>
 8013b1c:	3501      	adds	r5, #1
 8013b1e:	68e3      	ldr	r3, [r4, #12]
 8013b20:	9903      	ldr	r1, [sp, #12]
 8013b22:	1a5b      	subs	r3, r3, r1
 8013b24:	42ab      	cmp	r3, r5
 8013b26:	dcf2      	bgt.n	8013b0e <_printf_i+0x21e>
 8013b28:	e7eb      	b.n	8013b02 <_printf_i+0x212>
 8013b2a:	2500      	movs	r5, #0
 8013b2c:	f104 0619 	add.w	r6, r4, #25
 8013b30:	e7f5      	b.n	8013b1e <_printf_i+0x22e>
 8013b32:	bf00      	nop
 8013b34:	0801aaca 	.word	0x0801aaca
 8013b38:	0801aadb 	.word	0x0801aadb

08013b3c <iprintf>:
 8013b3c:	b40f      	push	{r0, r1, r2, r3}
 8013b3e:	4b0a      	ldr	r3, [pc, #40]	; (8013b68 <iprintf+0x2c>)
 8013b40:	b513      	push	{r0, r1, r4, lr}
 8013b42:	681c      	ldr	r4, [r3, #0]
 8013b44:	b124      	cbz	r4, 8013b50 <iprintf+0x14>
 8013b46:	69a3      	ldr	r3, [r4, #24]
 8013b48:	b913      	cbnz	r3, 8013b50 <iprintf+0x14>
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	f000 ff10 	bl	8014970 <__sinit>
 8013b50:	ab05      	add	r3, sp, #20
 8013b52:	9a04      	ldr	r2, [sp, #16]
 8013b54:	68a1      	ldr	r1, [r4, #8]
 8013b56:	9301      	str	r3, [sp, #4]
 8013b58:	4620      	mov	r0, r4
 8013b5a:	f001 fccd 	bl	80154f8 <_vfiprintf_r>
 8013b5e:	b002      	add	sp, #8
 8013b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b64:	b004      	add	sp, #16
 8013b66:	4770      	bx	lr
 8013b68:	20000090 	.word	0x20000090

08013b6c <_sbrk_r>:
 8013b6c:	b538      	push	{r3, r4, r5, lr}
 8013b6e:	4d06      	ldr	r5, [pc, #24]	; (8013b88 <_sbrk_r+0x1c>)
 8013b70:	2300      	movs	r3, #0
 8013b72:	4604      	mov	r4, r0
 8013b74:	4608      	mov	r0, r1
 8013b76:	602b      	str	r3, [r5, #0]
 8013b78:	f7ee f98a 	bl	8001e90 <_sbrk>
 8013b7c:	1c43      	adds	r3, r0, #1
 8013b7e:	d102      	bne.n	8013b86 <_sbrk_r+0x1a>
 8013b80:	682b      	ldr	r3, [r5, #0]
 8013b82:	b103      	cbz	r3, 8013b86 <_sbrk_r+0x1a>
 8013b84:	6023      	str	r3, [r4, #0]
 8013b86:	bd38      	pop	{r3, r4, r5, pc}
 8013b88:	2001e794 	.word	0x2001e794

08013b8c <siprintf>:
 8013b8c:	b40e      	push	{r1, r2, r3}
 8013b8e:	b500      	push	{lr}
 8013b90:	b09c      	sub	sp, #112	; 0x70
 8013b92:	ab1d      	add	r3, sp, #116	; 0x74
 8013b94:	9002      	str	r0, [sp, #8]
 8013b96:	9006      	str	r0, [sp, #24]
 8013b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b9c:	4809      	ldr	r0, [pc, #36]	; (8013bc4 <siprintf+0x38>)
 8013b9e:	9107      	str	r1, [sp, #28]
 8013ba0:	9104      	str	r1, [sp, #16]
 8013ba2:	4909      	ldr	r1, [pc, #36]	; (8013bc8 <siprintf+0x3c>)
 8013ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ba8:	9105      	str	r1, [sp, #20]
 8013baa:	6800      	ldr	r0, [r0, #0]
 8013bac:	9301      	str	r3, [sp, #4]
 8013bae:	a902      	add	r1, sp, #8
 8013bb0:	f001 fb78 	bl	80152a4 <_svfiprintf_r>
 8013bb4:	9b02      	ldr	r3, [sp, #8]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	701a      	strb	r2, [r3, #0]
 8013bba:	b01c      	add	sp, #112	; 0x70
 8013bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bc0:	b003      	add	sp, #12
 8013bc2:	4770      	bx	lr
 8013bc4:	20000090 	.word	0x20000090
 8013bc8:	ffff0208 	.word	0xffff0208

08013bcc <quorem>:
 8013bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	6903      	ldr	r3, [r0, #16]
 8013bd2:	690c      	ldr	r4, [r1, #16]
 8013bd4:	42a3      	cmp	r3, r4
 8013bd6:	4607      	mov	r7, r0
 8013bd8:	f2c0 8081 	blt.w	8013cde <quorem+0x112>
 8013bdc:	3c01      	subs	r4, #1
 8013bde:	f101 0814 	add.w	r8, r1, #20
 8013be2:	f100 0514 	add.w	r5, r0, #20
 8013be6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bea:	9301      	str	r3, [sp, #4]
 8013bec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013bf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c04:	d331      	bcc.n	8013c6a <quorem+0x9e>
 8013c06:	f04f 0e00 	mov.w	lr, #0
 8013c0a:	4640      	mov	r0, r8
 8013c0c:	46ac      	mov	ip, r5
 8013c0e:	46f2      	mov	sl, lr
 8013c10:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c14:	b293      	uxth	r3, r2
 8013c16:	fb06 e303 	mla	r3, r6, r3, lr
 8013c1a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	ebaa 0303 	sub.w	r3, sl, r3
 8013c24:	0c12      	lsrs	r2, r2, #16
 8013c26:	f8dc a000 	ldr.w	sl, [ip]
 8013c2a:	fb06 e202 	mla	r2, r6, r2, lr
 8013c2e:	fa13 f38a 	uxtah	r3, r3, sl
 8013c32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013c36:	fa1f fa82 	uxth.w	sl, r2
 8013c3a:	f8dc 2000 	ldr.w	r2, [ip]
 8013c3e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013c42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c4c:	4581      	cmp	r9, r0
 8013c4e:	f84c 3b04 	str.w	r3, [ip], #4
 8013c52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013c56:	d2db      	bcs.n	8013c10 <quorem+0x44>
 8013c58:	f855 300b 	ldr.w	r3, [r5, fp]
 8013c5c:	b92b      	cbnz	r3, 8013c6a <quorem+0x9e>
 8013c5e:	9b01      	ldr	r3, [sp, #4]
 8013c60:	3b04      	subs	r3, #4
 8013c62:	429d      	cmp	r5, r3
 8013c64:	461a      	mov	r2, r3
 8013c66:	d32e      	bcc.n	8013cc6 <quorem+0xfa>
 8013c68:	613c      	str	r4, [r7, #16]
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	f001 f9b0 	bl	8014fd0 <__mcmp>
 8013c70:	2800      	cmp	r0, #0
 8013c72:	db24      	blt.n	8013cbe <quorem+0xf2>
 8013c74:	3601      	adds	r6, #1
 8013c76:	4628      	mov	r0, r5
 8013c78:	f04f 0c00 	mov.w	ip, #0
 8013c7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013c80:	f8d0 e000 	ldr.w	lr, [r0]
 8013c84:	b293      	uxth	r3, r2
 8013c86:	ebac 0303 	sub.w	r3, ip, r3
 8013c8a:	0c12      	lsrs	r2, r2, #16
 8013c8c:	fa13 f38e 	uxtah	r3, r3, lr
 8013c90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c9e:	45c1      	cmp	r9, r8
 8013ca0:	f840 3b04 	str.w	r3, [r0], #4
 8013ca4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013ca8:	d2e8      	bcs.n	8013c7c <quorem+0xb0>
 8013caa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013cb2:	b922      	cbnz	r2, 8013cbe <quorem+0xf2>
 8013cb4:	3b04      	subs	r3, #4
 8013cb6:	429d      	cmp	r5, r3
 8013cb8:	461a      	mov	r2, r3
 8013cba:	d30a      	bcc.n	8013cd2 <quorem+0x106>
 8013cbc:	613c      	str	r4, [r7, #16]
 8013cbe:	4630      	mov	r0, r6
 8013cc0:	b003      	add	sp, #12
 8013cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc6:	6812      	ldr	r2, [r2, #0]
 8013cc8:	3b04      	subs	r3, #4
 8013cca:	2a00      	cmp	r2, #0
 8013ccc:	d1cc      	bne.n	8013c68 <quorem+0x9c>
 8013cce:	3c01      	subs	r4, #1
 8013cd0:	e7c7      	b.n	8013c62 <quorem+0x96>
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	3b04      	subs	r3, #4
 8013cd6:	2a00      	cmp	r2, #0
 8013cd8:	d1f0      	bne.n	8013cbc <quorem+0xf0>
 8013cda:	3c01      	subs	r4, #1
 8013cdc:	e7eb      	b.n	8013cb6 <quorem+0xea>
 8013cde:	2000      	movs	r0, #0
 8013ce0:	e7ee      	b.n	8013cc0 <quorem+0xf4>
 8013ce2:	0000      	movs	r0, r0
 8013ce4:	0000      	movs	r0, r0
	...

08013ce8 <_dtoa_r>:
 8013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cec:	ed2d 8b02 	vpush	{d8}
 8013cf0:	ec57 6b10 	vmov	r6, r7, d0
 8013cf4:	b095      	sub	sp, #84	; 0x54
 8013cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013cfc:	9105      	str	r1, [sp, #20]
 8013cfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013d02:	4604      	mov	r4, r0
 8013d04:	9209      	str	r2, [sp, #36]	; 0x24
 8013d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d08:	b975      	cbnz	r5, 8013d28 <_dtoa_r+0x40>
 8013d0a:	2010      	movs	r0, #16
 8013d0c:	f7ff f9c2 	bl	8013094 <malloc>
 8013d10:	4602      	mov	r2, r0
 8013d12:	6260      	str	r0, [r4, #36]	; 0x24
 8013d14:	b920      	cbnz	r0, 8013d20 <_dtoa_r+0x38>
 8013d16:	4bb2      	ldr	r3, [pc, #712]	; (8013fe0 <_dtoa_r+0x2f8>)
 8013d18:	21ea      	movs	r1, #234	; 0xea
 8013d1a:	48b2      	ldr	r0, [pc, #712]	; (8013fe4 <_dtoa_r+0x2fc>)
 8013d1c:	f001 fe32 	bl	8015984 <__assert_func>
 8013d20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d24:	6005      	str	r5, [r0, #0]
 8013d26:	60c5      	str	r5, [r0, #12]
 8013d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d2a:	6819      	ldr	r1, [r3, #0]
 8013d2c:	b151      	cbz	r1, 8013d44 <_dtoa_r+0x5c>
 8013d2e:	685a      	ldr	r2, [r3, #4]
 8013d30:	604a      	str	r2, [r1, #4]
 8013d32:	2301      	movs	r3, #1
 8013d34:	4093      	lsls	r3, r2
 8013d36:	608b      	str	r3, [r1, #8]
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f000 ff0b 	bl	8014b54 <_Bfree>
 8013d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d40:	2200      	movs	r2, #0
 8013d42:	601a      	str	r2, [r3, #0]
 8013d44:	1e3b      	subs	r3, r7, #0
 8013d46:	bfb9      	ittee	lt
 8013d48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013d4c:	9303      	strlt	r3, [sp, #12]
 8013d4e:	2300      	movge	r3, #0
 8013d50:	f8c8 3000 	strge.w	r3, [r8]
 8013d54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013d58:	4ba3      	ldr	r3, [pc, #652]	; (8013fe8 <_dtoa_r+0x300>)
 8013d5a:	bfbc      	itt	lt
 8013d5c:	2201      	movlt	r2, #1
 8013d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8013d62:	ea33 0309 	bics.w	r3, r3, r9
 8013d66:	d11b      	bne.n	8013da0 <_dtoa_r+0xb8>
 8013d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8013d6e:	6013      	str	r3, [r2, #0]
 8013d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d74:	4333      	orrs	r3, r6
 8013d76:	f000 857a 	beq.w	801486e <_dtoa_r+0xb86>
 8013d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d7c:	b963      	cbnz	r3, 8013d98 <_dtoa_r+0xb0>
 8013d7e:	4b9b      	ldr	r3, [pc, #620]	; (8013fec <_dtoa_r+0x304>)
 8013d80:	e024      	b.n	8013dcc <_dtoa_r+0xe4>
 8013d82:	4b9b      	ldr	r3, [pc, #620]	; (8013ff0 <_dtoa_r+0x308>)
 8013d84:	9300      	str	r3, [sp, #0]
 8013d86:	3308      	adds	r3, #8
 8013d88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013d8a:	6013      	str	r3, [r2, #0]
 8013d8c:	9800      	ldr	r0, [sp, #0]
 8013d8e:	b015      	add	sp, #84	; 0x54
 8013d90:	ecbd 8b02 	vpop	{d8}
 8013d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d98:	4b94      	ldr	r3, [pc, #592]	; (8013fec <_dtoa_r+0x304>)
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	3303      	adds	r3, #3
 8013d9e:	e7f3      	b.n	8013d88 <_dtoa_r+0xa0>
 8013da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013da4:	2200      	movs	r2, #0
 8013da6:	ec51 0b17 	vmov	r0, r1, d7
 8013daa:	2300      	movs	r3, #0
 8013dac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013db0:	f7ec fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013db4:	4680      	mov	r8, r0
 8013db6:	b158      	cbz	r0, 8013dd0 <_dtoa_r+0xe8>
 8013db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013dba:	2301      	movs	r3, #1
 8013dbc:	6013      	str	r3, [r2, #0]
 8013dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	f000 8551 	beq.w	8014868 <_dtoa_r+0xb80>
 8013dc6:	488b      	ldr	r0, [pc, #556]	; (8013ff4 <_dtoa_r+0x30c>)
 8013dc8:	6018      	str	r0, [r3, #0]
 8013dca:	1e43      	subs	r3, r0, #1
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	e7dd      	b.n	8013d8c <_dtoa_r+0xa4>
 8013dd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013dd4:	aa12      	add	r2, sp, #72	; 0x48
 8013dd6:	a913      	add	r1, sp, #76	; 0x4c
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f001 f99d 	bl	8015118 <__d2b>
 8013dde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013de2:	4683      	mov	fp, r0
 8013de4:	2d00      	cmp	r5, #0
 8013de6:	d07c      	beq.n	8013ee2 <_dtoa_r+0x1fa>
 8013de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013df2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013df6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013dfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013e02:	4b7d      	ldr	r3, [pc, #500]	; (8013ff8 <_dtoa_r+0x310>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	4630      	mov	r0, r6
 8013e08:	4639      	mov	r1, r7
 8013e0a:	f7ec fa3d 	bl	8000288 <__aeabi_dsub>
 8013e0e:	a36e      	add	r3, pc, #440	; (adr r3, 8013fc8 <_dtoa_r+0x2e0>)
 8013e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e14:	f7ec fbf0 	bl	80005f8 <__aeabi_dmul>
 8013e18:	a36d      	add	r3, pc, #436	; (adr r3, 8013fd0 <_dtoa_r+0x2e8>)
 8013e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e1e:	f7ec fa35 	bl	800028c <__adddf3>
 8013e22:	4606      	mov	r6, r0
 8013e24:	4628      	mov	r0, r5
 8013e26:	460f      	mov	r7, r1
 8013e28:	f7ec fb7c 	bl	8000524 <__aeabi_i2d>
 8013e2c:	a36a      	add	r3, pc, #424	; (adr r3, 8013fd8 <_dtoa_r+0x2f0>)
 8013e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e32:	f7ec fbe1 	bl	80005f8 <__aeabi_dmul>
 8013e36:	4602      	mov	r2, r0
 8013e38:	460b      	mov	r3, r1
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	4639      	mov	r1, r7
 8013e3e:	f7ec fa25 	bl	800028c <__adddf3>
 8013e42:	4606      	mov	r6, r0
 8013e44:	460f      	mov	r7, r1
 8013e46:	f7ec fe87 	bl	8000b58 <__aeabi_d2iz>
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	4682      	mov	sl, r0
 8013e4e:	2300      	movs	r3, #0
 8013e50:	4630      	mov	r0, r6
 8013e52:	4639      	mov	r1, r7
 8013e54:	f7ec fe42 	bl	8000adc <__aeabi_dcmplt>
 8013e58:	b148      	cbz	r0, 8013e6e <_dtoa_r+0x186>
 8013e5a:	4650      	mov	r0, sl
 8013e5c:	f7ec fb62 	bl	8000524 <__aeabi_i2d>
 8013e60:	4632      	mov	r2, r6
 8013e62:	463b      	mov	r3, r7
 8013e64:	f7ec fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e68:	b908      	cbnz	r0, 8013e6e <_dtoa_r+0x186>
 8013e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e6e:	f1ba 0f16 	cmp.w	sl, #22
 8013e72:	d854      	bhi.n	8013f1e <_dtoa_r+0x236>
 8013e74:	4b61      	ldr	r3, [pc, #388]	; (8013ffc <_dtoa_r+0x314>)
 8013e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013e82:	f7ec fe2b 	bl	8000adc <__aeabi_dcmplt>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d04b      	beq.n	8013f22 <_dtoa_r+0x23a>
 8013e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e8e:	2300      	movs	r3, #0
 8013e90:	930e      	str	r3, [sp, #56]	; 0x38
 8013e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013e94:	1b5d      	subs	r5, r3, r5
 8013e96:	1e6b      	subs	r3, r5, #1
 8013e98:	9304      	str	r3, [sp, #16]
 8013e9a:	bf43      	ittte	mi
 8013e9c:	2300      	movmi	r3, #0
 8013e9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8013ea2:	9304      	strmi	r3, [sp, #16]
 8013ea4:	f04f 0800 	movpl.w	r8, #0
 8013ea8:	f1ba 0f00 	cmp.w	sl, #0
 8013eac:	db3b      	blt.n	8013f26 <_dtoa_r+0x23e>
 8013eae:	9b04      	ldr	r3, [sp, #16]
 8013eb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013eb4:	4453      	add	r3, sl
 8013eb6:	9304      	str	r3, [sp, #16]
 8013eb8:	2300      	movs	r3, #0
 8013eba:	9306      	str	r3, [sp, #24]
 8013ebc:	9b05      	ldr	r3, [sp, #20]
 8013ebe:	2b09      	cmp	r3, #9
 8013ec0:	d869      	bhi.n	8013f96 <_dtoa_r+0x2ae>
 8013ec2:	2b05      	cmp	r3, #5
 8013ec4:	bfc4      	itt	gt
 8013ec6:	3b04      	subgt	r3, #4
 8013ec8:	9305      	strgt	r3, [sp, #20]
 8013eca:	9b05      	ldr	r3, [sp, #20]
 8013ecc:	f1a3 0302 	sub.w	r3, r3, #2
 8013ed0:	bfcc      	ite	gt
 8013ed2:	2500      	movgt	r5, #0
 8013ed4:	2501      	movle	r5, #1
 8013ed6:	2b03      	cmp	r3, #3
 8013ed8:	d869      	bhi.n	8013fae <_dtoa_r+0x2c6>
 8013eda:	e8df f003 	tbb	[pc, r3]
 8013ede:	4e2c      	.short	0x4e2c
 8013ee0:	5a4c      	.short	0x5a4c
 8013ee2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013ee6:	441d      	add	r5, r3
 8013ee8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013eec:	2b20      	cmp	r3, #32
 8013eee:	bfc1      	itttt	gt
 8013ef0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013ef4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013ef8:	fa09 f303 	lslgt.w	r3, r9, r3
 8013efc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013f00:	bfda      	itte	le
 8013f02:	f1c3 0320 	rsble	r3, r3, #32
 8013f06:	fa06 f003 	lslle.w	r0, r6, r3
 8013f0a:	4318      	orrgt	r0, r3
 8013f0c:	f7ec fafa 	bl	8000504 <__aeabi_ui2d>
 8013f10:	2301      	movs	r3, #1
 8013f12:	4606      	mov	r6, r0
 8013f14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013f18:	3d01      	subs	r5, #1
 8013f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8013f1c:	e771      	b.n	8013e02 <_dtoa_r+0x11a>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	e7b6      	b.n	8013e90 <_dtoa_r+0x1a8>
 8013f22:	900e      	str	r0, [sp, #56]	; 0x38
 8013f24:	e7b5      	b.n	8013e92 <_dtoa_r+0x1aa>
 8013f26:	f1ca 0300 	rsb	r3, sl, #0
 8013f2a:	9306      	str	r3, [sp, #24]
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	eba8 080a 	sub.w	r8, r8, sl
 8013f32:	930d      	str	r3, [sp, #52]	; 0x34
 8013f34:	e7c2      	b.n	8013ebc <_dtoa_r+0x1d4>
 8013f36:	2300      	movs	r3, #0
 8013f38:	9308      	str	r3, [sp, #32]
 8013f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	dc39      	bgt.n	8013fb4 <_dtoa_r+0x2cc>
 8013f40:	f04f 0901 	mov.w	r9, #1
 8013f44:	f8cd 9004 	str.w	r9, [sp, #4]
 8013f48:	464b      	mov	r3, r9
 8013f4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013f50:	2200      	movs	r2, #0
 8013f52:	6042      	str	r2, [r0, #4]
 8013f54:	2204      	movs	r2, #4
 8013f56:	f102 0614 	add.w	r6, r2, #20
 8013f5a:	429e      	cmp	r6, r3
 8013f5c:	6841      	ldr	r1, [r0, #4]
 8013f5e:	d92f      	bls.n	8013fc0 <_dtoa_r+0x2d8>
 8013f60:	4620      	mov	r0, r4
 8013f62:	f000 fdb7 	bl	8014ad4 <_Balloc>
 8013f66:	9000      	str	r0, [sp, #0]
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d14b      	bne.n	8014004 <_dtoa_r+0x31c>
 8013f6c:	4b24      	ldr	r3, [pc, #144]	; (8014000 <_dtoa_r+0x318>)
 8013f6e:	4602      	mov	r2, r0
 8013f70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013f74:	e6d1      	b.n	8013d1a <_dtoa_r+0x32>
 8013f76:	2301      	movs	r3, #1
 8013f78:	e7de      	b.n	8013f38 <_dtoa_r+0x250>
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	9308      	str	r3, [sp, #32]
 8013f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f80:	eb0a 0903 	add.w	r9, sl, r3
 8013f84:	f109 0301 	add.w	r3, r9, #1
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	9301      	str	r3, [sp, #4]
 8013f8c:	bfb8      	it	lt
 8013f8e:	2301      	movlt	r3, #1
 8013f90:	e7dd      	b.n	8013f4e <_dtoa_r+0x266>
 8013f92:	2301      	movs	r3, #1
 8013f94:	e7f2      	b.n	8013f7c <_dtoa_r+0x294>
 8013f96:	2501      	movs	r5, #1
 8013f98:	2300      	movs	r3, #0
 8013f9a:	9305      	str	r3, [sp, #20]
 8013f9c:	9508      	str	r5, [sp, #32]
 8013f9e:	f04f 39ff 	mov.w	r9, #4294967295
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8013fa8:	2312      	movs	r3, #18
 8013faa:	9209      	str	r2, [sp, #36]	; 0x24
 8013fac:	e7cf      	b.n	8013f4e <_dtoa_r+0x266>
 8013fae:	2301      	movs	r3, #1
 8013fb0:	9308      	str	r3, [sp, #32]
 8013fb2:	e7f4      	b.n	8013f9e <_dtoa_r+0x2b6>
 8013fb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8013fbc:	464b      	mov	r3, r9
 8013fbe:	e7c6      	b.n	8013f4e <_dtoa_r+0x266>
 8013fc0:	3101      	adds	r1, #1
 8013fc2:	6041      	str	r1, [r0, #4]
 8013fc4:	0052      	lsls	r2, r2, #1
 8013fc6:	e7c6      	b.n	8013f56 <_dtoa_r+0x26e>
 8013fc8:	636f4361 	.word	0x636f4361
 8013fcc:	3fd287a7 	.word	0x3fd287a7
 8013fd0:	8b60c8b3 	.word	0x8b60c8b3
 8013fd4:	3fc68a28 	.word	0x3fc68a28
 8013fd8:	509f79fb 	.word	0x509f79fb
 8013fdc:	3fd34413 	.word	0x3fd34413
 8013fe0:	0801aaf9 	.word	0x0801aaf9
 8013fe4:	0801ab10 	.word	0x0801ab10
 8013fe8:	7ff00000 	.word	0x7ff00000
 8013fec:	0801aaf5 	.word	0x0801aaf5
 8013ff0:	0801aaec 	.word	0x0801aaec
 8013ff4:	0801aac9 	.word	0x0801aac9
 8013ff8:	3ff80000 	.word	0x3ff80000
 8013ffc:	0801ac68 	.word	0x0801ac68
 8014000:	0801ab6f 	.word	0x0801ab6f
 8014004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014006:	9a00      	ldr	r2, [sp, #0]
 8014008:	601a      	str	r2, [r3, #0]
 801400a:	9b01      	ldr	r3, [sp, #4]
 801400c:	2b0e      	cmp	r3, #14
 801400e:	f200 80ad 	bhi.w	801416c <_dtoa_r+0x484>
 8014012:	2d00      	cmp	r5, #0
 8014014:	f000 80aa 	beq.w	801416c <_dtoa_r+0x484>
 8014018:	f1ba 0f00 	cmp.w	sl, #0
 801401c:	dd36      	ble.n	801408c <_dtoa_r+0x3a4>
 801401e:	4ac3      	ldr	r2, [pc, #780]	; (801432c <_dtoa_r+0x644>)
 8014020:	f00a 030f 	and.w	r3, sl, #15
 8014024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014028:	ed93 7b00 	vldr	d7, [r3]
 801402c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014030:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014034:	eeb0 8a47 	vmov.f32	s16, s14
 8014038:	eef0 8a67 	vmov.f32	s17, s15
 801403c:	d016      	beq.n	801406c <_dtoa_r+0x384>
 801403e:	4bbc      	ldr	r3, [pc, #752]	; (8014330 <_dtoa_r+0x648>)
 8014040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014044:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014048:	f7ec fc00 	bl	800084c <__aeabi_ddiv>
 801404c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014050:	f007 070f 	and.w	r7, r7, #15
 8014054:	2503      	movs	r5, #3
 8014056:	4eb6      	ldr	r6, [pc, #728]	; (8014330 <_dtoa_r+0x648>)
 8014058:	b957      	cbnz	r7, 8014070 <_dtoa_r+0x388>
 801405a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801405e:	ec53 2b18 	vmov	r2, r3, d8
 8014062:	f7ec fbf3 	bl	800084c <__aeabi_ddiv>
 8014066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801406a:	e029      	b.n	80140c0 <_dtoa_r+0x3d8>
 801406c:	2502      	movs	r5, #2
 801406e:	e7f2      	b.n	8014056 <_dtoa_r+0x36e>
 8014070:	07f9      	lsls	r1, r7, #31
 8014072:	d508      	bpl.n	8014086 <_dtoa_r+0x39e>
 8014074:	ec51 0b18 	vmov	r0, r1, d8
 8014078:	e9d6 2300 	ldrd	r2, r3, [r6]
 801407c:	f7ec fabc 	bl	80005f8 <__aeabi_dmul>
 8014080:	ec41 0b18 	vmov	d8, r0, r1
 8014084:	3501      	adds	r5, #1
 8014086:	107f      	asrs	r7, r7, #1
 8014088:	3608      	adds	r6, #8
 801408a:	e7e5      	b.n	8014058 <_dtoa_r+0x370>
 801408c:	f000 80a6 	beq.w	80141dc <_dtoa_r+0x4f4>
 8014090:	f1ca 0600 	rsb	r6, sl, #0
 8014094:	4ba5      	ldr	r3, [pc, #660]	; (801432c <_dtoa_r+0x644>)
 8014096:	4fa6      	ldr	r7, [pc, #664]	; (8014330 <_dtoa_r+0x648>)
 8014098:	f006 020f 	and.w	r2, r6, #15
 801409c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80140a8:	f7ec faa6 	bl	80005f8 <__aeabi_dmul>
 80140ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140b0:	1136      	asrs	r6, r6, #4
 80140b2:	2300      	movs	r3, #0
 80140b4:	2502      	movs	r5, #2
 80140b6:	2e00      	cmp	r6, #0
 80140b8:	f040 8085 	bne.w	80141c6 <_dtoa_r+0x4de>
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d1d2      	bne.n	8014066 <_dtoa_r+0x37e>
 80140c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f000 808c 	beq.w	80141e0 <_dtoa_r+0x4f8>
 80140c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80140cc:	4b99      	ldr	r3, [pc, #612]	; (8014334 <_dtoa_r+0x64c>)
 80140ce:	2200      	movs	r2, #0
 80140d0:	4630      	mov	r0, r6
 80140d2:	4639      	mov	r1, r7
 80140d4:	f7ec fd02 	bl	8000adc <__aeabi_dcmplt>
 80140d8:	2800      	cmp	r0, #0
 80140da:	f000 8081 	beq.w	80141e0 <_dtoa_r+0x4f8>
 80140de:	9b01      	ldr	r3, [sp, #4]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d07d      	beq.n	80141e0 <_dtoa_r+0x4f8>
 80140e4:	f1b9 0f00 	cmp.w	r9, #0
 80140e8:	dd3c      	ble.n	8014164 <_dtoa_r+0x47c>
 80140ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80140ee:	9307      	str	r3, [sp, #28]
 80140f0:	2200      	movs	r2, #0
 80140f2:	4b91      	ldr	r3, [pc, #580]	; (8014338 <_dtoa_r+0x650>)
 80140f4:	4630      	mov	r0, r6
 80140f6:	4639      	mov	r1, r7
 80140f8:	f7ec fa7e 	bl	80005f8 <__aeabi_dmul>
 80140fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014100:	3501      	adds	r5, #1
 8014102:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014106:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801410a:	4628      	mov	r0, r5
 801410c:	f7ec fa0a 	bl	8000524 <__aeabi_i2d>
 8014110:	4632      	mov	r2, r6
 8014112:	463b      	mov	r3, r7
 8014114:	f7ec fa70 	bl	80005f8 <__aeabi_dmul>
 8014118:	4b88      	ldr	r3, [pc, #544]	; (801433c <_dtoa_r+0x654>)
 801411a:	2200      	movs	r2, #0
 801411c:	f7ec f8b6 	bl	800028c <__adddf3>
 8014120:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014128:	9303      	str	r3, [sp, #12]
 801412a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801412c:	2b00      	cmp	r3, #0
 801412e:	d15c      	bne.n	80141ea <_dtoa_r+0x502>
 8014130:	4b83      	ldr	r3, [pc, #524]	; (8014340 <_dtoa_r+0x658>)
 8014132:	2200      	movs	r2, #0
 8014134:	4630      	mov	r0, r6
 8014136:	4639      	mov	r1, r7
 8014138:	f7ec f8a6 	bl	8000288 <__aeabi_dsub>
 801413c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014140:	4606      	mov	r6, r0
 8014142:	460f      	mov	r7, r1
 8014144:	f7ec fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8014148:	2800      	cmp	r0, #0
 801414a:	f040 8296 	bne.w	801467a <_dtoa_r+0x992>
 801414e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014152:	4630      	mov	r0, r6
 8014154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014158:	4639      	mov	r1, r7
 801415a:	f7ec fcbf 	bl	8000adc <__aeabi_dcmplt>
 801415e:	2800      	cmp	r0, #0
 8014160:	f040 8288 	bne.w	8014674 <_dtoa_r+0x98c>
 8014164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801416c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801416e:	2b00      	cmp	r3, #0
 8014170:	f2c0 8158 	blt.w	8014424 <_dtoa_r+0x73c>
 8014174:	f1ba 0f0e 	cmp.w	sl, #14
 8014178:	f300 8154 	bgt.w	8014424 <_dtoa_r+0x73c>
 801417c:	4b6b      	ldr	r3, [pc, #428]	; (801432c <_dtoa_r+0x644>)
 801417e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014182:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014188:	2b00      	cmp	r3, #0
 801418a:	f280 80e3 	bge.w	8014354 <_dtoa_r+0x66c>
 801418e:	9b01      	ldr	r3, [sp, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	f300 80df 	bgt.w	8014354 <_dtoa_r+0x66c>
 8014196:	f040 826d 	bne.w	8014674 <_dtoa_r+0x98c>
 801419a:	4b69      	ldr	r3, [pc, #420]	; (8014340 <_dtoa_r+0x658>)
 801419c:	2200      	movs	r2, #0
 801419e:	4640      	mov	r0, r8
 80141a0:	4649      	mov	r1, r9
 80141a2:	f7ec fa29 	bl	80005f8 <__aeabi_dmul>
 80141a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141aa:	f7ec fcab 	bl	8000b04 <__aeabi_dcmpge>
 80141ae:	9e01      	ldr	r6, [sp, #4]
 80141b0:	4637      	mov	r7, r6
 80141b2:	2800      	cmp	r0, #0
 80141b4:	f040 8243 	bne.w	801463e <_dtoa_r+0x956>
 80141b8:	9d00      	ldr	r5, [sp, #0]
 80141ba:	2331      	movs	r3, #49	; 0x31
 80141bc:	f805 3b01 	strb.w	r3, [r5], #1
 80141c0:	f10a 0a01 	add.w	sl, sl, #1
 80141c4:	e23f      	b.n	8014646 <_dtoa_r+0x95e>
 80141c6:	07f2      	lsls	r2, r6, #31
 80141c8:	d505      	bpl.n	80141d6 <_dtoa_r+0x4ee>
 80141ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80141ce:	f7ec fa13 	bl	80005f8 <__aeabi_dmul>
 80141d2:	3501      	adds	r5, #1
 80141d4:	2301      	movs	r3, #1
 80141d6:	1076      	asrs	r6, r6, #1
 80141d8:	3708      	adds	r7, #8
 80141da:	e76c      	b.n	80140b6 <_dtoa_r+0x3ce>
 80141dc:	2502      	movs	r5, #2
 80141de:	e76f      	b.n	80140c0 <_dtoa_r+0x3d8>
 80141e0:	9b01      	ldr	r3, [sp, #4]
 80141e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80141e6:	930c      	str	r3, [sp, #48]	; 0x30
 80141e8:	e78d      	b.n	8014106 <_dtoa_r+0x41e>
 80141ea:	9900      	ldr	r1, [sp, #0]
 80141ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80141ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141f0:	4b4e      	ldr	r3, [pc, #312]	; (801432c <_dtoa_r+0x644>)
 80141f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80141f6:	4401      	add	r1, r0
 80141f8:	9102      	str	r1, [sp, #8]
 80141fa:	9908      	ldr	r1, [sp, #32]
 80141fc:	eeb0 8a47 	vmov.f32	s16, s14
 8014200:	eef0 8a67 	vmov.f32	s17, s15
 8014204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801420c:	2900      	cmp	r1, #0
 801420e:	d045      	beq.n	801429c <_dtoa_r+0x5b4>
 8014210:	494c      	ldr	r1, [pc, #304]	; (8014344 <_dtoa_r+0x65c>)
 8014212:	2000      	movs	r0, #0
 8014214:	f7ec fb1a 	bl	800084c <__aeabi_ddiv>
 8014218:	ec53 2b18 	vmov	r2, r3, d8
 801421c:	f7ec f834 	bl	8000288 <__aeabi_dsub>
 8014220:	9d00      	ldr	r5, [sp, #0]
 8014222:	ec41 0b18 	vmov	d8, r0, r1
 8014226:	4639      	mov	r1, r7
 8014228:	4630      	mov	r0, r6
 801422a:	f7ec fc95 	bl	8000b58 <__aeabi_d2iz>
 801422e:	900c      	str	r0, [sp, #48]	; 0x30
 8014230:	f7ec f978 	bl	8000524 <__aeabi_i2d>
 8014234:	4602      	mov	r2, r0
 8014236:	460b      	mov	r3, r1
 8014238:	4630      	mov	r0, r6
 801423a:	4639      	mov	r1, r7
 801423c:	f7ec f824 	bl	8000288 <__aeabi_dsub>
 8014240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014242:	3330      	adds	r3, #48	; 0x30
 8014244:	f805 3b01 	strb.w	r3, [r5], #1
 8014248:	ec53 2b18 	vmov	r2, r3, d8
 801424c:	4606      	mov	r6, r0
 801424e:	460f      	mov	r7, r1
 8014250:	f7ec fc44 	bl	8000adc <__aeabi_dcmplt>
 8014254:	2800      	cmp	r0, #0
 8014256:	d165      	bne.n	8014324 <_dtoa_r+0x63c>
 8014258:	4632      	mov	r2, r6
 801425a:	463b      	mov	r3, r7
 801425c:	4935      	ldr	r1, [pc, #212]	; (8014334 <_dtoa_r+0x64c>)
 801425e:	2000      	movs	r0, #0
 8014260:	f7ec f812 	bl	8000288 <__aeabi_dsub>
 8014264:	ec53 2b18 	vmov	r2, r3, d8
 8014268:	f7ec fc38 	bl	8000adc <__aeabi_dcmplt>
 801426c:	2800      	cmp	r0, #0
 801426e:	f040 80b9 	bne.w	80143e4 <_dtoa_r+0x6fc>
 8014272:	9b02      	ldr	r3, [sp, #8]
 8014274:	429d      	cmp	r5, r3
 8014276:	f43f af75 	beq.w	8014164 <_dtoa_r+0x47c>
 801427a:	4b2f      	ldr	r3, [pc, #188]	; (8014338 <_dtoa_r+0x650>)
 801427c:	ec51 0b18 	vmov	r0, r1, d8
 8014280:	2200      	movs	r2, #0
 8014282:	f7ec f9b9 	bl	80005f8 <__aeabi_dmul>
 8014286:	4b2c      	ldr	r3, [pc, #176]	; (8014338 <_dtoa_r+0x650>)
 8014288:	ec41 0b18 	vmov	d8, r0, r1
 801428c:	2200      	movs	r2, #0
 801428e:	4630      	mov	r0, r6
 8014290:	4639      	mov	r1, r7
 8014292:	f7ec f9b1 	bl	80005f8 <__aeabi_dmul>
 8014296:	4606      	mov	r6, r0
 8014298:	460f      	mov	r7, r1
 801429a:	e7c4      	b.n	8014226 <_dtoa_r+0x53e>
 801429c:	ec51 0b17 	vmov	r0, r1, d7
 80142a0:	f7ec f9aa 	bl	80005f8 <__aeabi_dmul>
 80142a4:	9b02      	ldr	r3, [sp, #8]
 80142a6:	9d00      	ldr	r5, [sp, #0]
 80142a8:	930c      	str	r3, [sp, #48]	; 0x30
 80142aa:	ec41 0b18 	vmov	d8, r0, r1
 80142ae:	4639      	mov	r1, r7
 80142b0:	4630      	mov	r0, r6
 80142b2:	f7ec fc51 	bl	8000b58 <__aeabi_d2iz>
 80142b6:	9011      	str	r0, [sp, #68]	; 0x44
 80142b8:	f7ec f934 	bl	8000524 <__aeabi_i2d>
 80142bc:	4602      	mov	r2, r0
 80142be:	460b      	mov	r3, r1
 80142c0:	4630      	mov	r0, r6
 80142c2:	4639      	mov	r1, r7
 80142c4:	f7eb ffe0 	bl	8000288 <__aeabi_dsub>
 80142c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80142ca:	3330      	adds	r3, #48	; 0x30
 80142cc:	f805 3b01 	strb.w	r3, [r5], #1
 80142d0:	9b02      	ldr	r3, [sp, #8]
 80142d2:	429d      	cmp	r5, r3
 80142d4:	4606      	mov	r6, r0
 80142d6:	460f      	mov	r7, r1
 80142d8:	f04f 0200 	mov.w	r2, #0
 80142dc:	d134      	bne.n	8014348 <_dtoa_r+0x660>
 80142de:	4b19      	ldr	r3, [pc, #100]	; (8014344 <_dtoa_r+0x65c>)
 80142e0:	ec51 0b18 	vmov	r0, r1, d8
 80142e4:	f7eb ffd2 	bl	800028c <__adddf3>
 80142e8:	4602      	mov	r2, r0
 80142ea:	460b      	mov	r3, r1
 80142ec:	4630      	mov	r0, r6
 80142ee:	4639      	mov	r1, r7
 80142f0:	f7ec fc12 	bl	8000b18 <__aeabi_dcmpgt>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d175      	bne.n	80143e4 <_dtoa_r+0x6fc>
 80142f8:	ec53 2b18 	vmov	r2, r3, d8
 80142fc:	4911      	ldr	r1, [pc, #68]	; (8014344 <_dtoa_r+0x65c>)
 80142fe:	2000      	movs	r0, #0
 8014300:	f7eb ffc2 	bl	8000288 <__aeabi_dsub>
 8014304:	4602      	mov	r2, r0
 8014306:	460b      	mov	r3, r1
 8014308:	4630      	mov	r0, r6
 801430a:	4639      	mov	r1, r7
 801430c:	f7ec fbe6 	bl	8000adc <__aeabi_dcmplt>
 8014310:	2800      	cmp	r0, #0
 8014312:	f43f af27 	beq.w	8014164 <_dtoa_r+0x47c>
 8014316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014318:	1e6b      	subs	r3, r5, #1
 801431a:	930c      	str	r3, [sp, #48]	; 0x30
 801431c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014320:	2b30      	cmp	r3, #48	; 0x30
 8014322:	d0f8      	beq.n	8014316 <_dtoa_r+0x62e>
 8014324:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014328:	e04a      	b.n	80143c0 <_dtoa_r+0x6d8>
 801432a:	bf00      	nop
 801432c:	0801ac68 	.word	0x0801ac68
 8014330:	0801ac40 	.word	0x0801ac40
 8014334:	3ff00000 	.word	0x3ff00000
 8014338:	40240000 	.word	0x40240000
 801433c:	401c0000 	.word	0x401c0000
 8014340:	40140000 	.word	0x40140000
 8014344:	3fe00000 	.word	0x3fe00000
 8014348:	4baf      	ldr	r3, [pc, #700]	; (8014608 <_dtoa_r+0x920>)
 801434a:	f7ec f955 	bl	80005f8 <__aeabi_dmul>
 801434e:	4606      	mov	r6, r0
 8014350:	460f      	mov	r7, r1
 8014352:	e7ac      	b.n	80142ae <_dtoa_r+0x5c6>
 8014354:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014358:	9d00      	ldr	r5, [sp, #0]
 801435a:	4642      	mov	r2, r8
 801435c:	464b      	mov	r3, r9
 801435e:	4630      	mov	r0, r6
 8014360:	4639      	mov	r1, r7
 8014362:	f7ec fa73 	bl	800084c <__aeabi_ddiv>
 8014366:	f7ec fbf7 	bl	8000b58 <__aeabi_d2iz>
 801436a:	9002      	str	r0, [sp, #8]
 801436c:	f7ec f8da 	bl	8000524 <__aeabi_i2d>
 8014370:	4642      	mov	r2, r8
 8014372:	464b      	mov	r3, r9
 8014374:	f7ec f940 	bl	80005f8 <__aeabi_dmul>
 8014378:	4602      	mov	r2, r0
 801437a:	460b      	mov	r3, r1
 801437c:	4630      	mov	r0, r6
 801437e:	4639      	mov	r1, r7
 8014380:	f7eb ff82 	bl	8000288 <__aeabi_dsub>
 8014384:	9e02      	ldr	r6, [sp, #8]
 8014386:	9f01      	ldr	r7, [sp, #4]
 8014388:	3630      	adds	r6, #48	; 0x30
 801438a:	f805 6b01 	strb.w	r6, [r5], #1
 801438e:	9e00      	ldr	r6, [sp, #0]
 8014390:	1bae      	subs	r6, r5, r6
 8014392:	42b7      	cmp	r7, r6
 8014394:	4602      	mov	r2, r0
 8014396:	460b      	mov	r3, r1
 8014398:	d137      	bne.n	801440a <_dtoa_r+0x722>
 801439a:	f7eb ff77 	bl	800028c <__adddf3>
 801439e:	4642      	mov	r2, r8
 80143a0:	464b      	mov	r3, r9
 80143a2:	4606      	mov	r6, r0
 80143a4:	460f      	mov	r7, r1
 80143a6:	f7ec fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 80143aa:	b9c8      	cbnz	r0, 80143e0 <_dtoa_r+0x6f8>
 80143ac:	4642      	mov	r2, r8
 80143ae:	464b      	mov	r3, r9
 80143b0:	4630      	mov	r0, r6
 80143b2:	4639      	mov	r1, r7
 80143b4:	f7ec fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80143b8:	b110      	cbz	r0, 80143c0 <_dtoa_r+0x6d8>
 80143ba:	9b02      	ldr	r3, [sp, #8]
 80143bc:	07d9      	lsls	r1, r3, #31
 80143be:	d40f      	bmi.n	80143e0 <_dtoa_r+0x6f8>
 80143c0:	4620      	mov	r0, r4
 80143c2:	4659      	mov	r1, fp
 80143c4:	f000 fbc6 	bl	8014b54 <_Bfree>
 80143c8:	2300      	movs	r3, #0
 80143ca:	702b      	strb	r3, [r5, #0]
 80143cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143ce:	f10a 0001 	add.w	r0, sl, #1
 80143d2:	6018      	str	r0, [r3, #0]
 80143d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f43f acd8 	beq.w	8013d8c <_dtoa_r+0xa4>
 80143dc:	601d      	str	r5, [r3, #0]
 80143de:	e4d5      	b.n	8013d8c <_dtoa_r+0xa4>
 80143e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80143e4:	462b      	mov	r3, r5
 80143e6:	461d      	mov	r5, r3
 80143e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143ec:	2a39      	cmp	r2, #57	; 0x39
 80143ee:	d108      	bne.n	8014402 <_dtoa_r+0x71a>
 80143f0:	9a00      	ldr	r2, [sp, #0]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d1f7      	bne.n	80143e6 <_dtoa_r+0x6fe>
 80143f6:	9a07      	ldr	r2, [sp, #28]
 80143f8:	9900      	ldr	r1, [sp, #0]
 80143fa:	3201      	adds	r2, #1
 80143fc:	9207      	str	r2, [sp, #28]
 80143fe:	2230      	movs	r2, #48	; 0x30
 8014400:	700a      	strb	r2, [r1, #0]
 8014402:	781a      	ldrb	r2, [r3, #0]
 8014404:	3201      	adds	r2, #1
 8014406:	701a      	strb	r2, [r3, #0]
 8014408:	e78c      	b.n	8014324 <_dtoa_r+0x63c>
 801440a:	4b7f      	ldr	r3, [pc, #508]	; (8014608 <_dtoa_r+0x920>)
 801440c:	2200      	movs	r2, #0
 801440e:	f7ec f8f3 	bl	80005f8 <__aeabi_dmul>
 8014412:	2200      	movs	r2, #0
 8014414:	2300      	movs	r3, #0
 8014416:	4606      	mov	r6, r0
 8014418:	460f      	mov	r7, r1
 801441a:	f7ec fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 801441e:	2800      	cmp	r0, #0
 8014420:	d09b      	beq.n	801435a <_dtoa_r+0x672>
 8014422:	e7cd      	b.n	80143c0 <_dtoa_r+0x6d8>
 8014424:	9a08      	ldr	r2, [sp, #32]
 8014426:	2a00      	cmp	r2, #0
 8014428:	f000 80c4 	beq.w	80145b4 <_dtoa_r+0x8cc>
 801442c:	9a05      	ldr	r2, [sp, #20]
 801442e:	2a01      	cmp	r2, #1
 8014430:	f300 80a8 	bgt.w	8014584 <_dtoa_r+0x89c>
 8014434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014436:	2a00      	cmp	r2, #0
 8014438:	f000 80a0 	beq.w	801457c <_dtoa_r+0x894>
 801443c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014440:	9e06      	ldr	r6, [sp, #24]
 8014442:	4645      	mov	r5, r8
 8014444:	9a04      	ldr	r2, [sp, #16]
 8014446:	2101      	movs	r1, #1
 8014448:	441a      	add	r2, r3
 801444a:	4620      	mov	r0, r4
 801444c:	4498      	add	r8, r3
 801444e:	9204      	str	r2, [sp, #16]
 8014450:	f000 fc3c 	bl	8014ccc <__i2b>
 8014454:	4607      	mov	r7, r0
 8014456:	2d00      	cmp	r5, #0
 8014458:	dd0b      	ble.n	8014472 <_dtoa_r+0x78a>
 801445a:	9b04      	ldr	r3, [sp, #16]
 801445c:	2b00      	cmp	r3, #0
 801445e:	dd08      	ble.n	8014472 <_dtoa_r+0x78a>
 8014460:	42ab      	cmp	r3, r5
 8014462:	9a04      	ldr	r2, [sp, #16]
 8014464:	bfa8      	it	ge
 8014466:	462b      	movge	r3, r5
 8014468:	eba8 0803 	sub.w	r8, r8, r3
 801446c:	1aed      	subs	r5, r5, r3
 801446e:	1ad3      	subs	r3, r2, r3
 8014470:	9304      	str	r3, [sp, #16]
 8014472:	9b06      	ldr	r3, [sp, #24]
 8014474:	b1fb      	cbz	r3, 80144b6 <_dtoa_r+0x7ce>
 8014476:	9b08      	ldr	r3, [sp, #32]
 8014478:	2b00      	cmp	r3, #0
 801447a:	f000 809f 	beq.w	80145bc <_dtoa_r+0x8d4>
 801447e:	2e00      	cmp	r6, #0
 8014480:	dd11      	ble.n	80144a6 <_dtoa_r+0x7be>
 8014482:	4639      	mov	r1, r7
 8014484:	4632      	mov	r2, r6
 8014486:	4620      	mov	r0, r4
 8014488:	f000 fcdc 	bl	8014e44 <__pow5mult>
 801448c:	465a      	mov	r2, fp
 801448e:	4601      	mov	r1, r0
 8014490:	4607      	mov	r7, r0
 8014492:	4620      	mov	r0, r4
 8014494:	f000 fc30 	bl	8014cf8 <__multiply>
 8014498:	4659      	mov	r1, fp
 801449a:	9007      	str	r0, [sp, #28]
 801449c:	4620      	mov	r0, r4
 801449e:	f000 fb59 	bl	8014b54 <_Bfree>
 80144a2:	9b07      	ldr	r3, [sp, #28]
 80144a4:	469b      	mov	fp, r3
 80144a6:	9b06      	ldr	r3, [sp, #24]
 80144a8:	1b9a      	subs	r2, r3, r6
 80144aa:	d004      	beq.n	80144b6 <_dtoa_r+0x7ce>
 80144ac:	4659      	mov	r1, fp
 80144ae:	4620      	mov	r0, r4
 80144b0:	f000 fcc8 	bl	8014e44 <__pow5mult>
 80144b4:	4683      	mov	fp, r0
 80144b6:	2101      	movs	r1, #1
 80144b8:	4620      	mov	r0, r4
 80144ba:	f000 fc07 	bl	8014ccc <__i2b>
 80144be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	4606      	mov	r6, r0
 80144c4:	dd7c      	ble.n	80145c0 <_dtoa_r+0x8d8>
 80144c6:	461a      	mov	r2, r3
 80144c8:	4601      	mov	r1, r0
 80144ca:	4620      	mov	r0, r4
 80144cc:	f000 fcba 	bl	8014e44 <__pow5mult>
 80144d0:	9b05      	ldr	r3, [sp, #20]
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	4606      	mov	r6, r0
 80144d6:	dd76      	ble.n	80145c6 <_dtoa_r+0x8de>
 80144d8:	2300      	movs	r3, #0
 80144da:	9306      	str	r3, [sp, #24]
 80144dc:	6933      	ldr	r3, [r6, #16]
 80144de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80144e2:	6918      	ldr	r0, [r3, #16]
 80144e4:	f000 fba2 	bl	8014c2c <__hi0bits>
 80144e8:	f1c0 0020 	rsb	r0, r0, #32
 80144ec:	9b04      	ldr	r3, [sp, #16]
 80144ee:	4418      	add	r0, r3
 80144f0:	f010 001f 	ands.w	r0, r0, #31
 80144f4:	f000 8086 	beq.w	8014604 <_dtoa_r+0x91c>
 80144f8:	f1c0 0320 	rsb	r3, r0, #32
 80144fc:	2b04      	cmp	r3, #4
 80144fe:	dd7f      	ble.n	8014600 <_dtoa_r+0x918>
 8014500:	f1c0 001c 	rsb	r0, r0, #28
 8014504:	9b04      	ldr	r3, [sp, #16]
 8014506:	4403      	add	r3, r0
 8014508:	4480      	add	r8, r0
 801450a:	4405      	add	r5, r0
 801450c:	9304      	str	r3, [sp, #16]
 801450e:	f1b8 0f00 	cmp.w	r8, #0
 8014512:	dd05      	ble.n	8014520 <_dtoa_r+0x838>
 8014514:	4659      	mov	r1, fp
 8014516:	4642      	mov	r2, r8
 8014518:	4620      	mov	r0, r4
 801451a:	f000 fced 	bl	8014ef8 <__lshift>
 801451e:	4683      	mov	fp, r0
 8014520:	9b04      	ldr	r3, [sp, #16]
 8014522:	2b00      	cmp	r3, #0
 8014524:	dd05      	ble.n	8014532 <_dtoa_r+0x84a>
 8014526:	4631      	mov	r1, r6
 8014528:	461a      	mov	r2, r3
 801452a:	4620      	mov	r0, r4
 801452c:	f000 fce4 	bl	8014ef8 <__lshift>
 8014530:	4606      	mov	r6, r0
 8014532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014534:	2b00      	cmp	r3, #0
 8014536:	d069      	beq.n	801460c <_dtoa_r+0x924>
 8014538:	4631      	mov	r1, r6
 801453a:	4658      	mov	r0, fp
 801453c:	f000 fd48 	bl	8014fd0 <__mcmp>
 8014540:	2800      	cmp	r0, #0
 8014542:	da63      	bge.n	801460c <_dtoa_r+0x924>
 8014544:	2300      	movs	r3, #0
 8014546:	4659      	mov	r1, fp
 8014548:	220a      	movs	r2, #10
 801454a:	4620      	mov	r0, r4
 801454c:	f000 fb24 	bl	8014b98 <__multadd>
 8014550:	9b08      	ldr	r3, [sp, #32]
 8014552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014556:	4683      	mov	fp, r0
 8014558:	2b00      	cmp	r3, #0
 801455a:	f000 818f 	beq.w	801487c <_dtoa_r+0xb94>
 801455e:	4639      	mov	r1, r7
 8014560:	2300      	movs	r3, #0
 8014562:	220a      	movs	r2, #10
 8014564:	4620      	mov	r0, r4
 8014566:	f000 fb17 	bl	8014b98 <__multadd>
 801456a:	f1b9 0f00 	cmp.w	r9, #0
 801456e:	4607      	mov	r7, r0
 8014570:	f300 808e 	bgt.w	8014690 <_dtoa_r+0x9a8>
 8014574:	9b05      	ldr	r3, [sp, #20]
 8014576:	2b02      	cmp	r3, #2
 8014578:	dc50      	bgt.n	801461c <_dtoa_r+0x934>
 801457a:	e089      	b.n	8014690 <_dtoa_r+0x9a8>
 801457c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801457e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014582:	e75d      	b.n	8014440 <_dtoa_r+0x758>
 8014584:	9b01      	ldr	r3, [sp, #4]
 8014586:	1e5e      	subs	r6, r3, #1
 8014588:	9b06      	ldr	r3, [sp, #24]
 801458a:	42b3      	cmp	r3, r6
 801458c:	bfbf      	itttt	lt
 801458e:	9b06      	ldrlt	r3, [sp, #24]
 8014590:	9606      	strlt	r6, [sp, #24]
 8014592:	1af2      	sublt	r2, r6, r3
 8014594:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8014596:	bfb6      	itet	lt
 8014598:	189b      	addlt	r3, r3, r2
 801459a:	1b9e      	subge	r6, r3, r6
 801459c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801459e:	9b01      	ldr	r3, [sp, #4]
 80145a0:	bfb8      	it	lt
 80145a2:	2600      	movlt	r6, #0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	bfb5      	itete	lt
 80145a8:	eba8 0503 	sublt.w	r5, r8, r3
 80145ac:	9b01      	ldrge	r3, [sp, #4]
 80145ae:	2300      	movlt	r3, #0
 80145b0:	4645      	movge	r5, r8
 80145b2:	e747      	b.n	8014444 <_dtoa_r+0x75c>
 80145b4:	9e06      	ldr	r6, [sp, #24]
 80145b6:	9f08      	ldr	r7, [sp, #32]
 80145b8:	4645      	mov	r5, r8
 80145ba:	e74c      	b.n	8014456 <_dtoa_r+0x76e>
 80145bc:	9a06      	ldr	r2, [sp, #24]
 80145be:	e775      	b.n	80144ac <_dtoa_r+0x7c4>
 80145c0:	9b05      	ldr	r3, [sp, #20]
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	dc18      	bgt.n	80145f8 <_dtoa_r+0x910>
 80145c6:	9b02      	ldr	r3, [sp, #8]
 80145c8:	b9b3      	cbnz	r3, 80145f8 <_dtoa_r+0x910>
 80145ca:	9b03      	ldr	r3, [sp, #12]
 80145cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145d0:	b9a3      	cbnz	r3, 80145fc <_dtoa_r+0x914>
 80145d2:	9b03      	ldr	r3, [sp, #12]
 80145d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145d8:	0d1b      	lsrs	r3, r3, #20
 80145da:	051b      	lsls	r3, r3, #20
 80145dc:	b12b      	cbz	r3, 80145ea <_dtoa_r+0x902>
 80145de:	9b04      	ldr	r3, [sp, #16]
 80145e0:	3301      	adds	r3, #1
 80145e2:	9304      	str	r3, [sp, #16]
 80145e4:	f108 0801 	add.w	r8, r8, #1
 80145e8:	2301      	movs	r3, #1
 80145ea:	9306      	str	r3, [sp, #24]
 80145ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	f47f af74 	bne.w	80144dc <_dtoa_r+0x7f4>
 80145f4:	2001      	movs	r0, #1
 80145f6:	e779      	b.n	80144ec <_dtoa_r+0x804>
 80145f8:	2300      	movs	r3, #0
 80145fa:	e7f6      	b.n	80145ea <_dtoa_r+0x902>
 80145fc:	9b02      	ldr	r3, [sp, #8]
 80145fe:	e7f4      	b.n	80145ea <_dtoa_r+0x902>
 8014600:	d085      	beq.n	801450e <_dtoa_r+0x826>
 8014602:	4618      	mov	r0, r3
 8014604:	301c      	adds	r0, #28
 8014606:	e77d      	b.n	8014504 <_dtoa_r+0x81c>
 8014608:	40240000 	.word	0x40240000
 801460c:	9b01      	ldr	r3, [sp, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	dc38      	bgt.n	8014684 <_dtoa_r+0x99c>
 8014612:	9b05      	ldr	r3, [sp, #20]
 8014614:	2b02      	cmp	r3, #2
 8014616:	dd35      	ble.n	8014684 <_dtoa_r+0x99c>
 8014618:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801461c:	f1b9 0f00 	cmp.w	r9, #0
 8014620:	d10d      	bne.n	801463e <_dtoa_r+0x956>
 8014622:	4631      	mov	r1, r6
 8014624:	464b      	mov	r3, r9
 8014626:	2205      	movs	r2, #5
 8014628:	4620      	mov	r0, r4
 801462a:	f000 fab5 	bl	8014b98 <__multadd>
 801462e:	4601      	mov	r1, r0
 8014630:	4606      	mov	r6, r0
 8014632:	4658      	mov	r0, fp
 8014634:	f000 fccc 	bl	8014fd0 <__mcmp>
 8014638:	2800      	cmp	r0, #0
 801463a:	f73f adbd 	bgt.w	80141b8 <_dtoa_r+0x4d0>
 801463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014640:	9d00      	ldr	r5, [sp, #0]
 8014642:	ea6f 0a03 	mvn.w	sl, r3
 8014646:	f04f 0800 	mov.w	r8, #0
 801464a:	4631      	mov	r1, r6
 801464c:	4620      	mov	r0, r4
 801464e:	f000 fa81 	bl	8014b54 <_Bfree>
 8014652:	2f00      	cmp	r7, #0
 8014654:	f43f aeb4 	beq.w	80143c0 <_dtoa_r+0x6d8>
 8014658:	f1b8 0f00 	cmp.w	r8, #0
 801465c:	d005      	beq.n	801466a <_dtoa_r+0x982>
 801465e:	45b8      	cmp	r8, r7
 8014660:	d003      	beq.n	801466a <_dtoa_r+0x982>
 8014662:	4641      	mov	r1, r8
 8014664:	4620      	mov	r0, r4
 8014666:	f000 fa75 	bl	8014b54 <_Bfree>
 801466a:	4639      	mov	r1, r7
 801466c:	4620      	mov	r0, r4
 801466e:	f000 fa71 	bl	8014b54 <_Bfree>
 8014672:	e6a5      	b.n	80143c0 <_dtoa_r+0x6d8>
 8014674:	2600      	movs	r6, #0
 8014676:	4637      	mov	r7, r6
 8014678:	e7e1      	b.n	801463e <_dtoa_r+0x956>
 801467a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801467c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014680:	4637      	mov	r7, r6
 8014682:	e599      	b.n	80141b8 <_dtoa_r+0x4d0>
 8014684:	9b08      	ldr	r3, [sp, #32]
 8014686:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	f000 80fd 	beq.w	801488a <_dtoa_r+0xba2>
 8014690:	2d00      	cmp	r5, #0
 8014692:	dd05      	ble.n	80146a0 <_dtoa_r+0x9b8>
 8014694:	4639      	mov	r1, r7
 8014696:	462a      	mov	r2, r5
 8014698:	4620      	mov	r0, r4
 801469a:	f000 fc2d 	bl	8014ef8 <__lshift>
 801469e:	4607      	mov	r7, r0
 80146a0:	9b06      	ldr	r3, [sp, #24]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d05c      	beq.n	8014760 <_dtoa_r+0xa78>
 80146a6:	6879      	ldr	r1, [r7, #4]
 80146a8:	4620      	mov	r0, r4
 80146aa:	f000 fa13 	bl	8014ad4 <_Balloc>
 80146ae:	4605      	mov	r5, r0
 80146b0:	b928      	cbnz	r0, 80146be <_dtoa_r+0x9d6>
 80146b2:	4b80      	ldr	r3, [pc, #512]	; (80148b4 <_dtoa_r+0xbcc>)
 80146b4:	4602      	mov	r2, r0
 80146b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80146ba:	f7ff bb2e 	b.w	8013d1a <_dtoa_r+0x32>
 80146be:	693a      	ldr	r2, [r7, #16]
 80146c0:	3202      	adds	r2, #2
 80146c2:	0092      	lsls	r2, r2, #2
 80146c4:	f107 010c 	add.w	r1, r7, #12
 80146c8:	300c      	adds	r0, #12
 80146ca:	f7fe fcf3 	bl	80130b4 <memcpy>
 80146ce:	2201      	movs	r2, #1
 80146d0:	4629      	mov	r1, r5
 80146d2:	4620      	mov	r0, r4
 80146d4:	f000 fc10 	bl	8014ef8 <__lshift>
 80146d8:	9b00      	ldr	r3, [sp, #0]
 80146da:	3301      	adds	r3, #1
 80146dc:	9301      	str	r3, [sp, #4]
 80146de:	9b00      	ldr	r3, [sp, #0]
 80146e0:	444b      	add	r3, r9
 80146e2:	9307      	str	r3, [sp, #28]
 80146e4:	9b02      	ldr	r3, [sp, #8]
 80146e6:	f003 0301 	and.w	r3, r3, #1
 80146ea:	46b8      	mov	r8, r7
 80146ec:	9306      	str	r3, [sp, #24]
 80146ee:	4607      	mov	r7, r0
 80146f0:	9b01      	ldr	r3, [sp, #4]
 80146f2:	4631      	mov	r1, r6
 80146f4:	3b01      	subs	r3, #1
 80146f6:	4658      	mov	r0, fp
 80146f8:	9302      	str	r3, [sp, #8]
 80146fa:	f7ff fa67 	bl	8013bcc <quorem>
 80146fe:	4603      	mov	r3, r0
 8014700:	3330      	adds	r3, #48	; 0x30
 8014702:	9004      	str	r0, [sp, #16]
 8014704:	4641      	mov	r1, r8
 8014706:	4658      	mov	r0, fp
 8014708:	9308      	str	r3, [sp, #32]
 801470a:	f000 fc61 	bl	8014fd0 <__mcmp>
 801470e:	463a      	mov	r2, r7
 8014710:	4681      	mov	r9, r0
 8014712:	4631      	mov	r1, r6
 8014714:	4620      	mov	r0, r4
 8014716:	f000 fc77 	bl	8015008 <__mdiff>
 801471a:	68c2      	ldr	r2, [r0, #12]
 801471c:	9b08      	ldr	r3, [sp, #32]
 801471e:	4605      	mov	r5, r0
 8014720:	bb02      	cbnz	r2, 8014764 <_dtoa_r+0xa7c>
 8014722:	4601      	mov	r1, r0
 8014724:	4658      	mov	r0, fp
 8014726:	f000 fc53 	bl	8014fd0 <__mcmp>
 801472a:	9b08      	ldr	r3, [sp, #32]
 801472c:	4602      	mov	r2, r0
 801472e:	4629      	mov	r1, r5
 8014730:	4620      	mov	r0, r4
 8014732:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014736:	f000 fa0d 	bl	8014b54 <_Bfree>
 801473a:	9b05      	ldr	r3, [sp, #20]
 801473c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801473e:	9d01      	ldr	r5, [sp, #4]
 8014740:	ea43 0102 	orr.w	r1, r3, r2
 8014744:	9b06      	ldr	r3, [sp, #24]
 8014746:	430b      	orrs	r3, r1
 8014748:	9b08      	ldr	r3, [sp, #32]
 801474a:	d10d      	bne.n	8014768 <_dtoa_r+0xa80>
 801474c:	2b39      	cmp	r3, #57	; 0x39
 801474e:	d029      	beq.n	80147a4 <_dtoa_r+0xabc>
 8014750:	f1b9 0f00 	cmp.w	r9, #0
 8014754:	dd01      	ble.n	801475a <_dtoa_r+0xa72>
 8014756:	9b04      	ldr	r3, [sp, #16]
 8014758:	3331      	adds	r3, #49	; 0x31
 801475a:	9a02      	ldr	r2, [sp, #8]
 801475c:	7013      	strb	r3, [r2, #0]
 801475e:	e774      	b.n	801464a <_dtoa_r+0x962>
 8014760:	4638      	mov	r0, r7
 8014762:	e7b9      	b.n	80146d8 <_dtoa_r+0x9f0>
 8014764:	2201      	movs	r2, #1
 8014766:	e7e2      	b.n	801472e <_dtoa_r+0xa46>
 8014768:	f1b9 0f00 	cmp.w	r9, #0
 801476c:	db06      	blt.n	801477c <_dtoa_r+0xa94>
 801476e:	9905      	ldr	r1, [sp, #20]
 8014770:	ea41 0909 	orr.w	r9, r1, r9
 8014774:	9906      	ldr	r1, [sp, #24]
 8014776:	ea59 0101 	orrs.w	r1, r9, r1
 801477a:	d120      	bne.n	80147be <_dtoa_r+0xad6>
 801477c:	2a00      	cmp	r2, #0
 801477e:	ddec      	ble.n	801475a <_dtoa_r+0xa72>
 8014780:	4659      	mov	r1, fp
 8014782:	2201      	movs	r2, #1
 8014784:	4620      	mov	r0, r4
 8014786:	9301      	str	r3, [sp, #4]
 8014788:	f000 fbb6 	bl	8014ef8 <__lshift>
 801478c:	4631      	mov	r1, r6
 801478e:	4683      	mov	fp, r0
 8014790:	f000 fc1e 	bl	8014fd0 <__mcmp>
 8014794:	2800      	cmp	r0, #0
 8014796:	9b01      	ldr	r3, [sp, #4]
 8014798:	dc02      	bgt.n	80147a0 <_dtoa_r+0xab8>
 801479a:	d1de      	bne.n	801475a <_dtoa_r+0xa72>
 801479c:	07da      	lsls	r2, r3, #31
 801479e:	d5dc      	bpl.n	801475a <_dtoa_r+0xa72>
 80147a0:	2b39      	cmp	r3, #57	; 0x39
 80147a2:	d1d8      	bne.n	8014756 <_dtoa_r+0xa6e>
 80147a4:	9a02      	ldr	r2, [sp, #8]
 80147a6:	2339      	movs	r3, #57	; 0x39
 80147a8:	7013      	strb	r3, [r2, #0]
 80147aa:	462b      	mov	r3, r5
 80147ac:	461d      	mov	r5, r3
 80147ae:	3b01      	subs	r3, #1
 80147b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80147b4:	2a39      	cmp	r2, #57	; 0x39
 80147b6:	d050      	beq.n	801485a <_dtoa_r+0xb72>
 80147b8:	3201      	adds	r2, #1
 80147ba:	701a      	strb	r2, [r3, #0]
 80147bc:	e745      	b.n	801464a <_dtoa_r+0x962>
 80147be:	2a00      	cmp	r2, #0
 80147c0:	dd03      	ble.n	80147ca <_dtoa_r+0xae2>
 80147c2:	2b39      	cmp	r3, #57	; 0x39
 80147c4:	d0ee      	beq.n	80147a4 <_dtoa_r+0xabc>
 80147c6:	3301      	adds	r3, #1
 80147c8:	e7c7      	b.n	801475a <_dtoa_r+0xa72>
 80147ca:	9a01      	ldr	r2, [sp, #4]
 80147cc:	9907      	ldr	r1, [sp, #28]
 80147ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80147d2:	428a      	cmp	r2, r1
 80147d4:	d02a      	beq.n	801482c <_dtoa_r+0xb44>
 80147d6:	4659      	mov	r1, fp
 80147d8:	2300      	movs	r3, #0
 80147da:	220a      	movs	r2, #10
 80147dc:	4620      	mov	r0, r4
 80147de:	f000 f9db 	bl	8014b98 <__multadd>
 80147e2:	45b8      	cmp	r8, r7
 80147e4:	4683      	mov	fp, r0
 80147e6:	f04f 0300 	mov.w	r3, #0
 80147ea:	f04f 020a 	mov.w	r2, #10
 80147ee:	4641      	mov	r1, r8
 80147f0:	4620      	mov	r0, r4
 80147f2:	d107      	bne.n	8014804 <_dtoa_r+0xb1c>
 80147f4:	f000 f9d0 	bl	8014b98 <__multadd>
 80147f8:	4680      	mov	r8, r0
 80147fa:	4607      	mov	r7, r0
 80147fc:	9b01      	ldr	r3, [sp, #4]
 80147fe:	3301      	adds	r3, #1
 8014800:	9301      	str	r3, [sp, #4]
 8014802:	e775      	b.n	80146f0 <_dtoa_r+0xa08>
 8014804:	f000 f9c8 	bl	8014b98 <__multadd>
 8014808:	4639      	mov	r1, r7
 801480a:	4680      	mov	r8, r0
 801480c:	2300      	movs	r3, #0
 801480e:	220a      	movs	r2, #10
 8014810:	4620      	mov	r0, r4
 8014812:	f000 f9c1 	bl	8014b98 <__multadd>
 8014816:	4607      	mov	r7, r0
 8014818:	e7f0      	b.n	80147fc <_dtoa_r+0xb14>
 801481a:	f1b9 0f00 	cmp.w	r9, #0
 801481e:	9a00      	ldr	r2, [sp, #0]
 8014820:	bfcc      	ite	gt
 8014822:	464d      	movgt	r5, r9
 8014824:	2501      	movle	r5, #1
 8014826:	4415      	add	r5, r2
 8014828:	f04f 0800 	mov.w	r8, #0
 801482c:	4659      	mov	r1, fp
 801482e:	2201      	movs	r2, #1
 8014830:	4620      	mov	r0, r4
 8014832:	9301      	str	r3, [sp, #4]
 8014834:	f000 fb60 	bl	8014ef8 <__lshift>
 8014838:	4631      	mov	r1, r6
 801483a:	4683      	mov	fp, r0
 801483c:	f000 fbc8 	bl	8014fd0 <__mcmp>
 8014840:	2800      	cmp	r0, #0
 8014842:	dcb2      	bgt.n	80147aa <_dtoa_r+0xac2>
 8014844:	d102      	bne.n	801484c <_dtoa_r+0xb64>
 8014846:	9b01      	ldr	r3, [sp, #4]
 8014848:	07db      	lsls	r3, r3, #31
 801484a:	d4ae      	bmi.n	80147aa <_dtoa_r+0xac2>
 801484c:	462b      	mov	r3, r5
 801484e:	461d      	mov	r5, r3
 8014850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014854:	2a30      	cmp	r2, #48	; 0x30
 8014856:	d0fa      	beq.n	801484e <_dtoa_r+0xb66>
 8014858:	e6f7      	b.n	801464a <_dtoa_r+0x962>
 801485a:	9a00      	ldr	r2, [sp, #0]
 801485c:	429a      	cmp	r2, r3
 801485e:	d1a5      	bne.n	80147ac <_dtoa_r+0xac4>
 8014860:	f10a 0a01 	add.w	sl, sl, #1
 8014864:	2331      	movs	r3, #49	; 0x31
 8014866:	e779      	b.n	801475c <_dtoa_r+0xa74>
 8014868:	4b13      	ldr	r3, [pc, #76]	; (80148b8 <_dtoa_r+0xbd0>)
 801486a:	f7ff baaf 	b.w	8013dcc <_dtoa_r+0xe4>
 801486e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014870:	2b00      	cmp	r3, #0
 8014872:	f47f aa86 	bne.w	8013d82 <_dtoa_r+0x9a>
 8014876:	4b11      	ldr	r3, [pc, #68]	; (80148bc <_dtoa_r+0xbd4>)
 8014878:	f7ff baa8 	b.w	8013dcc <_dtoa_r+0xe4>
 801487c:	f1b9 0f00 	cmp.w	r9, #0
 8014880:	dc03      	bgt.n	801488a <_dtoa_r+0xba2>
 8014882:	9b05      	ldr	r3, [sp, #20]
 8014884:	2b02      	cmp	r3, #2
 8014886:	f73f aec9 	bgt.w	801461c <_dtoa_r+0x934>
 801488a:	9d00      	ldr	r5, [sp, #0]
 801488c:	4631      	mov	r1, r6
 801488e:	4658      	mov	r0, fp
 8014890:	f7ff f99c 	bl	8013bcc <quorem>
 8014894:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014898:	f805 3b01 	strb.w	r3, [r5], #1
 801489c:	9a00      	ldr	r2, [sp, #0]
 801489e:	1aaa      	subs	r2, r5, r2
 80148a0:	4591      	cmp	r9, r2
 80148a2:	ddba      	ble.n	801481a <_dtoa_r+0xb32>
 80148a4:	4659      	mov	r1, fp
 80148a6:	2300      	movs	r3, #0
 80148a8:	220a      	movs	r2, #10
 80148aa:	4620      	mov	r0, r4
 80148ac:	f000 f974 	bl	8014b98 <__multadd>
 80148b0:	4683      	mov	fp, r0
 80148b2:	e7eb      	b.n	801488c <_dtoa_r+0xba4>
 80148b4:	0801ab6f 	.word	0x0801ab6f
 80148b8:	0801aac8 	.word	0x0801aac8
 80148bc:	0801aaec 	.word	0x0801aaec

080148c0 <std>:
 80148c0:	2300      	movs	r3, #0
 80148c2:	b510      	push	{r4, lr}
 80148c4:	4604      	mov	r4, r0
 80148c6:	e9c0 3300 	strd	r3, r3, [r0]
 80148ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148ce:	6083      	str	r3, [r0, #8]
 80148d0:	8181      	strh	r1, [r0, #12]
 80148d2:	6643      	str	r3, [r0, #100]	; 0x64
 80148d4:	81c2      	strh	r2, [r0, #14]
 80148d6:	6183      	str	r3, [r0, #24]
 80148d8:	4619      	mov	r1, r3
 80148da:	2208      	movs	r2, #8
 80148dc:	305c      	adds	r0, #92	; 0x5c
 80148de:	f7fe fc11 	bl	8013104 <memset>
 80148e2:	4b05      	ldr	r3, [pc, #20]	; (80148f8 <std+0x38>)
 80148e4:	6263      	str	r3, [r4, #36]	; 0x24
 80148e6:	4b05      	ldr	r3, [pc, #20]	; (80148fc <std+0x3c>)
 80148e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80148ea:	4b05      	ldr	r3, [pc, #20]	; (8014900 <std+0x40>)
 80148ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148ee:	4b05      	ldr	r3, [pc, #20]	; (8014904 <std+0x44>)
 80148f0:	6224      	str	r4, [r4, #32]
 80148f2:	6323      	str	r3, [r4, #48]	; 0x30
 80148f4:	bd10      	pop	{r4, pc}
 80148f6:	bf00      	nop
 80148f8:	08015759 	.word	0x08015759
 80148fc:	0801577b 	.word	0x0801577b
 8014900:	080157b3 	.word	0x080157b3
 8014904:	080157d7 	.word	0x080157d7

08014908 <_cleanup_r>:
 8014908:	4901      	ldr	r1, [pc, #4]	; (8014910 <_cleanup_r+0x8>)
 801490a:	f000 b8af 	b.w	8014a6c <_fwalk_reent>
 801490e:	bf00      	nop
 8014910:	08015aed 	.word	0x08015aed

08014914 <__sfmoreglue>:
 8014914:	b570      	push	{r4, r5, r6, lr}
 8014916:	1e4a      	subs	r2, r1, #1
 8014918:	2568      	movs	r5, #104	; 0x68
 801491a:	4355      	muls	r5, r2
 801491c:	460e      	mov	r6, r1
 801491e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014922:	f7fe fc47 	bl	80131b4 <_malloc_r>
 8014926:	4604      	mov	r4, r0
 8014928:	b140      	cbz	r0, 801493c <__sfmoreglue+0x28>
 801492a:	2100      	movs	r1, #0
 801492c:	e9c0 1600 	strd	r1, r6, [r0]
 8014930:	300c      	adds	r0, #12
 8014932:	60a0      	str	r0, [r4, #8]
 8014934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014938:	f7fe fbe4 	bl	8013104 <memset>
 801493c:	4620      	mov	r0, r4
 801493e:	bd70      	pop	{r4, r5, r6, pc}

08014940 <__sfp_lock_acquire>:
 8014940:	4801      	ldr	r0, [pc, #4]	; (8014948 <__sfp_lock_acquire+0x8>)
 8014942:	f000 b8b8 	b.w	8014ab6 <__retarget_lock_acquire_recursive>
 8014946:	bf00      	nop
 8014948:	2001e790 	.word	0x2001e790

0801494c <__sfp_lock_release>:
 801494c:	4801      	ldr	r0, [pc, #4]	; (8014954 <__sfp_lock_release+0x8>)
 801494e:	f000 b8b3 	b.w	8014ab8 <__retarget_lock_release_recursive>
 8014952:	bf00      	nop
 8014954:	2001e790 	.word	0x2001e790

08014958 <__sinit_lock_acquire>:
 8014958:	4801      	ldr	r0, [pc, #4]	; (8014960 <__sinit_lock_acquire+0x8>)
 801495a:	f000 b8ac 	b.w	8014ab6 <__retarget_lock_acquire_recursive>
 801495e:	bf00      	nop
 8014960:	2001e78b 	.word	0x2001e78b

08014964 <__sinit_lock_release>:
 8014964:	4801      	ldr	r0, [pc, #4]	; (801496c <__sinit_lock_release+0x8>)
 8014966:	f000 b8a7 	b.w	8014ab8 <__retarget_lock_release_recursive>
 801496a:	bf00      	nop
 801496c:	2001e78b 	.word	0x2001e78b

08014970 <__sinit>:
 8014970:	b510      	push	{r4, lr}
 8014972:	4604      	mov	r4, r0
 8014974:	f7ff fff0 	bl	8014958 <__sinit_lock_acquire>
 8014978:	69a3      	ldr	r3, [r4, #24]
 801497a:	b11b      	cbz	r3, 8014984 <__sinit+0x14>
 801497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014980:	f7ff bff0 	b.w	8014964 <__sinit_lock_release>
 8014984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014988:	6523      	str	r3, [r4, #80]	; 0x50
 801498a:	4b13      	ldr	r3, [pc, #76]	; (80149d8 <__sinit+0x68>)
 801498c:	4a13      	ldr	r2, [pc, #76]	; (80149dc <__sinit+0x6c>)
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	62a2      	str	r2, [r4, #40]	; 0x28
 8014992:	42a3      	cmp	r3, r4
 8014994:	bf04      	itt	eq
 8014996:	2301      	moveq	r3, #1
 8014998:	61a3      	streq	r3, [r4, #24]
 801499a:	4620      	mov	r0, r4
 801499c:	f000 f820 	bl	80149e0 <__sfp>
 80149a0:	6060      	str	r0, [r4, #4]
 80149a2:	4620      	mov	r0, r4
 80149a4:	f000 f81c 	bl	80149e0 <__sfp>
 80149a8:	60a0      	str	r0, [r4, #8]
 80149aa:	4620      	mov	r0, r4
 80149ac:	f000 f818 	bl	80149e0 <__sfp>
 80149b0:	2200      	movs	r2, #0
 80149b2:	60e0      	str	r0, [r4, #12]
 80149b4:	2104      	movs	r1, #4
 80149b6:	6860      	ldr	r0, [r4, #4]
 80149b8:	f7ff ff82 	bl	80148c0 <std>
 80149bc:	68a0      	ldr	r0, [r4, #8]
 80149be:	2201      	movs	r2, #1
 80149c0:	2109      	movs	r1, #9
 80149c2:	f7ff ff7d 	bl	80148c0 <std>
 80149c6:	68e0      	ldr	r0, [r4, #12]
 80149c8:	2202      	movs	r2, #2
 80149ca:	2112      	movs	r1, #18
 80149cc:	f7ff ff78 	bl	80148c0 <std>
 80149d0:	2301      	movs	r3, #1
 80149d2:	61a3      	str	r3, [r4, #24]
 80149d4:	e7d2      	b.n	801497c <__sinit+0xc>
 80149d6:	bf00      	nop
 80149d8:	0801aab4 	.word	0x0801aab4
 80149dc:	08014909 	.word	0x08014909

080149e0 <__sfp>:
 80149e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149e2:	4607      	mov	r7, r0
 80149e4:	f7ff ffac 	bl	8014940 <__sfp_lock_acquire>
 80149e8:	4b1e      	ldr	r3, [pc, #120]	; (8014a64 <__sfp+0x84>)
 80149ea:	681e      	ldr	r6, [r3, #0]
 80149ec:	69b3      	ldr	r3, [r6, #24]
 80149ee:	b913      	cbnz	r3, 80149f6 <__sfp+0x16>
 80149f0:	4630      	mov	r0, r6
 80149f2:	f7ff ffbd 	bl	8014970 <__sinit>
 80149f6:	3648      	adds	r6, #72	; 0x48
 80149f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80149fc:	3b01      	subs	r3, #1
 80149fe:	d503      	bpl.n	8014a08 <__sfp+0x28>
 8014a00:	6833      	ldr	r3, [r6, #0]
 8014a02:	b30b      	cbz	r3, 8014a48 <__sfp+0x68>
 8014a04:	6836      	ldr	r6, [r6, #0]
 8014a06:	e7f7      	b.n	80149f8 <__sfp+0x18>
 8014a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a0c:	b9d5      	cbnz	r5, 8014a44 <__sfp+0x64>
 8014a0e:	4b16      	ldr	r3, [pc, #88]	; (8014a68 <__sfp+0x88>)
 8014a10:	60e3      	str	r3, [r4, #12]
 8014a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a16:	6665      	str	r5, [r4, #100]	; 0x64
 8014a18:	f000 f84c 	bl	8014ab4 <__retarget_lock_init_recursive>
 8014a1c:	f7ff ff96 	bl	801494c <__sfp_lock_release>
 8014a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a28:	6025      	str	r5, [r4, #0]
 8014a2a:	61a5      	str	r5, [r4, #24]
 8014a2c:	2208      	movs	r2, #8
 8014a2e:	4629      	mov	r1, r5
 8014a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a34:	f7fe fb66 	bl	8013104 <memset>
 8014a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a40:	4620      	mov	r0, r4
 8014a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a44:	3468      	adds	r4, #104	; 0x68
 8014a46:	e7d9      	b.n	80149fc <__sfp+0x1c>
 8014a48:	2104      	movs	r1, #4
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f7ff ff62 	bl	8014914 <__sfmoreglue>
 8014a50:	4604      	mov	r4, r0
 8014a52:	6030      	str	r0, [r6, #0]
 8014a54:	2800      	cmp	r0, #0
 8014a56:	d1d5      	bne.n	8014a04 <__sfp+0x24>
 8014a58:	f7ff ff78 	bl	801494c <__sfp_lock_release>
 8014a5c:	230c      	movs	r3, #12
 8014a5e:	603b      	str	r3, [r7, #0]
 8014a60:	e7ee      	b.n	8014a40 <__sfp+0x60>
 8014a62:	bf00      	nop
 8014a64:	0801aab4 	.word	0x0801aab4
 8014a68:	ffff0001 	.word	0xffff0001

08014a6c <_fwalk_reent>:
 8014a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a70:	4606      	mov	r6, r0
 8014a72:	4688      	mov	r8, r1
 8014a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a78:	2700      	movs	r7, #0
 8014a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8014a82:	d505      	bpl.n	8014a90 <_fwalk_reent+0x24>
 8014a84:	6824      	ldr	r4, [r4, #0]
 8014a86:	2c00      	cmp	r4, #0
 8014a88:	d1f7      	bne.n	8014a7a <_fwalk_reent+0xe>
 8014a8a:	4638      	mov	r0, r7
 8014a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a90:	89ab      	ldrh	r3, [r5, #12]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d907      	bls.n	8014aa6 <_fwalk_reent+0x3a>
 8014a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	d003      	beq.n	8014aa6 <_fwalk_reent+0x3a>
 8014a9e:	4629      	mov	r1, r5
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	47c0      	blx	r8
 8014aa4:	4307      	orrs	r7, r0
 8014aa6:	3568      	adds	r5, #104	; 0x68
 8014aa8:	e7e9      	b.n	8014a7e <_fwalk_reent+0x12>
	...

08014aac <_localeconv_r>:
 8014aac:	4800      	ldr	r0, [pc, #0]	; (8014ab0 <_localeconv_r+0x4>)
 8014aae:	4770      	bx	lr
 8014ab0:	200001e4 	.word	0x200001e4

08014ab4 <__retarget_lock_init_recursive>:
 8014ab4:	4770      	bx	lr

08014ab6 <__retarget_lock_acquire_recursive>:
 8014ab6:	4770      	bx	lr

08014ab8 <__retarget_lock_release_recursive>:
 8014ab8:	4770      	bx	lr
	...

08014abc <__malloc_lock>:
 8014abc:	4801      	ldr	r0, [pc, #4]	; (8014ac4 <__malloc_lock+0x8>)
 8014abe:	f7ff bffa 	b.w	8014ab6 <__retarget_lock_acquire_recursive>
 8014ac2:	bf00      	nop
 8014ac4:	2001e78c 	.word	0x2001e78c

08014ac8 <__malloc_unlock>:
 8014ac8:	4801      	ldr	r0, [pc, #4]	; (8014ad0 <__malloc_unlock+0x8>)
 8014aca:	f7ff bff5 	b.w	8014ab8 <__retarget_lock_release_recursive>
 8014ace:	bf00      	nop
 8014ad0:	2001e78c 	.word	0x2001e78c

08014ad4 <_Balloc>:
 8014ad4:	b570      	push	{r4, r5, r6, lr}
 8014ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014ad8:	4604      	mov	r4, r0
 8014ada:	460d      	mov	r5, r1
 8014adc:	b976      	cbnz	r6, 8014afc <_Balloc+0x28>
 8014ade:	2010      	movs	r0, #16
 8014ae0:	f7fe fad8 	bl	8013094 <malloc>
 8014ae4:	4602      	mov	r2, r0
 8014ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8014ae8:	b920      	cbnz	r0, 8014af4 <_Balloc+0x20>
 8014aea:	4b18      	ldr	r3, [pc, #96]	; (8014b4c <_Balloc+0x78>)
 8014aec:	4818      	ldr	r0, [pc, #96]	; (8014b50 <_Balloc+0x7c>)
 8014aee:	2166      	movs	r1, #102	; 0x66
 8014af0:	f000 ff48 	bl	8015984 <__assert_func>
 8014af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014af8:	6006      	str	r6, [r0, #0]
 8014afa:	60c6      	str	r6, [r0, #12]
 8014afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014afe:	68f3      	ldr	r3, [r6, #12]
 8014b00:	b183      	cbz	r3, 8014b24 <_Balloc+0x50>
 8014b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b0a:	b9b8      	cbnz	r0, 8014b3c <_Balloc+0x68>
 8014b0c:	2101      	movs	r1, #1
 8014b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8014b12:	1d72      	adds	r2, r6, #5
 8014b14:	0092      	lsls	r2, r2, #2
 8014b16:	4620      	mov	r0, r4
 8014b18:	f000 fb5a 	bl	80151d0 <_calloc_r>
 8014b1c:	b160      	cbz	r0, 8014b38 <_Balloc+0x64>
 8014b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014b22:	e00e      	b.n	8014b42 <_Balloc+0x6e>
 8014b24:	2221      	movs	r2, #33	; 0x21
 8014b26:	2104      	movs	r1, #4
 8014b28:	4620      	mov	r0, r4
 8014b2a:	f000 fb51 	bl	80151d0 <_calloc_r>
 8014b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b30:	60f0      	str	r0, [r6, #12]
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1e4      	bne.n	8014b02 <_Balloc+0x2e>
 8014b38:	2000      	movs	r0, #0
 8014b3a:	bd70      	pop	{r4, r5, r6, pc}
 8014b3c:	6802      	ldr	r2, [r0, #0]
 8014b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b42:	2300      	movs	r3, #0
 8014b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b48:	e7f7      	b.n	8014b3a <_Balloc+0x66>
 8014b4a:	bf00      	nop
 8014b4c:	0801aaf9 	.word	0x0801aaf9
 8014b50:	0801abe0 	.word	0x0801abe0

08014b54 <_Bfree>:
 8014b54:	b570      	push	{r4, r5, r6, lr}
 8014b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014b58:	4605      	mov	r5, r0
 8014b5a:	460c      	mov	r4, r1
 8014b5c:	b976      	cbnz	r6, 8014b7c <_Bfree+0x28>
 8014b5e:	2010      	movs	r0, #16
 8014b60:	f7fe fa98 	bl	8013094 <malloc>
 8014b64:	4602      	mov	r2, r0
 8014b66:	6268      	str	r0, [r5, #36]	; 0x24
 8014b68:	b920      	cbnz	r0, 8014b74 <_Bfree+0x20>
 8014b6a:	4b09      	ldr	r3, [pc, #36]	; (8014b90 <_Bfree+0x3c>)
 8014b6c:	4809      	ldr	r0, [pc, #36]	; (8014b94 <_Bfree+0x40>)
 8014b6e:	218a      	movs	r1, #138	; 0x8a
 8014b70:	f000 ff08 	bl	8015984 <__assert_func>
 8014b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b78:	6006      	str	r6, [r0, #0]
 8014b7a:	60c6      	str	r6, [r0, #12]
 8014b7c:	b13c      	cbz	r4, 8014b8e <_Bfree+0x3a>
 8014b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014b80:	6862      	ldr	r2, [r4, #4]
 8014b82:	68db      	ldr	r3, [r3, #12]
 8014b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b88:	6021      	str	r1, [r4, #0]
 8014b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}
 8014b90:	0801aaf9 	.word	0x0801aaf9
 8014b94:	0801abe0 	.word	0x0801abe0

08014b98 <__multadd>:
 8014b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9c:	690e      	ldr	r6, [r1, #16]
 8014b9e:	4607      	mov	r7, r0
 8014ba0:	4698      	mov	r8, r3
 8014ba2:	460c      	mov	r4, r1
 8014ba4:	f101 0014 	add.w	r0, r1, #20
 8014ba8:	2300      	movs	r3, #0
 8014baa:	6805      	ldr	r5, [r0, #0]
 8014bac:	b2a9      	uxth	r1, r5
 8014bae:	fb02 8101 	mla	r1, r2, r1, r8
 8014bb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014bb6:	0c2d      	lsrs	r5, r5, #16
 8014bb8:	fb02 c505 	mla	r5, r2, r5, ip
 8014bbc:	b289      	uxth	r1, r1
 8014bbe:	3301      	adds	r3, #1
 8014bc0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014bc4:	429e      	cmp	r6, r3
 8014bc6:	f840 1b04 	str.w	r1, [r0], #4
 8014bca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014bce:	dcec      	bgt.n	8014baa <__multadd+0x12>
 8014bd0:	f1b8 0f00 	cmp.w	r8, #0
 8014bd4:	d022      	beq.n	8014c1c <__multadd+0x84>
 8014bd6:	68a3      	ldr	r3, [r4, #8]
 8014bd8:	42b3      	cmp	r3, r6
 8014bda:	dc19      	bgt.n	8014c10 <__multadd+0x78>
 8014bdc:	6861      	ldr	r1, [r4, #4]
 8014bde:	4638      	mov	r0, r7
 8014be0:	3101      	adds	r1, #1
 8014be2:	f7ff ff77 	bl	8014ad4 <_Balloc>
 8014be6:	4605      	mov	r5, r0
 8014be8:	b928      	cbnz	r0, 8014bf6 <__multadd+0x5e>
 8014bea:	4602      	mov	r2, r0
 8014bec:	4b0d      	ldr	r3, [pc, #52]	; (8014c24 <__multadd+0x8c>)
 8014bee:	480e      	ldr	r0, [pc, #56]	; (8014c28 <__multadd+0x90>)
 8014bf0:	21b5      	movs	r1, #181	; 0xb5
 8014bf2:	f000 fec7 	bl	8015984 <__assert_func>
 8014bf6:	6922      	ldr	r2, [r4, #16]
 8014bf8:	3202      	adds	r2, #2
 8014bfa:	f104 010c 	add.w	r1, r4, #12
 8014bfe:	0092      	lsls	r2, r2, #2
 8014c00:	300c      	adds	r0, #12
 8014c02:	f7fe fa57 	bl	80130b4 <memcpy>
 8014c06:	4621      	mov	r1, r4
 8014c08:	4638      	mov	r0, r7
 8014c0a:	f7ff ffa3 	bl	8014b54 <_Bfree>
 8014c0e:	462c      	mov	r4, r5
 8014c10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014c14:	3601      	adds	r6, #1
 8014c16:	f8c3 8014 	str.w	r8, [r3, #20]
 8014c1a:	6126      	str	r6, [r4, #16]
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c22:	bf00      	nop
 8014c24:	0801ab6f 	.word	0x0801ab6f
 8014c28:	0801abe0 	.word	0x0801abe0

08014c2c <__hi0bits>:
 8014c2c:	0c03      	lsrs	r3, r0, #16
 8014c2e:	041b      	lsls	r3, r3, #16
 8014c30:	b9d3      	cbnz	r3, 8014c68 <__hi0bits+0x3c>
 8014c32:	0400      	lsls	r0, r0, #16
 8014c34:	2310      	movs	r3, #16
 8014c36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014c3a:	bf04      	itt	eq
 8014c3c:	0200      	lsleq	r0, r0, #8
 8014c3e:	3308      	addeq	r3, #8
 8014c40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014c44:	bf04      	itt	eq
 8014c46:	0100      	lsleq	r0, r0, #4
 8014c48:	3304      	addeq	r3, #4
 8014c4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014c4e:	bf04      	itt	eq
 8014c50:	0080      	lsleq	r0, r0, #2
 8014c52:	3302      	addeq	r3, #2
 8014c54:	2800      	cmp	r0, #0
 8014c56:	db05      	blt.n	8014c64 <__hi0bits+0x38>
 8014c58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014c5c:	f103 0301 	add.w	r3, r3, #1
 8014c60:	bf08      	it	eq
 8014c62:	2320      	moveq	r3, #32
 8014c64:	4618      	mov	r0, r3
 8014c66:	4770      	bx	lr
 8014c68:	2300      	movs	r3, #0
 8014c6a:	e7e4      	b.n	8014c36 <__hi0bits+0xa>

08014c6c <__lo0bits>:
 8014c6c:	6803      	ldr	r3, [r0, #0]
 8014c6e:	f013 0207 	ands.w	r2, r3, #7
 8014c72:	4601      	mov	r1, r0
 8014c74:	d00b      	beq.n	8014c8e <__lo0bits+0x22>
 8014c76:	07da      	lsls	r2, r3, #31
 8014c78:	d424      	bmi.n	8014cc4 <__lo0bits+0x58>
 8014c7a:	0798      	lsls	r0, r3, #30
 8014c7c:	bf49      	itett	mi
 8014c7e:	085b      	lsrmi	r3, r3, #1
 8014c80:	089b      	lsrpl	r3, r3, #2
 8014c82:	2001      	movmi	r0, #1
 8014c84:	600b      	strmi	r3, [r1, #0]
 8014c86:	bf5c      	itt	pl
 8014c88:	600b      	strpl	r3, [r1, #0]
 8014c8a:	2002      	movpl	r0, #2
 8014c8c:	4770      	bx	lr
 8014c8e:	b298      	uxth	r0, r3
 8014c90:	b9b0      	cbnz	r0, 8014cc0 <__lo0bits+0x54>
 8014c92:	0c1b      	lsrs	r3, r3, #16
 8014c94:	2010      	movs	r0, #16
 8014c96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014c9a:	bf04      	itt	eq
 8014c9c:	0a1b      	lsreq	r3, r3, #8
 8014c9e:	3008      	addeq	r0, #8
 8014ca0:	071a      	lsls	r2, r3, #28
 8014ca2:	bf04      	itt	eq
 8014ca4:	091b      	lsreq	r3, r3, #4
 8014ca6:	3004      	addeq	r0, #4
 8014ca8:	079a      	lsls	r2, r3, #30
 8014caa:	bf04      	itt	eq
 8014cac:	089b      	lsreq	r3, r3, #2
 8014cae:	3002      	addeq	r0, #2
 8014cb0:	07da      	lsls	r2, r3, #31
 8014cb2:	d403      	bmi.n	8014cbc <__lo0bits+0x50>
 8014cb4:	085b      	lsrs	r3, r3, #1
 8014cb6:	f100 0001 	add.w	r0, r0, #1
 8014cba:	d005      	beq.n	8014cc8 <__lo0bits+0x5c>
 8014cbc:	600b      	str	r3, [r1, #0]
 8014cbe:	4770      	bx	lr
 8014cc0:	4610      	mov	r0, r2
 8014cc2:	e7e8      	b.n	8014c96 <__lo0bits+0x2a>
 8014cc4:	2000      	movs	r0, #0
 8014cc6:	4770      	bx	lr
 8014cc8:	2020      	movs	r0, #32
 8014cca:	4770      	bx	lr

08014ccc <__i2b>:
 8014ccc:	b510      	push	{r4, lr}
 8014cce:	460c      	mov	r4, r1
 8014cd0:	2101      	movs	r1, #1
 8014cd2:	f7ff feff 	bl	8014ad4 <_Balloc>
 8014cd6:	4602      	mov	r2, r0
 8014cd8:	b928      	cbnz	r0, 8014ce6 <__i2b+0x1a>
 8014cda:	4b05      	ldr	r3, [pc, #20]	; (8014cf0 <__i2b+0x24>)
 8014cdc:	4805      	ldr	r0, [pc, #20]	; (8014cf4 <__i2b+0x28>)
 8014cde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014ce2:	f000 fe4f 	bl	8015984 <__assert_func>
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	6144      	str	r4, [r0, #20]
 8014cea:	6103      	str	r3, [r0, #16]
 8014cec:	bd10      	pop	{r4, pc}
 8014cee:	bf00      	nop
 8014cf0:	0801ab6f 	.word	0x0801ab6f
 8014cf4:	0801abe0 	.word	0x0801abe0

08014cf8 <__multiply>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	4614      	mov	r4, r2
 8014cfe:	690a      	ldr	r2, [r1, #16]
 8014d00:	6923      	ldr	r3, [r4, #16]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	bfb8      	it	lt
 8014d06:	460b      	movlt	r3, r1
 8014d08:	460d      	mov	r5, r1
 8014d0a:	bfbc      	itt	lt
 8014d0c:	4625      	movlt	r5, r4
 8014d0e:	461c      	movlt	r4, r3
 8014d10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014d14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014d18:	68ab      	ldr	r3, [r5, #8]
 8014d1a:	6869      	ldr	r1, [r5, #4]
 8014d1c:	eb0a 0709 	add.w	r7, sl, r9
 8014d20:	42bb      	cmp	r3, r7
 8014d22:	b085      	sub	sp, #20
 8014d24:	bfb8      	it	lt
 8014d26:	3101      	addlt	r1, #1
 8014d28:	f7ff fed4 	bl	8014ad4 <_Balloc>
 8014d2c:	b930      	cbnz	r0, 8014d3c <__multiply+0x44>
 8014d2e:	4602      	mov	r2, r0
 8014d30:	4b42      	ldr	r3, [pc, #264]	; (8014e3c <__multiply+0x144>)
 8014d32:	4843      	ldr	r0, [pc, #268]	; (8014e40 <__multiply+0x148>)
 8014d34:	f240 115d 	movw	r1, #349	; 0x15d
 8014d38:	f000 fe24 	bl	8015984 <__assert_func>
 8014d3c:	f100 0614 	add.w	r6, r0, #20
 8014d40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014d44:	4633      	mov	r3, r6
 8014d46:	2200      	movs	r2, #0
 8014d48:	4543      	cmp	r3, r8
 8014d4a:	d31e      	bcc.n	8014d8a <__multiply+0x92>
 8014d4c:	f105 0c14 	add.w	ip, r5, #20
 8014d50:	f104 0314 	add.w	r3, r4, #20
 8014d54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014d58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014d5c:	9202      	str	r2, [sp, #8]
 8014d5e:	ebac 0205 	sub.w	r2, ip, r5
 8014d62:	3a15      	subs	r2, #21
 8014d64:	f022 0203 	bic.w	r2, r2, #3
 8014d68:	3204      	adds	r2, #4
 8014d6a:	f105 0115 	add.w	r1, r5, #21
 8014d6e:	458c      	cmp	ip, r1
 8014d70:	bf38      	it	cc
 8014d72:	2204      	movcc	r2, #4
 8014d74:	9201      	str	r2, [sp, #4]
 8014d76:	9a02      	ldr	r2, [sp, #8]
 8014d78:	9303      	str	r3, [sp, #12]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d808      	bhi.n	8014d90 <__multiply+0x98>
 8014d7e:	2f00      	cmp	r7, #0
 8014d80:	dc55      	bgt.n	8014e2e <__multiply+0x136>
 8014d82:	6107      	str	r7, [r0, #16]
 8014d84:	b005      	add	sp, #20
 8014d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d8a:	f843 2b04 	str.w	r2, [r3], #4
 8014d8e:	e7db      	b.n	8014d48 <__multiply+0x50>
 8014d90:	f8b3 a000 	ldrh.w	sl, [r3]
 8014d94:	f1ba 0f00 	cmp.w	sl, #0
 8014d98:	d020      	beq.n	8014ddc <__multiply+0xe4>
 8014d9a:	f105 0e14 	add.w	lr, r5, #20
 8014d9e:	46b1      	mov	r9, r6
 8014da0:	2200      	movs	r2, #0
 8014da2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014da6:	f8d9 b000 	ldr.w	fp, [r9]
 8014daa:	b2a1      	uxth	r1, r4
 8014dac:	fa1f fb8b 	uxth.w	fp, fp
 8014db0:	fb0a b101 	mla	r1, sl, r1, fp
 8014db4:	4411      	add	r1, r2
 8014db6:	f8d9 2000 	ldr.w	r2, [r9]
 8014dba:	0c24      	lsrs	r4, r4, #16
 8014dbc:	0c12      	lsrs	r2, r2, #16
 8014dbe:	fb0a 2404 	mla	r4, sl, r4, r2
 8014dc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014dc6:	b289      	uxth	r1, r1
 8014dc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014dcc:	45f4      	cmp	ip, lr
 8014dce:	f849 1b04 	str.w	r1, [r9], #4
 8014dd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014dd6:	d8e4      	bhi.n	8014da2 <__multiply+0xaa>
 8014dd8:	9901      	ldr	r1, [sp, #4]
 8014dda:	5072      	str	r2, [r6, r1]
 8014ddc:	9a03      	ldr	r2, [sp, #12]
 8014dde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014de2:	3304      	adds	r3, #4
 8014de4:	f1b9 0f00 	cmp.w	r9, #0
 8014de8:	d01f      	beq.n	8014e2a <__multiply+0x132>
 8014dea:	6834      	ldr	r4, [r6, #0]
 8014dec:	f105 0114 	add.w	r1, r5, #20
 8014df0:	46b6      	mov	lr, r6
 8014df2:	f04f 0a00 	mov.w	sl, #0
 8014df6:	880a      	ldrh	r2, [r1, #0]
 8014df8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014dfc:	fb09 b202 	mla	r2, r9, r2, fp
 8014e00:	4492      	add	sl, r2
 8014e02:	b2a4      	uxth	r4, r4
 8014e04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014e08:	f84e 4b04 	str.w	r4, [lr], #4
 8014e0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8014e10:	f8be 2000 	ldrh.w	r2, [lr]
 8014e14:	0c24      	lsrs	r4, r4, #16
 8014e16:	fb09 2404 	mla	r4, r9, r4, r2
 8014e1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014e1e:	458c      	cmp	ip, r1
 8014e20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014e24:	d8e7      	bhi.n	8014df6 <__multiply+0xfe>
 8014e26:	9a01      	ldr	r2, [sp, #4]
 8014e28:	50b4      	str	r4, [r6, r2]
 8014e2a:	3604      	adds	r6, #4
 8014e2c:	e7a3      	b.n	8014d76 <__multiply+0x7e>
 8014e2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d1a5      	bne.n	8014d82 <__multiply+0x8a>
 8014e36:	3f01      	subs	r7, #1
 8014e38:	e7a1      	b.n	8014d7e <__multiply+0x86>
 8014e3a:	bf00      	nop
 8014e3c:	0801ab6f 	.word	0x0801ab6f
 8014e40:	0801abe0 	.word	0x0801abe0

08014e44 <__pow5mult>:
 8014e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e48:	4615      	mov	r5, r2
 8014e4a:	f012 0203 	ands.w	r2, r2, #3
 8014e4e:	4606      	mov	r6, r0
 8014e50:	460f      	mov	r7, r1
 8014e52:	d007      	beq.n	8014e64 <__pow5mult+0x20>
 8014e54:	4c25      	ldr	r4, [pc, #148]	; (8014eec <__pow5mult+0xa8>)
 8014e56:	3a01      	subs	r2, #1
 8014e58:	2300      	movs	r3, #0
 8014e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014e5e:	f7ff fe9b 	bl	8014b98 <__multadd>
 8014e62:	4607      	mov	r7, r0
 8014e64:	10ad      	asrs	r5, r5, #2
 8014e66:	d03d      	beq.n	8014ee4 <__pow5mult+0xa0>
 8014e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014e6a:	b97c      	cbnz	r4, 8014e8c <__pow5mult+0x48>
 8014e6c:	2010      	movs	r0, #16
 8014e6e:	f7fe f911 	bl	8013094 <malloc>
 8014e72:	4602      	mov	r2, r0
 8014e74:	6270      	str	r0, [r6, #36]	; 0x24
 8014e76:	b928      	cbnz	r0, 8014e84 <__pow5mult+0x40>
 8014e78:	4b1d      	ldr	r3, [pc, #116]	; (8014ef0 <__pow5mult+0xac>)
 8014e7a:	481e      	ldr	r0, [pc, #120]	; (8014ef4 <__pow5mult+0xb0>)
 8014e7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014e80:	f000 fd80 	bl	8015984 <__assert_func>
 8014e84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014e88:	6004      	str	r4, [r0, #0]
 8014e8a:	60c4      	str	r4, [r0, #12]
 8014e8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014e90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014e94:	b94c      	cbnz	r4, 8014eaa <__pow5mult+0x66>
 8014e96:	f240 2171 	movw	r1, #625	; 0x271
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f7ff ff16 	bl	8014ccc <__i2b>
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	f8c8 0008 	str.w	r0, [r8, #8]
 8014ea6:	4604      	mov	r4, r0
 8014ea8:	6003      	str	r3, [r0, #0]
 8014eaa:	f04f 0900 	mov.w	r9, #0
 8014eae:	07eb      	lsls	r3, r5, #31
 8014eb0:	d50a      	bpl.n	8014ec8 <__pow5mult+0x84>
 8014eb2:	4639      	mov	r1, r7
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f7ff ff1e 	bl	8014cf8 <__multiply>
 8014ebc:	4639      	mov	r1, r7
 8014ebe:	4680      	mov	r8, r0
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	f7ff fe47 	bl	8014b54 <_Bfree>
 8014ec6:	4647      	mov	r7, r8
 8014ec8:	106d      	asrs	r5, r5, #1
 8014eca:	d00b      	beq.n	8014ee4 <__pow5mult+0xa0>
 8014ecc:	6820      	ldr	r0, [r4, #0]
 8014ece:	b938      	cbnz	r0, 8014ee0 <__pow5mult+0x9c>
 8014ed0:	4622      	mov	r2, r4
 8014ed2:	4621      	mov	r1, r4
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f7ff ff0f 	bl	8014cf8 <__multiply>
 8014eda:	6020      	str	r0, [r4, #0]
 8014edc:	f8c0 9000 	str.w	r9, [r0]
 8014ee0:	4604      	mov	r4, r0
 8014ee2:	e7e4      	b.n	8014eae <__pow5mult+0x6a>
 8014ee4:	4638      	mov	r0, r7
 8014ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eea:	bf00      	nop
 8014eec:	0801ad30 	.word	0x0801ad30
 8014ef0:	0801aaf9 	.word	0x0801aaf9
 8014ef4:	0801abe0 	.word	0x0801abe0

08014ef8 <__lshift>:
 8014ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014efc:	460c      	mov	r4, r1
 8014efe:	6849      	ldr	r1, [r1, #4]
 8014f00:	6923      	ldr	r3, [r4, #16]
 8014f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f06:	68a3      	ldr	r3, [r4, #8]
 8014f08:	4607      	mov	r7, r0
 8014f0a:	4691      	mov	r9, r2
 8014f0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f10:	f108 0601 	add.w	r6, r8, #1
 8014f14:	42b3      	cmp	r3, r6
 8014f16:	db0b      	blt.n	8014f30 <__lshift+0x38>
 8014f18:	4638      	mov	r0, r7
 8014f1a:	f7ff fddb 	bl	8014ad4 <_Balloc>
 8014f1e:	4605      	mov	r5, r0
 8014f20:	b948      	cbnz	r0, 8014f36 <__lshift+0x3e>
 8014f22:	4602      	mov	r2, r0
 8014f24:	4b28      	ldr	r3, [pc, #160]	; (8014fc8 <__lshift+0xd0>)
 8014f26:	4829      	ldr	r0, [pc, #164]	; (8014fcc <__lshift+0xd4>)
 8014f28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014f2c:	f000 fd2a 	bl	8015984 <__assert_func>
 8014f30:	3101      	adds	r1, #1
 8014f32:	005b      	lsls	r3, r3, #1
 8014f34:	e7ee      	b.n	8014f14 <__lshift+0x1c>
 8014f36:	2300      	movs	r3, #0
 8014f38:	f100 0114 	add.w	r1, r0, #20
 8014f3c:	f100 0210 	add.w	r2, r0, #16
 8014f40:	4618      	mov	r0, r3
 8014f42:	4553      	cmp	r3, sl
 8014f44:	db33      	blt.n	8014fae <__lshift+0xb6>
 8014f46:	6920      	ldr	r0, [r4, #16]
 8014f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014f4c:	f104 0314 	add.w	r3, r4, #20
 8014f50:	f019 091f 	ands.w	r9, r9, #31
 8014f54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014f58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014f5c:	d02b      	beq.n	8014fb6 <__lshift+0xbe>
 8014f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8014f62:	468a      	mov	sl, r1
 8014f64:	2200      	movs	r2, #0
 8014f66:	6818      	ldr	r0, [r3, #0]
 8014f68:	fa00 f009 	lsl.w	r0, r0, r9
 8014f6c:	4302      	orrs	r2, r0
 8014f6e:	f84a 2b04 	str.w	r2, [sl], #4
 8014f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f76:	459c      	cmp	ip, r3
 8014f78:	fa22 f20e 	lsr.w	r2, r2, lr
 8014f7c:	d8f3      	bhi.n	8014f66 <__lshift+0x6e>
 8014f7e:	ebac 0304 	sub.w	r3, ip, r4
 8014f82:	3b15      	subs	r3, #21
 8014f84:	f023 0303 	bic.w	r3, r3, #3
 8014f88:	3304      	adds	r3, #4
 8014f8a:	f104 0015 	add.w	r0, r4, #21
 8014f8e:	4584      	cmp	ip, r0
 8014f90:	bf38      	it	cc
 8014f92:	2304      	movcc	r3, #4
 8014f94:	50ca      	str	r2, [r1, r3]
 8014f96:	b10a      	cbz	r2, 8014f9c <__lshift+0xa4>
 8014f98:	f108 0602 	add.w	r6, r8, #2
 8014f9c:	3e01      	subs	r6, #1
 8014f9e:	4638      	mov	r0, r7
 8014fa0:	612e      	str	r6, [r5, #16]
 8014fa2:	4621      	mov	r1, r4
 8014fa4:	f7ff fdd6 	bl	8014b54 <_Bfree>
 8014fa8:	4628      	mov	r0, r5
 8014faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	e7c5      	b.n	8014f42 <__lshift+0x4a>
 8014fb6:	3904      	subs	r1, #4
 8014fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fbc:	f841 2f04 	str.w	r2, [r1, #4]!
 8014fc0:	459c      	cmp	ip, r3
 8014fc2:	d8f9      	bhi.n	8014fb8 <__lshift+0xc0>
 8014fc4:	e7ea      	b.n	8014f9c <__lshift+0xa4>
 8014fc6:	bf00      	nop
 8014fc8:	0801ab6f 	.word	0x0801ab6f
 8014fcc:	0801abe0 	.word	0x0801abe0

08014fd0 <__mcmp>:
 8014fd0:	b530      	push	{r4, r5, lr}
 8014fd2:	6902      	ldr	r2, [r0, #16]
 8014fd4:	690c      	ldr	r4, [r1, #16]
 8014fd6:	1b12      	subs	r2, r2, r4
 8014fd8:	d10e      	bne.n	8014ff8 <__mcmp+0x28>
 8014fda:	f100 0314 	add.w	r3, r0, #20
 8014fde:	3114      	adds	r1, #20
 8014fe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014fe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014fe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014fec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014ff0:	42a5      	cmp	r5, r4
 8014ff2:	d003      	beq.n	8014ffc <__mcmp+0x2c>
 8014ff4:	d305      	bcc.n	8015002 <__mcmp+0x32>
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	4610      	mov	r0, r2
 8014ffa:	bd30      	pop	{r4, r5, pc}
 8014ffc:	4283      	cmp	r3, r0
 8014ffe:	d3f3      	bcc.n	8014fe8 <__mcmp+0x18>
 8015000:	e7fa      	b.n	8014ff8 <__mcmp+0x28>
 8015002:	f04f 32ff 	mov.w	r2, #4294967295
 8015006:	e7f7      	b.n	8014ff8 <__mcmp+0x28>

08015008 <__mdiff>:
 8015008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500c:	460c      	mov	r4, r1
 801500e:	4606      	mov	r6, r0
 8015010:	4611      	mov	r1, r2
 8015012:	4620      	mov	r0, r4
 8015014:	4617      	mov	r7, r2
 8015016:	f7ff ffdb 	bl	8014fd0 <__mcmp>
 801501a:	1e05      	subs	r5, r0, #0
 801501c:	d110      	bne.n	8015040 <__mdiff+0x38>
 801501e:	4629      	mov	r1, r5
 8015020:	4630      	mov	r0, r6
 8015022:	f7ff fd57 	bl	8014ad4 <_Balloc>
 8015026:	b930      	cbnz	r0, 8015036 <__mdiff+0x2e>
 8015028:	4b39      	ldr	r3, [pc, #228]	; (8015110 <__mdiff+0x108>)
 801502a:	4602      	mov	r2, r0
 801502c:	f240 2132 	movw	r1, #562	; 0x232
 8015030:	4838      	ldr	r0, [pc, #224]	; (8015114 <__mdiff+0x10c>)
 8015032:	f000 fca7 	bl	8015984 <__assert_func>
 8015036:	2301      	movs	r3, #1
 8015038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801503c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015040:	bfa4      	itt	ge
 8015042:	463b      	movge	r3, r7
 8015044:	4627      	movge	r7, r4
 8015046:	4630      	mov	r0, r6
 8015048:	6879      	ldr	r1, [r7, #4]
 801504a:	bfa6      	itte	ge
 801504c:	461c      	movge	r4, r3
 801504e:	2500      	movge	r5, #0
 8015050:	2501      	movlt	r5, #1
 8015052:	f7ff fd3f 	bl	8014ad4 <_Balloc>
 8015056:	b920      	cbnz	r0, 8015062 <__mdiff+0x5a>
 8015058:	4b2d      	ldr	r3, [pc, #180]	; (8015110 <__mdiff+0x108>)
 801505a:	4602      	mov	r2, r0
 801505c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015060:	e7e6      	b.n	8015030 <__mdiff+0x28>
 8015062:	693e      	ldr	r6, [r7, #16]
 8015064:	60c5      	str	r5, [r0, #12]
 8015066:	6925      	ldr	r5, [r4, #16]
 8015068:	f107 0114 	add.w	r1, r7, #20
 801506c:	f104 0914 	add.w	r9, r4, #20
 8015070:	f100 0e14 	add.w	lr, r0, #20
 8015074:	f107 0210 	add.w	r2, r7, #16
 8015078:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801507c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015080:	46f2      	mov	sl, lr
 8015082:	2700      	movs	r7, #0
 8015084:	f859 3b04 	ldr.w	r3, [r9], #4
 8015088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801508c:	fa1f f883 	uxth.w	r8, r3
 8015090:	fa17 f78b 	uxtah	r7, r7, fp
 8015094:	0c1b      	lsrs	r3, r3, #16
 8015096:	eba7 0808 	sub.w	r8, r7, r8
 801509a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801509e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80150a2:	fa1f f888 	uxth.w	r8, r8
 80150a6:	141f      	asrs	r7, r3, #16
 80150a8:	454d      	cmp	r5, r9
 80150aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80150ae:	f84a 3b04 	str.w	r3, [sl], #4
 80150b2:	d8e7      	bhi.n	8015084 <__mdiff+0x7c>
 80150b4:	1b2b      	subs	r3, r5, r4
 80150b6:	3b15      	subs	r3, #21
 80150b8:	f023 0303 	bic.w	r3, r3, #3
 80150bc:	3304      	adds	r3, #4
 80150be:	3415      	adds	r4, #21
 80150c0:	42a5      	cmp	r5, r4
 80150c2:	bf38      	it	cc
 80150c4:	2304      	movcc	r3, #4
 80150c6:	4419      	add	r1, r3
 80150c8:	4473      	add	r3, lr
 80150ca:	469e      	mov	lr, r3
 80150cc:	460d      	mov	r5, r1
 80150ce:	4565      	cmp	r5, ip
 80150d0:	d30e      	bcc.n	80150f0 <__mdiff+0xe8>
 80150d2:	f10c 0203 	add.w	r2, ip, #3
 80150d6:	1a52      	subs	r2, r2, r1
 80150d8:	f022 0203 	bic.w	r2, r2, #3
 80150dc:	3903      	subs	r1, #3
 80150de:	458c      	cmp	ip, r1
 80150e0:	bf38      	it	cc
 80150e2:	2200      	movcc	r2, #0
 80150e4:	441a      	add	r2, r3
 80150e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80150ea:	b17b      	cbz	r3, 801510c <__mdiff+0x104>
 80150ec:	6106      	str	r6, [r0, #16]
 80150ee:	e7a5      	b.n	801503c <__mdiff+0x34>
 80150f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80150f4:	fa17 f488 	uxtah	r4, r7, r8
 80150f8:	1422      	asrs	r2, r4, #16
 80150fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80150fe:	b2a4      	uxth	r4, r4
 8015100:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015104:	f84e 4b04 	str.w	r4, [lr], #4
 8015108:	1417      	asrs	r7, r2, #16
 801510a:	e7e0      	b.n	80150ce <__mdiff+0xc6>
 801510c:	3e01      	subs	r6, #1
 801510e:	e7ea      	b.n	80150e6 <__mdiff+0xde>
 8015110:	0801ab6f 	.word	0x0801ab6f
 8015114:	0801abe0 	.word	0x0801abe0

08015118 <__d2b>:
 8015118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801511c:	4689      	mov	r9, r1
 801511e:	2101      	movs	r1, #1
 8015120:	ec57 6b10 	vmov	r6, r7, d0
 8015124:	4690      	mov	r8, r2
 8015126:	f7ff fcd5 	bl	8014ad4 <_Balloc>
 801512a:	4604      	mov	r4, r0
 801512c:	b930      	cbnz	r0, 801513c <__d2b+0x24>
 801512e:	4602      	mov	r2, r0
 8015130:	4b25      	ldr	r3, [pc, #148]	; (80151c8 <__d2b+0xb0>)
 8015132:	4826      	ldr	r0, [pc, #152]	; (80151cc <__d2b+0xb4>)
 8015134:	f240 310a 	movw	r1, #778	; 0x30a
 8015138:	f000 fc24 	bl	8015984 <__assert_func>
 801513c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015144:	bb35      	cbnz	r5, 8015194 <__d2b+0x7c>
 8015146:	2e00      	cmp	r6, #0
 8015148:	9301      	str	r3, [sp, #4]
 801514a:	d028      	beq.n	801519e <__d2b+0x86>
 801514c:	4668      	mov	r0, sp
 801514e:	9600      	str	r6, [sp, #0]
 8015150:	f7ff fd8c 	bl	8014c6c <__lo0bits>
 8015154:	9900      	ldr	r1, [sp, #0]
 8015156:	b300      	cbz	r0, 801519a <__d2b+0x82>
 8015158:	9a01      	ldr	r2, [sp, #4]
 801515a:	f1c0 0320 	rsb	r3, r0, #32
 801515e:	fa02 f303 	lsl.w	r3, r2, r3
 8015162:	430b      	orrs	r3, r1
 8015164:	40c2      	lsrs	r2, r0
 8015166:	6163      	str	r3, [r4, #20]
 8015168:	9201      	str	r2, [sp, #4]
 801516a:	9b01      	ldr	r3, [sp, #4]
 801516c:	61a3      	str	r3, [r4, #24]
 801516e:	2b00      	cmp	r3, #0
 8015170:	bf14      	ite	ne
 8015172:	2202      	movne	r2, #2
 8015174:	2201      	moveq	r2, #1
 8015176:	6122      	str	r2, [r4, #16]
 8015178:	b1d5      	cbz	r5, 80151b0 <__d2b+0x98>
 801517a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801517e:	4405      	add	r5, r0
 8015180:	f8c9 5000 	str.w	r5, [r9]
 8015184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015188:	f8c8 0000 	str.w	r0, [r8]
 801518c:	4620      	mov	r0, r4
 801518e:	b003      	add	sp, #12
 8015190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015198:	e7d5      	b.n	8015146 <__d2b+0x2e>
 801519a:	6161      	str	r1, [r4, #20]
 801519c:	e7e5      	b.n	801516a <__d2b+0x52>
 801519e:	a801      	add	r0, sp, #4
 80151a0:	f7ff fd64 	bl	8014c6c <__lo0bits>
 80151a4:	9b01      	ldr	r3, [sp, #4]
 80151a6:	6163      	str	r3, [r4, #20]
 80151a8:	2201      	movs	r2, #1
 80151aa:	6122      	str	r2, [r4, #16]
 80151ac:	3020      	adds	r0, #32
 80151ae:	e7e3      	b.n	8015178 <__d2b+0x60>
 80151b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80151b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80151b8:	f8c9 0000 	str.w	r0, [r9]
 80151bc:	6918      	ldr	r0, [r3, #16]
 80151be:	f7ff fd35 	bl	8014c2c <__hi0bits>
 80151c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80151c6:	e7df      	b.n	8015188 <__d2b+0x70>
 80151c8:	0801ab6f 	.word	0x0801ab6f
 80151cc:	0801abe0 	.word	0x0801abe0

080151d0 <_calloc_r>:
 80151d0:	b513      	push	{r0, r1, r4, lr}
 80151d2:	434a      	muls	r2, r1
 80151d4:	4611      	mov	r1, r2
 80151d6:	9201      	str	r2, [sp, #4]
 80151d8:	f7fd ffec 	bl	80131b4 <_malloc_r>
 80151dc:	4604      	mov	r4, r0
 80151de:	b118      	cbz	r0, 80151e8 <_calloc_r+0x18>
 80151e0:	9a01      	ldr	r2, [sp, #4]
 80151e2:	2100      	movs	r1, #0
 80151e4:	f7fd ff8e 	bl	8013104 <memset>
 80151e8:	4620      	mov	r0, r4
 80151ea:	b002      	add	sp, #8
 80151ec:	bd10      	pop	{r4, pc}

080151ee <__ssputs_r>:
 80151ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151f2:	688e      	ldr	r6, [r1, #8]
 80151f4:	429e      	cmp	r6, r3
 80151f6:	4682      	mov	sl, r0
 80151f8:	460c      	mov	r4, r1
 80151fa:	4690      	mov	r8, r2
 80151fc:	461f      	mov	r7, r3
 80151fe:	d838      	bhi.n	8015272 <__ssputs_r+0x84>
 8015200:	898a      	ldrh	r2, [r1, #12]
 8015202:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015206:	d032      	beq.n	801526e <__ssputs_r+0x80>
 8015208:	6825      	ldr	r5, [r4, #0]
 801520a:	6909      	ldr	r1, [r1, #16]
 801520c:	eba5 0901 	sub.w	r9, r5, r1
 8015210:	6965      	ldr	r5, [r4, #20]
 8015212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015216:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801521a:	3301      	adds	r3, #1
 801521c:	444b      	add	r3, r9
 801521e:	106d      	asrs	r5, r5, #1
 8015220:	429d      	cmp	r5, r3
 8015222:	bf38      	it	cc
 8015224:	461d      	movcc	r5, r3
 8015226:	0553      	lsls	r3, r2, #21
 8015228:	d531      	bpl.n	801528e <__ssputs_r+0xa0>
 801522a:	4629      	mov	r1, r5
 801522c:	f7fd ffc2 	bl	80131b4 <_malloc_r>
 8015230:	4606      	mov	r6, r0
 8015232:	b950      	cbnz	r0, 801524a <__ssputs_r+0x5c>
 8015234:	230c      	movs	r3, #12
 8015236:	f8ca 3000 	str.w	r3, [sl]
 801523a:	89a3      	ldrh	r3, [r4, #12]
 801523c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015240:	81a3      	strh	r3, [r4, #12]
 8015242:	f04f 30ff 	mov.w	r0, #4294967295
 8015246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801524a:	6921      	ldr	r1, [r4, #16]
 801524c:	464a      	mov	r2, r9
 801524e:	f7fd ff31 	bl	80130b4 <memcpy>
 8015252:	89a3      	ldrh	r3, [r4, #12]
 8015254:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801525c:	81a3      	strh	r3, [r4, #12]
 801525e:	6126      	str	r6, [r4, #16]
 8015260:	6165      	str	r5, [r4, #20]
 8015262:	444e      	add	r6, r9
 8015264:	eba5 0509 	sub.w	r5, r5, r9
 8015268:	6026      	str	r6, [r4, #0]
 801526a:	60a5      	str	r5, [r4, #8]
 801526c:	463e      	mov	r6, r7
 801526e:	42be      	cmp	r6, r7
 8015270:	d900      	bls.n	8015274 <__ssputs_r+0x86>
 8015272:	463e      	mov	r6, r7
 8015274:	4632      	mov	r2, r6
 8015276:	6820      	ldr	r0, [r4, #0]
 8015278:	4641      	mov	r1, r8
 801527a:	f7fd ff29 	bl	80130d0 <memmove>
 801527e:	68a3      	ldr	r3, [r4, #8]
 8015280:	6822      	ldr	r2, [r4, #0]
 8015282:	1b9b      	subs	r3, r3, r6
 8015284:	4432      	add	r2, r6
 8015286:	60a3      	str	r3, [r4, #8]
 8015288:	6022      	str	r2, [r4, #0]
 801528a:	2000      	movs	r0, #0
 801528c:	e7db      	b.n	8015246 <__ssputs_r+0x58>
 801528e:	462a      	mov	r2, r5
 8015290:	f000 fd02 	bl	8015c98 <_realloc_r>
 8015294:	4606      	mov	r6, r0
 8015296:	2800      	cmp	r0, #0
 8015298:	d1e1      	bne.n	801525e <__ssputs_r+0x70>
 801529a:	6921      	ldr	r1, [r4, #16]
 801529c:	4650      	mov	r0, sl
 801529e:	f7fd ff39 	bl	8013114 <_free_r>
 80152a2:	e7c7      	b.n	8015234 <__ssputs_r+0x46>

080152a4 <_svfiprintf_r>:
 80152a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a8:	4698      	mov	r8, r3
 80152aa:	898b      	ldrh	r3, [r1, #12]
 80152ac:	061b      	lsls	r3, r3, #24
 80152ae:	b09d      	sub	sp, #116	; 0x74
 80152b0:	4607      	mov	r7, r0
 80152b2:	460d      	mov	r5, r1
 80152b4:	4614      	mov	r4, r2
 80152b6:	d50e      	bpl.n	80152d6 <_svfiprintf_r+0x32>
 80152b8:	690b      	ldr	r3, [r1, #16]
 80152ba:	b963      	cbnz	r3, 80152d6 <_svfiprintf_r+0x32>
 80152bc:	2140      	movs	r1, #64	; 0x40
 80152be:	f7fd ff79 	bl	80131b4 <_malloc_r>
 80152c2:	6028      	str	r0, [r5, #0]
 80152c4:	6128      	str	r0, [r5, #16]
 80152c6:	b920      	cbnz	r0, 80152d2 <_svfiprintf_r+0x2e>
 80152c8:	230c      	movs	r3, #12
 80152ca:	603b      	str	r3, [r7, #0]
 80152cc:	f04f 30ff 	mov.w	r0, #4294967295
 80152d0:	e0d1      	b.n	8015476 <_svfiprintf_r+0x1d2>
 80152d2:	2340      	movs	r3, #64	; 0x40
 80152d4:	616b      	str	r3, [r5, #20]
 80152d6:	2300      	movs	r3, #0
 80152d8:	9309      	str	r3, [sp, #36]	; 0x24
 80152da:	2320      	movs	r3, #32
 80152dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80152e4:	2330      	movs	r3, #48	; 0x30
 80152e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015490 <_svfiprintf_r+0x1ec>
 80152ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152ee:	f04f 0901 	mov.w	r9, #1
 80152f2:	4623      	mov	r3, r4
 80152f4:	469a      	mov	sl, r3
 80152f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152fa:	b10a      	cbz	r2, 8015300 <_svfiprintf_r+0x5c>
 80152fc:	2a25      	cmp	r2, #37	; 0x25
 80152fe:	d1f9      	bne.n	80152f4 <_svfiprintf_r+0x50>
 8015300:	ebba 0b04 	subs.w	fp, sl, r4
 8015304:	d00b      	beq.n	801531e <_svfiprintf_r+0x7a>
 8015306:	465b      	mov	r3, fp
 8015308:	4622      	mov	r2, r4
 801530a:	4629      	mov	r1, r5
 801530c:	4638      	mov	r0, r7
 801530e:	f7ff ff6e 	bl	80151ee <__ssputs_r>
 8015312:	3001      	adds	r0, #1
 8015314:	f000 80aa 	beq.w	801546c <_svfiprintf_r+0x1c8>
 8015318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801531a:	445a      	add	r2, fp
 801531c:	9209      	str	r2, [sp, #36]	; 0x24
 801531e:	f89a 3000 	ldrb.w	r3, [sl]
 8015322:	2b00      	cmp	r3, #0
 8015324:	f000 80a2 	beq.w	801546c <_svfiprintf_r+0x1c8>
 8015328:	2300      	movs	r3, #0
 801532a:	f04f 32ff 	mov.w	r2, #4294967295
 801532e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015332:	f10a 0a01 	add.w	sl, sl, #1
 8015336:	9304      	str	r3, [sp, #16]
 8015338:	9307      	str	r3, [sp, #28]
 801533a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801533e:	931a      	str	r3, [sp, #104]	; 0x68
 8015340:	4654      	mov	r4, sl
 8015342:	2205      	movs	r2, #5
 8015344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015348:	4851      	ldr	r0, [pc, #324]	; (8015490 <_svfiprintf_r+0x1ec>)
 801534a:	f7ea ff49 	bl	80001e0 <memchr>
 801534e:	9a04      	ldr	r2, [sp, #16]
 8015350:	b9d8      	cbnz	r0, 801538a <_svfiprintf_r+0xe6>
 8015352:	06d0      	lsls	r0, r2, #27
 8015354:	bf44      	itt	mi
 8015356:	2320      	movmi	r3, #32
 8015358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801535c:	0711      	lsls	r1, r2, #28
 801535e:	bf44      	itt	mi
 8015360:	232b      	movmi	r3, #43	; 0x2b
 8015362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015366:	f89a 3000 	ldrb.w	r3, [sl]
 801536a:	2b2a      	cmp	r3, #42	; 0x2a
 801536c:	d015      	beq.n	801539a <_svfiprintf_r+0xf6>
 801536e:	9a07      	ldr	r2, [sp, #28]
 8015370:	4654      	mov	r4, sl
 8015372:	2000      	movs	r0, #0
 8015374:	f04f 0c0a 	mov.w	ip, #10
 8015378:	4621      	mov	r1, r4
 801537a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801537e:	3b30      	subs	r3, #48	; 0x30
 8015380:	2b09      	cmp	r3, #9
 8015382:	d94e      	bls.n	8015422 <_svfiprintf_r+0x17e>
 8015384:	b1b0      	cbz	r0, 80153b4 <_svfiprintf_r+0x110>
 8015386:	9207      	str	r2, [sp, #28]
 8015388:	e014      	b.n	80153b4 <_svfiprintf_r+0x110>
 801538a:	eba0 0308 	sub.w	r3, r0, r8
 801538e:	fa09 f303 	lsl.w	r3, r9, r3
 8015392:	4313      	orrs	r3, r2
 8015394:	9304      	str	r3, [sp, #16]
 8015396:	46a2      	mov	sl, r4
 8015398:	e7d2      	b.n	8015340 <_svfiprintf_r+0x9c>
 801539a:	9b03      	ldr	r3, [sp, #12]
 801539c:	1d19      	adds	r1, r3, #4
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	9103      	str	r1, [sp, #12]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	bfbb      	ittet	lt
 80153a6:	425b      	neglt	r3, r3
 80153a8:	f042 0202 	orrlt.w	r2, r2, #2
 80153ac:	9307      	strge	r3, [sp, #28]
 80153ae:	9307      	strlt	r3, [sp, #28]
 80153b0:	bfb8      	it	lt
 80153b2:	9204      	strlt	r2, [sp, #16]
 80153b4:	7823      	ldrb	r3, [r4, #0]
 80153b6:	2b2e      	cmp	r3, #46	; 0x2e
 80153b8:	d10c      	bne.n	80153d4 <_svfiprintf_r+0x130>
 80153ba:	7863      	ldrb	r3, [r4, #1]
 80153bc:	2b2a      	cmp	r3, #42	; 0x2a
 80153be:	d135      	bne.n	801542c <_svfiprintf_r+0x188>
 80153c0:	9b03      	ldr	r3, [sp, #12]
 80153c2:	1d1a      	adds	r2, r3, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	9203      	str	r2, [sp, #12]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	bfb8      	it	lt
 80153cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80153d0:	3402      	adds	r4, #2
 80153d2:	9305      	str	r3, [sp, #20]
 80153d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80154a0 <_svfiprintf_r+0x1fc>
 80153d8:	7821      	ldrb	r1, [r4, #0]
 80153da:	2203      	movs	r2, #3
 80153dc:	4650      	mov	r0, sl
 80153de:	f7ea feff 	bl	80001e0 <memchr>
 80153e2:	b140      	cbz	r0, 80153f6 <_svfiprintf_r+0x152>
 80153e4:	2340      	movs	r3, #64	; 0x40
 80153e6:	eba0 000a 	sub.w	r0, r0, sl
 80153ea:	fa03 f000 	lsl.w	r0, r3, r0
 80153ee:	9b04      	ldr	r3, [sp, #16]
 80153f0:	4303      	orrs	r3, r0
 80153f2:	3401      	adds	r4, #1
 80153f4:	9304      	str	r3, [sp, #16]
 80153f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153fa:	4826      	ldr	r0, [pc, #152]	; (8015494 <_svfiprintf_r+0x1f0>)
 80153fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015400:	2206      	movs	r2, #6
 8015402:	f7ea feed 	bl	80001e0 <memchr>
 8015406:	2800      	cmp	r0, #0
 8015408:	d038      	beq.n	801547c <_svfiprintf_r+0x1d8>
 801540a:	4b23      	ldr	r3, [pc, #140]	; (8015498 <_svfiprintf_r+0x1f4>)
 801540c:	bb1b      	cbnz	r3, 8015456 <_svfiprintf_r+0x1b2>
 801540e:	9b03      	ldr	r3, [sp, #12]
 8015410:	3307      	adds	r3, #7
 8015412:	f023 0307 	bic.w	r3, r3, #7
 8015416:	3308      	adds	r3, #8
 8015418:	9303      	str	r3, [sp, #12]
 801541a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801541c:	4433      	add	r3, r6
 801541e:	9309      	str	r3, [sp, #36]	; 0x24
 8015420:	e767      	b.n	80152f2 <_svfiprintf_r+0x4e>
 8015422:	fb0c 3202 	mla	r2, ip, r2, r3
 8015426:	460c      	mov	r4, r1
 8015428:	2001      	movs	r0, #1
 801542a:	e7a5      	b.n	8015378 <_svfiprintf_r+0xd4>
 801542c:	2300      	movs	r3, #0
 801542e:	3401      	adds	r4, #1
 8015430:	9305      	str	r3, [sp, #20]
 8015432:	4619      	mov	r1, r3
 8015434:	f04f 0c0a 	mov.w	ip, #10
 8015438:	4620      	mov	r0, r4
 801543a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801543e:	3a30      	subs	r2, #48	; 0x30
 8015440:	2a09      	cmp	r2, #9
 8015442:	d903      	bls.n	801544c <_svfiprintf_r+0x1a8>
 8015444:	2b00      	cmp	r3, #0
 8015446:	d0c5      	beq.n	80153d4 <_svfiprintf_r+0x130>
 8015448:	9105      	str	r1, [sp, #20]
 801544a:	e7c3      	b.n	80153d4 <_svfiprintf_r+0x130>
 801544c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015450:	4604      	mov	r4, r0
 8015452:	2301      	movs	r3, #1
 8015454:	e7f0      	b.n	8015438 <_svfiprintf_r+0x194>
 8015456:	ab03      	add	r3, sp, #12
 8015458:	9300      	str	r3, [sp, #0]
 801545a:	462a      	mov	r2, r5
 801545c:	4b0f      	ldr	r3, [pc, #60]	; (801549c <_svfiprintf_r+0x1f8>)
 801545e:	a904      	add	r1, sp, #16
 8015460:	4638      	mov	r0, r7
 8015462:	f7fd ffa1 	bl	80133a8 <_printf_float>
 8015466:	1c42      	adds	r2, r0, #1
 8015468:	4606      	mov	r6, r0
 801546a:	d1d6      	bne.n	801541a <_svfiprintf_r+0x176>
 801546c:	89ab      	ldrh	r3, [r5, #12]
 801546e:	065b      	lsls	r3, r3, #25
 8015470:	f53f af2c 	bmi.w	80152cc <_svfiprintf_r+0x28>
 8015474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015476:	b01d      	add	sp, #116	; 0x74
 8015478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801547c:	ab03      	add	r3, sp, #12
 801547e:	9300      	str	r3, [sp, #0]
 8015480:	462a      	mov	r2, r5
 8015482:	4b06      	ldr	r3, [pc, #24]	; (801549c <_svfiprintf_r+0x1f8>)
 8015484:	a904      	add	r1, sp, #16
 8015486:	4638      	mov	r0, r7
 8015488:	f7fe fa32 	bl	80138f0 <_printf_i>
 801548c:	e7eb      	b.n	8015466 <_svfiprintf_r+0x1c2>
 801548e:	bf00      	nop
 8015490:	0801ad3c 	.word	0x0801ad3c
 8015494:	0801ad46 	.word	0x0801ad46
 8015498:	080133a9 	.word	0x080133a9
 801549c:	080151ef 	.word	0x080151ef
 80154a0:	0801ad42 	.word	0x0801ad42

080154a4 <__sfputc_r>:
 80154a4:	6893      	ldr	r3, [r2, #8]
 80154a6:	3b01      	subs	r3, #1
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	b410      	push	{r4}
 80154ac:	6093      	str	r3, [r2, #8]
 80154ae:	da08      	bge.n	80154c2 <__sfputc_r+0x1e>
 80154b0:	6994      	ldr	r4, [r2, #24]
 80154b2:	42a3      	cmp	r3, r4
 80154b4:	db01      	blt.n	80154ba <__sfputc_r+0x16>
 80154b6:	290a      	cmp	r1, #10
 80154b8:	d103      	bne.n	80154c2 <__sfputc_r+0x1e>
 80154ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154be:	f000 b98f 	b.w	80157e0 <__swbuf_r>
 80154c2:	6813      	ldr	r3, [r2, #0]
 80154c4:	1c58      	adds	r0, r3, #1
 80154c6:	6010      	str	r0, [r2, #0]
 80154c8:	7019      	strb	r1, [r3, #0]
 80154ca:	4608      	mov	r0, r1
 80154cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154d0:	4770      	bx	lr

080154d2 <__sfputs_r>:
 80154d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154d4:	4606      	mov	r6, r0
 80154d6:	460f      	mov	r7, r1
 80154d8:	4614      	mov	r4, r2
 80154da:	18d5      	adds	r5, r2, r3
 80154dc:	42ac      	cmp	r4, r5
 80154de:	d101      	bne.n	80154e4 <__sfputs_r+0x12>
 80154e0:	2000      	movs	r0, #0
 80154e2:	e007      	b.n	80154f4 <__sfputs_r+0x22>
 80154e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154e8:	463a      	mov	r2, r7
 80154ea:	4630      	mov	r0, r6
 80154ec:	f7ff ffda 	bl	80154a4 <__sfputc_r>
 80154f0:	1c43      	adds	r3, r0, #1
 80154f2:	d1f3      	bne.n	80154dc <__sfputs_r+0xa>
 80154f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154f8 <_vfiprintf_r>:
 80154f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154fc:	460d      	mov	r5, r1
 80154fe:	b09d      	sub	sp, #116	; 0x74
 8015500:	4614      	mov	r4, r2
 8015502:	4698      	mov	r8, r3
 8015504:	4606      	mov	r6, r0
 8015506:	b118      	cbz	r0, 8015510 <_vfiprintf_r+0x18>
 8015508:	6983      	ldr	r3, [r0, #24]
 801550a:	b90b      	cbnz	r3, 8015510 <_vfiprintf_r+0x18>
 801550c:	f7ff fa30 	bl	8014970 <__sinit>
 8015510:	4b89      	ldr	r3, [pc, #548]	; (8015738 <_vfiprintf_r+0x240>)
 8015512:	429d      	cmp	r5, r3
 8015514:	d11b      	bne.n	801554e <_vfiprintf_r+0x56>
 8015516:	6875      	ldr	r5, [r6, #4]
 8015518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801551a:	07d9      	lsls	r1, r3, #31
 801551c:	d405      	bmi.n	801552a <_vfiprintf_r+0x32>
 801551e:	89ab      	ldrh	r3, [r5, #12]
 8015520:	059a      	lsls	r2, r3, #22
 8015522:	d402      	bmi.n	801552a <_vfiprintf_r+0x32>
 8015524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015526:	f7ff fac6 	bl	8014ab6 <__retarget_lock_acquire_recursive>
 801552a:	89ab      	ldrh	r3, [r5, #12]
 801552c:	071b      	lsls	r3, r3, #28
 801552e:	d501      	bpl.n	8015534 <_vfiprintf_r+0x3c>
 8015530:	692b      	ldr	r3, [r5, #16]
 8015532:	b9eb      	cbnz	r3, 8015570 <_vfiprintf_r+0x78>
 8015534:	4629      	mov	r1, r5
 8015536:	4630      	mov	r0, r6
 8015538:	f000 f9b6 	bl	80158a8 <__swsetup_r>
 801553c:	b1c0      	cbz	r0, 8015570 <_vfiprintf_r+0x78>
 801553e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015540:	07dc      	lsls	r4, r3, #31
 8015542:	d50e      	bpl.n	8015562 <_vfiprintf_r+0x6a>
 8015544:	f04f 30ff 	mov.w	r0, #4294967295
 8015548:	b01d      	add	sp, #116	; 0x74
 801554a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801554e:	4b7b      	ldr	r3, [pc, #492]	; (801573c <_vfiprintf_r+0x244>)
 8015550:	429d      	cmp	r5, r3
 8015552:	d101      	bne.n	8015558 <_vfiprintf_r+0x60>
 8015554:	68b5      	ldr	r5, [r6, #8]
 8015556:	e7df      	b.n	8015518 <_vfiprintf_r+0x20>
 8015558:	4b79      	ldr	r3, [pc, #484]	; (8015740 <_vfiprintf_r+0x248>)
 801555a:	429d      	cmp	r5, r3
 801555c:	bf08      	it	eq
 801555e:	68f5      	ldreq	r5, [r6, #12]
 8015560:	e7da      	b.n	8015518 <_vfiprintf_r+0x20>
 8015562:	89ab      	ldrh	r3, [r5, #12]
 8015564:	0598      	lsls	r0, r3, #22
 8015566:	d4ed      	bmi.n	8015544 <_vfiprintf_r+0x4c>
 8015568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801556a:	f7ff faa5 	bl	8014ab8 <__retarget_lock_release_recursive>
 801556e:	e7e9      	b.n	8015544 <_vfiprintf_r+0x4c>
 8015570:	2300      	movs	r3, #0
 8015572:	9309      	str	r3, [sp, #36]	; 0x24
 8015574:	2320      	movs	r3, #32
 8015576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801557a:	f8cd 800c 	str.w	r8, [sp, #12]
 801557e:	2330      	movs	r3, #48	; 0x30
 8015580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015744 <_vfiprintf_r+0x24c>
 8015584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015588:	f04f 0901 	mov.w	r9, #1
 801558c:	4623      	mov	r3, r4
 801558e:	469a      	mov	sl, r3
 8015590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015594:	b10a      	cbz	r2, 801559a <_vfiprintf_r+0xa2>
 8015596:	2a25      	cmp	r2, #37	; 0x25
 8015598:	d1f9      	bne.n	801558e <_vfiprintf_r+0x96>
 801559a:	ebba 0b04 	subs.w	fp, sl, r4
 801559e:	d00b      	beq.n	80155b8 <_vfiprintf_r+0xc0>
 80155a0:	465b      	mov	r3, fp
 80155a2:	4622      	mov	r2, r4
 80155a4:	4629      	mov	r1, r5
 80155a6:	4630      	mov	r0, r6
 80155a8:	f7ff ff93 	bl	80154d2 <__sfputs_r>
 80155ac:	3001      	adds	r0, #1
 80155ae:	f000 80aa 	beq.w	8015706 <_vfiprintf_r+0x20e>
 80155b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155b4:	445a      	add	r2, fp
 80155b6:	9209      	str	r2, [sp, #36]	; 0x24
 80155b8:	f89a 3000 	ldrb.w	r3, [sl]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	f000 80a2 	beq.w	8015706 <_vfiprintf_r+0x20e>
 80155c2:	2300      	movs	r3, #0
 80155c4:	f04f 32ff 	mov.w	r2, #4294967295
 80155c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155cc:	f10a 0a01 	add.w	sl, sl, #1
 80155d0:	9304      	str	r3, [sp, #16]
 80155d2:	9307      	str	r3, [sp, #28]
 80155d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155d8:	931a      	str	r3, [sp, #104]	; 0x68
 80155da:	4654      	mov	r4, sl
 80155dc:	2205      	movs	r2, #5
 80155de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e2:	4858      	ldr	r0, [pc, #352]	; (8015744 <_vfiprintf_r+0x24c>)
 80155e4:	f7ea fdfc 	bl	80001e0 <memchr>
 80155e8:	9a04      	ldr	r2, [sp, #16]
 80155ea:	b9d8      	cbnz	r0, 8015624 <_vfiprintf_r+0x12c>
 80155ec:	06d1      	lsls	r1, r2, #27
 80155ee:	bf44      	itt	mi
 80155f0:	2320      	movmi	r3, #32
 80155f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155f6:	0713      	lsls	r3, r2, #28
 80155f8:	bf44      	itt	mi
 80155fa:	232b      	movmi	r3, #43	; 0x2b
 80155fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015600:	f89a 3000 	ldrb.w	r3, [sl]
 8015604:	2b2a      	cmp	r3, #42	; 0x2a
 8015606:	d015      	beq.n	8015634 <_vfiprintf_r+0x13c>
 8015608:	9a07      	ldr	r2, [sp, #28]
 801560a:	4654      	mov	r4, sl
 801560c:	2000      	movs	r0, #0
 801560e:	f04f 0c0a 	mov.w	ip, #10
 8015612:	4621      	mov	r1, r4
 8015614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015618:	3b30      	subs	r3, #48	; 0x30
 801561a:	2b09      	cmp	r3, #9
 801561c:	d94e      	bls.n	80156bc <_vfiprintf_r+0x1c4>
 801561e:	b1b0      	cbz	r0, 801564e <_vfiprintf_r+0x156>
 8015620:	9207      	str	r2, [sp, #28]
 8015622:	e014      	b.n	801564e <_vfiprintf_r+0x156>
 8015624:	eba0 0308 	sub.w	r3, r0, r8
 8015628:	fa09 f303 	lsl.w	r3, r9, r3
 801562c:	4313      	orrs	r3, r2
 801562e:	9304      	str	r3, [sp, #16]
 8015630:	46a2      	mov	sl, r4
 8015632:	e7d2      	b.n	80155da <_vfiprintf_r+0xe2>
 8015634:	9b03      	ldr	r3, [sp, #12]
 8015636:	1d19      	adds	r1, r3, #4
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	9103      	str	r1, [sp, #12]
 801563c:	2b00      	cmp	r3, #0
 801563e:	bfbb      	ittet	lt
 8015640:	425b      	neglt	r3, r3
 8015642:	f042 0202 	orrlt.w	r2, r2, #2
 8015646:	9307      	strge	r3, [sp, #28]
 8015648:	9307      	strlt	r3, [sp, #28]
 801564a:	bfb8      	it	lt
 801564c:	9204      	strlt	r2, [sp, #16]
 801564e:	7823      	ldrb	r3, [r4, #0]
 8015650:	2b2e      	cmp	r3, #46	; 0x2e
 8015652:	d10c      	bne.n	801566e <_vfiprintf_r+0x176>
 8015654:	7863      	ldrb	r3, [r4, #1]
 8015656:	2b2a      	cmp	r3, #42	; 0x2a
 8015658:	d135      	bne.n	80156c6 <_vfiprintf_r+0x1ce>
 801565a:	9b03      	ldr	r3, [sp, #12]
 801565c:	1d1a      	adds	r2, r3, #4
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	9203      	str	r2, [sp, #12]
 8015662:	2b00      	cmp	r3, #0
 8015664:	bfb8      	it	lt
 8015666:	f04f 33ff 	movlt.w	r3, #4294967295
 801566a:	3402      	adds	r4, #2
 801566c:	9305      	str	r3, [sp, #20]
 801566e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015754 <_vfiprintf_r+0x25c>
 8015672:	7821      	ldrb	r1, [r4, #0]
 8015674:	2203      	movs	r2, #3
 8015676:	4650      	mov	r0, sl
 8015678:	f7ea fdb2 	bl	80001e0 <memchr>
 801567c:	b140      	cbz	r0, 8015690 <_vfiprintf_r+0x198>
 801567e:	2340      	movs	r3, #64	; 0x40
 8015680:	eba0 000a 	sub.w	r0, r0, sl
 8015684:	fa03 f000 	lsl.w	r0, r3, r0
 8015688:	9b04      	ldr	r3, [sp, #16]
 801568a:	4303      	orrs	r3, r0
 801568c:	3401      	adds	r4, #1
 801568e:	9304      	str	r3, [sp, #16]
 8015690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015694:	482c      	ldr	r0, [pc, #176]	; (8015748 <_vfiprintf_r+0x250>)
 8015696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801569a:	2206      	movs	r2, #6
 801569c:	f7ea fda0 	bl	80001e0 <memchr>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d03f      	beq.n	8015724 <_vfiprintf_r+0x22c>
 80156a4:	4b29      	ldr	r3, [pc, #164]	; (801574c <_vfiprintf_r+0x254>)
 80156a6:	bb1b      	cbnz	r3, 80156f0 <_vfiprintf_r+0x1f8>
 80156a8:	9b03      	ldr	r3, [sp, #12]
 80156aa:	3307      	adds	r3, #7
 80156ac:	f023 0307 	bic.w	r3, r3, #7
 80156b0:	3308      	adds	r3, #8
 80156b2:	9303      	str	r3, [sp, #12]
 80156b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156b6:	443b      	add	r3, r7
 80156b8:	9309      	str	r3, [sp, #36]	; 0x24
 80156ba:	e767      	b.n	801558c <_vfiprintf_r+0x94>
 80156bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80156c0:	460c      	mov	r4, r1
 80156c2:	2001      	movs	r0, #1
 80156c4:	e7a5      	b.n	8015612 <_vfiprintf_r+0x11a>
 80156c6:	2300      	movs	r3, #0
 80156c8:	3401      	adds	r4, #1
 80156ca:	9305      	str	r3, [sp, #20]
 80156cc:	4619      	mov	r1, r3
 80156ce:	f04f 0c0a 	mov.w	ip, #10
 80156d2:	4620      	mov	r0, r4
 80156d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156d8:	3a30      	subs	r2, #48	; 0x30
 80156da:	2a09      	cmp	r2, #9
 80156dc:	d903      	bls.n	80156e6 <_vfiprintf_r+0x1ee>
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d0c5      	beq.n	801566e <_vfiprintf_r+0x176>
 80156e2:	9105      	str	r1, [sp, #20]
 80156e4:	e7c3      	b.n	801566e <_vfiprintf_r+0x176>
 80156e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80156ea:	4604      	mov	r4, r0
 80156ec:	2301      	movs	r3, #1
 80156ee:	e7f0      	b.n	80156d2 <_vfiprintf_r+0x1da>
 80156f0:	ab03      	add	r3, sp, #12
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	462a      	mov	r2, r5
 80156f6:	4b16      	ldr	r3, [pc, #88]	; (8015750 <_vfiprintf_r+0x258>)
 80156f8:	a904      	add	r1, sp, #16
 80156fa:	4630      	mov	r0, r6
 80156fc:	f7fd fe54 	bl	80133a8 <_printf_float>
 8015700:	4607      	mov	r7, r0
 8015702:	1c78      	adds	r0, r7, #1
 8015704:	d1d6      	bne.n	80156b4 <_vfiprintf_r+0x1bc>
 8015706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015708:	07d9      	lsls	r1, r3, #31
 801570a:	d405      	bmi.n	8015718 <_vfiprintf_r+0x220>
 801570c:	89ab      	ldrh	r3, [r5, #12]
 801570e:	059a      	lsls	r2, r3, #22
 8015710:	d402      	bmi.n	8015718 <_vfiprintf_r+0x220>
 8015712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015714:	f7ff f9d0 	bl	8014ab8 <__retarget_lock_release_recursive>
 8015718:	89ab      	ldrh	r3, [r5, #12]
 801571a:	065b      	lsls	r3, r3, #25
 801571c:	f53f af12 	bmi.w	8015544 <_vfiprintf_r+0x4c>
 8015720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015722:	e711      	b.n	8015548 <_vfiprintf_r+0x50>
 8015724:	ab03      	add	r3, sp, #12
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	462a      	mov	r2, r5
 801572a:	4b09      	ldr	r3, [pc, #36]	; (8015750 <_vfiprintf_r+0x258>)
 801572c:	a904      	add	r1, sp, #16
 801572e:	4630      	mov	r0, r6
 8015730:	f7fe f8de 	bl	80138f0 <_printf_i>
 8015734:	e7e4      	b.n	8015700 <_vfiprintf_r+0x208>
 8015736:	bf00      	nop
 8015738:	0801aba0 	.word	0x0801aba0
 801573c:	0801abc0 	.word	0x0801abc0
 8015740:	0801ab80 	.word	0x0801ab80
 8015744:	0801ad3c 	.word	0x0801ad3c
 8015748:	0801ad46 	.word	0x0801ad46
 801574c:	080133a9 	.word	0x080133a9
 8015750:	080154d3 	.word	0x080154d3
 8015754:	0801ad42 	.word	0x0801ad42

08015758 <__sread>:
 8015758:	b510      	push	{r4, lr}
 801575a:	460c      	mov	r4, r1
 801575c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015760:	f000 fac0 	bl	8015ce4 <_read_r>
 8015764:	2800      	cmp	r0, #0
 8015766:	bfab      	itete	ge
 8015768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801576a:	89a3      	ldrhlt	r3, [r4, #12]
 801576c:	181b      	addge	r3, r3, r0
 801576e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015772:	bfac      	ite	ge
 8015774:	6563      	strge	r3, [r4, #84]	; 0x54
 8015776:	81a3      	strhlt	r3, [r4, #12]
 8015778:	bd10      	pop	{r4, pc}

0801577a <__swrite>:
 801577a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801577e:	461f      	mov	r7, r3
 8015780:	898b      	ldrh	r3, [r1, #12]
 8015782:	05db      	lsls	r3, r3, #23
 8015784:	4605      	mov	r5, r0
 8015786:	460c      	mov	r4, r1
 8015788:	4616      	mov	r6, r2
 801578a:	d505      	bpl.n	8015798 <__swrite+0x1e>
 801578c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015790:	2302      	movs	r3, #2
 8015792:	2200      	movs	r2, #0
 8015794:	f000 f9f8 	bl	8015b88 <_lseek_r>
 8015798:	89a3      	ldrh	r3, [r4, #12]
 801579a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801579e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80157a2:	81a3      	strh	r3, [r4, #12]
 80157a4:	4632      	mov	r2, r6
 80157a6:	463b      	mov	r3, r7
 80157a8:	4628      	mov	r0, r5
 80157aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157ae:	f000 b869 	b.w	8015884 <_write_r>

080157b2 <__sseek>:
 80157b2:	b510      	push	{r4, lr}
 80157b4:	460c      	mov	r4, r1
 80157b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157ba:	f000 f9e5 	bl	8015b88 <_lseek_r>
 80157be:	1c43      	adds	r3, r0, #1
 80157c0:	89a3      	ldrh	r3, [r4, #12]
 80157c2:	bf15      	itete	ne
 80157c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80157c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80157ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80157ce:	81a3      	strheq	r3, [r4, #12]
 80157d0:	bf18      	it	ne
 80157d2:	81a3      	strhne	r3, [r4, #12]
 80157d4:	bd10      	pop	{r4, pc}

080157d6 <__sclose>:
 80157d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157da:	f000 b8f1 	b.w	80159c0 <_close_r>
	...

080157e0 <__swbuf_r>:
 80157e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157e2:	460e      	mov	r6, r1
 80157e4:	4614      	mov	r4, r2
 80157e6:	4605      	mov	r5, r0
 80157e8:	b118      	cbz	r0, 80157f2 <__swbuf_r+0x12>
 80157ea:	6983      	ldr	r3, [r0, #24]
 80157ec:	b90b      	cbnz	r3, 80157f2 <__swbuf_r+0x12>
 80157ee:	f7ff f8bf 	bl	8014970 <__sinit>
 80157f2:	4b21      	ldr	r3, [pc, #132]	; (8015878 <__swbuf_r+0x98>)
 80157f4:	429c      	cmp	r4, r3
 80157f6:	d12b      	bne.n	8015850 <__swbuf_r+0x70>
 80157f8:	686c      	ldr	r4, [r5, #4]
 80157fa:	69a3      	ldr	r3, [r4, #24]
 80157fc:	60a3      	str	r3, [r4, #8]
 80157fe:	89a3      	ldrh	r3, [r4, #12]
 8015800:	071a      	lsls	r2, r3, #28
 8015802:	d52f      	bpl.n	8015864 <__swbuf_r+0x84>
 8015804:	6923      	ldr	r3, [r4, #16]
 8015806:	b36b      	cbz	r3, 8015864 <__swbuf_r+0x84>
 8015808:	6923      	ldr	r3, [r4, #16]
 801580a:	6820      	ldr	r0, [r4, #0]
 801580c:	1ac0      	subs	r0, r0, r3
 801580e:	6963      	ldr	r3, [r4, #20]
 8015810:	b2f6      	uxtb	r6, r6
 8015812:	4283      	cmp	r3, r0
 8015814:	4637      	mov	r7, r6
 8015816:	dc04      	bgt.n	8015822 <__swbuf_r+0x42>
 8015818:	4621      	mov	r1, r4
 801581a:	4628      	mov	r0, r5
 801581c:	f000 f966 	bl	8015aec <_fflush_r>
 8015820:	bb30      	cbnz	r0, 8015870 <__swbuf_r+0x90>
 8015822:	68a3      	ldr	r3, [r4, #8]
 8015824:	3b01      	subs	r3, #1
 8015826:	60a3      	str	r3, [r4, #8]
 8015828:	6823      	ldr	r3, [r4, #0]
 801582a:	1c5a      	adds	r2, r3, #1
 801582c:	6022      	str	r2, [r4, #0]
 801582e:	701e      	strb	r6, [r3, #0]
 8015830:	6963      	ldr	r3, [r4, #20]
 8015832:	3001      	adds	r0, #1
 8015834:	4283      	cmp	r3, r0
 8015836:	d004      	beq.n	8015842 <__swbuf_r+0x62>
 8015838:	89a3      	ldrh	r3, [r4, #12]
 801583a:	07db      	lsls	r3, r3, #31
 801583c:	d506      	bpl.n	801584c <__swbuf_r+0x6c>
 801583e:	2e0a      	cmp	r6, #10
 8015840:	d104      	bne.n	801584c <__swbuf_r+0x6c>
 8015842:	4621      	mov	r1, r4
 8015844:	4628      	mov	r0, r5
 8015846:	f000 f951 	bl	8015aec <_fflush_r>
 801584a:	b988      	cbnz	r0, 8015870 <__swbuf_r+0x90>
 801584c:	4638      	mov	r0, r7
 801584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015850:	4b0a      	ldr	r3, [pc, #40]	; (801587c <__swbuf_r+0x9c>)
 8015852:	429c      	cmp	r4, r3
 8015854:	d101      	bne.n	801585a <__swbuf_r+0x7a>
 8015856:	68ac      	ldr	r4, [r5, #8]
 8015858:	e7cf      	b.n	80157fa <__swbuf_r+0x1a>
 801585a:	4b09      	ldr	r3, [pc, #36]	; (8015880 <__swbuf_r+0xa0>)
 801585c:	429c      	cmp	r4, r3
 801585e:	bf08      	it	eq
 8015860:	68ec      	ldreq	r4, [r5, #12]
 8015862:	e7ca      	b.n	80157fa <__swbuf_r+0x1a>
 8015864:	4621      	mov	r1, r4
 8015866:	4628      	mov	r0, r5
 8015868:	f000 f81e 	bl	80158a8 <__swsetup_r>
 801586c:	2800      	cmp	r0, #0
 801586e:	d0cb      	beq.n	8015808 <__swbuf_r+0x28>
 8015870:	f04f 37ff 	mov.w	r7, #4294967295
 8015874:	e7ea      	b.n	801584c <__swbuf_r+0x6c>
 8015876:	bf00      	nop
 8015878:	0801aba0 	.word	0x0801aba0
 801587c:	0801abc0 	.word	0x0801abc0
 8015880:	0801ab80 	.word	0x0801ab80

08015884 <_write_r>:
 8015884:	b538      	push	{r3, r4, r5, lr}
 8015886:	4d07      	ldr	r5, [pc, #28]	; (80158a4 <_write_r+0x20>)
 8015888:	4604      	mov	r4, r0
 801588a:	4608      	mov	r0, r1
 801588c:	4611      	mov	r1, r2
 801588e:	2200      	movs	r2, #0
 8015890:	602a      	str	r2, [r5, #0]
 8015892:	461a      	mov	r2, r3
 8015894:	f7ec faab 	bl	8001dee <_write>
 8015898:	1c43      	adds	r3, r0, #1
 801589a:	d102      	bne.n	80158a2 <_write_r+0x1e>
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	b103      	cbz	r3, 80158a2 <_write_r+0x1e>
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	bd38      	pop	{r3, r4, r5, pc}
 80158a4:	2001e794 	.word	0x2001e794

080158a8 <__swsetup_r>:
 80158a8:	4b32      	ldr	r3, [pc, #200]	; (8015974 <__swsetup_r+0xcc>)
 80158aa:	b570      	push	{r4, r5, r6, lr}
 80158ac:	681d      	ldr	r5, [r3, #0]
 80158ae:	4606      	mov	r6, r0
 80158b0:	460c      	mov	r4, r1
 80158b2:	b125      	cbz	r5, 80158be <__swsetup_r+0x16>
 80158b4:	69ab      	ldr	r3, [r5, #24]
 80158b6:	b913      	cbnz	r3, 80158be <__swsetup_r+0x16>
 80158b8:	4628      	mov	r0, r5
 80158ba:	f7ff f859 	bl	8014970 <__sinit>
 80158be:	4b2e      	ldr	r3, [pc, #184]	; (8015978 <__swsetup_r+0xd0>)
 80158c0:	429c      	cmp	r4, r3
 80158c2:	d10f      	bne.n	80158e4 <__swsetup_r+0x3c>
 80158c4:	686c      	ldr	r4, [r5, #4]
 80158c6:	89a3      	ldrh	r3, [r4, #12]
 80158c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80158cc:	0719      	lsls	r1, r3, #28
 80158ce:	d42c      	bmi.n	801592a <__swsetup_r+0x82>
 80158d0:	06dd      	lsls	r5, r3, #27
 80158d2:	d411      	bmi.n	80158f8 <__swsetup_r+0x50>
 80158d4:	2309      	movs	r3, #9
 80158d6:	6033      	str	r3, [r6, #0]
 80158d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80158dc:	81a3      	strh	r3, [r4, #12]
 80158de:	f04f 30ff 	mov.w	r0, #4294967295
 80158e2:	e03e      	b.n	8015962 <__swsetup_r+0xba>
 80158e4:	4b25      	ldr	r3, [pc, #148]	; (801597c <__swsetup_r+0xd4>)
 80158e6:	429c      	cmp	r4, r3
 80158e8:	d101      	bne.n	80158ee <__swsetup_r+0x46>
 80158ea:	68ac      	ldr	r4, [r5, #8]
 80158ec:	e7eb      	b.n	80158c6 <__swsetup_r+0x1e>
 80158ee:	4b24      	ldr	r3, [pc, #144]	; (8015980 <__swsetup_r+0xd8>)
 80158f0:	429c      	cmp	r4, r3
 80158f2:	bf08      	it	eq
 80158f4:	68ec      	ldreq	r4, [r5, #12]
 80158f6:	e7e6      	b.n	80158c6 <__swsetup_r+0x1e>
 80158f8:	0758      	lsls	r0, r3, #29
 80158fa:	d512      	bpl.n	8015922 <__swsetup_r+0x7a>
 80158fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158fe:	b141      	cbz	r1, 8015912 <__swsetup_r+0x6a>
 8015900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015904:	4299      	cmp	r1, r3
 8015906:	d002      	beq.n	801590e <__swsetup_r+0x66>
 8015908:	4630      	mov	r0, r6
 801590a:	f7fd fc03 	bl	8013114 <_free_r>
 801590e:	2300      	movs	r3, #0
 8015910:	6363      	str	r3, [r4, #52]	; 0x34
 8015912:	89a3      	ldrh	r3, [r4, #12]
 8015914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015918:	81a3      	strh	r3, [r4, #12]
 801591a:	2300      	movs	r3, #0
 801591c:	6063      	str	r3, [r4, #4]
 801591e:	6923      	ldr	r3, [r4, #16]
 8015920:	6023      	str	r3, [r4, #0]
 8015922:	89a3      	ldrh	r3, [r4, #12]
 8015924:	f043 0308 	orr.w	r3, r3, #8
 8015928:	81a3      	strh	r3, [r4, #12]
 801592a:	6923      	ldr	r3, [r4, #16]
 801592c:	b94b      	cbnz	r3, 8015942 <__swsetup_r+0x9a>
 801592e:	89a3      	ldrh	r3, [r4, #12]
 8015930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015938:	d003      	beq.n	8015942 <__swsetup_r+0x9a>
 801593a:	4621      	mov	r1, r4
 801593c:	4630      	mov	r0, r6
 801593e:	f000 f959 	bl	8015bf4 <__smakebuf_r>
 8015942:	89a0      	ldrh	r0, [r4, #12]
 8015944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015948:	f010 0301 	ands.w	r3, r0, #1
 801594c:	d00a      	beq.n	8015964 <__swsetup_r+0xbc>
 801594e:	2300      	movs	r3, #0
 8015950:	60a3      	str	r3, [r4, #8]
 8015952:	6963      	ldr	r3, [r4, #20]
 8015954:	425b      	negs	r3, r3
 8015956:	61a3      	str	r3, [r4, #24]
 8015958:	6923      	ldr	r3, [r4, #16]
 801595a:	b943      	cbnz	r3, 801596e <__swsetup_r+0xc6>
 801595c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015960:	d1ba      	bne.n	80158d8 <__swsetup_r+0x30>
 8015962:	bd70      	pop	{r4, r5, r6, pc}
 8015964:	0781      	lsls	r1, r0, #30
 8015966:	bf58      	it	pl
 8015968:	6963      	ldrpl	r3, [r4, #20]
 801596a:	60a3      	str	r3, [r4, #8]
 801596c:	e7f4      	b.n	8015958 <__swsetup_r+0xb0>
 801596e:	2000      	movs	r0, #0
 8015970:	e7f7      	b.n	8015962 <__swsetup_r+0xba>
 8015972:	bf00      	nop
 8015974:	20000090 	.word	0x20000090
 8015978:	0801aba0 	.word	0x0801aba0
 801597c:	0801abc0 	.word	0x0801abc0
 8015980:	0801ab80 	.word	0x0801ab80

08015984 <__assert_func>:
 8015984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015986:	4614      	mov	r4, r2
 8015988:	461a      	mov	r2, r3
 801598a:	4b09      	ldr	r3, [pc, #36]	; (80159b0 <__assert_func+0x2c>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	4605      	mov	r5, r0
 8015990:	68d8      	ldr	r0, [r3, #12]
 8015992:	b14c      	cbz	r4, 80159a8 <__assert_func+0x24>
 8015994:	4b07      	ldr	r3, [pc, #28]	; (80159b4 <__assert_func+0x30>)
 8015996:	9100      	str	r1, [sp, #0]
 8015998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801599c:	4906      	ldr	r1, [pc, #24]	; (80159b8 <__assert_func+0x34>)
 801599e:	462b      	mov	r3, r5
 80159a0:	f000 f8e0 	bl	8015b64 <fiprintf>
 80159a4:	f000 f9bd 	bl	8015d22 <abort>
 80159a8:	4b04      	ldr	r3, [pc, #16]	; (80159bc <__assert_func+0x38>)
 80159aa:	461c      	mov	r4, r3
 80159ac:	e7f3      	b.n	8015996 <__assert_func+0x12>
 80159ae:	bf00      	nop
 80159b0:	20000090 	.word	0x20000090
 80159b4:	0801ad4d 	.word	0x0801ad4d
 80159b8:	0801ad5a 	.word	0x0801ad5a
 80159bc:	0801ad88 	.word	0x0801ad88

080159c0 <_close_r>:
 80159c0:	b538      	push	{r3, r4, r5, lr}
 80159c2:	4d06      	ldr	r5, [pc, #24]	; (80159dc <_close_r+0x1c>)
 80159c4:	2300      	movs	r3, #0
 80159c6:	4604      	mov	r4, r0
 80159c8:	4608      	mov	r0, r1
 80159ca:	602b      	str	r3, [r5, #0]
 80159cc:	f7ec fa2b 	bl	8001e26 <_close>
 80159d0:	1c43      	adds	r3, r0, #1
 80159d2:	d102      	bne.n	80159da <_close_r+0x1a>
 80159d4:	682b      	ldr	r3, [r5, #0]
 80159d6:	b103      	cbz	r3, 80159da <_close_r+0x1a>
 80159d8:	6023      	str	r3, [r4, #0]
 80159da:	bd38      	pop	{r3, r4, r5, pc}
 80159dc:	2001e794 	.word	0x2001e794

080159e0 <__sflush_r>:
 80159e0:	898a      	ldrh	r2, [r1, #12]
 80159e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159e6:	4605      	mov	r5, r0
 80159e8:	0710      	lsls	r0, r2, #28
 80159ea:	460c      	mov	r4, r1
 80159ec:	d458      	bmi.n	8015aa0 <__sflush_r+0xc0>
 80159ee:	684b      	ldr	r3, [r1, #4]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	dc05      	bgt.n	8015a00 <__sflush_r+0x20>
 80159f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	dc02      	bgt.n	8015a00 <__sflush_r+0x20>
 80159fa:	2000      	movs	r0, #0
 80159fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a02:	2e00      	cmp	r6, #0
 8015a04:	d0f9      	beq.n	80159fa <__sflush_r+0x1a>
 8015a06:	2300      	movs	r3, #0
 8015a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a0c:	682f      	ldr	r7, [r5, #0]
 8015a0e:	602b      	str	r3, [r5, #0]
 8015a10:	d032      	beq.n	8015a78 <__sflush_r+0x98>
 8015a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a14:	89a3      	ldrh	r3, [r4, #12]
 8015a16:	075a      	lsls	r2, r3, #29
 8015a18:	d505      	bpl.n	8015a26 <__sflush_r+0x46>
 8015a1a:	6863      	ldr	r3, [r4, #4]
 8015a1c:	1ac0      	subs	r0, r0, r3
 8015a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a20:	b10b      	cbz	r3, 8015a26 <__sflush_r+0x46>
 8015a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015a24:	1ac0      	subs	r0, r0, r3
 8015a26:	2300      	movs	r3, #0
 8015a28:	4602      	mov	r2, r0
 8015a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a2c:	6a21      	ldr	r1, [r4, #32]
 8015a2e:	4628      	mov	r0, r5
 8015a30:	47b0      	blx	r6
 8015a32:	1c43      	adds	r3, r0, #1
 8015a34:	89a3      	ldrh	r3, [r4, #12]
 8015a36:	d106      	bne.n	8015a46 <__sflush_r+0x66>
 8015a38:	6829      	ldr	r1, [r5, #0]
 8015a3a:	291d      	cmp	r1, #29
 8015a3c:	d82c      	bhi.n	8015a98 <__sflush_r+0xb8>
 8015a3e:	4a2a      	ldr	r2, [pc, #168]	; (8015ae8 <__sflush_r+0x108>)
 8015a40:	40ca      	lsrs	r2, r1
 8015a42:	07d6      	lsls	r6, r2, #31
 8015a44:	d528      	bpl.n	8015a98 <__sflush_r+0xb8>
 8015a46:	2200      	movs	r2, #0
 8015a48:	6062      	str	r2, [r4, #4]
 8015a4a:	04d9      	lsls	r1, r3, #19
 8015a4c:	6922      	ldr	r2, [r4, #16]
 8015a4e:	6022      	str	r2, [r4, #0]
 8015a50:	d504      	bpl.n	8015a5c <__sflush_r+0x7c>
 8015a52:	1c42      	adds	r2, r0, #1
 8015a54:	d101      	bne.n	8015a5a <__sflush_r+0x7a>
 8015a56:	682b      	ldr	r3, [r5, #0]
 8015a58:	b903      	cbnz	r3, 8015a5c <__sflush_r+0x7c>
 8015a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8015a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a5e:	602f      	str	r7, [r5, #0]
 8015a60:	2900      	cmp	r1, #0
 8015a62:	d0ca      	beq.n	80159fa <__sflush_r+0x1a>
 8015a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a68:	4299      	cmp	r1, r3
 8015a6a:	d002      	beq.n	8015a72 <__sflush_r+0x92>
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	f7fd fb51 	bl	8013114 <_free_r>
 8015a72:	2000      	movs	r0, #0
 8015a74:	6360      	str	r0, [r4, #52]	; 0x34
 8015a76:	e7c1      	b.n	80159fc <__sflush_r+0x1c>
 8015a78:	6a21      	ldr	r1, [r4, #32]
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	47b0      	blx	r6
 8015a80:	1c41      	adds	r1, r0, #1
 8015a82:	d1c7      	bne.n	8015a14 <__sflush_r+0x34>
 8015a84:	682b      	ldr	r3, [r5, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d0c4      	beq.n	8015a14 <__sflush_r+0x34>
 8015a8a:	2b1d      	cmp	r3, #29
 8015a8c:	d001      	beq.n	8015a92 <__sflush_r+0xb2>
 8015a8e:	2b16      	cmp	r3, #22
 8015a90:	d101      	bne.n	8015a96 <__sflush_r+0xb6>
 8015a92:	602f      	str	r7, [r5, #0]
 8015a94:	e7b1      	b.n	80159fa <__sflush_r+0x1a>
 8015a96:	89a3      	ldrh	r3, [r4, #12]
 8015a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a9c:	81a3      	strh	r3, [r4, #12]
 8015a9e:	e7ad      	b.n	80159fc <__sflush_r+0x1c>
 8015aa0:	690f      	ldr	r7, [r1, #16]
 8015aa2:	2f00      	cmp	r7, #0
 8015aa4:	d0a9      	beq.n	80159fa <__sflush_r+0x1a>
 8015aa6:	0793      	lsls	r3, r2, #30
 8015aa8:	680e      	ldr	r6, [r1, #0]
 8015aaa:	bf08      	it	eq
 8015aac:	694b      	ldreq	r3, [r1, #20]
 8015aae:	600f      	str	r7, [r1, #0]
 8015ab0:	bf18      	it	ne
 8015ab2:	2300      	movne	r3, #0
 8015ab4:	eba6 0807 	sub.w	r8, r6, r7
 8015ab8:	608b      	str	r3, [r1, #8]
 8015aba:	f1b8 0f00 	cmp.w	r8, #0
 8015abe:	dd9c      	ble.n	80159fa <__sflush_r+0x1a>
 8015ac0:	6a21      	ldr	r1, [r4, #32]
 8015ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ac4:	4643      	mov	r3, r8
 8015ac6:	463a      	mov	r2, r7
 8015ac8:	4628      	mov	r0, r5
 8015aca:	47b0      	blx	r6
 8015acc:	2800      	cmp	r0, #0
 8015ace:	dc06      	bgt.n	8015ade <__sflush_r+0xfe>
 8015ad0:	89a3      	ldrh	r3, [r4, #12]
 8015ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ad6:	81a3      	strh	r3, [r4, #12]
 8015ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8015adc:	e78e      	b.n	80159fc <__sflush_r+0x1c>
 8015ade:	4407      	add	r7, r0
 8015ae0:	eba8 0800 	sub.w	r8, r8, r0
 8015ae4:	e7e9      	b.n	8015aba <__sflush_r+0xda>
 8015ae6:	bf00      	nop
 8015ae8:	20400001 	.word	0x20400001

08015aec <_fflush_r>:
 8015aec:	b538      	push	{r3, r4, r5, lr}
 8015aee:	690b      	ldr	r3, [r1, #16]
 8015af0:	4605      	mov	r5, r0
 8015af2:	460c      	mov	r4, r1
 8015af4:	b913      	cbnz	r3, 8015afc <_fflush_r+0x10>
 8015af6:	2500      	movs	r5, #0
 8015af8:	4628      	mov	r0, r5
 8015afa:	bd38      	pop	{r3, r4, r5, pc}
 8015afc:	b118      	cbz	r0, 8015b06 <_fflush_r+0x1a>
 8015afe:	6983      	ldr	r3, [r0, #24]
 8015b00:	b90b      	cbnz	r3, 8015b06 <_fflush_r+0x1a>
 8015b02:	f7fe ff35 	bl	8014970 <__sinit>
 8015b06:	4b14      	ldr	r3, [pc, #80]	; (8015b58 <_fflush_r+0x6c>)
 8015b08:	429c      	cmp	r4, r3
 8015b0a:	d11b      	bne.n	8015b44 <_fflush_r+0x58>
 8015b0c:	686c      	ldr	r4, [r5, #4]
 8015b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d0ef      	beq.n	8015af6 <_fflush_r+0xa>
 8015b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015b18:	07d0      	lsls	r0, r2, #31
 8015b1a:	d404      	bmi.n	8015b26 <_fflush_r+0x3a>
 8015b1c:	0599      	lsls	r1, r3, #22
 8015b1e:	d402      	bmi.n	8015b26 <_fflush_r+0x3a>
 8015b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b22:	f7fe ffc8 	bl	8014ab6 <__retarget_lock_acquire_recursive>
 8015b26:	4628      	mov	r0, r5
 8015b28:	4621      	mov	r1, r4
 8015b2a:	f7ff ff59 	bl	80159e0 <__sflush_r>
 8015b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b30:	07da      	lsls	r2, r3, #31
 8015b32:	4605      	mov	r5, r0
 8015b34:	d4e0      	bmi.n	8015af8 <_fflush_r+0xc>
 8015b36:	89a3      	ldrh	r3, [r4, #12]
 8015b38:	059b      	lsls	r3, r3, #22
 8015b3a:	d4dd      	bmi.n	8015af8 <_fflush_r+0xc>
 8015b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b3e:	f7fe ffbb 	bl	8014ab8 <__retarget_lock_release_recursive>
 8015b42:	e7d9      	b.n	8015af8 <_fflush_r+0xc>
 8015b44:	4b05      	ldr	r3, [pc, #20]	; (8015b5c <_fflush_r+0x70>)
 8015b46:	429c      	cmp	r4, r3
 8015b48:	d101      	bne.n	8015b4e <_fflush_r+0x62>
 8015b4a:	68ac      	ldr	r4, [r5, #8]
 8015b4c:	e7df      	b.n	8015b0e <_fflush_r+0x22>
 8015b4e:	4b04      	ldr	r3, [pc, #16]	; (8015b60 <_fflush_r+0x74>)
 8015b50:	429c      	cmp	r4, r3
 8015b52:	bf08      	it	eq
 8015b54:	68ec      	ldreq	r4, [r5, #12]
 8015b56:	e7da      	b.n	8015b0e <_fflush_r+0x22>
 8015b58:	0801aba0 	.word	0x0801aba0
 8015b5c:	0801abc0 	.word	0x0801abc0
 8015b60:	0801ab80 	.word	0x0801ab80

08015b64 <fiprintf>:
 8015b64:	b40e      	push	{r1, r2, r3}
 8015b66:	b503      	push	{r0, r1, lr}
 8015b68:	4601      	mov	r1, r0
 8015b6a:	ab03      	add	r3, sp, #12
 8015b6c:	4805      	ldr	r0, [pc, #20]	; (8015b84 <fiprintf+0x20>)
 8015b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b72:	6800      	ldr	r0, [r0, #0]
 8015b74:	9301      	str	r3, [sp, #4]
 8015b76:	f7ff fcbf 	bl	80154f8 <_vfiprintf_r>
 8015b7a:	b002      	add	sp, #8
 8015b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b80:	b003      	add	sp, #12
 8015b82:	4770      	bx	lr
 8015b84:	20000090 	.word	0x20000090

08015b88 <_lseek_r>:
 8015b88:	b538      	push	{r3, r4, r5, lr}
 8015b8a:	4d07      	ldr	r5, [pc, #28]	; (8015ba8 <_lseek_r+0x20>)
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	4608      	mov	r0, r1
 8015b90:	4611      	mov	r1, r2
 8015b92:	2200      	movs	r2, #0
 8015b94:	602a      	str	r2, [r5, #0]
 8015b96:	461a      	mov	r2, r3
 8015b98:	f7ec f96c 	bl	8001e74 <_lseek>
 8015b9c:	1c43      	adds	r3, r0, #1
 8015b9e:	d102      	bne.n	8015ba6 <_lseek_r+0x1e>
 8015ba0:	682b      	ldr	r3, [r5, #0]
 8015ba2:	b103      	cbz	r3, 8015ba6 <_lseek_r+0x1e>
 8015ba4:	6023      	str	r3, [r4, #0]
 8015ba6:	bd38      	pop	{r3, r4, r5, pc}
 8015ba8:	2001e794 	.word	0x2001e794

08015bac <__swhatbuf_r>:
 8015bac:	b570      	push	{r4, r5, r6, lr}
 8015bae:	460e      	mov	r6, r1
 8015bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bb4:	2900      	cmp	r1, #0
 8015bb6:	b096      	sub	sp, #88	; 0x58
 8015bb8:	4614      	mov	r4, r2
 8015bba:	461d      	mov	r5, r3
 8015bbc:	da07      	bge.n	8015bce <__swhatbuf_r+0x22>
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	602b      	str	r3, [r5, #0]
 8015bc2:	89b3      	ldrh	r3, [r6, #12]
 8015bc4:	061a      	lsls	r2, r3, #24
 8015bc6:	d410      	bmi.n	8015bea <__swhatbuf_r+0x3e>
 8015bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015bcc:	e00e      	b.n	8015bec <__swhatbuf_r+0x40>
 8015bce:	466a      	mov	r2, sp
 8015bd0:	f000 f8ae 	bl	8015d30 <_fstat_r>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	dbf2      	blt.n	8015bbe <__swhatbuf_r+0x12>
 8015bd8:	9a01      	ldr	r2, [sp, #4]
 8015bda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015bde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015be2:	425a      	negs	r2, r3
 8015be4:	415a      	adcs	r2, r3
 8015be6:	602a      	str	r2, [r5, #0]
 8015be8:	e7ee      	b.n	8015bc8 <__swhatbuf_r+0x1c>
 8015bea:	2340      	movs	r3, #64	; 0x40
 8015bec:	2000      	movs	r0, #0
 8015bee:	6023      	str	r3, [r4, #0]
 8015bf0:	b016      	add	sp, #88	; 0x58
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}

08015bf4 <__smakebuf_r>:
 8015bf4:	898b      	ldrh	r3, [r1, #12]
 8015bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015bf8:	079d      	lsls	r5, r3, #30
 8015bfa:	4606      	mov	r6, r0
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	d507      	bpl.n	8015c10 <__smakebuf_r+0x1c>
 8015c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c04:	6023      	str	r3, [r4, #0]
 8015c06:	6123      	str	r3, [r4, #16]
 8015c08:	2301      	movs	r3, #1
 8015c0a:	6163      	str	r3, [r4, #20]
 8015c0c:	b002      	add	sp, #8
 8015c0e:	bd70      	pop	{r4, r5, r6, pc}
 8015c10:	ab01      	add	r3, sp, #4
 8015c12:	466a      	mov	r2, sp
 8015c14:	f7ff ffca 	bl	8015bac <__swhatbuf_r>
 8015c18:	9900      	ldr	r1, [sp, #0]
 8015c1a:	4605      	mov	r5, r0
 8015c1c:	4630      	mov	r0, r6
 8015c1e:	f7fd fac9 	bl	80131b4 <_malloc_r>
 8015c22:	b948      	cbnz	r0, 8015c38 <__smakebuf_r+0x44>
 8015c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c28:	059a      	lsls	r2, r3, #22
 8015c2a:	d4ef      	bmi.n	8015c0c <__smakebuf_r+0x18>
 8015c2c:	f023 0303 	bic.w	r3, r3, #3
 8015c30:	f043 0302 	orr.w	r3, r3, #2
 8015c34:	81a3      	strh	r3, [r4, #12]
 8015c36:	e7e3      	b.n	8015c00 <__smakebuf_r+0xc>
 8015c38:	4b0d      	ldr	r3, [pc, #52]	; (8015c70 <__smakebuf_r+0x7c>)
 8015c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015c3c:	89a3      	ldrh	r3, [r4, #12]
 8015c3e:	6020      	str	r0, [r4, #0]
 8015c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c44:	81a3      	strh	r3, [r4, #12]
 8015c46:	9b00      	ldr	r3, [sp, #0]
 8015c48:	6163      	str	r3, [r4, #20]
 8015c4a:	9b01      	ldr	r3, [sp, #4]
 8015c4c:	6120      	str	r0, [r4, #16]
 8015c4e:	b15b      	cbz	r3, 8015c68 <__smakebuf_r+0x74>
 8015c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c54:	4630      	mov	r0, r6
 8015c56:	f000 f87d 	bl	8015d54 <_isatty_r>
 8015c5a:	b128      	cbz	r0, 8015c68 <__smakebuf_r+0x74>
 8015c5c:	89a3      	ldrh	r3, [r4, #12]
 8015c5e:	f023 0303 	bic.w	r3, r3, #3
 8015c62:	f043 0301 	orr.w	r3, r3, #1
 8015c66:	81a3      	strh	r3, [r4, #12]
 8015c68:	89a0      	ldrh	r0, [r4, #12]
 8015c6a:	4305      	orrs	r5, r0
 8015c6c:	81a5      	strh	r5, [r4, #12]
 8015c6e:	e7cd      	b.n	8015c0c <__smakebuf_r+0x18>
 8015c70:	08014909 	.word	0x08014909

08015c74 <__ascii_mbtowc>:
 8015c74:	b082      	sub	sp, #8
 8015c76:	b901      	cbnz	r1, 8015c7a <__ascii_mbtowc+0x6>
 8015c78:	a901      	add	r1, sp, #4
 8015c7a:	b142      	cbz	r2, 8015c8e <__ascii_mbtowc+0x1a>
 8015c7c:	b14b      	cbz	r3, 8015c92 <__ascii_mbtowc+0x1e>
 8015c7e:	7813      	ldrb	r3, [r2, #0]
 8015c80:	600b      	str	r3, [r1, #0]
 8015c82:	7812      	ldrb	r2, [r2, #0]
 8015c84:	1e10      	subs	r0, r2, #0
 8015c86:	bf18      	it	ne
 8015c88:	2001      	movne	r0, #1
 8015c8a:	b002      	add	sp, #8
 8015c8c:	4770      	bx	lr
 8015c8e:	4610      	mov	r0, r2
 8015c90:	e7fb      	b.n	8015c8a <__ascii_mbtowc+0x16>
 8015c92:	f06f 0001 	mvn.w	r0, #1
 8015c96:	e7f8      	b.n	8015c8a <__ascii_mbtowc+0x16>

08015c98 <_realloc_r>:
 8015c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c9a:	4607      	mov	r7, r0
 8015c9c:	4614      	mov	r4, r2
 8015c9e:	460e      	mov	r6, r1
 8015ca0:	b921      	cbnz	r1, 8015cac <_realloc_r+0x14>
 8015ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015ca6:	4611      	mov	r1, r2
 8015ca8:	f7fd ba84 	b.w	80131b4 <_malloc_r>
 8015cac:	b922      	cbnz	r2, 8015cb8 <_realloc_r+0x20>
 8015cae:	f7fd fa31 	bl	8013114 <_free_r>
 8015cb2:	4625      	mov	r5, r4
 8015cb4:	4628      	mov	r0, r5
 8015cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cb8:	f000 f85c 	bl	8015d74 <_malloc_usable_size_r>
 8015cbc:	42a0      	cmp	r0, r4
 8015cbe:	d20f      	bcs.n	8015ce0 <_realloc_r+0x48>
 8015cc0:	4621      	mov	r1, r4
 8015cc2:	4638      	mov	r0, r7
 8015cc4:	f7fd fa76 	bl	80131b4 <_malloc_r>
 8015cc8:	4605      	mov	r5, r0
 8015cca:	2800      	cmp	r0, #0
 8015ccc:	d0f2      	beq.n	8015cb4 <_realloc_r+0x1c>
 8015cce:	4631      	mov	r1, r6
 8015cd0:	4622      	mov	r2, r4
 8015cd2:	f7fd f9ef 	bl	80130b4 <memcpy>
 8015cd6:	4631      	mov	r1, r6
 8015cd8:	4638      	mov	r0, r7
 8015cda:	f7fd fa1b 	bl	8013114 <_free_r>
 8015cde:	e7e9      	b.n	8015cb4 <_realloc_r+0x1c>
 8015ce0:	4635      	mov	r5, r6
 8015ce2:	e7e7      	b.n	8015cb4 <_realloc_r+0x1c>

08015ce4 <_read_r>:
 8015ce4:	b538      	push	{r3, r4, r5, lr}
 8015ce6:	4d07      	ldr	r5, [pc, #28]	; (8015d04 <_read_r+0x20>)
 8015ce8:	4604      	mov	r4, r0
 8015cea:	4608      	mov	r0, r1
 8015cec:	4611      	mov	r1, r2
 8015cee:	2200      	movs	r2, #0
 8015cf0:	602a      	str	r2, [r5, #0]
 8015cf2:	461a      	mov	r2, r3
 8015cf4:	f7ec f85e 	bl	8001db4 <_read>
 8015cf8:	1c43      	adds	r3, r0, #1
 8015cfa:	d102      	bne.n	8015d02 <_read_r+0x1e>
 8015cfc:	682b      	ldr	r3, [r5, #0]
 8015cfe:	b103      	cbz	r3, 8015d02 <_read_r+0x1e>
 8015d00:	6023      	str	r3, [r4, #0]
 8015d02:	bd38      	pop	{r3, r4, r5, pc}
 8015d04:	2001e794 	.word	0x2001e794

08015d08 <__ascii_wctomb>:
 8015d08:	b149      	cbz	r1, 8015d1e <__ascii_wctomb+0x16>
 8015d0a:	2aff      	cmp	r2, #255	; 0xff
 8015d0c:	bf85      	ittet	hi
 8015d0e:	238a      	movhi	r3, #138	; 0x8a
 8015d10:	6003      	strhi	r3, [r0, #0]
 8015d12:	700a      	strbls	r2, [r1, #0]
 8015d14:	f04f 30ff 	movhi.w	r0, #4294967295
 8015d18:	bf98      	it	ls
 8015d1a:	2001      	movls	r0, #1
 8015d1c:	4770      	bx	lr
 8015d1e:	4608      	mov	r0, r1
 8015d20:	4770      	bx	lr

08015d22 <abort>:
 8015d22:	b508      	push	{r3, lr}
 8015d24:	2006      	movs	r0, #6
 8015d26:	f000 f855 	bl	8015dd4 <raise>
 8015d2a:	2001      	movs	r0, #1
 8015d2c:	f7ec f838 	bl	8001da0 <_exit>

08015d30 <_fstat_r>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4d07      	ldr	r5, [pc, #28]	; (8015d50 <_fstat_r+0x20>)
 8015d34:	2300      	movs	r3, #0
 8015d36:	4604      	mov	r4, r0
 8015d38:	4608      	mov	r0, r1
 8015d3a:	4611      	mov	r1, r2
 8015d3c:	602b      	str	r3, [r5, #0]
 8015d3e:	f7ec f87e 	bl	8001e3e <_fstat>
 8015d42:	1c43      	adds	r3, r0, #1
 8015d44:	d102      	bne.n	8015d4c <_fstat_r+0x1c>
 8015d46:	682b      	ldr	r3, [r5, #0]
 8015d48:	b103      	cbz	r3, 8015d4c <_fstat_r+0x1c>
 8015d4a:	6023      	str	r3, [r4, #0]
 8015d4c:	bd38      	pop	{r3, r4, r5, pc}
 8015d4e:	bf00      	nop
 8015d50:	2001e794 	.word	0x2001e794

08015d54 <_isatty_r>:
 8015d54:	b538      	push	{r3, r4, r5, lr}
 8015d56:	4d06      	ldr	r5, [pc, #24]	; (8015d70 <_isatty_r+0x1c>)
 8015d58:	2300      	movs	r3, #0
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	4608      	mov	r0, r1
 8015d5e:	602b      	str	r3, [r5, #0]
 8015d60:	f7ec f87d 	bl	8001e5e <_isatty>
 8015d64:	1c43      	adds	r3, r0, #1
 8015d66:	d102      	bne.n	8015d6e <_isatty_r+0x1a>
 8015d68:	682b      	ldr	r3, [r5, #0]
 8015d6a:	b103      	cbz	r3, 8015d6e <_isatty_r+0x1a>
 8015d6c:	6023      	str	r3, [r4, #0]
 8015d6e:	bd38      	pop	{r3, r4, r5, pc}
 8015d70:	2001e794 	.word	0x2001e794

08015d74 <_malloc_usable_size_r>:
 8015d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d78:	1f18      	subs	r0, r3, #4
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	bfbc      	itt	lt
 8015d7e:	580b      	ldrlt	r3, [r1, r0]
 8015d80:	18c0      	addlt	r0, r0, r3
 8015d82:	4770      	bx	lr

08015d84 <_raise_r>:
 8015d84:	291f      	cmp	r1, #31
 8015d86:	b538      	push	{r3, r4, r5, lr}
 8015d88:	4604      	mov	r4, r0
 8015d8a:	460d      	mov	r5, r1
 8015d8c:	d904      	bls.n	8015d98 <_raise_r+0x14>
 8015d8e:	2316      	movs	r3, #22
 8015d90:	6003      	str	r3, [r0, #0]
 8015d92:	f04f 30ff 	mov.w	r0, #4294967295
 8015d96:	bd38      	pop	{r3, r4, r5, pc}
 8015d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015d9a:	b112      	cbz	r2, 8015da2 <_raise_r+0x1e>
 8015d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015da0:	b94b      	cbnz	r3, 8015db6 <_raise_r+0x32>
 8015da2:	4620      	mov	r0, r4
 8015da4:	f000 f830 	bl	8015e08 <_getpid_r>
 8015da8:	462a      	mov	r2, r5
 8015daa:	4601      	mov	r1, r0
 8015dac:	4620      	mov	r0, r4
 8015dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015db2:	f000 b817 	b.w	8015de4 <_kill_r>
 8015db6:	2b01      	cmp	r3, #1
 8015db8:	d00a      	beq.n	8015dd0 <_raise_r+0x4c>
 8015dba:	1c59      	adds	r1, r3, #1
 8015dbc:	d103      	bne.n	8015dc6 <_raise_r+0x42>
 8015dbe:	2316      	movs	r3, #22
 8015dc0:	6003      	str	r3, [r0, #0]
 8015dc2:	2001      	movs	r0, #1
 8015dc4:	e7e7      	b.n	8015d96 <_raise_r+0x12>
 8015dc6:	2400      	movs	r4, #0
 8015dc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015dcc:	4628      	mov	r0, r5
 8015dce:	4798      	blx	r3
 8015dd0:	2000      	movs	r0, #0
 8015dd2:	e7e0      	b.n	8015d96 <_raise_r+0x12>

08015dd4 <raise>:
 8015dd4:	4b02      	ldr	r3, [pc, #8]	; (8015de0 <raise+0xc>)
 8015dd6:	4601      	mov	r1, r0
 8015dd8:	6818      	ldr	r0, [r3, #0]
 8015dda:	f7ff bfd3 	b.w	8015d84 <_raise_r>
 8015dde:	bf00      	nop
 8015de0:	20000090 	.word	0x20000090

08015de4 <_kill_r>:
 8015de4:	b538      	push	{r3, r4, r5, lr}
 8015de6:	4d07      	ldr	r5, [pc, #28]	; (8015e04 <_kill_r+0x20>)
 8015de8:	2300      	movs	r3, #0
 8015dea:	4604      	mov	r4, r0
 8015dec:	4608      	mov	r0, r1
 8015dee:	4611      	mov	r1, r2
 8015df0:	602b      	str	r3, [r5, #0]
 8015df2:	f7eb ffc5 	bl	8001d80 <_kill>
 8015df6:	1c43      	adds	r3, r0, #1
 8015df8:	d102      	bne.n	8015e00 <_kill_r+0x1c>
 8015dfa:	682b      	ldr	r3, [r5, #0]
 8015dfc:	b103      	cbz	r3, 8015e00 <_kill_r+0x1c>
 8015dfe:	6023      	str	r3, [r4, #0]
 8015e00:	bd38      	pop	{r3, r4, r5, pc}
 8015e02:	bf00      	nop
 8015e04:	2001e794 	.word	0x2001e794

08015e08 <_getpid_r>:
 8015e08:	f7eb bfb2 	b.w	8001d70 <_getpid>

08015e0c <_init>:
 8015e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e0e:	bf00      	nop
 8015e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e12:	bc08      	pop	{r3}
 8015e14:	469e      	mov	lr, r3
 8015e16:	4770      	bx	lr

08015e18 <_fini>:
 8015e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e1a:	bf00      	nop
 8015e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e1e:	bc08      	pop	{r3}
 8015e20:	469e      	mov	lr, r3
 8015e22:	4770      	bx	lr
