
adcInt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800be80  0800be80  0001be80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2cc  0800c2cc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d4  0800c2d4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d4  0800c2d4  0001c2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d8  0800c2d8  0001c2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00000930  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b2c  20000b2c  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e35f  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042f9  00000000  00000000  0003e58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00042888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  00043c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b58  00000000  00000000  00044e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0fc  00000000  00000000  0006b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9dc4  00000000  00000000  00085a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015f820  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061d0  00000000  00000000  0015f874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be64 	.word	0x0800be64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800be64 	.word	0x0800be64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f5c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f60:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f68:	e000      	b.n	8000f6c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f6a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f9      	beq.n	8000f6a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fef1 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f883 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fa23 	bl	80013e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fa2:	f000 f98d 	bl	80012c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000fa6:	f000 f9b9 	bl	800131c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000faa:	f000 f9e7 	bl	800137c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000fae:	f007 ff31 	bl	8008e14 <MX_USB_HOST_Init>
  MX_ADC3_Init();
 8000fb2:	f000 f933 	bl	800121c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fb6:	f000 f8df 	bl	8001178 <MX_ADC1_Init>


  while (1)
  {

	  HAL_ADC_Start_IT(&hadc3);
 8000fba:	4831      	ldr	r0, [pc, #196]	; (8001080 <main+0xf0>)
 8000fbc:	f000 ffb8 	bl	8001f30 <HAL_ADC_Start_IT>
	  HAL_ADC_Start_IT(&hadc1);
 8000fc0:	4830      	ldr	r0, [pc, #192]	; (8001084 <main+0xf4>)
 8000fc2:	f000 ffb5 	bl	8001f30 <HAL_ADC_Start_IT>

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	482f      	ldr	r0, [pc, #188]	; (8001088 <main+0xf8>)
 8000fcc:	f001 fedf 	bl	8002d8e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000fd0:	2064      	movs	r0, #100	; 0x64
 8000fd2:	f000 ff45 	bl	8001e60 <HAL_Delay>

	  thermValue = 0;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <main+0xfc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	  tempValue = 0;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <main+0x100>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

	  for(int i=0;i<16;i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	e014      	b.n	8001012 <main+0x82>
	  {
		  thermValue += thermArray[i];
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <main+0x104>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <main+0xfc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <main+0xfc>)
 8000ff8:	6013      	str	r3, [r2, #0]
		  tempValue +=tempArray[i];
 8000ffa:	4a27      	ldr	r2, [pc, #156]	; (8001098 <main+0x108>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <main+0x100>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a21      	ldr	r2, [pc, #132]	; (8001090 <main+0x100>)
 800100a:	6013      	str	r3, [r2, #0]
	  for(int i=0;i<16;i++)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	dde7      	ble.n	8000fe8 <main+0x58>
	  }

	  thermValue /= 16;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <main+0xfc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <main+0xfc>)
 8001020:	6013      	str	r3, [r2, #0]
	  tempValue /= 16;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <main+0x100>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <main+0x100>)
 800102a:	6013      	str	r3, [r2, #0]

	  printf("Thermistor value: %ld, Temp: %0.1f", thermValue, approximateTemperatureFloat(thermValue));
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <main+0xfc>)
 800102e:	681c      	ldr	r4, [r3, #0]
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <main+0xfc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fae3 	bl	8001600 <approximateTemperatureFloat>
 800103a:	ee10 3a10 	vmov	r3, s0
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa82 	bl	8000548 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4621      	mov	r1, r4
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <main+0x10c>)
 800104c:	f008 ff40 	bl	8009ed0 <iprintf>
	  printf("    Die value: %ld, Die Temp: %0.1f\n", tempValue, GetDieTemp(tempValue));
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <main+0x100>)
 8001052:	681c      	ldr	r4, [r3, #0]
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <main+0x100>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fb49 	bl	80016f0 <GetDieTemp>
 800105e:	ee10 3a10 	vmov	r3, s0
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa70 	bl	8000548 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4621      	mov	r1, r4
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <main+0x110>)
 8001070:	f008 ff2e 	bl	8009ed0 <iprintf>

	  HAL_Delay(200);
 8001074:	20c8      	movs	r0, #200	; 0xc8
 8001076:	f000 fef3 	bl	8001e60 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800107a:	f007 fef1 	bl	8008e60 <MX_USB_HOST_Process>
	  HAL_ADC_Start_IT(&hadc3);
 800107e:	e79c      	b.n	8000fba <main+0x2a>
 8001080:	20000314 	.word	0x20000314
 8001084:	200002cc 	.word	0x200002cc
 8001088:	40020c00 	.word	0x40020c00
 800108c:	20000218 	.word	0x20000218
 8001090:	2000021c 	.word	0x2000021c
 8001094:	2000028c 	.word	0x2000028c
 8001098:	200003b4 	.word	0x200003b4
 800109c:	0800be80 	.word	0x0800be80
 80010a0:	0800bea4 	.word	0x0800bea4

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 f9f0 	bl	8009498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b28      	ldr	r3, [pc, #160]	; (8001170 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a27      	ldr	r2, [pc, #156]	; (8001170 <SystemClock_Config+0xcc>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <SystemClock_Config+0xcc>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <SystemClock_Config+0xd0>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <SystemClock_Config+0xd0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001100:	2301      	movs	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001114:	2308      	movs	r3, #8
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001118:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001122:	2307      	movs	r3, #7
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f99e 	bl	800546c <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001136:	f000 fb35 	bl	80017a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2302      	movs	r3, #2
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001146:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2105      	movs	r1, #5
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fbff 	bl	800595c <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001164:	f000 fb1e 	bl	80017a4 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_ADC1_Init+0x98>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_ADC1_Init+0xa0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_ADC1_Init+0x98>)
 80011da:	f000 fe65 	bl	8001ea8 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 fade 	bl	80017a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011e8:	2310      	movs	r3, #16
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x98>)
 80011fa:	f001 f8d9 	bl	80023b0 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001204:	f000 face 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002cc 	.word	0x200002cc
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001230:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <MX_ADC3_Init+0x9c>)
 8001232:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001236:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800123a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_ADC3_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_ADC3_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_ADC3_Init+0x98>)
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <MX_ADC3_Init+0xa0>)
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_ADC3_Init+0x98>)
 800126a:	2201      	movs	r2, #1
 800126c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_ADC3_Init+0x98>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_ADC3_Init+0x98>)
 800127e:	f000 fe13 	bl	8001ea8 <HAL_ADC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001288:	f000 fa8c 	bl	80017a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800128c:	230b      	movs	r3, #11
 800128e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_ADC3_Init+0x98>)
 800129e:	f001 f887 	bl	80023b0 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012a8:	f000 fa7c 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000314 	.word	0x20000314
 80012b8:	40012200 	.word	0x40012200
 80012bc:	0f000001 	.word	0x0f000001

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f003 fad1 	bl	80048a4 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001308:	f000 fa4c 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000238 	.word	0x20000238
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_I2S3_Init+0x54>)
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <MX_I2S3_Init+0x58>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_I2S3_Init+0x54>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_I2S3_Init+0x54>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_I2S3_Init+0x54>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <MX_I2S3_Init+0x54>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_I2S3_Init+0x54>)
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <MX_I2S3_Init+0x5c>)
 8001346:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_I2S3_Init+0x54>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_I2S3_Init+0x54>)
 8001350:	2200      	movs	r2, #0
 8001352:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_I2S3_Init+0x54>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_I2S3_Init+0x54>)
 800135c:	f003 fbe6 	bl	8004b2c <HAL_I2S_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001366:	f000 fa1d 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200003f4 	.word	0x200003f4
 8001374:	40003c00 	.word	0x40003c00
 8001378:	00017700 	.word	0x00017700

0800137c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <MX_SPI1_Init+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800138c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_SPI1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013c8:	220a      	movs	r2, #10
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_SPI1_Init+0x64>)
 80013ce:	f004 fded 	bl	8005fac <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d8:	f000 f9e4 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000035c 	.word	0x2000035c
 80013e4:	40013000 	.word	0x40013000

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a71      	ldr	r2, [pc, #452]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b6b      	ldr	r3, [pc, #428]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a6a      	ldr	r2, [pc, #424]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <MX_GPIO_Init+0x1e4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <MX_GPIO_Init+0x1e4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a63      	ldr	r2, [pc, #396]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a5c      	ldr	r2, [pc, #368]	; (80015cc <MX_GPIO_Init+0x1e4>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b56      	ldr	r3, [pc, #344]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a55      	ldr	r2, [pc, #340]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b53      	ldr	r3, [pc, #332]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <MX_GPIO_Init+0x1e4>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <MX_GPIO_Init+0x1e4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2108      	movs	r1, #8
 80014aa:	4849      	ldr	r0, [pc, #292]	; (80015d0 <MX_GPIO_Init+0x1e8>)
 80014ac:	f001 fc56 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2101      	movs	r1, #1
 80014b4:	4847      	ldr	r0, [pc, #284]	; (80015d4 <MX_GPIO_Init+0x1ec>)
 80014b6:	f001 fc51 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ba:	2200      	movs	r2, #0
 80014bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014c0:	4845      	ldr	r0, [pc, #276]	; (80015d8 <MX_GPIO_Init+0x1f0>)
 80014c2:	f001 fc4b 	bl	8002d5c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014c6:	2308      	movs	r3, #8
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	483c      	ldr	r0, [pc, #240]	; (80015d0 <MX_GPIO_Init+0x1e8>)
 80014de:	f001 faa1 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4836      	ldr	r0, [pc, #216]	; (80015d4 <MX_GPIO_Init+0x1ec>)
 80014fa:	f001 fa93 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014fe:	2308      	movs	r3, #8
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800150e:	2305      	movs	r3, #5
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	482e      	ldr	r0, [pc, #184]	; (80015d4 <MX_GPIO_Init+0x1ec>)
 800151a:	f001 fa83 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800151e:	2301      	movs	r3, #1
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001522:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	482a      	ldr	r0, [pc, #168]	; (80015dc <MX_GPIO_Init+0x1f4>)
 8001534:	f001 fa76 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001538:	2304      	movs	r3, #4
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4825      	ldr	r0, [pc, #148]	; (80015e0 <MX_GPIO_Init+0x1f8>)
 800154c:	f001 fa6a 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001562:	2305      	movs	r3, #5
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	481c      	ldr	r0, [pc, #112]	; (80015e0 <MX_GPIO_Init+0x1f8>)
 800156e:	f001 fa59 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001572:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001576:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_GPIO_Init+0x1f0>)
 800158c:	f001 fa4a 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001590:	2320      	movs	r3, #32
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_GPIO_Init+0x1f0>)
 80015a4:	f001 fa3e 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_GPIO_Init+0x1e8>)
 80015be:	f001 fa31 	bl	8002a24 <HAL_GPIO_Init>

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400

080015e4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fca6 	bl	8000f40 <ITM_SendChar>

	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <approximateTemperatureFloat>:
 * @param   The result of an ADC conversion (analogRead) in the range 0 to 4095
 * @return  Temperature in °C (+/- 3.994 °C)
 */

float  approximateTemperatureFloat(unsigned int analogReadValue)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return -0.0732166185636231*analogReadValue+295.737217355;
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7fe ff7b 	bl	8000504 <__aeabi_ui2d>
 800160e:	a30e      	add	r3, pc, #56	; (adr r3, 8001648 <approximateTemperatureFloat+0x48>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe fff0 	bl	80005f8 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	a30b      	add	r3, pc, #44	; (adr r3, 8001650 <approximateTemperatureFloat+0x50>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe fe31 	bl	800028c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fab9 	bl	8000ba8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	ee07 3a90 	vmov	s15, r3
}
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	064124cc 	.word	0x064124cc
 800164c:	bfb2be53 	.word	0xbfb2be53
 8001650:	a46cdc4c 	.word	0xa46cdc4c
 8001654:	40727bcb 	.word	0x40727bcb

08001658 <HAL_ADC_ConvCpltCallback>:
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	static int tempCount = 0;
	static int thermCount = 0;

	if(hadc == &hadc1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d119      	bne.n	800169c <HAL_ADC_ConvCpltCallback+0x44>
	{
		tempArray[tempCount] = HAL_ADC_GetValue(&hadc1);
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_ADC_ConvCpltCallback+0x84>)
 800166a:	681c      	ldr	r4, [r3, #0]
 800166c:	481a      	ldr	r0, [pc, #104]	; (80016d8 <HAL_ADC_ConvCpltCallback+0x80>)
 800166e:	f000 fe7e 	bl	800236e <HAL_ADC_GetValue>
 8001672:	4603      	mov	r3, r0
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001676:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		tempCount++;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_ADC_ConvCpltCallback+0x84>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_ADC_ConvCpltCallback+0x84>)
 8001682:	6013      	str	r3, [r2, #0]
		tempCount%=16;
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_ADC_ConvCpltCallback+0x84>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	425a      	negs	r2, r3
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	f002 020f 	and.w	r2, r2, #15
 8001692:	bf58      	it	pl
 8001694:	4253      	negpl	r3, r2
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_ADC_ConvCpltCallback+0x84>)
 8001698:	6013      	str	r3, [r2, #0]
		thermCount++;
		thermCount%=16;
	}


}
 800169a:	e018      	b.n	80016ce <HAL_ADC_ConvCpltCallback+0x76>
		thermArray[thermCount] = HAL_ADC_GetValue(&hadc3);
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x8c>)
 800169e:	681c      	ldr	r4, [r3, #0]
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <HAL_ADC_ConvCpltCallback+0x90>)
 80016a2:	f000 fe64 	bl	800236e <HAL_ADC_GetValue>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_ADC_ConvCpltCallback+0x94>)
 80016aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		thermCount++;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x8c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x8c>)
 80016b6:	6013      	str	r3, [r2, #0]
		thermCount%=16;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x8c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	425a      	negs	r2, r3
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	f002 020f 	and.w	r2, r2, #15
 80016c6:	bf58      	it	pl
 80016c8:	4253      	negpl	r3, r2
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_ADC_ConvCpltCallback+0x8c>)
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002cc 	.word	0x200002cc
 80016dc:	20000220 	.word	0x20000220
 80016e0:	200003b4 	.word	0x200003b4
 80016e4:	20000224 	.word	0x20000224
 80016e8:	20000314 	.word	0x20000314
 80016ec:	2000028c 	.word	0x2000028c

080016f0 <GetDieTemp>:

float GetDieTemp(uint32_t reading)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
//	– Avg_Slope = average slope of the temperature vs. V SENSE curve (given in mV/°C
//	or µV/°C)
// V 25 = 0.76V from DS8626 Datasheet
// Avg Slope = 2.5mV/°C

	float Vsense = reading * 3.3 /4095;
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7fe ff03 	bl	8000504 <__aeabi_ui2d>
 80016fe:	a321      	add	r3, pc, #132	; (adr r3, 8001784 <GetDieTemp+0x94>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff78 	bl	80005f8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	a31e      	add	r3, pc, #120	; (adr r3, 800178c <GetDieTemp+0x9c>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f899 	bl	800084c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa41 	bl	8000ba8 <__aeabi_d2f>
 8001726:	4603      	mov	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]
	float temp = (Vsense - 0.76)/0.0025 + 25;
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_f2d>
 8001730:	a318      	add	r3, pc, #96	; (adr r3, 8001794 <GetDieTemp+0xa4>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fda7 	bl	8000288 <__aeabi_dsub>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	a316      	add	r3, pc, #88	; (adr r3, 800179c <GetDieTemp+0xac>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7ff f880 	bl	800084c <__aeabi_ddiv>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <GetDieTemp+0x90>)
 800175a:	f7fe fd97 	bl	800028c <__adddf3>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa1f 	bl	8000ba8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	60bb      	str	r3, [r7, #8]

	return temp;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	ee07 3a90 	vmov	s15, r3

}
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40390000 	.word	0x40390000
 8001784:	66666666 	.word	0x66666666
 8001788:	400a6666 	.word	0x400a6666
 800178c:	00000000 	.word	0x00000000
 8001790:	40affe00 	.word	0x40affe00
 8001794:	851eb852 	.word	0x851eb852
 8001798:	3fe851eb 	.word	0x3fe851eb
 800179c:	47ae147b 	.word	0x47ae147b
 80017a0:	3f647ae1 	.word	0x3f647ae1

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_MspInit+0x4c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_MspInit+0x4c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ee:	2007      	movs	r0, #7
 80017f0:	f001 f8d6 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <HAL_ADC_MspInit+0xc4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d116      	bne.n	8001850 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2100      	movs	r1, #0
 8001842:	2012      	movs	r0, #18
 8001844:	f001 f8b7 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001848:	2012      	movs	r0, #18
 800184a:	f001 f8d0 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800184e:	e034      	b.n	80018ba <HAL_ADC_MspInit+0xba>
  else if(hadc->Instance==ADC3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_ADC_MspInit+0xcc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12f      	bne.n	80018ba <HAL_ADC_MspInit+0xba>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 8001864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_ADC_MspInit+0xc8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Thermistor_Pin;
 8001892:	2302      	movs	r3, #2
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <HAL_ADC_MspInit+0xd0>)
 80018a6:	f001 f8bd 	bl	8002a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2012      	movs	r0, #18
 80018b0:	f001 f881 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018b4:	2012      	movs	r0, #18
 80018b6:	f001 f89a 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40012000 	.word	0x40012000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40012200 	.word	0x40012200
 80018d0:	40020800 	.word	0x40020800

080018d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_I2C_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12c      	bne.n	8001950 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_I2C_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_I2C_MspInit+0x88>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_I2C_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001912:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001924:	2304      	movs	r3, #4
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	480c      	ldr	r0, [pc, #48]	; (8001960 <HAL_I2C_MspInit+0x8c>)
 8001930:	f001 f878 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_I2C_MspInit+0x88>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_I2C_MspInit+0x88>)
 800193e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_I2C_MspInit+0x88>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40005400 	.word	0x40005400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020400 	.word	0x40020400

08001964 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a31      	ldr	r2, [pc, #196]	; (8001a54 <HAL_I2S_MspInit+0xf0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d15a      	bne.n	8001a4a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001998:	23c0      	movs	r3, #192	; 0xc0
 800199a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4618      	mov	r0, r3
 80019a6:	f004 f9c1 	bl	8005d2c <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80019b0:	f7ff fef8 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6313      	str	r3, [r2, #48]	; 0x30
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_I2S_MspInit+0xf4>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <HAL_I2S_MspInit+0xf8>)
 8001a24:	f000 fffe 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a28:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_I2S_MspInit+0xfc>)
 8001a46:	f000 ffed 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3738      	adds	r7, #56	; 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40003c00 	.word	0x40003c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020800 	.word	0x40020800

08001a64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_SPI_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12b      	bne.n	8001ade <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_SPI_MspInit+0x88>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_SPI_MspInit+0x88>)
 8001a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_SPI_MspInit+0x88>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_SPI_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_SPI_MspInit+0x88>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_SPI_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001abe:	23e0      	movs	r3, #224	; 0xe0
 8001ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ace:	2305      	movs	r3, #5
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_SPI_MspInit+0x8c>)
 8001ada:	f000 ffa3 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40013000 	.word	0x40013000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f96e 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b4c:	4803      	ldr	r0, [pc, #12]	; (8001b5c <ADC_IRQHandler+0x14>)
 8001b4e:	f000 facd 	bl	80020ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <ADC_IRQHandler+0x18>)
 8001b54:	f000 faca 	bl	80020ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200002cc 	.word	0x200002cc
 8001b60:	20000314 	.word	0x20000314

08001b64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <OTG_FS_IRQHandler+0x10>)
 8001b6a:	f001 fb95 	bl	8003298 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000818 	.word	0x20000818

08001b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
	return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_kill>:

int _kill(int pid, int sig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b92:	f007 fc47 	bl	8009424 <__errno>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2216      	movs	r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_exit>:

void _exit (int status)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe7 	bl	8001b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bba:	e7fe      	b.n	8001bba <_exit+0x12>

08001bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e00a      	b.n	8001be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bce:	f3af 8000 	nop.w
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	b2ca      	uxtb	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf0      	blt.n	8001bce <_read+0x12>
	}

return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e009      	b.n	8001c1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	60ba      	str	r2, [r7, #8]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fce7 	bl	80015e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf1      	blt.n	8001c08 <_write+0x12>
	}
	return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_close>:

int _close(int file)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	return -1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c56:	605a      	str	r2, [r3, #4]
	return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_isatty>:

int _isatty(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f007 fbac 	bl	8009424 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20020000 	.word	0x20020000
 8001cf8:	00000400 	.word	0x00000400
 8001cfc:	20000228 	.word	0x20000228
 8001d00:	20000b30 	.word	0x20000b30

08001d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2e:	490e      	ldr	r1, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d52:	f7ff ffd7 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f007 fb6b 	bl	8009430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff f919 	bl	8000f90 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001d6c:	0800c2dc 	.word	0x0800c2dc
  ldr r2, =_sbss
 8001d70:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001d74:	20000b2c 	.word	0x20000b2c

08001d78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <CAN1_RX0_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 fdfb 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fcfe 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fe13 	bl	8002a0a <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	f000 fddb 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	2000043c 	.word	0x2000043c

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000043c 	.word	0x2000043c

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e033      	b.n	8001f26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fc9a 	bl	8001800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d118      	bne.n	8001f18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eee:	f023 0302 	bic.w	r3, r3, #2
 8001ef2:	f043 0202 	orr.w	r2, r3, #2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fb7a 	bl	80025f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	f043 0201 	orr.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
 8001f16:	e001      	b.n	8001f1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Start_IT+0x1a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e0bd      	b.n	80020c6 <HAL_ADC_Start_IT+0x196>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d018      	beq.n	8001f92 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_ADC_Start_IT+0x1a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_ADC_Start_IT+0x1a8>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0c9a      	lsrs	r2, r3, #18
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f84:	e002      	b.n	8001f8c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	f040 8085 	bne.w	80020ac <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe0:	d106      	bne.n	8001ff0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f023 0206 	bic.w	r2, r3, #6
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
 8001fee:	e002      	b.n	8001ff6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_ADC_Start_IT+0x1ac>)
 8002000:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800200a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800201a:	f043 0320 	orr.w	r3, r3, #32
 800201e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2b00      	cmp	r3, #0
 800202a:	d12a      	bne.n	8002082 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_ADC_Start_IT+0x1b0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d015      	beq.n	8002062 <HAL_ADC_Start_IT+0x132>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_ADC_Start_IT+0x1b4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d105      	bne.n	800204c <HAL_ADC_Start_IT+0x11c>
 8002040:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_ADC_Start_IT+0x1ac>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <HAL_ADC_Start_IT+0x1b8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d136      	bne.n	80020c4 <HAL_ADC_Start_IT+0x194>
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_ADC_Start_IT+0x1ac>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	d130      	bne.n	80020c4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d129      	bne.n	80020c4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	e020      	b.n	80020c4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_ADC_Start_IT+0x1b0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d11b      	bne.n	80020c4 <HAL_ADC_Start_IT+0x194>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d114      	bne.n	80020c4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	e00b      	b.n	80020c4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f043 0210 	orr.w	r2, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000000 	.word	0x20000000
 80020d8:	431bde83 	.word	0x431bde83
 80020dc:	40012300 	.word	0x40012300
 80020e0:	40012000 	.word	0x40012000
 80020e4:	40012100 	.word	0x40012100
 80020e8:	40012200 	.word	0x40012200

080020ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b20      	cmp	r3, #32
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d049      	beq.n	80021c2 <HAL_ADC_IRQHandler+0xd6>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d046      	beq.n	80021c2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d105      	bne.n	800214c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d12b      	bne.n	80021b2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d127      	bne.n	80021b2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800217a:	2b00      	cmp	r3, #0
 800217c:	d119      	bne.n	80021b2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0220 	bic.w	r2, r2, #32
 800218c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fa50 	bl	8001658 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0212 	mvn.w	r2, #18
 80021c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d057      	beq.n	80022a4 <HAL_ADC_IRQHandler+0x1b8>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d054      	beq.n	80022a4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d139      	bne.n	8002294 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002238:	2b00      	cmp	r3, #0
 800223a:	d12b      	bne.n	8002294 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002246:	2b00      	cmp	r3, #0
 8002248:	d124      	bne.n	8002294 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002254:	2b00      	cmp	r3, #0
 8002256:	d11d      	bne.n	8002294 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d119      	bne.n	8002294 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 faa9 	bl	80027ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 020c 	mvn.w	r2, #12
 80022a2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d017      	beq.n	8002306 <HAL_ADC_IRQHandler+0x21a>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d014      	beq.n	8002306 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f846 	bl	8002388 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0201 	mvn.w	r2, #1
 8002304:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b20      	cmp	r3, #32
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_ADC_IRQHandler+0x27a>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0220 	mvn.w	r2, #32
 8002354:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f820 	bl	800239c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0220 	mvn.w	r2, #32
 8002364:	601a      	str	r2, [r3, #0]
  }
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e105      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x228>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b09      	cmp	r3, #9
 80023da:	d925      	bls.n	8002428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68d9      	ldr	r1, [r3, #12]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	3b1e      	subs	r3, #30
 80023f2:	2207      	movs	r2, #7
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43da      	mvns	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	400a      	ands	r2, r1
 8002400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	4618      	mov	r0, r3
 8002414:	4603      	mov	r3, r0
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4403      	add	r3, r0
 800241a:	3b1e      	subs	r3, #30
 800241c:	409a      	lsls	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	e022      	b.n	800246e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	2207      	movs	r2, #7
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	400a      	ands	r2, r1
 800244a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	4603      	mov	r3, r0
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4403      	add	r3, r0
 8002464:	409a      	lsls	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b06      	cmp	r3, #6
 8002474:	d824      	bhi.n	80024c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3b05      	subs	r3, #5
 8002488:	221f      	movs	r2, #31
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	400a      	ands	r2, r1
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b05      	subs	r3, #5
 80024b2:	fa00 f203 	lsl.w	r2, r0, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
 80024be:	e04c      	b.n	800255a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d824      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	3b23      	subs	r3, #35	; 0x23
 80024da:	221f      	movs	r2, #31
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43da      	mvns	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	400a      	ands	r2, r1
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b23      	subs	r3, #35	; 0x23
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
 8002510:	e023      	b.n	800255a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b41      	subs	r3, #65	; 0x41
 8002524:	221f      	movs	r2, #31
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	400a      	ands	r2, r1
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b41      	subs	r3, #65	; 0x41
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_ADC_ConfigChannel+0x234>)
 800255c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <HAL_ADC_ConfigChannel+0x238>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d109      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1cc>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b12      	cmp	r3, #18
 800256e:	d105      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <HAL_ADC_ConfigChannel+0x238>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d123      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x21e>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d003      	beq.n	8002596 <HAL_ADC_ConfigChannel+0x1e6>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b11      	cmp	r3, #17
 8002594:	d11b      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b10      	cmp	r3, #16
 80025a8:	d111      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_ADC_ConfigChannel+0x23c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_ADC_ConfigChannel+0x240>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	0c9a      	lsrs	r2, r3, #18
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012300 	.word	0x40012300
 80025e8:	40012000 	.word	0x40012000
 80025ec:	20000000 	.word	0x20000000
 80025f0:	431bde83 	.word	0x431bde83

080025f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025fc:	4b79      	ldr	r3, [pc, #484]	; (80027e4 <ADC_Init+0x1f0>)
 80025fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	431a      	orrs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800264c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <ADC_Init+0x1f4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800269a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e00f      	b.n	80026f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0202 	bic.w	r2, r2, #2
 8002700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6899      	ldr	r1, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e1b      	ldrb	r3, [r3, #24]
 800270c:	005a      	lsls	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01b      	beq.n	8002758 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800273e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	3b01      	subs	r3, #1
 800274c:	035a      	lsls	r2, r3, #13
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	e007      	b.n	8002768 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002766:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	3b01      	subs	r3, #1
 8002784:	051a      	lsls	r2, r3, #20
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800279c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027aa:	025a      	lsls	r2, r3, #9
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	029a      	lsls	r2, r3, #10
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40012300 	.word	0x40012300
 80027e8:	0f000001 	.word	0x0f000001

080027ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <__NVIC_SetPriorityGrouping>:
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_EnableIRQ>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0b      	blt.n	800288e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <__NVIC_EnableIRQ+0x38>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff29 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff3e 	bl	8002848 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff8e 	bl	80028f4 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff31 	bl	8002864 <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffa2 	bl	800295c <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e16b      	b.n	8002d18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 815a 	bne.w	8002d12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d130      	bne.n	8002ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0201 	and.w	r2, r3, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d017      	beq.n	8002b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d123      	bne.n	8002b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80b4 	beq.w	8002d12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <HAL_GPIO_Init+0x30c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a5f      	ldr	r2, [pc, #380]	; (8002d30 <HAL_GPIO_Init+0x30c>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <HAL_GPIO_Init+0x30c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <HAL_GPIO_Init+0x310>)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_GPIO_Init+0x314>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02b      	beq.n	8002c4a <HAL_GPIO_Init+0x226>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_GPIO_Init+0x318>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d025      	beq.n	8002c46 <HAL_GPIO_Init+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_GPIO_Init+0x31c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01f      	beq.n	8002c42 <HAL_GPIO_Init+0x21e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_GPIO_Init+0x320>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_Init+0x21a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_GPIO_Init+0x324>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0x216>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_GPIO_Init+0x328>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_Init+0x212>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x32c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x20e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <HAL_GPIO_Init+0x330>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_Init+0x20a>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e00e      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c2e:	2308      	movs	r3, #8
 8002c30:	e00c      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e00a      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e008      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e004      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_Init+0x228>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f002 0203 	and.w	r2, r2, #3
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	4093      	lsls	r3, r2
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c5c:	4935      	ldr	r1, [pc, #212]	; (8002d34 <HAL_GPIO_Init+0x310>)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3302      	adds	r3, #2
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8e:	4a32      	ldr	r2, [pc, #200]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb8:	4a27      	ldr	r2, [pc, #156]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d0c:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <HAL_GPIO_Init+0x334>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3301      	adds	r3, #1
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	f67f ae90 	bls.w	8002a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40021400 	.word	0x40021400
 8002d50:	40021800 	.word	0x40021800
 8002d54:	40021c00 	.word	0x40021c00
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	041a      	lsls	r2, r3, #16
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	400b      	ands	r3, r1
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc4:	b08f      	sub	sp, #60	; 0x3c
 8002dc6:	af0a      	add	r7, sp, #40	; 0x28
 8002dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e054      	b.n	8002e7e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f006 f86e 	bl	8008ed0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 f9c5 	bl	80061a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	687e      	ldr	r6, [r7, #4]
 8002e20:	466d      	mov	r5, sp
 8002e22:	f106 0410 	add.w	r4, r6, #16
 8002e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e36:	1d33      	adds	r3, r6, #4
 8002e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3a:	6838      	ldr	r0, [r7, #0]
 8002e3c:	f003 f93f 	bl	80060be <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 f9bc 	bl	80061c4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	687e      	ldr	r6, [r7, #4]
 8002e54:	466d      	mov	r5, sp
 8002e56:	f106 0410 	add.w	r4, r6, #16
 8002e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e66:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e6a:	1d33      	adds	r3, r6, #4
 8002e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f003 fb22 	bl	80064b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e86 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e86:	b590      	push	{r4, r7, lr}
 8002e88:	b089      	sub	sp, #36	; 0x24
 8002e8a:	af04      	add	r7, sp, #16
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	4608      	mov	r0, r1
 8002e90:	4611      	mov	r1, r2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4603      	mov	r3, r0
 8002e96:	70fb      	strb	r3, [r7, #3]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70bb      	strb	r3, [r7, #2]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_HCD_HC_Init+0x28>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e076      	b.n	8002f9c <HAL_HCD_HC_Init+0x116>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	333d      	adds	r3, #61	; 0x3d
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3338      	adds	r3, #56	; 0x38
 8002ed6:	787a      	ldrb	r2, [r7, #1]
 8002ed8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3340      	adds	r3, #64	; 0x40
 8002ee8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002eea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3339      	adds	r3, #57	; 0x39
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	333f      	adds	r3, #63	; 0x3f
 8002f0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	78ba      	ldrb	r2, [r7, #2]
 8002f16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f1a:	b2d0      	uxtb	r0, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	333a      	adds	r3, #58	; 0x3a
 8002f28:	4602      	mov	r2, r0
 8002f2a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da09      	bge.n	8002f48 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	333b      	adds	r3, #59	; 0x3b
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e008      	b.n	8002f5a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	333b      	adds	r3, #59	; 0x3b
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	333c      	adds	r3, #60	; 0x3c
 8002f68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f6c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	787c      	ldrb	r4, [r7, #1]
 8002f74:	78ba      	ldrb	r2, [r7, #2]
 8002f76:	78f9      	ldrb	r1, [r7, #3]
 8002f78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f7a:	9302      	str	r3, [sp, #8]
 8002f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4623      	mov	r3, r4
 8002f8a:	f003 fc0f 	bl	80067ac <USB_HC_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_HCD_HC_Halt+0x1e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e00f      	b.n	8002fe2 <HAL_HCD_HC_Halt+0x3e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 fe4b 	bl	8006c6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	70fb      	strb	r3, [r7, #3]
 8002ffe:	460b      	mov	r3, r1
 8003000:	70bb      	strb	r3, [r7, #2]
 8003002:	4613      	mov	r3, r2
 8003004:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	333b      	adds	r3, #59	; 0x3b
 8003014:	78ba      	ldrb	r2, [r7, #2]
 8003016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	333f      	adds	r3, #63	; 0x3f
 8003026:	787a      	ldrb	r2, [r7, #1]
 8003028:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800302a:	7c3b      	ldrb	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d112      	bne.n	8003056 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	3342      	adds	r3, #66	; 0x42
 800303e:	2203      	movs	r2, #3
 8003040:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333d      	adds	r3, #61	; 0x3d
 8003050:	7f3a      	ldrb	r2, [r7, #28]
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e008      	b.n	8003068 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003068:	787b      	ldrb	r3, [r7, #1]
 800306a:	2b03      	cmp	r3, #3
 800306c:	f200 80c6 	bhi.w	80031fc <HAL_HCD_HC_SubmitRequest+0x210>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	08003089 	.word	0x08003089
 800307c:	080031e9 	.word	0x080031e9
 8003080:	080030ed 	.word	0x080030ed
 8003084:	0800316b 	.word	0x0800316b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003088:	7c3b      	ldrb	r3, [r7, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	f040 80b8 	bne.w	8003200 <HAL_HCD_HC_SubmitRequest+0x214>
 8003090:	78bb      	ldrb	r3, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 80b4 	bne.w	8003200 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003098:	8b3b      	ldrh	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3355      	adds	r3, #85	; 0x55
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3355      	adds	r3, #85	; 0x55
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3342      	adds	r3, #66	; 0x42
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030d6:	e093      	b.n	8003200 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3342      	adds	r3, #66	; 0x42
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
      break;
 80030ea:	e089      	b.n	8003200 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030ec:	78bb      	ldrb	r3, [r7, #2]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11d      	bne.n	800312e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3355      	adds	r3, #85	; 0x55
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3342      	adds	r3, #66	; 0x42
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003118:	e073      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3342      	adds	r3, #66	; 0x42
 8003128:	2202      	movs	r2, #2
 800312a:	701a      	strb	r2, [r3, #0]
      break;
 800312c:	e069      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3354      	adds	r3, #84	; 0x54
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3342      	adds	r3, #66	; 0x42
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
      break;
 8003154:	e055      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3342      	adds	r3, #66	; 0x42
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
      break;
 8003168:	e04b      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800316a:	78bb      	ldrb	r3, [r7, #2]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11d      	bne.n	80031ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3355      	adds	r3, #85	; 0x55
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d109      	bne.n	8003198 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3342      	adds	r3, #66	; 0x42
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003196:	e034      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3342      	adds	r3, #66	; 0x42
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
      break;
 80031aa:	e02a      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3354      	adds	r3, #84	; 0x54
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3342      	adds	r3, #66	; 0x42
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
      break;
 80031d2:	e016      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3342      	adds	r3, #66	; 0x42
 80031e2:	2202      	movs	r2, #2
 80031e4:	701a      	strb	r2, [r3, #0]
      break;
 80031e6:	e00c      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3342      	adds	r3, #66	; 0x42
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003200:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3344      	adds	r3, #68	; 0x44
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	8b3a      	ldrh	r2, [r7, #24]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	202c      	movs	r0, #44	; 0x2c
 800321c:	fb00 f303 	mul.w	r3, r0, r3
 8003220:	440b      	add	r3, r1
 8003222:	334c      	adds	r3, #76	; 0x4c
 8003224:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3360      	adds	r3, #96	; 0x60
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3350      	adds	r3, #80	; 0x50
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3339      	adds	r3, #57	; 0x39
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3361      	adds	r3, #97	; 0x61
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	222c      	movs	r2, #44	; 0x2c
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	3338      	adds	r3, #56	; 0x38
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	18d1      	adds	r1, r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	f003 fb9e 	bl	80069c8 <USB_HC_StartXfer>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop

08003298 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 f8c1 	bl	8006436 <USB_GetMode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 80f6 	bne.w	80034a8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 f8a5 	bl	8006410 <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80ec 	beq.w	80034a6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 f89c 	bl	8006410 <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e2:	d104      	bne.n	80032ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 f88c 	bl	8006410 <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003302:	d104      	bne.n	800330e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800330c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 f87c 	bl	8006410 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800331e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003322:	d104      	bne.n	800332e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800332c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f003 f86c 	bl	8006410 <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d103      	bne.n	800334a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2202      	movs	r2, #2
 8003348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f003 f85e 	bl	8006410 <USB_ReadInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800335a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335e:	d11c      	bne.n	800339a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003368:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800337a:	2110      	movs	r1, #16
 800337c:	6938      	ldr	r0, [r7, #16]
 800337e:	f002 ff6d 	bl	800625c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003382:	6938      	ldr	r0, [r7, #16]
 8003384:	f002 ff8e 	bl	80062a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f003 f946 	bl	8006620 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f005 fe19 	bl	8008fcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 f836 	bl	8006410 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033ae:	d102      	bne.n	80033b6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f001 fa03 	bl	80047bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 f828 	bl	8006410 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d106      	bne.n	80033d8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f005 fde2 	bl	8008f94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2208      	movs	r2, #8
 80033d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 f817 	bl	8006410 <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b10      	cmp	r3, #16
 80033ea:	d101      	bne.n	80033f0 <HAL_HCD_IRQHandler+0x158>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_HCD_IRQHandler+0x15a>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0210 	bic.w	r2, r2, #16
 8003404:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f001 f906 	bl	8004618 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0210 	orr.w	r2, r2, #16
 800341a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fff5 	bl	8006410 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003430:	d13a      	bne.n	80034a8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 fc08 	bl	8006c4c <USB_HC_ReadInterrupt>
 800343c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e025      	b.n	8003490 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d018      	beq.n	800348a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346e:	d106      	bne.n	800347e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8ab 	bl	80035d2 <HCD_HC_IN_IRQHandler>
 800347c:	e005      	b.n	800348a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fcc6 	bl	8003e16 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	3301      	adds	r3, #1
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3d4      	bcc.n	8003444 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a2:	615a      	str	r2, [r3, #20]
 80034a4:	e000      	b.n	80034a8 <HAL_HCD_IRQHandler+0x210>
      return;
 80034a6:	bf00      	nop
    }
  }
}
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_HCD_Start+0x16>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e013      	b.n	80034ec <HAL_HCD_Start+0x3e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 f908 	bl	80066e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fe4f 	bl	8006180 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_HCD_Stop+0x16>
 8003506:	2302      	movs	r3, #2
 8003508:	e00d      	b.n	8003526 <HAL_HCD_Stop+0x32>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f003 fd02 	bl	8006f20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f003 f8aa 	bl	8006694 <USB_ResetPort>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3360      	adds	r3, #96	; 0x60
 8003564:	781b      	ldrb	r3, [r3, #0]
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3350      	adds	r3, #80	; 0x50
 800358c:	681b      	ldr	r3, [r3, #0]
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 f8ee 	bl	8006788 <USB_GetCurrentFrame>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 f8c9 	bl	800675a <USB_GetHostSpeed>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	460b      	mov	r3, r1
 80035dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d119      	bne.n	8003636 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	461a      	mov	r2, r3
 8003610:	2304      	movs	r3, #4
 8003612:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	440a      	add	r2, r1
 800362a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800362e:	f043 0302 	orr.w	r3, r3, #2
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e101      	b.n	800383a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d12b      	bne.n	80036a6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	461a      	mov	r2, r3
 800365c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003660:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3361      	adds	r3, #97	; 0x61
 8003670:	2207      	movs	r2, #7
 8003672:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	440a      	add	r2, r1
 800368a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fae5 	bl	8006c6e <USB_HC_Halt>
 80036a4:	e0c9      	b.n	800383a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d109      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	2320      	movs	r3, #32
 80036cc:	6093      	str	r3, [r2, #8]
 80036ce:	e0b4      	b.n	800383a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d133      	bne.n	800374e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	0151      	lsls	r1, r2, #5
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	440a      	add	r2, r1
 80036fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3361      	adds	r3, #97	; 0x61
 8003714:	2205      	movs	r2, #5
 8003716:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	2310      	movs	r3, #16
 8003728:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	2308      	movs	r3, #8
 800373a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fa91 	bl	8006c6e <USB_HC_Halt>
 800374c:	e075      	b.n	800383a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d134      	bne.n	80037d0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	440a      	add	r2, r1
 800377c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	212c      	movs	r1, #44	; 0x2c
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	4413      	add	r3, r2
 8003792:	3361      	adds	r3, #97	; 0x61
 8003794:	2208      	movs	r2, #8
 8003796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	461a      	mov	r2, r3
 80037a6:	2310      	movs	r3, #16
 80037a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fa50 	bl	8006c6e <USB_HC_Halt>
 80037ce:	e034      	b.n	800383a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d129      	bne.n	800383a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	3361      	adds	r3, #97	; 0x61
 8003814:	2206      	movs	r2, #6
 8003816:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f003 fa23 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4413      	add	r3, r2
 8003842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003850:	d122      	bne.n	8003898 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	440a      	add	r2, r1
 8003868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	4611      	mov	r1, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f003 f9f6 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003894:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003896:	e2ba      	b.n	8003e0e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	f040 811b 	bne.w	8003ae6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d019      	beq.n	80038ec <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	212c      	movs	r1, #44	; 0x2c
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	3348      	adds	r3, #72	; 0x48
 80038c6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038da:	1ad2      	subs	r2, r2, r3
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	202c      	movs	r0, #44	; 0x2c
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	440b      	add	r3, r1
 80038e8:	3350      	adds	r3, #80	; 0x50
 80038ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3361      	adds	r3, #97	; 0x61
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	212c      	movs	r1, #44	; 0x2c
 8003904:	fb01 f303 	mul.w	r3, r1, r3
 8003908:	4413      	add	r3, r2
 800390a:	335c      	adds	r3, #92	; 0x5c
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	461a      	mov	r2, r3
 800391e:	2301      	movs	r3, #1
 8003920:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	212c      	movs	r1, #44	; 0x2c
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	4413      	add	r3, r2
 800392e:	333f      	adds	r3, #63	; 0x3f
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	333f      	adds	r3, #63	; 0x3f
 8003944:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003946:	2b02      	cmp	r3, #2
 8003948:	d121      	bne.n	800398e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	0151      	lsls	r1, r2, #5
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	440a      	add	r2, r1
 8003960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f003 f97a 	bl	8006c6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	461a      	mov	r2, r3
 8003988:	2310      	movs	r3, #16
 800398a:	6093      	str	r3, [r2, #8]
 800398c:	e066      	b.n	8003a5c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	333f      	adds	r3, #63	; 0x3f
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d127      	bne.n	80039f2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	0151      	lsls	r1, r2, #5
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	440a      	add	r2, r1
 80039b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3360      	adds	r3, #96	; 0x60
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	b2d9      	uxtb	r1, r3
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	202c      	movs	r0, #44	; 0x2c
 80039de:	fb00 f303 	mul.w	r3, r0, r3
 80039e2:	4413      	add	r3, r2
 80039e4:	3360      	adds	r3, #96	; 0x60
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f005 fafc 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039f0:	e034      	b.n	8003a5c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	333f      	adds	r3, #63	; 0x3f
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d12a      	bne.n	8003a5c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3360      	adds	r3, #96	; 0x60
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3354      	adds	r3, #84	; 0x54
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f083 0301 	eor.w	r3, r3, #1
 8003a2c:	b2d8      	uxtb	r0, r3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3354      	adds	r3, #84	; 0x54
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	b2d9      	uxtb	r1, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	202c      	movs	r0, #44	; 0x2c
 8003a4a:	fb00 f303 	mul.w	r3, r0, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3360      	adds	r3, #96	; 0x60
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f005 fac6 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d12b      	bne.n	8003abc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	3348      	adds	r3, #72	; 0x48
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	202c      	movs	r0, #44	; 0x2c
 8003a7a:	fb00 f202 	mul.w	r2, r0, r2
 8003a7e:	440a      	add	r2, r1
 8003a80:	3240      	adds	r2, #64	; 0x40
 8003a82:	8812      	ldrh	r2, [r2, #0]
 8003a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 81be 	beq.w	8003e0e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3354      	adds	r3, #84	; 0x54
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	f083 0301 	eor.w	r3, r3, #1
 8003aa6:	b2d8      	uxtb	r0, r3
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3354      	adds	r3, #84	; 0x54
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	701a      	strb	r2, [r3, #0]
}
 8003aba:	e1a8      	b.n	8003e0e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3354      	adds	r3, #84	; 0x54
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2d8      	uxtb	r0, r3
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	212c      	movs	r1, #44	; 0x2c
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	4413      	add	r3, r2
 8003ade:	3354      	adds	r3, #84	; 0x54
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	701a      	strb	r2, [r3, #0]
}
 8003ae4:	e193      	b.n	8003e0e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	f040 8106 	bne.w	8003d0a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	3361      	adds	r3, #97	; 0x61
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d109      	bne.n	8003b46 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3360      	adds	r3, #96	; 0x60
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e0c9      	b.n	8003cda <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3361      	adds	r3, #97	; 0x61
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d109      	bne.n	8003b6e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	3360      	adds	r3, #96	; 0x60
 8003b68:	2205      	movs	r2, #5
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e0b5      	b.n	8003cda <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	3361      	adds	r3, #97	; 0x61
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d009      	beq.n	8003b96 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	212c      	movs	r1, #44	; 0x2c
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3361      	adds	r3, #97	; 0x61
 8003b90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d150      	bne.n	8003c38 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	335c      	adds	r3, #92	; 0x5c
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	202c      	movs	r0, #44	; 0x2c
 8003bae:	fb00 f303 	mul.w	r3, r0, r3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	335c      	adds	r3, #92	; 0x5c
 8003bb6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	212c      	movs	r1, #44	; 0x2c
 8003bbe:	fb01 f303 	mul.w	r3, r1, r3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	335c      	adds	r3, #92	; 0x5c
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d912      	bls.n	8003bf2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	335c      	adds	r3, #92	; 0x5c
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3360      	adds	r3, #96	; 0x60
 8003bec:	2204      	movs	r2, #4
 8003bee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bf0:	e073      	b.n	8003cda <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3360      	adds	r3, #96	; 0x60
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c1a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c36:	e050      	b.n	8003cda <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d122      	bne.n	8003c92 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3360      	adds	r3, #96	; 0x60
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c74:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c7c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e023      	b.n	8003cda <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3361      	adds	r3, #97	; 0x61
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	d119      	bne.n	8003cda <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	335c      	adds	r3, #92	; 0x5c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	202c      	movs	r0, #44	; 0x2c
 8003cbe:	fb00 f303 	mul.w	r3, r0, r3
 8003cc2:	440b      	add	r3, r1
 8003cc4:	335c      	adds	r3, #92	; 0x5c
 8003cc6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	212c      	movs	r1, #44	; 0x2c
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3360      	adds	r3, #96	; 0x60
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2302      	movs	r3, #2
 8003cea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	b2d9      	uxtb	r1, r3
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	202c      	movs	r0, #44	; 0x2c
 8003cf6:	fb00 f303 	mul.w	r3, r0, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3360      	adds	r3, #96	; 0x60
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f005 f970 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d08:	e081      	b.n	8003e0e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d176      	bne.n	8003e0e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	212c      	movs	r1, #44	; 0x2c
 8003d26:	fb01 f303 	mul.w	r3, r1, r3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	333f      	adds	r3, #63	; 0x3f
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d121      	bne.n	8003d78 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	335c      	adds	r3, #92	; 0x5c
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	0151      	lsls	r1, r2, #5
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	440a      	add	r2, r1
 8003d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f002 ff7c 	bl	8006c6e <USB_HC_Halt>
 8003d76:	e041      	b.n	8003dfc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	333f      	adds	r3, #63	; 0x3f
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	333f      	adds	r3, #63	; 0x3f
 8003d9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d12d      	bne.n	8003dfc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	335c      	adds	r3, #92	; 0x5c
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d120      	bne.n	8003dfc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3361      	adds	r3, #97	; 0x61
 8003dc8:	2203      	movs	r2, #3
 8003dca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 ff39 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	6093      	str	r3, [r2, #8]
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b088      	sub	sp, #32
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d119      	bne.n	8003e7a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e52:	461a      	mov	r2, r3
 8003e54:	2304      	movs	r3, #4
 8003e56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e72:	f043 0302 	orr.w	r3, r3, #2
 8003e76:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e78:	e3ca      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d13e      	bne.n	8003f0e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	333d      	adds	r3, #61	; 0x3d
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	f040 83ac 	bne.w	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	333d      	adds	r3, #61	; 0x3d
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3360      	adds	r3, #96	; 0x60
 8003ed8:	2202      	movs	r2, #2
 8003eda:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f002 feb1 	bl	8006c6e <USB_HC_Halt>
}
 8003f0c:	e380      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f24:	d122      	bne.n	8003f6c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 fe8c 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f62:	461a      	mov	r2, r3
 8003f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f68:	6093      	str	r3, [r2, #8]
}
 8003f6a:	e351      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d150      	bne.n	8004024 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	335c      	adds	r3, #92	; 0x5c
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d111      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	333d      	adds	r3, #61	; 0x3d
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2340      	movs	r3, #64	; 0x40
 8003fcc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f002 fe38 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	2301      	movs	r3, #1
 800400e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3361      	adds	r3, #97	; 0x61
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
}
 8004022:	e2f5      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d13c      	bne.n	80040b4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3361      	adds	r3, #97	; 0x61
 8004048:	2204      	movs	r2, #4
 800404a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	333d      	adds	r3, #61	; 0x3d
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	335c      	adds	r3, #92	; 0x5c
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	440a      	add	r2, r1
 8004086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f002 fde7 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	461a      	mov	r2, r3
 80040ae:	2340      	movs	r3, #64	; 0x40
 80040b0:	6093      	str	r3, [r2, #8]
}
 80040b2:	e2ad      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d12a      	bne.n	8004120 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	461a      	mov	r2, r3
 80040d8:	2308      	movs	r3, #8
 80040da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f6:	f043 0302 	orr.w	r3, r3, #2
 80040fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f002 fdb1 	bl	8006c6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3361      	adds	r3, #97	; 0x61
 800411a:	2205      	movs	r2, #5
 800411c:	701a      	strb	r2, [r3, #0]
}
 800411e:	e277      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d150      	bne.n	80041d8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	335c      	adds	r3, #92	; 0x5c
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3361      	adds	r3, #97	; 0x61
 8004156:	2203      	movs	r2, #3
 8004158:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	212c      	movs	r1, #44	; 0x2c
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	4413      	add	r3, r2
 8004166:	333d      	adds	r3, #61	; 0x3d
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d112      	bne.n	8004194 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d108      	bne.n	8004194 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	333d      	adds	r3, #61	; 0x3d
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f002 fd55 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	461a      	mov	r2, r3
 80041d2:	2310      	movs	r3, #16
 80041d4:	6093      	str	r3, [r2, #8]
}
 80041d6:	e21b      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d174      	bne.n	80042d8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d121      	bne.n	800423a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	3361      	adds	r3, #97	; 0x61
 8004204:	2206      	movs	r2, #6
 8004206:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	440a      	add	r2, r1
 800421e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004222:	f043 0302 	orr.w	r3, r3, #2
 8004226:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	4611      	mov	r1, r2
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fd1b 	bl	8006c6e <USB_HC_Halt>
 8004238:	e044      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	212c      	movs	r1, #44	; 0x2c
 8004240:	fb01 f303 	mul.w	r3, r1, r3
 8004244:	4413      	add	r3, r2
 8004246:	335c      	adds	r3, #92	; 0x5c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	202c      	movs	r0, #44	; 0x2c
 8004252:	fb00 f303 	mul.w	r3, r0, r3
 8004256:	440b      	add	r3, r1
 8004258:	335c      	adds	r3, #92	; 0x5c
 800425a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	335c      	adds	r3, #92	; 0x5c
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d920      	bls.n	80042b2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	335c      	adds	r3, #92	; 0x5c
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3360      	adds	r3, #96	; 0x60
 8004290:	2204      	movs	r2, #4
 8004292:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	b2d9      	uxtb	r1, r3
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	202c      	movs	r0, #44	; 0x2c
 800429e:	fb00 f303 	mul.w	r3, r0, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	3360      	adds	r3, #96	; 0x60
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f004 fe9c 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042b0:	e008      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	212c      	movs	r1, #44	; 0x2c
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	4413      	add	r3, r2
 80042be:	3360      	adds	r3, #96	; 0x60
 80042c0:	2202      	movs	r2, #2
 80042c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	461a      	mov	r2, r3
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	6093      	str	r3, [r2, #8]
}
 80042d6:	e19b      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d134      	bne.n	800435a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	440a      	add	r2, r1
 8004306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fca7 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432c:	461a      	mov	r2, r3
 800432e:	2310      	movs	r3, #16
 8004330:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	461a      	mov	r2, r3
 8004340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3361      	adds	r3, #97	; 0x61
 8004354:	2208      	movs	r2, #8
 8004356:	701a      	strb	r2, [r3, #0]
}
 8004358:	e15a      	b.n	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	f040 814f 	bne.w	8004610 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	440a      	add	r2, r1
 8004388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800438c:	f023 0302 	bic.w	r3, r3, #2
 8004390:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3361      	adds	r3, #97	; 0x61
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d17d      	bne.n	80044a2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3360      	adds	r3, #96	; 0x60
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	333f      	adds	r3, #63	; 0x3f
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d00a      	beq.n	80043e2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	333f      	adds	r3, #63	; 0x3f
 80043da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043dc:	2b03      	cmp	r3, #3
 80043de:	f040 8100 	bne.w	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d113      	bne.n	8004412 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	212c      	movs	r1, #44	; 0x2c
 80043f0:	fb01 f303 	mul.w	r3, r1, r3
 80043f4:	4413      	add	r3, r2
 80043f6:	3355      	adds	r3, #85	; 0x55
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	f083 0301 	eor.w	r3, r3, #1
 80043fe:	b2d8      	uxtb	r0, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	3355      	adds	r3, #85	; 0x55
 800440e:	4602      	mov	r2, r0
 8004410:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	f040 80e3 	bne.w	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	334c      	adds	r3, #76	; 0x4c
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80d8 	beq.w	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	334c      	adds	r3, #76	; 0x4c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	202c      	movs	r0, #44	; 0x2c
 8004448:	fb00 f202 	mul.w	r2, r0, r2
 800444c:	440a      	add	r2, r1
 800444e:	3240      	adds	r2, #64	; 0x40
 8004450:	8812      	ldrh	r2, [r2, #0]
 8004452:	4413      	add	r3, r2
 8004454:	3b01      	subs	r3, #1
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	202c      	movs	r0, #44	; 0x2c
 800445c:	fb00 f202 	mul.w	r2, r0, r2
 8004460:	440a      	add	r2, r1
 8004462:	3240      	adds	r2, #64	; 0x40
 8004464:	8812      	ldrh	r2, [r2, #0]
 8004466:	fbb3 f3f2 	udiv	r3, r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80b5 	beq.w	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	3355      	adds	r3, #85	; 0x55
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2d8      	uxtb	r0, r3
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3355      	adds	r3, #85	; 0x55
 800449c:	4602      	mov	r2, r0
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e09f      	b.n	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3361      	adds	r3, #97	; 0x61
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d109      	bne.n	80044ca <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	212c      	movs	r1, #44	; 0x2c
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3360      	adds	r3, #96	; 0x60
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e08b      	b.n	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	3361      	adds	r3, #97	; 0x61
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d109      	bne.n	80044f2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3360      	adds	r3, #96	; 0x60
 80044ec:	2202      	movs	r2, #2
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	e077      	b.n	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	212c      	movs	r1, #44	; 0x2c
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	4413      	add	r3, r2
 80044fe:	3361      	adds	r3, #97	; 0x61
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b05      	cmp	r3, #5
 8004504:	d109      	bne.n	800451a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3360      	adds	r3, #96	; 0x60
 8004514:	2205      	movs	r2, #5
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e063      	b.n	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	3361      	adds	r3, #97	; 0x61
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b06      	cmp	r3, #6
 800452c:	d009      	beq.n	8004542 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3361      	adds	r3, #97	; 0x61
 800453c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800453e:	2b08      	cmp	r3, #8
 8004540:	d14f      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	212c      	movs	r1, #44	; 0x2c
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	4413      	add	r3, r2
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	202c      	movs	r0, #44	; 0x2c
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	440b      	add	r3, r1
 8004560:	335c      	adds	r3, #92	; 0x5c
 8004562:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	335c      	adds	r3, #92	; 0x5c
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d912      	bls.n	800459e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	335c      	adds	r3, #92	; 0x5c
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	212c      	movs	r1, #44	; 0x2c
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	4413      	add	r3, r2
 8004596:	3360      	adds	r3, #96	; 0x60
 8004598:	2204      	movs	r2, #4
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e021      	b.n	80045e2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	212c      	movs	r1, #44	; 0x2c
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	2202      	movs	r2, #2
 80045ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ce:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	461a      	mov	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ee:	461a      	mov	r2, r3
 80045f0:	2302      	movs	r3, #2
 80045f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	b2d9      	uxtb	r1, r3
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	202c      	movs	r0, #44	; 0x2c
 80045fe:	fb00 f303 	mul.w	r3, r0, r3
 8004602:	4413      	add	r3, r2
 8004604:	3360      	adds	r3, #96	; 0x60
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f004 fcec 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	0c5b      	lsrs	r3, r3, #17
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800464c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d004      	beq.n	800465e <HCD_RXQLVL_IRQHandler+0x46>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b05      	cmp	r3, #5
 8004658:	f000 80a9 	beq.w	80047ae <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800465c:	e0aa      	b.n	80047b4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80a6 	beq.w	80047b2 <HCD_RXQLVL_IRQHandler+0x19a>
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	3344      	adds	r3, #68	; 0x44
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 809b 	beq.w	80047b2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3350      	adds	r3, #80	; 0x50
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	441a      	add	r2, r3
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	202c      	movs	r0, #44	; 0x2c
 8004696:	fb00 f303 	mul.w	r3, r0, r3
 800469a:	440b      	add	r3, r1
 800469c:	334c      	adds	r3, #76	; 0x4c
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d87a      	bhi.n	800479a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	212c      	movs	r1, #44	; 0x2c
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	3344      	adds	r3, #68	; 0x44
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	b292      	uxth	r2, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	f001 fe4f 	bl	8006360 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3344      	adds	r3, #68	; 0x44
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	441a      	add	r2, r3
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	202c      	movs	r0, #44	; 0x2c
 80046dc:	fb00 f303 	mul.w	r3, r0, r3
 80046e0:	440b      	add	r3, r1
 80046e2:	3344      	adds	r3, #68	; 0x44
 80046e4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3350      	adds	r3, #80	; 0x50
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	441a      	add	r2, r3
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	202c      	movs	r0, #44	; 0x2c
 8004700:	fb00 f303 	mul.w	r3, r0, r3
 8004704:	440b      	add	r3, r1
 8004706:	3350      	adds	r3, #80	; 0x50
 8004708:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	0cdb      	lsrs	r3, r3, #19
 800471a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800471e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	3340      	adds	r3, #64	; 0x40
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4293      	cmp	r3, r2
 8004736:	d13c      	bne.n	80047b2 <HCD_RXQLVL_IRQHandler+0x19a>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d039      	beq.n	80047b2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004754:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800475c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	212c      	movs	r1, #44	; 0x2c
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	3354      	adds	r3, #84	; 0x54
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f083 0301 	eor.w	r3, r3, #1
 8004784:	b2d8      	uxtb	r0, r3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	3354      	adds	r3, #84	; 0x54
 8004794:	4602      	mov	r2, r0
 8004796:	701a      	strb	r2, [r3, #0]
      break;
 8004798:	e00b      	b.n	80047b2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	3360      	adds	r3, #96	; 0x60
 80047a8:	2204      	movs	r2, #4
 80047aa:	701a      	strb	r2, [r3, #0]
      break;
 80047ac:	e001      	b.n	80047b2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80047ae:	bf00      	nop
 80047b0:	e000      	b.n	80047b4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80047b2:	bf00      	nop
  }
}
 80047b4:	bf00      	nop
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d10b      	bne.n	800480c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d102      	bne.n	8004804 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f004 fbd6 	bl	8008fb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b08      	cmp	r3, #8
 8004814:	d132      	bne.n	800487c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d126      	bne.n	8004876 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d113      	bne.n	8004858 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800483a:	d106      	bne.n	800484a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 feec 	bl	8006620 <USB_InitFSLSPClkSel>
 8004848:	e011      	b.n	800486e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2101      	movs	r1, #1
 8004850:	4618      	mov	r0, r3
 8004852:	f001 fee5 	bl	8006620 <USB_InitFSLSPClkSel>
 8004856:	e00a      	b.n	800486e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d106      	bne.n	800486e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004866:	461a      	mov	r2, r3
 8004868:	f64e 2360 	movw	r3, #60000	; 0xea60
 800486c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f004 fbc8 	bl	8009004 <HAL_HCD_PortEnabled_Callback>
 8004874:	e002      	b.n	800487c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f004 fbd2 	bl	8009020 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d103      	bne.n	800488e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f043 0320 	orr.w	r3, r3, #32
 800488c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004894:	461a      	mov	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	bf00      	nop
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e12b      	b.n	8004b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd f802 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	; 0x24
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004908:	f001 f9fc 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 800490c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4a81      	ldr	r2, [pc, #516]	; (8004b18 <HAL_I2C_Init+0x274>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d807      	bhi.n	8004928 <HAL_I2C_Init+0x84>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a80      	ldr	r2, [pc, #512]	; (8004b1c <HAL_I2C_Init+0x278>)
 800491c:	4293      	cmp	r3, r2
 800491e:	bf94      	ite	ls
 8004920:	2301      	movls	r3, #1
 8004922:	2300      	movhi	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e006      	b.n	8004936 <HAL_I2C_Init+0x92>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a7d      	ldr	r2, [pc, #500]	; (8004b20 <HAL_I2C_Init+0x27c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	bf94      	ite	ls
 8004930:	2301      	movls	r3, #1
 8004932:	2300      	movhi	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0e7      	b.n	8004b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a78      	ldr	r2, [pc, #480]	; (8004b24 <HAL_I2C_Init+0x280>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0c9b      	lsrs	r3, r3, #18
 8004948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a6a      	ldr	r2, [pc, #424]	; (8004b18 <HAL_I2C_Init+0x274>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d802      	bhi.n	8004978 <HAL_I2C_Init+0xd4>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3301      	adds	r3, #1
 8004976:	e009      	b.n	800498c <HAL_I2C_Init+0xe8>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	4a69      	ldr	r2, [pc, #420]	; (8004b28 <HAL_I2C_Init+0x284>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	3301      	adds	r3, #1
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	430b      	orrs	r3, r1
 8004992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800499e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	495c      	ldr	r1, [pc, #368]	; (8004b18 <HAL_I2C_Init+0x274>)
 80049a8:	428b      	cmp	r3, r1
 80049aa:	d819      	bhi.n	80049e0 <HAL_I2C_Init+0x13c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1e59      	subs	r1, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ba:	1c59      	adds	r1, r3, #1
 80049bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049c0:	400b      	ands	r3, r1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_I2C_Init+0x138>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1e59      	subs	r1, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049da:	e051      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 80049dc:	2304      	movs	r3, #4
 80049de:	e04f      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d111      	bne.n	8004a0c <HAL_I2C_Init+0x168>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1e58      	subs	r0, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6859      	ldr	r1, [r3, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	440b      	add	r3, r1
 80049f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049fa:	3301      	adds	r3, #1
 80049fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e012      	b.n	8004a32 <HAL_I2C_Init+0x18e>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e58      	subs	r0, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	0099      	lsls	r1, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Init+0x196>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e022      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10e      	bne.n	8004a60 <HAL_I2C_Init+0x1bc>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e58      	subs	r0, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6859      	ldr	r1, [r3, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	440b      	add	r3, r1
 8004a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5e:	e00f      	b.n	8004a80 <HAL_I2C_Init+0x1dc>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1e58      	subs	r0, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6859      	ldr	r1, [r3, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	0099      	lsls	r1, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	6809      	ldr	r1, [r1, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69da      	ldr	r2, [r3, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6911      	ldr	r1, [r2, #16]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68d2      	ldr	r2, [r2, #12]
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	000186a0 	.word	0x000186a0
 8004b1c:	001e847f 	.word	0x001e847f
 8004b20:	003d08ff 	.word	0x003d08ff
 8004b24:	431bde83 	.word	0x431bde83
 8004b28:	10624dd3 	.word	0x10624dd3

08004b2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e128      	b.n	8004d90 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a90      	ldr	r2, [pc, #576]	; (8004d98 <HAL_I2S_Init+0x26c>)
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc ff03 	bl	8001964 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b74:	f023 030f 	bic.w	r3, r3, #15
 8004b78:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d060      	beq.n	8004c4c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b92:	2310      	movs	r3, #16
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	e001      	b.n	8004b9c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d802      	bhi.n	8004baa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004baa:	2001      	movs	r0, #1
 8004bac:	f001 f9a0 	bl	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004bb0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d125      	bne.n	8004c08 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	3305      	adds	r3, #5
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	e01f      	b.n	8004c26 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	3305      	adds	r3, #5
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	e00e      	b.n	8004c26 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	3305      	adds	r3, #5
 8004c24:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4a5c      	ldr	r2, [pc, #368]	; (8004d9c <HAL_I2S_Init+0x270>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e003      	b.n	8004c54 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d902      	bls.n	8004c60 <HAL_I2S_Init+0x134>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2bff      	cmp	r3, #255	; 0xff
 8004c5e:	d907      	bls.n	8004c70 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e08f      	b.n	8004d90 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	ea42 0103 	orr.w	r1, r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c8e:	f023 030f 	bic.w	r3, r3, #15
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6851      	ldr	r1, [r2, #4]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68d2      	ldr	r2, [r2, #12]
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6992      	ldr	r2, [r2, #24]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d161      	bne.n	8004d80 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a38      	ldr	r2, [pc, #224]	; (8004da0 <HAL_I2S_Init+0x274>)
 8004cc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a37      	ldr	r2, [pc, #220]	; (8004da4 <HAL_I2S_Init+0x278>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d101      	bne.n	8004cd0 <HAL_I2S_Init+0x1a4>
 8004ccc:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <HAL_I2S_Init+0x27c>)
 8004cce:	e001      	b.n	8004cd4 <HAL_I2S_Init+0x1a8>
 8004cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	4932      	ldr	r1, [pc, #200]	; (8004da4 <HAL_I2S_Init+0x278>)
 8004cdc:	428a      	cmp	r2, r1
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2S_Init+0x1b8>
 8004ce0:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <HAL_I2S_Init+0x27c>)
 8004ce2:	e001      	b.n	8004ce8 <HAL_I2S_Init+0x1bc>
 8004ce4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004ce8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cec:	f023 030f 	bic.w	r3, r3, #15
 8004cf0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <HAL_I2S_Init+0x278>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2S_Init+0x1d4>
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_I2S_Init+0x27c>)
 8004cfe:	e001      	b.n	8004d04 <HAL_I2S_Init+0x1d8>
 8004d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d04:	2202      	movs	r2, #2
 8004d06:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a25      	ldr	r2, [pc, #148]	; (8004da4 <HAL_I2S_Init+0x278>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_I2S_Init+0x1ea>
 8004d12:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_I2S_Init+0x27c>)
 8004d14:	e001      	b.n	8004d1a <HAL_I2S_Init+0x1ee>
 8004d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d26:	d003      	beq.n	8004d30 <HAL_I2S_Init+0x204>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	e001      	b.n	8004d3c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d46:	4313      	orrs	r3, r2
 8004d48:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d50:	4313      	orrs	r3, r2
 8004d52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	897b      	ldrh	r3, [r7, #10]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d68:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <HAL_I2S_Init+0x278>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_I2S_Init+0x24c>
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <HAL_I2S_Init+0x27c>)
 8004d76:	e001      	b.n	8004d7c <HAL_I2S_Init+0x250>
 8004d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d7c:	897a      	ldrh	r2, [r7, #10]
 8004d7e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	08004ea3 	.word	0x08004ea3
 8004d9c:	cccccccd 	.word	0xcccccccd
 8004da0:	08004fb9 	.word	0x08004fb9
 8004da4:	40003800 	.word	0x40003800
 8004da8:	40003400 	.word	0x40003400

08004dac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	881a      	ldrh	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e2c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ffb8 	bl	8004dac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	b292      	uxth	r2, r2
 8004e58:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	1c9a      	adds	r2, r3, #2
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10e      	bne.n	8004e9a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff93 	bl	8004dc0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d13a      	bne.n	8004f34 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d109      	bne.n	8004edc <I2S_IRQHandler+0x3a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d102      	bne.n	8004edc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff ffb4 	bl	8004e44 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d126      	bne.n	8004f34 <I2S_IRQHandler+0x92>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d11f      	bne.n	8004f34 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	f043 0202 	orr.w	r2, r3, #2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ff50 	bl	8004dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d136      	bne.n	8004fae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d109      	bne.n	8004f5e <I2S_IRQHandler+0xbc>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d102      	bne.n	8004f5e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff45 	bl	8004de8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d122      	bne.n	8004fae <I2S_IRQHandler+0x10c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d11b      	bne.n	8004fae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f84:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	f043 0204 	orr.w	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff ff13 	bl	8004dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4aa2      	ldr	r2, [pc, #648]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fd2:	4ba2      	ldr	r3, [pc, #648]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fd4:	e001      	b.n	8004fda <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a9b      	ldr	r2, [pc, #620]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ff0:	4b9a      	ldr	r3, [pc, #616]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ff2:	e001      	b.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005004:	d004      	beq.n	8005010 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f040 8099 	bne.w	8005142 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f925 	bl	8005274 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9c8 	bl	80053d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d13a      	bne.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d035      	beq.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7e      	ldr	r2, [pc, #504]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005062:	4b7e      	ldr	r3, [pc, #504]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005064:	e001      	b.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4979      	ldr	r1, [pc, #484]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005072:	428b      	cmp	r3, r1
 8005074:	d101      	bne.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005076:	4b79      	ldr	r3, [pc, #484]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005078:	e001      	b.n	800507e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800507a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005082:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005092:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0202 	orr.w	r2, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fe88 	bl	8004dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	f040 80be 	bne.w	800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80b8 	beq.w	800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a59      	ldr	r2, [pc, #356]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050f8:	e001      	b.n	80050fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4954      	ldr	r1, [pc, #336]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005106:	428b      	cmp	r3, r1
 8005108:	d101      	bne.n	800510e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800510a:	4b54      	ldr	r3, [pc, #336]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800510c:	e001      	b.n	8005112 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800510e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005112:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005116:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60bb      	str	r3, [r7, #8]
 8005124:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0204 	orr.w	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fe4a 	bl	8004dd4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005140:	e084      	b.n	800524c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d107      	bne.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8be 	bl	80052d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d107      	bne.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8fd 	bl	8005370 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d12f      	bne.n	80051e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d02a      	beq.n	80051e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005198:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80051a4:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051a6:	e001      	b.n	80051ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80051a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4929      	ldr	r1, [pc, #164]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051b4:	428b      	cmp	r3, r1
 80051b6:	d101      	bne.n	80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051ba:	e001      	b.n	80051c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80051bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	f043 0202 	orr.w	r2, r3, #2
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fdfa 	bl	8004dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d131      	bne.n	800524e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02c      	beq.n	800524e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a17      	ldr	r2, [pc, #92]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005200:	e001      	b.n	8005206 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4912      	ldr	r1, [pc, #72]	; (8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800520e:	428b      	cmp	r3, r1
 8005210:	d101      	bne.n	8005216 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005214:	e001      	b.n	800521a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800521a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800521e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800522e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	f043 0204 	orr.w	r2, r3, #4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fdc5 	bl	8004dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800524a:	e000      	b.n	800524e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800524c:	bf00      	nop
}
 800524e:	bf00      	nop
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40003800 	.word	0x40003800
 800525c:	40003400 	.word	0x40003400

08005260 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	1c99      	adds	r1, r3, #2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6251      	str	r1, [r2, #36]	; 0x24
 8005286:	881a      	ldrh	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d113      	bne.n	80052ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ffc9 	bl	8005260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c99      	adds	r1, r3, #2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6251      	str	r1, [r2, #36]	; 0x24
 80052ea:	8819      	ldrh	r1, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <I2SEx_TxISR_I2SExt+0x90>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <I2SEx_TxISR_I2SExt+0x22>
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <I2SEx_TxISR_I2SExt+0x94>)
 80052f8:	e001      	b.n	80052fe <I2SEx_TxISR_I2SExt+0x26>
 80052fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052fe:	460a      	mov	r2, r1
 8005300:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d121      	bne.n	800535e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <I2SEx_TxISR_I2SExt+0x90>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <I2SEx_TxISR_I2SExt+0x50>
 8005324:	4b11      	ldr	r3, [pc, #68]	; (800536c <I2SEx_TxISR_I2SExt+0x94>)
 8005326:	e001      	b.n	800532c <I2SEx_TxISR_I2SExt+0x54>
 8005328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	490d      	ldr	r1, [pc, #52]	; (8005368 <I2SEx_TxISR_I2SExt+0x90>)
 8005334:	428b      	cmp	r3, r1
 8005336:	d101      	bne.n	800533c <I2SEx_TxISR_I2SExt+0x64>
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <I2SEx_TxISR_I2SExt+0x94>)
 800533a:	e001      	b.n	8005340 <I2SEx_TxISR_I2SExt+0x68>
 800533c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005340:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005344:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff81 	bl	8005260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40003800 	.word	0x40003800
 800536c:	40003400 	.word	0x40003400

08005370 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68d8      	ldr	r0, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	1c99      	adds	r1, r3, #2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005388:	b282      	uxth	r2, r0
 800538a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d113      	bne.n	80053cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff ff4a 	bl	8005260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <I2SEx_RxISR_I2SExt+0x90>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <I2SEx_RxISR_I2SExt+0x16>
 80053e6:	4b20      	ldr	r3, [pc, #128]	; (8005468 <I2SEx_RxISR_I2SExt+0x94>)
 80053e8:	e001      	b.n	80053ee <I2SEx_RxISR_I2SExt+0x1a>
 80053ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ee:	68d8      	ldr	r0, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	1c99      	adds	r1, r3, #2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053fa:	b282      	uxth	r2, r0
 80053fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d121      	bne.n	800545a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <I2SEx_RxISR_I2SExt+0x90>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <I2SEx_RxISR_I2SExt+0x50>
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <I2SEx_RxISR_I2SExt+0x94>)
 8005422:	e001      	b.n	8005428 <I2SEx_RxISR_I2SExt+0x54>
 8005424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	490d      	ldr	r1, [pc, #52]	; (8005464 <I2SEx_RxISR_I2SExt+0x90>)
 8005430:	428b      	cmp	r3, r1
 8005432:	d101      	bne.n	8005438 <I2SEx_RxISR_I2SExt+0x64>
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <I2SEx_RxISR_I2SExt+0x94>)
 8005436:	e001      	b.n	800543c <I2SEx_RxISR_I2SExt+0x68>
 8005438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005440:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff03 	bl	8005260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40003800 	.word	0x40003800
 8005468:	40003400 	.word	0x40003400

0800546c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e264      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d075      	beq.n	8005576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800548a:	4ba3      	ldr	r3, [pc, #652]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 030c 	and.w	r3, r3, #12
 8005492:	2b04      	cmp	r3, #4
 8005494:	d00c      	beq.n	80054b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005496:	4ba0      	ldr	r3, [pc, #640]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d112      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a2:	4b9d      	ldr	r3, [pc, #628]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ae:	d10b      	bne.n	80054c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	4b99      	ldr	r3, [pc, #612]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d05b      	beq.n	8005574 <HAL_RCC_OscConfig+0x108>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d157      	bne.n	8005574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e23f      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCC_OscConfig+0x74>
 80054d2:	4b91      	ldr	r3, [pc, #580]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a90      	ldr	r2, [pc, #576]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e01d      	b.n	800551c <HAL_RCC_OscConfig+0xb0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e8:	d10c      	bne.n	8005504 <HAL_RCC_OscConfig+0x98>
 80054ea:	4b8b      	ldr	r3, [pc, #556]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a8a      	ldr	r2, [pc, #552]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b88      	ldr	r3, [pc, #544]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a87      	ldr	r2, [pc, #540]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	e00b      	b.n	800551c <HAL_RCC_OscConfig+0xb0>
 8005504:	4b84      	ldr	r3, [pc, #528]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a83      	ldr	r2, [pc, #524]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800550a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b81      	ldr	r3, [pc, #516]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a80      	ldr	r2, [pc, #512]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d013      	beq.n	800554c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fc fc90 	bl	8001e48 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800552c:	f7fc fc8c 	bl	8001e48 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e204      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553e:	4b76      	ldr	r3, [pc, #472]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0xc0>
 800554a:	e014      	b.n	8005576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fc fc7c 	bl	8001e48 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005554:	f7fc fc78 	bl	8001e48 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b64      	cmp	r3, #100	; 0x64
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e1f0      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005566:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0xe8>
 8005572:	e000      	b.n	8005576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d063      	beq.n	800564a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005582:	4b65      	ldr	r3, [pc, #404]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00b      	beq.n	80055a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800558e:	4b62      	ldr	r3, [pc, #392]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005596:	2b08      	cmp	r3, #8
 8005598:	d11c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559a:	4b5f      	ldr	r3, [pc, #380]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055a6:	4b5c      	ldr	r3, [pc, #368]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <HAL_RCC_OscConfig+0x152>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e1c4      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055be:	4b56      	ldr	r3, [pc, #344]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4952      	ldr	r1, [pc, #328]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d2:	e03a      	b.n	800564a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d020      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055dc:	4b4f      	ldr	r3, [pc, #316]	; (800571c <HAL_RCC_OscConfig+0x2b0>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fc fc31 	bl	8001e48 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ea:	f7fc fc2d 	bl	8001e48 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e1a5      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055fc:	4b46      	ldr	r3, [pc, #280]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005608:	4b43      	ldr	r3, [pc, #268]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4940      	ldr	r1, [pc, #256]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]
 800561c:	e015      	b.n	800564a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561e:	4b3f      	ldr	r3, [pc, #252]	; (800571c <HAL_RCC_OscConfig+0x2b0>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fc fc10 	bl	8001e48 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800562c:	f7fc fc0c 	bl	8001e48 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e184      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1f0      	bne.n	800562c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d030      	beq.n	80056b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d016      	beq.n	800568c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800565e:	4b30      	ldr	r3, [pc, #192]	; (8005720 <HAL_RCC_OscConfig+0x2b4>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc fbf0 	bl	8001e48 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800566c:	f7fc fbec 	bl	8001e48 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e164      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800567e:	4b26      	ldr	r3, [pc, #152]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x200>
 800568a:	e015      	b.n	80056b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <HAL_RCC_OscConfig+0x2b4>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005692:	f7fc fbd9 	bl	8001e48 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800569a:	f7fc fbd5 	bl	8001e48 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e14d      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ac:	4b1a      	ldr	r3, [pc, #104]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f0      	bne.n	800569a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a0 	beq.w	8005806 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ca:	4b13      	ldr	r3, [pc, #76]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e4:	6413      	str	r3, [r2, #64]	; 0x40
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_OscConfig+0x2b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d121      	bne.n	8005746 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCC_OscConfig+0x2b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a07      	ldr	r2, [pc, #28]	; (8005724 <HAL_RCC_OscConfig+0x2b8>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800570e:	f7fc fb9b 	bl	8001e48 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	e011      	b.n	800573a <HAL_RCC_OscConfig+0x2ce>
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800
 800571c:	42470000 	.word	0x42470000
 8005720:	42470e80 	.word	0x42470e80
 8005724:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005728:	f7fc fb8e 	bl	8001e48 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e106      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573a:	4b85      	ldr	r3, [pc, #532]	; (8005950 <HAL_RCC_OscConfig+0x4e4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x2f0>
 800574e:	4b81      	ldr	r3, [pc, #516]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	4a80      	ldr	r2, [pc, #512]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6713      	str	r3, [r2, #112]	; 0x70
 800575a:	e01c      	b.n	8005796 <HAL_RCC_OscConfig+0x32a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b05      	cmp	r3, #5
 8005762:	d10c      	bne.n	800577e <HAL_RCC_OscConfig+0x312>
 8005764:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a7a      	ldr	r2, [pc, #488]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 800576a:	f043 0304 	orr.w	r3, r3, #4
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	4b78      	ldr	r3, [pc, #480]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	4a77      	ldr	r2, [pc, #476]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6713      	str	r3, [r2, #112]	; 0x70
 800577c:	e00b      	b.n	8005796 <HAL_RCC_OscConfig+0x32a>
 800577e:	4b75      	ldr	r3, [pc, #468]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a74      	ldr	r2, [pc, #464]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b72      	ldr	r3, [pc, #456]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a71      	ldr	r2, [pc, #452]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005790:	f023 0304 	bic.w	r3, r3, #4
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d015      	beq.n	80057ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579e:	f7fc fb53 	bl	8001e48 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a4:	e00a      	b.n	80057bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fc fb4f 	bl	8001e48 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e0c5      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057bc:	4b65      	ldr	r3, [pc, #404]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ee      	beq.n	80057a6 <HAL_RCC_OscConfig+0x33a>
 80057c8:	e014      	b.n	80057f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ca:	f7fc fb3d 	bl	8001e48 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d0:	e00a      	b.n	80057e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d2:	f7fc fb39 	bl	8001e48 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e0af      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e8:	4b5a      	ldr	r3, [pc, #360]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ee      	bne.n	80057d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d105      	bne.n	8005806 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fa:	4b56      	ldr	r3, [pc, #344]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	4a55      	ldr	r2, [pc, #340]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005804:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 809b 	beq.w	8005946 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005810:	4b50      	ldr	r3, [pc, #320]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b08      	cmp	r3, #8
 800581a:	d05c      	beq.n	80058d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d141      	bne.n	80058a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005824:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <HAL_RCC_OscConfig+0x4ec>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582a:	f7fc fb0d 	bl	8001e48 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005832:	f7fc fb09 	bl	8001e48 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e081      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005844:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f0      	bne.n	8005832 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	041b      	lsls	r3, r3, #16
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	4937      	ldr	r1, [pc, #220]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 8005876:	4313      	orrs	r3, r2
 8005878:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800587a:	4b37      	ldr	r3, [pc, #220]	; (8005958 <HAL_RCC_OscConfig+0x4ec>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fc fae2 	bl	8001e48 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005888:	f7fc fade 	bl	8001e48 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e056      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589a:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0x41c>
 80058a6:	e04e      	b.n	8005946 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_RCC_OscConfig+0x4ec>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ae:	f7fc facb 	bl	8001e48 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b6:	f7fc fac7 	bl	8001e48 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e03f      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x44a>
 80058d4:	e037      	b.n	8005946 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e032      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <HAL_RCC_OscConfig+0x4e8>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d028      	beq.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d121      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d11a      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005918:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800591a:	4293      	cmp	r3, r2
 800591c:	d111      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	3b01      	subs	r3, #1
 800592c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d107      	bne.n	8005942 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40007000 	.word	0x40007000
 8005954:	40023800 	.word	0x40023800
 8005958:	42470060 	.word	0x42470060

0800595c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0cc      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005970:	4b68      	ldr	r3, [pc, #416]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d90c      	bls.n	8005998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b65      	ldr	r3, [pc, #404]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b63      	ldr	r3, [pc, #396]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e0b8      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b0:	4b59      	ldr	r3, [pc, #356]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	4a58      	ldr	r2, [pc, #352]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c8:	4b53      	ldr	r3, [pc, #332]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a52      	ldr	r2, [pc, #328]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	494d      	ldr	r1, [pc, #308]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d044      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b47      	ldr	r3, [pc, #284]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d119      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e07f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1a:	4b3f      	ldr	r3, [pc, #252]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e06f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e067      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3a:	4b37      	ldr	r3, [pc, #220]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4934      	ldr	r1, [pc, #208]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a4c:	f7fc f9fc 	bl	8001e48 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fc f9f8 	bl	8001e48 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e04f      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 020c 	and.w	r2, r3, #12
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d1eb      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a7c:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d20c      	bcs.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8a:	4b22      	ldr	r3, [pc, #136]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e032      	b.n	8005b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4916      	ldr	r1, [pc, #88]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ace:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	490e      	ldr	r1, [pc, #56]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ae2:	f000 f821 	bl	8005b28 <HAL_RCC_GetSysClockFreq>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	091b      	lsrs	r3, r3, #4
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	490a      	ldr	r1, [pc, #40]	; (8005b1c <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	5ccb      	ldrb	r3, [r1, r3]
 8005af6:	fa22 f303 	lsr.w	r3, r2, r3
 8005afa:	4a09      	ldr	r2, [pc, #36]	; (8005b20 <HAL_RCC_ClockConfig+0x1c4>)
 8005afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005afe:	4b09      	ldr	r3, [pc, #36]	; (8005b24 <HAL_RCC_ClockConfig+0x1c8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fc f95c 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	40023c00 	.word	0x40023c00
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800bed0 	.word	0x0800bed0
 8005b20:	20000000 	.word	0x20000000
 8005b24:	20000004 	.word	0x20000004

08005b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b40:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 030c 	and.w	r3, r3, #12
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d00d      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x40>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	f200 80bd 	bhi.w	8005ccc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_RCC_GetSysClockFreq+0x34>
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d003      	beq.n	8005b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b5a:	e0b7      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b5c:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b5e:	60bb      	str	r3, [r7, #8]
       break;
 8005b60:	e0b7      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b62:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b64:	60bb      	str	r3, [r7, #8]
      break;
 8005b66:	e0b4      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b68:	4b5d      	ldr	r3, [pc, #372]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b72:	4b5b      	ldr	r3, [pc, #364]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04d      	beq.n	8005c1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7e:	4b58      	ldr	r3, [pc, #352]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	461a      	mov	r2, r3
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	ea02 0800 	and.w	r8, r2, r0
 8005b96:	ea03 0901 	and.w	r9, r3, r1
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	014b      	lsls	r3, r1, #5
 8005ba8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bac:	0142      	lsls	r2, r0, #5
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	ebb0 0008 	subs.w	r0, r0, r8
 8005bb6:	eb61 0109 	sbc.w	r1, r1, r9
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	018b      	lsls	r3, r1, #6
 8005bc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bc8:	0182      	lsls	r2, r0, #6
 8005bca:	1a12      	subs	r2, r2, r0
 8005bcc:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd0:	f04f 0000 	mov.w	r0, #0
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	00d9      	lsls	r1, r3, #3
 8005bda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bde:	00d0      	lsls	r0, r2, #3
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	eb12 0208 	adds.w	r2, r2, r8
 8005be8:	eb43 0309 	adc.w	r3, r3, r9
 8005bec:	f04f 0000 	mov.w	r0, #0
 8005bf0:	f04f 0100 	mov.w	r1, #0
 8005bf4:	0259      	lsls	r1, r3, #9
 8005bf6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005bfa:	0250      	lsls	r0, r2, #9
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	f7fb f81c 	bl	8000c48 <__aeabi_uldivmod>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4613      	mov	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e04a      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c1a:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	099b      	lsrs	r3, r3, #6
 8005c20:	461a      	mov	r2, r3
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	ea02 0400 	and.w	r4, r2, r0
 8005c32:	ea03 0501 	and.w	r5, r3, r1
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	014b      	lsls	r3, r1, #5
 8005c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c48:	0142      	lsls	r2, r0, #5
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	1b00      	subs	r0, r0, r4
 8005c50:	eb61 0105 	sbc.w	r1, r1, r5
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	018b      	lsls	r3, r1, #6
 8005c5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c62:	0182      	lsls	r2, r0, #6
 8005c64:	1a12      	subs	r2, r2, r0
 8005c66:	eb63 0301 	sbc.w	r3, r3, r1
 8005c6a:	f04f 0000 	mov.w	r0, #0
 8005c6e:	f04f 0100 	mov.w	r1, #0
 8005c72:	00d9      	lsls	r1, r3, #3
 8005c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c78:	00d0      	lsls	r0, r2, #3
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	1912      	adds	r2, r2, r4
 8005c80:	eb45 0303 	adc.w	r3, r5, r3
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	0299      	lsls	r1, r3, #10
 8005c8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c92:	0290      	lsls	r0, r2, #10
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	f7fa ffd0 	bl	8000c48 <__aeabi_uldivmod>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4613      	mov	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	60bb      	str	r3, [r7, #8]
      break;
 8005cca:	e002      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cce:	60bb      	str	r3, [r7, #8]
      break;
 8005cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	00f42400 	.word	0x00f42400
 8005ce8:	007a1200 	.word	0x007a1200

08005cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000000 	.word	0x20000000

08005d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d08:	f7ff fff0 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	0a9b      	lsrs	r3, r3, #10
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4903      	ldr	r1, [pc, #12]	; (8005d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40023800 	.word	0x40023800
 8005d28:	0800bee0 	.word	0x0800bee0

08005d2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d035      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d54:	4b62      	ldr	r3, [pc, #392]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d5a:	f7fc f875 	bl	8001e48 <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d62:	f7fc f871 	bl	8001e48 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e0b0      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d74:	4b5b      	ldr	r3, [pc, #364]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	019a      	lsls	r2, r3, #6
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	071b      	lsls	r3, r3, #28
 8005d8c:	4955      	ldr	r1, [pc, #340]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d94:	4b52      	ldr	r3, [pc, #328]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d9a:	f7fc f855 	bl	8001e48 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005da2:	f7fc f851 	bl	8001e48 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e090      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005db4:	4b4b      	ldr	r3, [pc, #300]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8083 	beq.w	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	4b44      	ldr	r3, [pc, #272]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	4a43      	ldr	r2, [pc, #268]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dde:	4b41      	ldr	r3, [pc, #260]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3e      	ldr	r2, [pc, #248]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005df6:	f7fc f827 	bl	8001e48 <HAL_GetTick>
 8005dfa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dfe:	f7fc f823 	bl	8001e48 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e062      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e10:	4b35      	ldr	r3, [pc, #212]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e1c:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02f      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d028      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e44:	4b29      	ldr	r3, [pc, #164]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4a:	4b28      	ldr	r3, [pc, #160]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e50:	4a24      	ldr	r2, [pc, #144]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d114      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e62:	f7fb fff1 	bl	8001e48 <HAL_GetTick>
 8005e66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fb ffed 	bl	8001e48 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e02a      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e80:	4b18      	ldr	r3, [pc, #96]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0ee      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e98:	d10d      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	608b      	str	r3, [r1, #8]
 8005eb4:	e005      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ebc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ec0:	6093      	str	r3, [r2, #8]
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ece:	4905      	ldr	r1, [pc, #20]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	42470068 	.word	0x42470068
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	42470e40 	.word	0x42470e40

08005ef0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d13e      	bne.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d12f      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f24:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f26:	617b      	str	r3, [r7, #20]
          break;
 8005f28:	e02f      	b.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f36:	d108      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f38:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e007      	b.n	8005f5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f52:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f5a:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	fb02 f303 	mul.w	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f74:	0f1b      	lsrs	r3, r3, #28
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
          break;
 8005f82:	e002      	b.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
          break;
 8005f88:	bf00      	nop
        }
      }
      break;
 8005f8a:	bf00      	nop
    }
  }
  return frequency;
 8005f8c:	697b      	ldr	r3, [r7, #20]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	00bb8000 	.word	0x00bb8000
 8005fa4:	007a1200 	.word	0x007a1200
 8005fa8:	00f42400 	.word	0x00f42400

08005fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07b      	b.n	80060b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fce:	d009      	beq.n	8005fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	61da      	str	r2, [r3, #28]
 8005fd6:	e005      	b.n	8005fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fb fd30 	bl	8001a64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	ea42 0103 	orr.w	r1, r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f003 0104 	and.w	r1, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	f003 0210 	and.w	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060be:	b084      	sub	sp, #16
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	f107 001c 	add.w	r0, r7, #28
 80060cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d122      	bne.n	800611c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d105      	bne.n	8006110 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f99f 	bl	8006454 <USB_CoreReset>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
 800611a:	e01a      	b.n	8006152 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f993 	bl	8006454 <USB_CoreReset>
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
 8006144:	e005      	b.n	8006152 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10b      	bne.n	8006170 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f043 0206 	orr.w	r2, r3, #6
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f043 0220 	orr.w	r2, r3, #32
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800617c:	b004      	add	sp, #16
 800617e:	4770      	bx	lr

08006180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f043 0201 	orr.w	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f023 0201 	bic.w	r2, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d115      	bne.n	8006212 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061f2:	2001      	movs	r0, #1
 80061f4:	f7fb fe34 	bl	8001e60 <HAL_Delay>
      ms++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f919 	bl	8006436 <USB_GetMode>
 8006204:	4603      	mov	r3, r0
 8006206:	2b01      	cmp	r3, #1
 8006208:	d01e      	beq.n	8006248 <USB_SetCurrentMode+0x84>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b31      	cmp	r3, #49	; 0x31
 800620e:	d9f0      	bls.n	80061f2 <USB_SetCurrentMode+0x2e>
 8006210:	e01a      	b.n	8006248 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d115      	bne.n	8006244 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006224:	2001      	movs	r0, #1
 8006226:	f7fb fe1b 	bl	8001e60 <HAL_Delay>
      ms++;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f900 	bl	8006436 <USB_GetMode>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <USB_SetCurrentMode+0x84>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b31      	cmp	r3, #49	; 0x31
 8006240:	d9f0      	bls.n	8006224 <USB_SetCurrentMode+0x60>
 8006242:	e001      	b.n	8006248 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e005      	b.n	8006254 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b32      	cmp	r3, #50	; 0x32
 800624c:	d101      	bne.n	8006252 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3301      	adds	r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <USB_FlushTxFifo+0x44>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e006      	b.n	8006294 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b20      	cmp	r3, #32
 8006290:	d0f1      	beq.n	8006276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	00030d40 	.word	0x00030d40

080062a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2210      	movs	r2, #16
 80062b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <USB_FlushRxFifo+0x3c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e006      	b.n	80062d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d0f1      	beq.n	80062b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	00030d40 	.word	0x00030d40

080062e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	460b      	mov	r3, r1
 80062f4:	71fb      	strb	r3, [r7, #7]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d123      	bne.n	8006352 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800630a:	88bb      	ldrh	r3, [r7, #4]
 800630c:	3303      	adds	r3, #3
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e018      	b.n	800634a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	031a      	lsls	r2, r3, #12
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006324:	461a      	mov	r2, r3
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	3301      	adds	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3301      	adds	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3301      	adds	r3, #1
 8006342:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	3301      	adds	r3, #1
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3e2      	bcc.n	8006318 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3724      	adds	r7, #36	; 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006360:	b480      	push	{r7}
 8006362:	b08b      	sub	sp, #44	; 0x2c
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	b29b      	uxth	r3, r3
 800637c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	e014      	b.n	80063b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	601a      	str	r2, [r3, #0]
    pDest++;
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	3301      	adds	r3, #1
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	3301      	adds	r3, #1
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	3301      	adds	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	3301      	adds	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	3301      	adds	r3, #1
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d3e6      	bcc.n	800638c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063be:	8bfb      	ldrh	r3, [r7, #30]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01e      	beq.n	8006402 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ce:	461a      	mov	r2, r3
 80063d0:	f107 0310 	add.w	r3, r7, #16
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	701a      	strb	r2, [r3, #0]
      i++;
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	3301      	adds	r3, #1
 80063ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	3301      	adds	r3, #1
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063fc:	8bfb      	ldrh	r3, [r7, #30]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1ea      	bne.n	80063d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006404:	4618      	mov	r0, r3
 8006406:	372c      	adds	r7, #44	; 0x2c
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
	...

08006454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <USB_CoreReset+0x60>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e01a      	b.n	80064a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	daf3      	bge.n	8006460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <USB_CoreReset+0x60>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d901      	bls.n	8006498 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e006      	b.n	80064a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d0f1      	beq.n	8006488 <USB_CoreReset+0x34>

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	00030d40 	.word	0x00030d40

080064b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b8:	b084      	sub	sp, #16
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	f107 001c 	add.w	r0, r7, #28
 80064c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d4:	461a      	mov	r2, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10a      	bne.n	8006526 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e014      	b.n	8006550 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006534:	f023 0304 	bic.w	r3, r3, #4
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e009      	b.n	8006550 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800654a:	f023 0304 	bic.w	r3, r3, #4
 800654e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006550:	2110      	movs	r1, #16
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fe82 	bl	800625c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fea3 	bl	80062a4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	e015      	b.n	8006590 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	461a      	mov	r2, r3
 8006572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006576:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	461a      	mov	r2, r3
 8006586:	2300      	movs	r3, #0
 8006588:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d3e5      	bcc.n	8006564 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <USB_HostInit+0x154>)
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a13      	ldr	r2, [pc, #76]	; (8006610 <USB_HostInit+0x158>)
 80065c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80065c8:	e009      	b.n	80065de <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a10      	ldr	r2, [pc, #64]	; (8006614 <USB_HostInit+0x15c>)
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <USB_HostInit+0x160>)
 80065da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f043 0210 	orr.w	r2, r3, #16
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <USB_HostInit+0x164>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	01000200 	.word	0x01000200
 8006610:	00e00300 	.word	0x00e00300
 8006614:	00600080 	.word	0x00600080
 8006618:	004000e0 	.word	0x004000e0
 800661c:	a3200008 	.word	0xa3200008

08006620 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006658:	4313      	orrs	r3, r2
 800665a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d107      	bne.n	8006672 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006668:	461a      	mov	r2, r3
 800666a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800666e:	6053      	str	r3, [r2, #4]
 8006670:	e009      	b.n	8006686 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d106      	bne.n	8006686 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667e:	461a      	mov	r2, r3
 8006680:	f241 7370 	movw	r3, #6000	; 0x1770
 8006684:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066c4:	2064      	movs	r0, #100	; 0x64
 80066c6:	f7fb fbcb 	bl	8001e60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066d8:	200a      	movs	r0, #10
 80066da:	f7fb fbc1 	bl	8001e60 <HAL_Delay>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800670c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <USB_DriveVbus+0x44>
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d106      	bne.n	800672c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800672a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d109      	bne.n	800674c <USB_DriveVbus+0x64>
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	0c5b      	lsrs	r3, r3, #17
 8006778:	f003 0303 	and.w	r3, r3, #3
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	b29b      	uxth	r3, r3
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	70fb      	strb	r3, [r7, #3]
 80067be:	460b      	mov	r3, r1
 80067c0:	70bb      	strb	r3, [r7, #2]
 80067c2:	4613      	mov	r3, r2
 80067c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80067e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d87e      	bhi.n	80068e8 <USB_HC_Init+0x13c>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <USB_HC_Init+0x44>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006801 	.word	0x08006801
 80067f4:	080068ab 	.word	0x080068ab
 80067f8:	08006801 	.word	0x08006801
 80067fc:	0800686d 	.word	0x0800686d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	461a      	mov	r2, r3
 800680e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006812:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006818:	2b00      	cmp	r3, #0
 800681a:	da10      	bge.n	800683e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800683c:	e057      	b.n	80068ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d051      	beq.n	80068ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006864:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006868:	60d3      	str	r3, [r2, #12]
      break;
 800686a:	e040      	b.n	80068ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006878:	461a      	mov	r2, r3
 800687a:	f240 639d 	movw	r3, #1693	; 0x69d
 800687e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006880:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	da34      	bge.n	80068f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068a8:	e023      	b.n	80068f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	461a      	mov	r2, r3
 80068b8:	f240 2325 	movw	r3, #549	; 0x225
 80068bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da17      	bge.n	80068f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80068e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068e6:	e006      	b.n	80068f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
      break;
 80068ec:	e004      	b.n	80068f8 <USB_HC_Init+0x14c>
      break;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <USB_HC_Init+0x14c>
      break;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <USB_HC_Init+0x14c>
      break;
 80068f6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	2101      	movs	r1, #1
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	6939      	ldr	r1, [r7, #16]
 800690e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006912:	4313      	orrs	r3, r2
 8006914:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006922:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	da03      	bge.n	8006932 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	e001      	b.n	8006936 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff0f 	bl	800675a <USB_GetHostSpeed>
 800693c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800693e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006942:	2b02      	cmp	r3, #2
 8006944:	d106      	bne.n	8006954 <USB_HC_Init+0x1a8>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d003      	beq.n	8006954 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800694c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e001      	b.n	8006958 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006958:	787b      	ldrb	r3, [r7, #1]
 800695a:	059b      	lsls	r3, r3, #22
 800695c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006960:	78bb      	ldrb	r3, [r7, #2]
 8006962:	02db      	lsls	r3, r3, #11
 8006964:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006968:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800696a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800696e:	049b      	lsls	r3, r3, #18
 8006970:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006974:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006976:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006978:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800697c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	0159      	lsls	r1, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	440b      	add	r3, r1
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006994:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006996:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800699a:	2b03      	cmp	r3, #3
 800699c:	d10f      	bne.n	80069be <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	78fa      	ldrb	r2, [r7, #3]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80069be:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	; 0x30
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80069e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02d      	beq.n	8006a4e <USB_HC_StartXfer+0x86>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d129      	bne.n	8006a4e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d117      	bne.n	8006a30 <USB_HC_StartXfer+0x68>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	79db      	ldrb	r3, [r3, #7]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <USB_HC_StartXfer+0x48>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	79db      	ldrb	r3, [r3, #7]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d10f      	bne.n	8006a30 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <USB_HC_StartXfer+0x86>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	795b      	ldrb	r3, [r3, #5]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d107      	bne.n	8006a4e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa2f 	bl	8006ea8 <USB_DoPing>
      return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e0f8      	b.n	8006c40 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	8912      	ldrh	r2, [r2, #8]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3b01      	subs	r3, #1
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	8912      	ldrh	r2, [r2, #8]
 8006a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a6a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a6e:	8b7b      	ldrh	r3, [r7, #26]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d90b      	bls.n	8006a8c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006a74:	8b7b      	ldrh	r3, [r7, #26]
 8006a76:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	8912      	ldrh	r2, [r2, #8]
 8006a7e:	fb02 f203 	mul.w	r2, r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	611a      	str	r2, [r3, #16]
 8006a86:	e001      	b.n	8006a8c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	78db      	ldrb	r3, [r3, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	8912      	ldrh	r2, [r2, #8]
 8006a9a:	fb02 f203 	mul.w	r2, r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	611a      	str	r2, [r3, #16]
 8006aa2:	e003      	b.n	8006aac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab6:	04d9      	lsls	r1, r3, #19
 8006ab8:	4b63      	ldr	r3, [pc, #396]	; (8006c48 <USB_HC_StartXfer+0x280>)
 8006aba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006abc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	7a9b      	ldrb	r3, [r3, #10]
 8006ac2:	075b      	lsls	r3, r3, #29
 8006ac4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	0148      	lsls	r0, r1, #5
 8006acc:	6a39      	ldr	r1, [r7, #32]
 8006ace:	4401      	add	r1, r0
 8006ad0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ad4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ad6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68d9      	ldr	r1, [r3, #12]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aee:	460a      	mov	r2, r1
 8006af0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	6a3a      	ldr	r2, [r7, #32]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	7e7b      	ldrb	r3, [r7, #25]
 8006b3a:	075b      	lsls	r3, r3, #29
 8006b3c:	69f9      	ldr	r1, [r7, #28]
 8006b3e:	0148      	lsls	r0, r1, #5
 8006b40:	6a39      	ldr	r1, [r7, #32]
 8006b42:	4401      	add	r1, r0
 8006b44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b62:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	e003      	b.n	8006b7e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b7c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b92:	461a      	mov	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e04e      	b.n	8006c40 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	78db      	ldrb	r3, [r3, #3]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d149      	bne.n	8006c3e <USB_HC_StartXfer+0x276>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d045      	beq.n	8006c3e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	79db      	ldrb	r3, [r3, #7]
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d830      	bhi.n	8006c1c <USB_HC_StartXfer+0x254>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USB_HC_StartXfer+0x1f8>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006bd1 	.word	0x08006bd1
 8006bcc:	08006bf5 	.word	0x08006bf5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	3303      	adds	r3, #3
 8006bd6:	089b      	lsrs	r3, r3, #2
 8006bd8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006bda:	8afa      	ldrh	r2, [r7, #22]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d91c      	bls.n	8006c20 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bf2:	e015      	b.n	8006c20 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	3303      	adds	r3, #3
 8006bfa:	089b      	lsrs	r3, r3, #2
 8006bfc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bfe:	8afa      	ldrh	r2, [r7, #22]
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d90a      	bls.n	8006c24 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c1a:	e003      	b.n	8006c24 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006c1c:	bf00      	nop
 8006c1e:	e002      	b.n	8006c26 <USB_HC_StartXfer+0x25e>
        break;
 8006c20:	bf00      	nop
 8006c22:	e000      	b.n	8006c26 <USB_HC_StartXfer+0x25e>
        break;
 8006c24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68d9      	ldr	r1, [r3, #12]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	785a      	ldrb	r2, [r3, #1]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2000      	movs	r0, #0
 8006c36:	9000      	str	r0, [sp, #0]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fb53 	bl	80062e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3728      	adds	r7, #40	; 0x28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	1ff80000 	.word	0x1ff80000

08006c4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	b29b      	uxth	r3, r3
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b089      	sub	sp, #36	; 0x24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	0c9b      	lsrs	r3, r3, #18
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	0fdb      	lsrs	r3, r3, #31
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d104      	bne.n	8006cc8 <USB_HC_Halt+0x5a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e0e8      	b.n	8006e9a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <USB_HC_Halt+0x66>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d173      	bne.n	8006dbc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f040 80cb 	bne.w	8006e98 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d143      	bne.n	8006d96 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d6c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d7a:	d81d      	bhi.n	8006db8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d92:	d0ec      	beq.n	8006d6e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d94:	e080      	b.n	8006e98 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006db4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006db6:	e06f      	b.n	8006e98 <USB_HC_Halt+0x22a>
            break;
 8006db8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dba:	e06d      	b.n	8006e98 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d143      	bne.n	8006e74 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e4a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e58:	d81d      	bhi.n	8006e96 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e70:	d0ec      	beq.n	8006e4c <USB_HC_Halt+0x1de>
 8006e72:	e011      	b.n	8006e98 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	e000      	b.n	8006e98 <USB_HC_Halt+0x22a>
          break;
 8006e96:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3724      	adds	r7, #36	; 0x24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	04da      	lsls	r2, r3, #19
 8006ec4:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <USB_DoPing+0x74>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	1ff80000 	.word	0x1ff80000

08006f20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff f936 	bl	80061a2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006f36:	2110      	movs	r1, #16
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff f98f 	bl	800625c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff f9b0 	bl	80062a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	e01f      	b.n	8006f8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7e:	461a      	mov	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3301      	adds	r3, #1
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	d9dc      	bls.n	8006f4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	e034      	b.n	8007000 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fdc:	d80c      	bhi.n	8006ff8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff4:	d0ec      	beq.n	8006fd0 <USB_StopHost+0xb0>
 8006ff6:	e000      	b.n	8006ffa <USB_StopHost+0xda>
        break;
 8006ff8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d9c7      	bls.n	8006f96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700c:	461a      	mov	r2, r3
 800700e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007012:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800701a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff f8af 	bl	8006180 <USB_EnableGlobalInt>

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b089      	sub	sp, #36	; 0x24
 8007030:	af04      	add	r7, sp, #16
 8007032:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007034:	2301      	movs	r3, #1
 8007036:	2202      	movs	r2, #2
 8007038:	2102      	movs	r1, #2
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fc66 	bl	800790c <USBH_FindInterface>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2bff      	cmp	r3, #255	; 0xff
 8007048:	d002      	beq.n	8007050 <USBH_CDC_InterfaceInit+0x24>
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d901      	bls.n	8007054 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	e13d      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc3b 	bl	80078d4 <USBH_SelectInterface>
 800705e:	4603      	mov	r3, r0
 8007060:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	e131      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007072:	2050      	movs	r0, #80	; 0x50
 8007074:	f002 fa00 	bl	8009478 <malloc>
 8007078:	4603      	mov	r3, r0
 800707a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	e11f      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007090:	2250      	movs	r2, #80	; 0x50
 8007092:	2100      	movs	r1, #0
 8007094:	68b8      	ldr	r0, [r7, #8]
 8007096:	f002 f9ff 	bl	8009498 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	211a      	movs	r1, #26
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da15      	bge.n	80070de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	211a      	movs	r1, #26
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	211a      	movs	r1, #26
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070d8:	881a      	ldrh	r2, [r3, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fe32 	bl	8008d4e <USBH_AllocPipe>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	7819      	ldrb	r1, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	7858      	ldrb	r0, [r3, #1]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	8952      	ldrh	r2, [r2, #10]
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	2203      	movs	r2, #3
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4623      	mov	r3, r4
 8007114:	4602      	mov	r2, r0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fdea 	bl	8008cf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2200      	movs	r2, #0
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 f8f9 	bl	800931c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800712a:	2300      	movs	r3, #0
 800712c:	2200      	movs	r2, #0
 800712e:	210a      	movs	r1, #10
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fbeb 	bl	800790c <USBH_FindInterface>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2bff      	cmp	r3, #255	; 0xff
 800713e:	d002      	beq.n	8007146 <USBH_CDC_InterfaceInit+0x11a>
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d901      	bls.n	800714a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007146:	2302      	movs	r3, #2
 8007148:	e0c2      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	211a      	movs	r1, #26
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	4413      	add	r3, r2
 8007156:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b25b      	sxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	da16      	bge.n	8007190 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	211a      	movs	r1, #26
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	211a      	movs	r1, #26
 800717e:	fb01 f303 	mul.w	r3, r1, r3
 8007182:	4413      	add	r3, r2
 8007184:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007188:	881a      	ldrh	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	835a      	strh	r2, [r3, #26]
 800718e:	e015      	b.n	80071bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	211a      	movs	r1, #26
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	4413      	add	r3, r2
 800719c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071a0:	781a      	ldrb	r2, [r3, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	211a      	movs	r1, #26
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	211a      	movs	r1, #26
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da16      	bge.n	8007202 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	211a      	movs	r1, #26
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	211a      	movs	r1, #26
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	835a      	strh	r2, [r3, #26]
 8007200:	e015      	b.n	800722e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	211a      	movs	r1, #26
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	4413      	add	r3, r2
 800720e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	211a      	movs	r1, #26
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	4413      	add	r3, r2
 8007224:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007228:	881a      	ldrh	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	7b9b      	ldrb	r3, [r3, #14]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fd8a 	bl	8008d4e <USBH_AllocPipe>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	7bdb      	ldrb	r3, [r3, #15]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fd80 	bl	8008d4e <USBH_AllocPipe>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	7b59      	ldrb	r1, [r3, #13]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	7b98      	ldrb	r0, [r3, #14]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	8b12      	ldrh	r2, [r2, #24]
 800726e:	9202      	str	r2, [sp, #8]
 8007270:	2202      	movs	r2, #2
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	4623      	mov	r3, r4
 8007278:	4602      	mov	r2, r0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fd38 	bl	8008cf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	7b19      	ldrb	r1, [r3, #12]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	7bd8      	ldrb	r0, [r3, #15]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	8b52      	ldrh	r2, [r2, #26]
 8007298:	9202      	str	r2, [sp, #8]
 800729a:	2202      	movs	r2, #2
 800729c:	9201      	str	r2, [sp, #4]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4623      	mov	r3, r4
 80072a2:	4602      	mov	r2, r0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fd23 	bl	8008cf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	7b5b      	ldrb	r3, [r3, #13]
 80072b6:	2200      	movs	r2, #0
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f002 f82e 	bl	800931c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	7b1b      	ldrb	r3, [r3, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 f827 	bl	800931c <USBH_LL_SetToggle>

  return USBH_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd90      	pop	{r4, r7, pc}

080072d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fd18 	bl	8008d2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fd43 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	7b1b      	ldrb	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	7b1b      	ldrb	r3, [r3, #12]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fd05 	bl	8008d2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	7b1b      	ldrb	r3, [r3, #12]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fd30 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	7b5b      	ldrb	r3, [r3, #13]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00e      	beq.n	800735c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	7b5b      	ldrb	r3, [r3, #13]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fcf2 	bl	8008d2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	7b5b      	ldrb	r3, [r3, #13]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fd1d 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4618      	mov	r0, r3
 8007372:	f002 f889 	bl	8009488 <free>
    phost->pActiveClass->pData = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737c:	2200      	movs	r2, #0
 800737e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3340      	adds	r3, #64	; 0x40
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f8b1 	bl	800750a <GetLineCoding>
 80073a8:	4603      	mov	r3, r0
 80073aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b8:	2102      	movs	r1, #2
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073be:	7afb      	ldrb	r3, [r7, #11]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d877      	bhi.n	80074dc <USBH_CDC_Process+0x114>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <USBH_CDC_Process+0x2c>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007409 	.word	0x08007409
 80073f8:	0800740f 	.word	0x0800740f
 80073fc:	0800743f 	.word	0x0800743f
 8007400:	080074b3 	.word	0x080074b3
 8007404:	080074c1 	.word	0x080074c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	e06d      	b.n	80074ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f897 	bl	8007548 <SetLineCoding>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800742c:	e058      	b.n	80074e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d055      	beq.n	80074e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800743c:	e050      	b.n	80074e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3340      	adds	r3, #64	; 0x40
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f860 	bl	800750a <GetLineCoding>
 800744a:	4603      	mov	r3, r0
 800744c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d126      	bne.n	80074a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	791b      	ldrb	r3, [r3, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d13b      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007476:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007478:	429a      	cmp	r2, r3
 800747a:	d133      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007488:	429a      	cmp	r2, r3
 800748a:	d12b      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007494:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007496:	429a      	cmp	r2, r3
 8007498:	d124      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f958 	bl	8007750 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074a0:	e020      	b.n	80074e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d01d      	beq.n	80074e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2204      	movs	r2, #4
 80074ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074b0:	e018      	b.n	80074e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f867 	bl	8007586 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8da 	bl	8007672 <CDC_ProcessReception>
      break;
 80074be:	e014      	b.n	80074ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 ffe3 	bl	800848e <USBH_ClrFeature>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80074da:	e005      	b.n	80074e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80074dc:	bf00      	nop
 80074de:	e004      	b.n	80074ea <USBH_CDC_Process+0x122>
      break;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <USBH_CDC_Process+0x122>
      break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <USBH_CDC_Process+0x122>
      break;
 80074e8:	bf00      	nop

  }

  return status;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	22a1      	movs	r2, #161	; 0xa1
 8007518:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2221      	movs	r2, #33	; 0x21
 800751e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2207      	movs	r2, #7
 8007530:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2207      	movs	r2, #7
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f988 	bl	800884e <USBH_CtlReq>
 800753e:	4603      	mov	r3, r0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2221      	movs	r2, #33	; 0x21
 8007556:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2207      	movs	r2, #7
 800756e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2207      	movs	r2, #7
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f969 	bl	800884e <USBH_CtlReq>
 800757c:	4603      	mov	r3, r0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af02      	add	r7, sp, #8
 800758c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007598:	2300      	movs	r3, #0
 800759a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d002      	beq.n	80075ac <CDC_ProcessTransmission+0x26>
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d023      	beq.n	80075f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80075aa:	e05e      	b.n	800766a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	8b12      	ldrh	r2, [r2, #24]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d90b      	bls.n	80075d0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	69d9      	ldr	r1, [r3, #28]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8b1a      	ldrh	r2, [r3, #24]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	7b5b      	ldrb	r3, [r3, #13]
 80075c4:	2001      	movs	r0, #1
 80075c6:	9000      	str	r0, [sp, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 fb4e 	bl	8008c6a <USBH_BulkSendData>
 80075ce:	e00b      	b.n	80075e8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	7b5b      	ldrb	r3, [r3, #13]
 80075de:	2001      	movs	r0, #1
 80075e0:	9000      	str	r0, [sp, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fb41 	bl	8008c6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075f0:	e03b      	b.n	800766a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	7b5b      	ldrb	r3, [r3, #13]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 fe65 	bl	80092c8 <USBH_LL_GetURBState>
 80075fe:	4603      	mov	r3, r0
 8007600:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d128      	bne.n	800765a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	8b12      	ldrh	r2, [r2, #24]
 8007610:	4293      	cmp	r3, r2
 8007612:	d90e      	bls.n	8007632 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	8b12      	ldrh	r2, [r2, #24]
 800761c:	1a9a      	subs	r2, r3, r2
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	8b12      	ldrh	r2, [r2, #24]
 800762a:	441a      	add	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	61da      	str	r2, [r3, #28]
 8007630:	e002      	b.n	8007638 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007648:	e00e      	b.n	8007668 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f868 	bl	8007728 <USBH_CDC_TransmitCallback>
      break;
 8007658:	e006      	b.n	8007668 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d103      	bne.n	8007668 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007668:	bf00      	nop
  }
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007684:	2300      	movs	r3, #0
 8007686:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800768e:	2b03      	cmp	r3, #3
 8007690:	d002      	beq.n	8007698 <CDC_ProcessReception+0x26>
 8007692:	2b04      	cmp	r3, #4
 8007694:	d00e      	beq.n	80076b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007696:	e043      	b.n	8007720 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6a19      	ldr	r1, [r3, #32]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	8b5a      	ldrh	r2, [r3, #26]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	7b1b      	ldrb	r3, [r3, #12]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fb05 	bl	8008cb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2204      	movs	r2, #4
 80076ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80076b2:	e035      	b.n	8007720 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	7b1b      	ldrb	r3, [r3, #12]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fe04 	bl	80092c8 <USBH_LL_GetURBState>
 80076c0:	4603      	mov	r3, r0
 80076c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80076c4:	7cfb      	ldrb	r3, [r7, #19]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d129      	bne.n	800771e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	7b1b      	ldrb	r3, [r3, #12]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fd67 	bl	80091a4 <USBH_LL_GetLastXferSize>
 80076d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d016      	beq.n	8007710 <CDC_ProcessReception+0x9e>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	8b5b      	ldrh	r3, [r3, #26]
 80076e6:	461a      	mov	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d910      	bls.n	8007710 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad2      	subs	r2, r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	441a      	add	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2203      	movs	r2, #3
 800770a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800770e:	e006      	b.n	800771e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f80f 	bl	800773c <USBH_CDC_ReceiveCallback>
      break;
 800771e:	bf00      	nop
  }
}
 8007720:	bf00      	nop
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007778:	2302      	movs	r3, #2
 800777a:	e029      	b.n	80077d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	79fa      	ldrb	r2, [r7, #7]
 8007780:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f81f 	bl	80077d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 fc37 	bl	800903c <USBH_LL_Init>

  return USBH_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e009      	b.n	80077fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	33e0      	adds	r3, #224	; 0xe0
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b0e      	cmp	r3, #14
 8007802:	d9f2      	bls.n	80077ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e009      	b.n	800781e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007824:	d3f1      	bcc.n	800780a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10e      	bne.n	80078bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078a4:	1c59      	adds	r1, r3, #1
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	33de      	adds	r3, #222	; 0xde
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e004      	b.n	80078c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078bc:	2302      	movs	r3, #2
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e001      	b.n	80078c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d204      	bcs.n	80078fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80078f8:	e001      	b.n	80078fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80078fa:	2302      	movs	r3, #2
 80078fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	4603      	mov	r3, r0
 800791c:	70fb      	strb	r3, [r7, #3]
 800791e:	460b      	mov	r3, r1
 8007920:	70bb      	strb	r3, [r7, #2]
 8007922:	4613      	mov	r3, r2
 8007924:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007934:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007936:	e025      	b.n	8007984 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	221a      	movs	r2, #26
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	3308      	adds	r3, #8
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	3302      	adds	r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	429a      	cmp	r2, r3
 8007952:	d002      	beq.n	800795a <USBH_FindInterface+0x4e>
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d111      	bne.n	800797e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800795e:	78ba      	ldrb	r2, [r7, #2]
 8007960:	429a      	cmp	r2, r3
 8007962:	d002      	beq.n	800796a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007964:	78bb      	ldrb	r3, [r7, #2]
 8007966:	2bff      	cmp	r3, #255	; 0xff
 8007968:	d109      	bne.n	800797e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800796e:	787a      	ldrb	r2, [r7, #1]
 8007970:	429a      	cmp	r2, r3
 8007972:	d002      	beq.n	800797a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007974:	787b      	ldrb	r3, [r7, #1]
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d101      	bne.n	800797e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	e006      	b.n	800798c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	3301      	adds	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d9d6      	bls.n	8007938 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800798a:	23ff      	movs	r3, #255	; 0xff
}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fb87 	bl	80090b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80079a6:	2101      	movs	r1, #1
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fca0 	bl	80092ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af04      	add	r7, sp, #16
 80079be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079c0:	2302      	movs	r3, #2
 80079c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d102      	bne.n	80079da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	f200 81b3 	bhi.w	8007d4c <USBH_Process+0x394>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBH_Process+0x34>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a4f 	.word	0x08007a4f
 80079f4:	08007ab7 	.word	0x08007ab7
 80079f8:	08007ce7 	.word	0x08007ce7
 80079fc:	08007d4d 	.word	0x08007d4d
 8007a00:	08007b5b 	.word	0x08007b5b
 8007a04:	08007c8d 	.word	0x08007c8d
 8007a08:	08007b91 	.word	0x08007b91
 8007a0c:	08007bb1 	.word	0x08007bb1
 8007a10:	08007bd1 	.word	0x08007bd1
 8007a14:	08007bff 	.word	0x08007bff
 8007a18:	08007ccf 	.word	0x08007ccf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8193 	beq.w	8007d50 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a30:	20c8      	movs	r0, #200	; 0xc8
 8007a32:	f001 fca3 	bl	800937c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fb99 	bl	800916e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a4c:	e180      	b.n	8007d50 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d107      	bne.n	8007a68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a66:	e182      	b.n	8007d6e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a72:	d914      	bls.n	8007a9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d903      	bls.n	8007a96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	220d      	movs	r2, #13
 8007a92:	701a      	strb	r2, [r3, #0]
      break;
 8007a94:	e16b      	b.n	8007d6e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
      break;
 8007a9c:	e167      	b.n	8007d6e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007aa4:	f103 020a 	add.w	r2, r3, #10
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007aae:	200a      	movs	r0, #10
 8007ab0:	f001 fc64 	bl	800937c <USBH_Delay>
      break;
 8007ab4:	e15b      	b.n	8007d6e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ac6:	2104      	movs	r1, #4
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007acc:	2064      	movs	r0, #100	; 0x64
 8007ace:	f001 fc55 	bl	800937c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fb24 	bl	8009120 <USBH_LL_GetSpeed>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f92f 	bl	8008d4e <USBH_AllocPipe>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f927 	bl	8008d4e <USBH_AllocPipe>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7919      	ldrb	r1, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	9202      	str	r2, [sp, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4603      	mov	r3, r0
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f8e0 	bl	8008cf0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7959      	ldrb	r1, [r3, #5]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b44:	b292      	uxth	r2, r2
 8007b46:	9202      	str	r2, [sp, #8]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	9201      	str	r2, [sp, #4]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2200      	movs	r2, #0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f8cc 	bl	8008cf0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b58:	e109      	b.n	8007d6e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f90c 	bl	8007d78 <USBH_HandleEnum>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 80f3 	bne.w	8007d54 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d103      	bne.n	8007b88 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2208      	movs	r2, #8
 8007b84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b86:	e0e5      	b.n	8007d54 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2207      	movs	r2, #7
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0e1      	b.n	8007d54 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80de 	beq.w	8007d58 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2208      	movs	r2, #8
 8007bac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bae:	e0d3      	b.n	8007d58 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc20 	bl	8008400 <USBH_SetCfg>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80ca 	bne.w	8007d5c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2209      	movs	r2, #9
 8007bcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bce:	e0c5      	b.n	8007d5c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fc30 	bl	8008446 <USBH_SetFeature>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 80b9 	bne.w	8007d60 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bf4:	e0b4      	b.n	8007d60 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e0b0      	b.n	8007d60 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80ad 	beq.w	8007d64 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	e016      	b.n	8007c46 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c18:	7bfa      	ldrb	r2, [r7, #15]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	32de      	adds	r2, #222	; 0xde
 8007c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c22:	791a      	ldrb	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d108      	bne.n	8007c40 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007c2e:	7bfa      	ldrb	r2, [r7, #15]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	32de      	adds	r2, #222	; 0xde
 8007c34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007c3e:	e005      	b.n	8007c4c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	3301      	adds	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0e5      	beq.n	8007c18 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d016      	beq.n	8007c84 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c74:	2103      	movs	r1, #3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c7a:	e073      	b.n	8007d64 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	220d      	movs	r2, #13
 8007c80:	701a      	strb	r2, [r3, #0]
      break;
 8007c82:	e06f      	b.n	8007d64 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	220d      	movs	r2, #13
 8007c88:	701a      	strb	r2, [r3, #0]
      break;
 8007c8a:	e06b      	b.n	8007d64 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d017      	beq.n	8007cc6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d103      	bne.n	8007cb6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	220b      	movs	r2, #11
 8007cb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cb4:	e058      	b.n	8007d68 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d154      	bne.n	8007d68 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220d      	movs	r2, #13
 8007cc2:	701a      	strb	r2, [r3, #0]
      break;
 8007cc4:	e050      	b.n	8007d68 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	220d      	movs	r2, #13
 8007cca:	701a      	strb	r2, [r3, #0]
      break;
 8007ccc:	e04c      	b.n	8007d68 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d049      	beq.n	8007d6c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
      }
      break;
 8007ce4:	e042      	b.n	8007d6c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fd72 	bl	80077d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d22:	2105      	movs	r1, #5
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d107      	bne.n	8007d44 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fe2b 	bl	8007998 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d42:	e014      	b.n	8007d6e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f9b5 	bl	80090b4 <USBH_LL_Start>
      break;
 8007d4a:	e010      	b.n	8007d6e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007d4c:	bf00      	nop
 8007d4e:	e00e      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d50:	bf00      	nop
 8007d52:	e00c      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d54:	bf00      	nop
 8007d56:	e00a      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d58:	bf00      	nop
 8007d5a:	e008      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e006      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d60:	bf00      	nop
 8007d62:	e004      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d64:	bf00      	nop
 8007d66:	e002      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d6c:	bf00      	nop
  }
  return USBH_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af04      	add	r7, sp, #16
 8007d7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	f200 81c1 	bhi.w	8008114 <USBH_HandleEnum+0x39c>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USBH_HandleEnum+0x20>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	08007e77 	.word	0x08007e77
 8007da0:	08007ee1 	.word	0x08007ee1
 8007da4:	08007f6f 	.word	0x08007f6f
 8007da8:	08007fd9 	.word	0x08007fd9
 8007dac:	08008049 	.word	0x08008049
 8007db0:	0800808f 	.word	0x0800808f
 8007db4:	080080d5 	.word	0x080080d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007db8:	2108      	movs	r1, #8
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa50 	bl	8008260 <USBH_Get_DevDesc>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d130      	bne.n	8007e2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7919      	ldrb	r1, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dee:	b292      	uxth	r2, r2
 8007df0:	9202      	str	r2, [sp, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	9201      	str	r2, [sp, #4]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2280      	movs	r2, #128	; 0x80
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 ff77 	bl	8008cf0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7959      	ldrb	r1, [r3, #5]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e16:	b292      	uxth	r2, r2
 8007e18:	9202      	str	r2, [sp, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	9201      	str	r2, [sp, #4]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4603      	mov	r3, r0
 8007e22:	2200      	movs	r2, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 ff63 	bl	8008cf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e2a:	e175      	b.n	8008118 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	f040 8172 	bne.w	8008118 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d903      	bls.n	8007e56 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	220d      	movs	r2, #13
 8007e52:	701a      	strb	r2, [r3, #0]
      break;
 8007e54:	e160      	b.n	8008118 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 ff97 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	791b      	ldrb	r3, [r3, #4]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 ff91 	bl	8008d90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
      break;
 8007e74:	e150      	b.n	8008118 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007e76:	2112      	movs	r1, #18
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f9f1 	bl	8008260 <USBH_Get_DevDesc>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e8e:	e145      	b.n	800811c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	f040 8142 	bne.w	800811c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d903      	bls.n	8007eba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220d      	movs	r2, #13
 8007eb6:	701a      	strb	r2, [r3, #0]
      break;
 8007eb8:	e130      	b.n	800811c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	795b      	ldrb	r3, [r3, #5]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 ff65 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 ff5f 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
      break;
 8007ede:	e11d      	b.n	800811c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa68 	bl	80083b8 <USBH_SetAddress>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d132      	bne.n	8007f58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007ef2:	2002      	movs	r0, #2
 8007ef4:	f001 fa42 	bl	800937c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2203      	movs	r2, #3
 8007f04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7919      	ldrb	r1, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f1a:	b292      	uxth	r2, r2
 8007f1c:	9202      	str	r2, [sp, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	9201      	str	r2, [sp, #4]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	2280      	movs	r2, #128	; 0x80
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fee1 	bl	8008cf0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	7959      	ldrb	r1, [r3, #5]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f42:	b292      	uxth	r2, r2
 8007f44:	9202      	str	r2, [sp, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	9201      	str	r2, [sp, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fecd 	bl	8008cf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f56:	e0e3      	b.n	8008120 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	f040 80e0 	bne.w	8008120 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	220d      	movs	r2, #13
 8007f64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	705a      	strb	r2, [r3, #1]
      break;
 8007f6c:	e0d8      	b.n	8008120 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007f6e:	2109      	movs	r1, #9
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f99d 	bl	80082b0 <USBH_Get_CfgDesc>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2204      	movs	r2, #4
 8007f84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f86:	e0cd      	b.n	8008124 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	f040 80ca 	bne.w	8008124 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f96:	3301      	adds	r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d903      	bls.n	8007fb2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	220d      	movs	r2, #13
 8007fae:	701a      	strb	r2, [r3, #0]
      break;
 8007fb0:	e0b8      	b.n	8008124 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	795b      	ldrb	r3, [r3, #5]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fee9 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fee3 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e0a5      	b.n	8008124 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f965 	bl	80082b0 <USBH_Get_CfgDesc>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ff6:	e097      	b.n	8008128 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	f040 8094 	bne.w	8008128 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008006:	3301      	adds	r3, #1
 8008008:	b2da      	uxtb	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008016:	2b03      	cmp	r3, #3
 8008018:	d903      	bls.n	8008022 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	220d      	movs	r2, #13
 800801e:	701a      	strb	r2, [r3, #0]
      break;
 8008020:	e082      	b.n	8008128 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	795b      	ldrb	r3, [r3, #5]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 feb1 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 feab 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
      break;
 8008046:	e06f      	b.n	8008128 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800804e:	2b00      	cmp	r3, #0
 8008050:	d019      	beq.n	8008086 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800805e:	23ff      	movs	r3, #255	; 0xff
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f949 	bl	80082f8 <USBH_Get_StringDesc>
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2206      	movs	r2, #6
 8008074:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008076:	e059      	b.n	800812c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b03      	cmp	r3, #3
 800807c:	d156      	bne.n	800812c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2206      	movs	r2, #6
 8008082:	705a      	strb	r2, [r3, #1]
      break;
 8008084:	e052      	b.n	800812c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2206      	movs	r2, #6
 800808a:	705a      	strb	r2, [r3, #1]
      break;
 800808c:	e04e      	b.n	800812c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008094:	2b00      	cmp	r3, #0
 8008096:	d019      	beq.n	80080cc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80080a4:	23ff      	movs	r3, #255	; 0xff
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f926 	bl	80082f8 <USBH_Get_StringDesc>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2207      	movs	r2, #7
 80080ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80080bc:	e038      	b.n	8008130 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d135      	bne.n	8008130 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2207      	movs	r2, #7
 80080c8:	705a      	strb	r2, [r3, #1]
      break;
 80080ca:	e031      	b.n	8008130 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2207      	movs	r2, #7
 80080d0:	705a      	strb	r2, [r3, #1]
      break;
 80080d2:	e02d      	b.n	8008130 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d017      	beq.n	800810e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80080ea:	23ff      	movs	r3, #255	; 0xff
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f903 	bl	80082f8 <USBH_Get_StringDesc>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008100:	e018      	b.n	8008134 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d115      	bne.n	8008134 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
      break;
 800810c:	e012      	b.n	8008134 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	e00f      	b.n	8008134 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008114:	bf00      	nop
 8008116:	e00e      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008118:	bf00      	nop
 800811a:	e00c      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 800811c:	bf00      	nop
 800811e:	e00a      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008120:	bf00      	nop
 8008122:	e008      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008124:	bf00      	nop
 8008126:	e006      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008128:	bf00      	nop
 800812a:	e004      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 800812c:	bf00      	nop
 800812e:	e002      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008134:	bf00      	nop
  }
  return Status;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f804 	bl	8008182 <USBH_HandleSof>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b0b      	cmp	r3, #11
 8008192:	d10a      	bne.n	80081aa <USBH_HandleSof+0x28>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80081c2:	bf00      	nop
}
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80081de:	bf00      	nop
}
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 ff56 	bl	80090ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fda3 	bl	8008d90 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	795b      	ldrb	r3, [r3, #5]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fd9d 	bl	8008d90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	b29b      	uxth	r3, r3
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4613      	mov	r3, r2
 800827a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f864 	bl	800834e <USBH_GetDescriptor>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	b292      	uxth	r2, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	f000 f918 	bl	80084d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	331c      	adds	r3, #28
 80082c0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80082c2:	887b      	ldrh	r3, [r7, #2]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f83d 	bl	800834e <USBH_GetDescriptor>
 80082d4:	4603      	mov	r3, r0
 80082d6:	72fb      	strb	r3, [r7, #11]
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d107      	bne.n	80082ee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082e4:	887a      	ldrh	r2, [r7, #2]
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f964 	bl	80085b6 <USBH_ParseCfgDesc>
  }

  return status;
 80082ee:	7afb      	ldrb	r3, [r7, #11]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	461a      	mov	r2, r3
 8008304:	460b      	mov	r3, r1
 8008306:	72fb      	strb	r3, [r7, #11]
 8008308:	4613      	mov	r3, r2
 800830a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008314:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	460b      	mov	r3, r1
 8008322:	2100      	movs	r1, #0
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f812 	bl	800834e <USBH_GetDescriptor>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800833a:	893a      	ldrh	r2, [r7, #8]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fa37 	bl	80087b2 <USBH_ParseStringDesc>
  }

  return status;
 8008344:	7dfb      	ldrb	r3, [r7, #23]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	607b      	str	r3, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	72fb      	strb	r3, [r7, #11]
 800835c:	4613      	mov	r3, r2
 800835e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	789b      	ldrb	r3, [r3, #2]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d11c      	bne.n	80083a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800836e:	b2da      	uxtb	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2206      	movs	r2, #6
 8008378:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	893a      	ldrh	r2, [r7, #8]
 800837e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800838a:	d104      	bne.n	8008396 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f240 4209 	movw	r2, #1033	; 0x409
 8008392:	829a      	strh	r2, [r3, #20]
 8008394:	e002      	b.n	800839c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8b3a      	ldrh	r2, [r7, #24]
 80083a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80083a2:	8b3b      	ldrh	r3, [r7, #24]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fa50 	bl	800884e <USBH_CtlReq>
 80083ae:	4603      	mov	r3, r0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	789b      	ldrb	r3, [r3, #2]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d10f      	bne.n	80083ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2205      	movs	r2, #5
 80083d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa2c 	bl	800884e <USBH_CtlReq>
 80083f6:	4603      	mov	r3, r0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d10e      	bne.n	8008432 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2209      	movs	r2, #9
 800841e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	887a      	ldrh	r2, [r7, #2]
 8008424:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008432:	2200      	movs	r2, #0
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa09 	bl	800884e <USBH_CtlReq>
 800843c:	4603      	mov	r3, r0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	789b      	ldrb	r3, [r3, #2]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d10f      	bne.n	800847a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2203      	movs	r2, #3
 8008464:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9e5 	bl	800884e <USBH_CtlReq>
 8008484:	4603      	mov	r3, r0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	789b      	ldrb	r3, [r3, #2]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10f      	bne.n	80084c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9c1 	bl	800884e <USBH_CtlReq>
 80084cc:	4603      	mov	r3, r0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	4613      	mov	r3, r2
 80084e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	785a      	ldrb	r2, [r3, #1]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3302      	adds	r3, #2
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3303      	adds	r3, #3
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	b29b      	uxth	r3, r3
 8008508:	4313      	orrs	r3, r2
 800850a:	b29a      	uxth	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	791a      	ldrb	r2, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	795a      	ldrb	r2, [r3, #5]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	799a      	ldrb	r2, [r3, #6]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	79da      	ldrb	r2, [r3, #7]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	2b08      	cmp	r3, #8
 8008534:	d939      	bls.n	80085aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3308      	adds	r3, #8
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3309      	adds	r3, #9
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	330a      	adds	r3, #10
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b29a      	uxth	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	330b      	adds	r3, #11
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	b29b      	uxth	r3, r3
 8008566:	4313      	orrs	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	330c      	adds	r3, #12
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29a      	uxth	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	330d      	adds	r3, #13
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	b29b      	uxth	r3, r3
 8008582:	4313      	orrs	r3, r2
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	7b9a      	ldrb	r2, [r3, #14]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	7bda      	ldrb	r2, [r3, #15]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	7c1a      	ldrb	r2, [r3, #16]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	7c5a      	ldrb	r2, [r3, #17]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	745a      	strb	r2, [r3, #17]
  }
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b08a      	sub	sp, #40	; 0x28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4613      	mov	r3, r2
 80085c2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3302      	adds	r3, #2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	791a      	ldrb	r2, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	795a      	ldrb	r2, [r3, #5]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	799a      	ldrb	r2, [r3, #6]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	79da      	ldrb	r2, [r3, #7]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	7a1a      	ldrb	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	2b09      	cmp	r3, #9
 8008630:	d95f      	bls.n	80086f2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008632:	2309      	movs	r3, #9
 8008634:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800863a:	e051      	b.n	80086e0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800863c:	f107 0316 	add.w	r3, r7, #22
 8008640:	4619      	mov	r1, r3
 8008642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008644:	f000 f8e8 	bl	8008818 <USBH_GetNextDesc>
 8008648:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d146      	bne.n	80086e0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008656:	221a      	movs	r2, #26
 8008658:	fb02 f303 	mul.w	r3, r2, r3
 800865c:	3308      	adds	r3, #8
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	3302      	adds	r3, #2
 8008664:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008668:	69f8      	ldr	r0, [r7, #28]
 800866a:	f000 f846 	bl	80086fa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008674:	2300      	movs	r3, #0
 8008676:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008678:	e022      	b.n	80086c0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800867a:	f107 0316 	add.w	r3, r7, #22
 800867e:	4619      	mov	r1, r3
 8008680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008682:	f000 f8c9 	bl	8008818 <USBH_GetNextDesc>
 8008686:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b05      	cmp	r3, #5
 800868e:	d117      	bne.n	80086c0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008694:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008698:	3201      	adds	r2, #1
 800869a:	00d2      	lsls	r2, r2, #3
 800869c:	211a      	movs	r1, #26
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	3308      	adds	r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	3304      	adds	r3, #4
 80086ac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80086ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086b0:	69b8      	ldr	r0, [r7, #24]
 80086b2:	f000 f851 	bl	8008758 <USBH_ParseEPDesc>
            ep_ix++;
 80086b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80086ba:	3301      	adds	r3, #1
 80086bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d204      	bcs.n	80086d6 <USBH_ParseCfgDesc+0x120>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	885a      	ldrh	r2, [r3, #2]
 80086d0:	8afb      	ldrh	r3, [r7, #22]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d8d1      	bhi.n	800867a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80086d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086da:	3301      	adds	r3, #1
 80086dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d804      	bhi.n	80086f2 <USBH_ParseCfgDesc+0x13c>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	885a      	ldrh	r2, [r3, #2]
 80086ec:	8afb      	ldrh	r3, [r7, #22]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d8a4      	bhi.n	800863c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80086f2:	bf00      	nop
 80086f4:	3728      	adds	r7, #40	; 0x28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	785a      	ldrb	r2, [r3, #1]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	789a      	ldrb	r2, [r3, #2]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	78da      	ldrb	r2, [r3, #3]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	791a      	ldrb	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	795a      	ldrb	r2, [r3, #5]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	799a      	ldrb	r2, [r3, #6]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	79da      	ldrb	r2, [r3, #7]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	7a1a      	ldrb	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	721a      	strb	r2, [r3, #8]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	785a      	ldrb	r2, [r3, #1]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	789a      	ldrb	r2, [r3, #2]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	78da      	ldrb	r2, [r3, #3]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b29a      	uxth	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3305      	adds	r3, #5
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	799a      	ldrb	r2, [r3, #6]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	719a      	strb	r2, [r3, #6]
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b087      	sub	sp, #28
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	4613      	mov	r3, r2
 80087be:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d120      	bne.n	800880c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	1e9a      	subs	r2, r3, #2
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bf28      	it	cs
 80087d6:	4613      	movcs	r3, r2
 80087d8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3302      	adds	r3, #2
 80087de:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087e0:	2300      	movs	r3, #0
 80087e2:	82fb      	strh	r3, [r7, #22]
 80087e4:	e00b      	b.n	80087fe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087e6:	8afb      	ldrh	r3, [r7, #22]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3301      	adds	r3, #1
 80087f6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087f8:	8afb      	ldrh	r3, [r7, #22]
 80087fa:	3302      	adds	r3, #2
 80087fc:	82fb      	strh	r3, [r7, #22]
 80087fe:	8afa      	ldrh	r2, [r7, #22]
 8008800:	8abb      	ldrh	r3, [r7, #20]
 8008802:	429a      	cmp	r2, r3
 8008804:	d3ef      	bcc.n	80087e6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  }
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	881a      	ldrh	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	4413      	add	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4413      	add	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	4613      	mov	r3, r2
 800885a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d002      	beq.n	800886e <USBH_CtlReq+0x20>
 8008868:	2b02      	cmp	r3, #2
 800886a:	d00f      	beq.n	800888c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800886c:	e027      	b.n	80088be <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	88fa      	ldrh	r2, [r7, #6]
 8008878:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
      break;
 800888a:	e018      	b.n	80088be <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f81b 	bl	80088c8 <USBH_HandleControl>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <USBH_CtlReq+0x54>
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d106      	bne.n	80088b0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	761a      	strb	r2, [r3, #24]
      break;
 80088ae:	e005      	b.n	80088bc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d102      	bne.n	80088bc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	709a      	strb	r2, [r3, #2]
      break;
 80088bc:	bf00      	nop
  }
  return status;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7e1b      	ldrb	r3, [r3, #24]
 80088dc:	3b01      	subs	r3, #1
 80088de:	2b0a      	cmp	r3, #10
 80088e0:	f200 8156 	bhi.w	8008b90 <USBH_HandleControl+0x2c8>
 80088e4:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USBH_HandleControl+0x24>)
 80088e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ea:	bf00      	nop
 80088ec:	08008919 	.word	0x08008919
 80088f0:	08008933 	.word	0x08008933
 80088f4:	0800899d 	.word	0x0800899d
 80088f8:	080089c3 	.word	0x080089c3
 80088fc:	080089fb 	.word	0x080089fb
 8008900:	08008a25 	.word	0x08008a25
 8008904:	08008a77 	.word	0x08008a77
 8008908:	08008a99 	.word	0x08008a99
 800890c:	08008ad5 	.word	0x08008ad5
 8008910:	08008afb 	.word	0x08008afb
 8008914:	08008b39 	.word	0x08008b39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f103 0110 	add.w	r1, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	795b      	ldrb	r3, [r3, #5]
 8008922:	461a      	mov	r2, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f943 	bl	8008bb0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	761a      	strb	r2, [r3, #24]
      break;
 8008930:	e139      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	795b      	ldrb	r3, [r3, #5]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fcc5 	bl	80092c8 <USBH_LL_GetURBState>
 800893e:	4603      	mov	r3, r0
 8008940:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d11e      	bne.n	8008986 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7c1b      	ldrb	r3, [r3, #16]
 800894c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008950:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	8adb      	ldrh	r3, [r3, #22]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2b80      	cmp	r3, #128	; 0x80
 800895e:	d103      	bne.n	8008968 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2203      	movs	r2, #3
 8008964:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008966:	e115      	b.n	8008b94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2205      	movs	r2, #5
 800896c:	761a      	strb	r2, [r3, #24]
      break;
 800896e:	e111      	b.n	8008b94 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008970:	7b7b      	ldrb	r3, [r7, #13]
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d103      	bne.n	800897e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2209      	movs	r2, #9
 800897a:	761a      	strb	r2, [r3, #24]
      break;
 800897c:	e10a      	b.n	8008b94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2207      	movs	r2, #7
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e106      	b.n	8008b94 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d003      	beq.n	8008994 <USBH_HandleControl+0xcc>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b02      	cmp	r3, #2
 8008990:	f040 8100 	bne.w	8008b94 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	220b      	movs	r2, #11
 8008998:	761a      	strb	r2, [r3, #24]
      break;
 800899a:	e0fb      	b.n	8008b94 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6899      	ldr	r1, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	899a      	ldrh	r2, [r3, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	791b      	ldrb	r3, [r3, #4]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f93a 	bl	8008c2e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	761a      	strb	r2, [r3, #24]
      break;
 80089c0:	e0f1      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	791b      	ldrb	r3, [r3, #4]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc7d 	bl	80092c8 <USBH_LL_GetURBState>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d102      	bne.n	80089de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2209      	movs	r2, #9
 80089dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d102      	bne.n	80089ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089e4:	2303      	movs	r3, #3
 80089e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089e8:	e0d6      	b.n	8008b98 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	f040 80d3 	bne.w	8008b98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	220b      	movs	r2, #11
 80089f6:	761a      	strb	r2, [r3, #24]
      break;
 80089f8:	e0ce      	b.n	8008b98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6899      	ldr	r1, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	899a      	ldrh	r2, [r3, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	795b      	ldrb	r3, [r3, #5]
 8008a06:	2001      	movs	r0, #1
 8008a08:	9000      	str	r0, [sp, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f8ea 	bl	8008be4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2206      	movs	r2, #6
 8008a20:	761a      	strb	r2, [r3, #24]
      break;
 8008a22:	e0c0      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	795b      	ldrb	r3, [r3, #5]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fc4c 	bl	80092c8 <USBH_LL_GetURBState>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d103      	bne.n	8008a42 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2207      	movs	r2, #7
 8008a3e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a40:	e0ac      	b.n	8008b9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d105      	bne.n	8008a54 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	220c      	movs	r2, #12
 8008a4c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	73fb      	strb	r3, [r7, #15]
      break;
 8008a52:	e0a3      	b.n	8008b9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d103      	bne.n	8008a62 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2205      	movs	r2, #5
 8008a5e:	761a      	strb	r2, [r3, #24]
      break;
 8008a60:	e09c      	b.n	8008b9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	f040 8099 	bne.w	8008b9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	220b      	movs	r2, #11
 8008a6e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a70:	2302      	movs	r3, #2
 8008a72:	73fb      	strb	r3, [r7, #15]
      break;
 8008a74:	e092      	b.n	8008b9c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f8d5 	bl	8008c2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2208      	movs	r2, #8
 8008a94:	761a      	strb	r2, [r3, #24]

      break;
 8008a96:	e086      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	791b      	ldrb	r3, [r3, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc12 	bl	80092c8 <USBH_LL_GetURBState>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d105      	bne.n	8008aba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	220d      	movs	r2, #13
 8008ab2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ab8:	e072      	b.n	8008ba0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d103      	bne.n	8008ac8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	220b      	movs	r2, #11
 8008ac4:	761a      	strb	r2, [r3, #24]
      break;
 8008ac6:	e06b      	b.n	8008ba0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d168      	bne.n	8008ba0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad2:	e065      	b.n	8008ba0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	795b      	ldrb	r3, [r3, #5]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	9200      	str	r2, [sp, #0]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2100      	movs	r1, #0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f87f 	bl	8008be4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	220a      	movs	r2, #10
 8008af6:	761a      	strb	r2, [r3, #24]
      break;
 8008af8:	e055      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	795b      	ldrb	r3, [r3, #5]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fbe1 	bl	80092c8 <USBH_LL_GetURBState>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d105      	bne.n	8008b1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	220d      	movs	r2, #13
 8008b18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b1a:	e043      	b.n	8008ba4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d103      	bne.n	8008b2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2209      	movs	r2, #9
 8008b26:	761a      	strb	r2, [r3, #24]
      break;
 8008b28:	e03c      	b.n	8008ba4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d139      	bne.n	8008ba4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	220b      	movs	r2, #11
 8008b34:	761a      	strb	r2, [r3, #24]
      break;
 8008b36:	e035      	b.n	8008ba4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7e5b      	ldrb	r3, [r3, #25]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	765a      	strb	r2, [r3, #25]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7e5b      	ldrb	r3, [r3, #25]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d806      	bhi.n	8008b5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b58:	e025      	b.n	8008ba6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b60:	2106      	movs	r1, #6
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	795b      	ldrb	r3, [r3, #5]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f90c 	bl	8008d90 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f906 	bl	8008d90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8e:	e00a      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008b90:	bf00      	nop
 8008b92:	e008      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008b94:	bf00      	nop
 8008b96:	e006      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e004      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008ba4:	bf00      	nop
  }

  return status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bbe:	79f9      	ldrb	r1, [r7, #7]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fb46 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af04      	add	r7, sp, #16
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	80fb      	strh	r3, [r7, #6]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c08:	7979      	ldrb	r1, [r7, #5]
 8008c0a:	7e3b      	ldrb	r3, [r7, #24]
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fb21 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af04      	add	r7, sp, #16
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	80fb      	strh	r3, [r7, #6]
 8008c40:	4613      	mov	r3, r2
 8008c42:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c44:	7979      	ldrb	r1, [r7, #5]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	2301      	movs	r3, #1
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	2201      	movs	r2, #1
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fb03 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c60:	2300      	movs	r3, #0

}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b088      	sub	sp, #32
 8008c6e:	af04      	add	r7, sp, #16
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	4611      	mov	r1, r2
 8008c76:	461a      	mov	r2, r3
 8008c78:	460b      	mov	r3, r1
 8008c7a:	80fb      	strh	r3, [r7, #6]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c8e:	7979      	ldrb	r1, [r7, #5]
 8008c90:	7e3b      	ldrb	r3, [r7, #24]
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fade 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	80fb      	strh	r3, [r7, #6]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cca:	7979      	ldrb	r1, [r7, #5]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9303      	str	r3, [sp, #12]
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	9302      	str	r3, [sp, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	2302      	movs	r3, #2
 8008cde:	2201      	movs	r2, #1
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fac0 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	70fb      	strb	r3, [r7, #3]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70bb      	strb	r3, [r7, #2]
 8008d06:	4613      	mov	r3, r2
 8008d08:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d0a:	7878      	ldrb	r0, [r7, #1]
 8008d0c:	78ba      	ldrb	r2, [r7, #2]
 8008d0e:	78f9      	ldrb	r1, [r7, #3]
 8008d10:	8b3b      	ldrh	r3, [r7, #24]
 8008d12:	9302      	str	r3, [sp, #8]
 8008d14:	7d3b      	ldrb	r3, [r7, #20]
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	7c3b      	ldrb	r3, [r7, #16]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa53 	bl	80091ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa72 	bl	8009228 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f836 	bl	8008dcc <USBH_GetFreePipe>
 8008d60:	4603      	mov	r3, r0
 8008d62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00a      	beq.n	8008d84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	89fb      	ldrh	r3, [r7, #14]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	33e0      	adds	r3, #224	; 0xe0
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	b2db      	uxtb	r3, r3
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	2b0a      	cmp	r3, #10
 8008da0:	d80d      	bhi.n	8008dbe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	33e0      	adds	r3, #224	; 0xe0
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	33e0      	adds	r3, #224	; 0xe0
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e00f      	b.n	8008dfe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	33e0      	adds	r3, #224	; 0xe0
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	e007      	b.n	8008e08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b0a      	cmp	r3, #10
 8008e02:	d9ec      	bls.n	8008dde <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	490e      	ldr	r1, [pc, #56]	; (8008e54 <MX_USB_HOST_Init+0x40>)
 8008e1c:	480e      	ldr	r0, [pc, #56]	; (8008e58 <MX_USB_HOST_Init+0x44>)
 8008e1e:	f7fe fca1 	bl	8007764 <USBH_Init>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e28:	f7f8 fcbc 	bl	80017a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e2c:	490b      	ldr	r1, [pc, #44]	; (8008e5c <MX_USB_HOST_Init+0x48>)
 8008e2e:	480a      	ldr	r0, [pc, #40]	; (8008e58 <MX_USB_HOST_Init+0x44>)
 8008e30:	f7fe fd26 	bl	8007880 <USBH_RegisterClass>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e3a:	f7f8 fcb3 	bl	80017a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e3e:	4806      	ldr	r0, [pc, #24]	; (8008e58 <MX_USB_HOST_Init+0x44>)
 8008e40:	f7fe fdaa 	bl	8007998 <USBH_Start>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e4a:	f7f8 fcab 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08008e75 	.word	0x08008e75
 8008e58:	20000440 	.word	0x20000440
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e64:	4802      	ldr	r0, [pc, #8]	; (8008e70 <MX_USB_HOST_Process+0x10>)
 8008e66:	f7fe fda7 	bl	80079b8 <USBH_Process>
}
 8008e6a:	bf00      	nop
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000440 	.word	0x20000440

08008e74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d819      	bhi.n	8008ebc <USBH_UserProcess+0x48>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <USBH_UserProcess+0x1c>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ead 	.word	0x08008ead
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ea5 	.word	0x08008ea5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <USBH_UserProcess+0x58>)
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	701a      	strb	r2, [r3, #0]
  break;
 8008eaa:	e008      	b.n	8008ebe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <USBH_UserProcess+0x58>)
 8008eae:	2202      	movs	r2, #2
 8008eb0:	701a      	strb	r2, [r3, #0]
  break;
 8008eb2:	e004      	b.n	8008ebe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <USBH_UserProcess+0x58>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
  break;
 8008eba:	e000      	b.n	8008ebe <USBH_UserProcess+0x4a>

  default:
  break;
 8008ebc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	2000022c 	.word	0x2000022c

08008ed0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed8:	f107 0314 	add.w	r3, r7, #20
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	60da      	str	r2, [r3, #12]
 8008ee6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ef0:	d147      	bne.n	8008f82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	4a24      	ldr	r2, [pc, #144]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008efc:	f043 0301 	orr.w	r3, r3, #1
 8008f00:	6313      	str	r3, [r2, #48]	; 0x30
 8008f02:	4b22      	ldr	r3, [pc, #136]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	613b      	str	r3, [r7, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4619      	mov	r1, r3
 8008f22:	481b      	ldr	r0, [pc, #108]	; (8008f90 <HAL_HCD_MspInit+0xc0>)
 8008f24:	f7f9 fd7e 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f36:	2300      	movs	r3, #0
 8008f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f3a:	230a      	movs	r3, #10
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3e:	f107 0314 	add.w	r3, r7, #20
 8008f42:	4619      	mov	r1, r3
 8008f44:	4812      	ldr	r0, [pc, #72]	; (8008f90 <HAL_HCD_MspInit+0xc0>)
 8008f46:	f7f9 fd6d 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f4a:	4b10      	ldr	r3, [pc, #64]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4e:	4a0f      	ldr	r2, [pc, #60]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f54:	6353      	str	r3, [r2, #52]	; 0x34
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	4a0b      	ldr	r2, [pc, #44]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f64:	6453      	str	r3, [r2, #68]	; 0x44
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	2043      	movs	r0, #67	; 0x43
 8008f78:	f7f9 fd1d 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f7c:	2043      	movs	r0, #67	; 0x43
 8008f7e:	f7f9 fd36 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f82:	bf00      	nop
 8008f84:	3728      	adds	r7, #40	; 0x28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	40020000 	.word	0x40020000

08008f94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff f8db 	bl	800815e <USBH_LL_IncTimer>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff f913 	bl	80081ea <USBH_LL_Connect>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff f91c 	bl	8008218 <USBH_LL_Disconnect>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff f8cd 	bl	80081b2 <USBH_LL_PortEnabled>
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff f8cd 	bl	80081ce <USBH_LL_PortDisabled>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800904a:	2b01      	cmp	r3, #1
 800904c:	d12a      	bne.n	80090a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800904e:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <USBH_LL_Init+0x74>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <USBH_LL_Init+0x74>)
 800905a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <USBH_LL_Init+0x74>)
 8009060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009064:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <USBH_LL_Init+0x74>)
 8009068:	2208      	movs	r2, #8
 800906a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <USBH_LL_Init+0x74>)
 800906e:	2201      	movs	r2, #1
 8009070:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <USBH_LL_Init+0x74>)
 8009074:	2200      	movs	r2, #0
 8009076:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009078:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <USBH_LL_Init+0x74>)
 800907a:	2202      	movs	r2, #2
 800907c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800907e:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <USBH_LL_Init+0x74>)
 8009080:	2200      	movs	r2, #0
 8009082:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009084:	480a      	ldr	r0, [pc, #40]	; (80090b0 <USBH_LL_Init+0x74>)
 8009086:	f7f9 fe9c 	bl	8002dc2 <HAL_HCD_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009090:	f7f8 fb88 	bl	80017a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009094:	4806      	ldr	r0, [pc, #24]	; (80090b0 <USBH_LL_Init+0x74>)
 8009096:	f7fa fa80 	bl	800359a <HAL_HCD_GetCurrentFrame>
 800909a:	4603      	mov	r3, r0
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff f84e 	bl	8008140 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000818 	.word	0x20000818

080090b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fa f9ef 	bl	80034ae <HAL_HCD_Start>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f95c 	bl	8009394 <USBH_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009100:	4618      	mov	r0, r3
 8009102:	f7fa f9f7 	bl	80034f4 <HAL_HCD_Stop>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f941 	bl	8009394 <USBH_Get_USB_Status>
 8009112:	4603      	mov	r3, r0
 8009114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009116:	7bbb      	ldrb	r3, [r7, #14]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009132:	4618      	mov	r0, r3
 8009134:	f7fa fa3f 	bl	80035b6 <HAL_HCD_GetCurrentSpeed>
 8009138:	4603      	mov	r3, r0
 800913a:	2b02      	cmp	r3, #2
 800913c:	d00c      	beq.n	8009158 <USBH_LL_GetSpeed+0x38>
 800913e:	2b02      	cmp	r3, #2
 8009140:	d80d      	bhi.n	800915e <USBH_LL_GetSpeed+0x3e>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <USBH_LL_GetSpeed+0x2c>
 8009146:	2b01      	cmp	r3, #1
 8009148:	d003      	beq.n	8009152 <USBH_LL_GetSpeed+0x32>
 800914a:	e008      	b.n	800915e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
    break;
 8009150:	e008      	b.n	8009164 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009152:	2301      	movs	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
    break;
 8009156:	e005      	b.n	8009164 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009158:	2302      	movs	r3, #2
 800915a:	73fb      	strb	r3, [r7, #15]
    break;
 800915c:	e002      	b.n	8009164 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800915e:	2301      	movs	r3, #1
 8009160:	73fb      	strb	r3, [r7, #15]
    break;
 8009162:	bf00      	nop
  }
  return  speed;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009184:	4618      	mov	r0, r3
 8009186:	f7fa f9d2 	bl	800352e <HAL_HCD_ResetPort>
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f8ff 	bl	8009394 <USBH_Get_USB_Status>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919a:	7bbb      	ldrb	r3, [r7, #14]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fa f9d9 	bl	8003572 <HAL_HCD_HC_GetXferCount>
 80091c0:	4603      	mov	r3, r0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091ca:	b590      	push	{r4, r7, lr}
 80091cc:	b089      	sub	sp, #36	; 0x24
 80091ce:	af04      	add	r7, sp, #16
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	461a      	mov	r2, r3
 80091d8:	4603      	mov	r3, r0
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	460b      	mov	r3, r1
 80091de:	70bb      	strb	r3, [r7, #2]
 80091e0:	4613      	mov	r3, r2
 80091e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091f2:	787c      	ldrb	r4, [r7, #1]
 80091f4:	78ba      	ldrb	r2, [r7, #2]
 80091f6:	78f9      	ldrb	r1, [r7, #3]
 80091f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091fa:	9302      	str	r3, [sp, #8]
 80091fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4623      	mov	r3, r4
 800920a:	f7f9 fe3c 	bl	8002e86 <HAL_HCD_HC_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f8bd 	bl	8009394 <USBH_Get_USB_Status>
 800921a:	4603      	mov	r3, r0
 800921c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	bd90      	pop	{r4, r7, pc}

08009228 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7f9 feac 	bl	8002fa4 <HAL_HCD_HC_Halt>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f89e 	bl	8009394 <USBH_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009266:	b590      	push	{r4, r7, lr}
 8009268:	b089      	sub	sp, #36	; 0x24
 800926a:	af04      	add	r7, sp, #16
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	461a      	mov	r2, r3
 8009274:	4603      	mov	r3, r0
 8009276:	70fb      	strb	r3, [r7, #3]
 8009278:	460b      	mov	r3, r1
 800927a:	70bb      	strb	r3, [r7, #2]
 800927c:	4613      	mov	r3, r2
 800927e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800928e:	787c      	ldrb	r4, [r7, #1]
 8009290:	78ba      	ldrb	r2, [r7, #2]
 8009292:	78f9      	ldrb	r1, [r7, #3]
 8009294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4623      	mov	r3, r4
 80092aa:	f7f9 fe9f 	bl	8002fec <HAL_HCD_HC_SubmitRequest>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f86d 	bl	8009394 <USBH_Get_USB_Status>
 80092ba:	4603      	mov	r3, r0
 80092bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092be:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd90      	pop	{r4, r7, pc}

080092c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fa f933 	bl	800354a <HAL_HCD_HC_GetURBState>
 80092e4:	4603      	mov	r3, r0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009300:	2b01      	cmp	r3, #1
 8009302:	d103      	bne.n	800930c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f870 	bl	80093ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800930c:	20c8      	movs	r0, #200	; 0xc8
 800930e:	f7f8 fda7 	bl	8001e60 <HAL_Delay>
  return USBH_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
 8009328:	4613      	mov	r3, r2
 800932a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009332:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	212c      	movs	r1, #44	; 0x2c
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	4413      	add	r3, r2
 8009340:	333b      	adds	r3, #59	; 0x3b
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	212c      	movs	r1, #44	; 0x2c
 800934e:	fb01 f303 	mul.w	r3, r1, r3
 8009352:	4413      	add	r3, r2
 8009354:	3354      	adds	r3, #84	; 0x54
 8009356:	78ba      	ldrb	r2, [r7, #2]
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	e008      	b.n	800936e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	212c      	movs	r1, #44	; 0x2c
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	3355      	adds	r3, #85	; 0x55
 800936a:	78ba      	ldrb	r2, [r7, #2]
 800936c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7f8 fd6b 	bl	8001e60 <HAL_Delay>
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d817      	bhi.n	80093d8 <USBH_Get_USB_Status+0x44>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <USBH_Get_USB_Status+0x1c>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c1 	.word	0x080093c1
 80093b4:	080093c7 	.word	0x080093c7
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093d3 	.word	0x080093d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
    break;
 80093c4:	e00b      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ca:	e008      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093cc:	2301      	movs	r3, #1
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	e005      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093d2:	2302      	movs	r3, #2
 80093d4:	73fb      	strb	r3, [r7, #15]
    break;
 80093d6:	e002      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093d8:	2302      	movs	r3, #2
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	bf00      	nop
  }
  return usb_status;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e001      	b.n	800940a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	461a      	mov	r2, r3
 800940e:	2101      	movs	r1, #1
 8009410:	4803      	ldr	r0, [pc, #12]	; (8009420 <MX_DriverVbusFS+0x34>)
 8009412:	f7f9 fca3 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40020800 	.word	0x40020800

08009424 <__errno>:
 8009424:	4b01      	ldr	r3, [pc, #4]	; (800942c <__errno+0x8>)
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	2000002c 	.word	0x2000002c

08009430 <__libc_init_array>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	4d0d      	ldr	r5, [pc, #52]	; (8009468 <__libc_init_array+0x38>)
 8009434:	4c0d      	ldr	r4, [pc, #52]	; (800946c <__libc_init_array+0x3c>)
 8009436:	1b64      	subs	r4, r4, r5
 8009438:	10a4      	asrs	r4, r4, #2
 800943a:	2600      	movs	r6, #0
 800943c:	42a6      	cmp	r6, r4
 800943e:	d109      	bne.n	8009454 <__libc_init_array+0x24>
 8009440:	4d0b      	ldr	r5, [pc, #44]	; (8009470 <__libc_init_array+0x40>)
 8009442:	4c0c      	ldr	r4, [pc, #48]	; (8009474 <__libc_init_array+0x44>)
 8009444:	f002 fd0e 	bl	800be64 <_init>
 8009448:	1b64      	subs	r4, r4, r5
 800944a:	10a4      	asrs	r4, r4, #2
 800944c:	2600      	movs	r6, #0
 800944e:	42a6      	cmp	r6, r4
 8009450:	d105      	bne.n	800945e <__libc_init_array+0x2e>
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	f855 3b04 	ldr.w	r3, [r5], #4
 8009458:	4798      	blx	r3
 800945a:	3601      	adds	r6, #1
 800945c:	e7ee      	b.n	800943c <__libc_init_array+0xc>
 800945e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009462:	4798      	blx	r3
 8009464:	3601      	adds	r6, #1
 8009466:	e7f2      	b.n	800944e <__libc_init_array+0x1e>
 8009468:	0800c2d4 	.word	0x0800c2d4
 800946c:	0800c2d4 	.word	0x0800c2d4
 8009470:	0800c2d4 	.word	0x0800c2d4
 8009474:	0800c2d8 	.word	0x0800c2d8

08009478 <malloc>:
 8009478:	4b02      	ldr	r3, [pc, #8]	; (8009484 <malloc+0xc>)
 800947a:	4601      	mov	r1, r0
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f000 b863 	b.w	8009548 <_malloc_r>
 8009482:	bf00      	nop
 8009484:	2000002c 	.word	0x2000002c

08009488 <free>:
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <free+0xc>)
 800948a:	4601      	mov	r1, r0
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f000 b80b 	b.w	80094a8 <_free_r>
 8009492:	bf00      	nop
 8009494:	2000002c 	.word	0x2000002c

08009498 <memset>:
 8009498:	4402      	add	r2, r0
 800949a:	4603      	mov	r3, r0
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <memset+0xa>
 80094a0:	4770      	bx	lr
 80094a2:	f803 1b01 	strb.w	r1, [r3], #1
 80094a6:	e7f9      	b.n	800949c <memset+0x4>

080094a8 <_free_r>:
 80094a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094aa:	2900      	cmp	r1, #0
 80094ac:	d048      	beq.n	8009540 <_free_r+0x98>
 80094ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b2:	9001      	str	r0, [sp, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f1a1 0404 	sub.w	r4, r1, #4
 80094ba:	bfb8      	it	lt
 80094bc:	18e4      	addlt	r4, r4, r3
 80094be:	f001 fcb3 	bl	800ae28 <__malloc_lock>
 80094c2:	4a20      	ldr	r2, [pc, #128]	; (8009544 <_free_r+0x9c>)
 80094c4:	9801      	ldr	r0, [sp, #4]
 80094c6:	6813      	ldr	r3, [r2, #0]
 80094c8:	4615      	mov	r5, r2
 80094ca:	b933      	cbnz	r3, 80094da <_free_r+0x32>
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	6014      	str	r4, [r2, #0]
 80094d0:	b003      	add	sp, #12
 80094d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d6:	f001 bcad 	b.w	800ae34 <__malloc_unlock>
 80094da:	42a3      	cmp	r3, r4
 80094dc:	d90b      	bls.n	80094f6 <_free_r+0x4e>
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	1862      	adds	r2, r4, r1
 80094e2:	4293      	cmp	r3, r2
 80094e4:	bf04      	itt	eq
 80094e6:	681a      	ldreq	r2, [r3, #0]
 80094e8:	685b      	ldreq	r3, [r3, #4]
 80094ea:	6063      	str	r3, [r4, #4]
 80094ec:	bf04      	itt	eq
 80094ee:	1852      	addeq	r2, r2, r1
 80094f0:	6022      	streq	r2, [r4, #0]
 80094f2:	602c      	str	r4, [r5, #0]
 80094f4:	e7ec      	b.n	80094d0 <_free_r+0x28>
 80094f6:	461a      	mov	r2, r3
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b10b      	cbz	r3, 8009500 <_free_r+0x58>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d9fa      	bls.n	80094f6 <_free_r+0x4e>
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	1855      	adds	r5, r2, r1
 8009504:	42a5      	cmp	r5, r4
 8009506:	d10b      	bne.n	8009520 <_free_r+0x78>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	4421      	add	r1, r4
 800950c:	1854      	adds	r4, r2, r1
 800950e:	42a3      	cmp	r3, r4
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	d1dd      	bne.n	80094d0 <_free_r+0x28>
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	6053      	str	r3, [r2, #4]
 800951a:	4421      	add	r1, r4
 800951c:	6011      	str	r1, [r2, #0]
 800951e:	e7d7      	b.n	80094d0 <_free_r+0x28>
 8009520:	d902      	bls.n	8009528 <_free_r+0x80>
 8009522:	230c      	movs	r3, #12
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	e7d3      	b.n	80094d0 <_free_r+0x28>
 8009528:	6825      	ldr	r5, [r4, #0]
 800952a:	1961      	adds	r1, r4, r5
 800952c:	428b      	cmp	r3, r1
 800952e:	bf04      	itt	eq
 8009530:	6819      	ldreq	r1, [r3, #0]
 8009532:	685b      	ldreq	r3, [r3, #4]
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	bf04      	itt	eq
 8009538:	1949      	addeq	r1, r1, r5
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	6054      	str	r4, [r2, #4]
 800953e:	e7c7      	b.n	80094d0 <_free_r+0x28>
 8009540:	b003      	add	sp, #12
 8009542:	bd30      	pop	{r4, r5, pc}
 8009544:	20000230 	.word	0x20000230

08009548 <_malloc_r>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	1ccd      	adds	r5, r1, #3
 800954c:	f025 0503 	bic.w	r5, r5, #3
 8009550:	3508      	adds	r5, #8
 8009552:	2d0c      	cmp	r5, #12
 8009554:	bf38      	it	cc
 8009556:	250c      	movcc	r5, #12
 8009558:	2d00      	cmp	r5, #0
 800955a:	4606      	mov	r6, r0
 800955c:	db01      	blt.n	8009562 <_malloc_r+0x1a>
 800955e:	42a9      	cmp	r1, r5
 8009560:	d903      	bls.n	800956a <_malloc_r+0x22>
 8009562:	230c      	movs	r3, #12
 8009564:	6033      	str	r3, [r6, #0]
 8009566:	2000      	movs	r0, #0
 8009568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800956a:	f001 fc5d 	bl	800ae28 <__malloc_lock>
 800956e:	4921      	ldr	r1, [pc, #132]	; (80095f4 <_malloc_r+0xac>)
 8009570:	680a      	ldr	r2, [r1, #0]
 8009572:	4614      	mov	r4, r2
 8009574:	b99c      	cbnz	r4, 800959e <_malloc_r+0x56>
 8009576:	4f20      	ldr	r7, [pc, #128]	; (80095f8 <_malloc_r+0xb0>)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	b923      	cbnz	r3, 8009586 <_malloc_r+0x3e>
 800957c:	4621      	mov	r1, r4
 800957e:	4630      	mov	r0, r6
 8009580:	f000 fcbe 	bl	8009f00 <_sbrk_r>
 8009584:	6038      	str	r0, [r7, #0]
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f000 fcb9 	bl	8009f00 <_sbrk_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d123      	bne.n	80095da <_malloc_r+0x92>
 8009592:	230c      	movs	r3, #12
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	4630      	mov	r0, r6
 8009598:	f001 fc4c 	bl	800ae34 <__malloc_unlock>
 800959c:	e7e3      	b.n	8009566 <_malloc_r+0x1e>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	1b5b      	subs	r3, r3, r5
 80095a2:	d417      	bmi.n	80095d4 <_malloc_r+0x8c>
 80095a4:	2b0b      	cmp	r3, #11
 80095a6:	d903      	bls.n	80095b0 <_malloc_r+0x68>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	441c      	add	r4, r3
 80095ac:	6025      	str	r5, [r4, #0]
 80095ae:	e004      	b.n	80095ba <_malloc_r+0x72>
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	42a2      	cmp	r2, r4
 80095b4:	bf0c      	ite	eq
 80095b6:	600b      	streq	r3, [r1, #0]
 80095b8:	6053      	strne	r3, [r2, #4]
 80095ba:	4630      	mov	r0, r6
 80095bc:	f001 fc3a 	bl	800ae34 <__malloc_unlock>
 80095c0:	f104 000b 	add.w	r0, r4, #11
 80095c4:	1d23      	adds	r3, r4, #4
 80095c6:	f020 0007 	bic.w	r0, r0, #7
 80095ca:	1ac2      	subs	r2, r0, r3
 80095cc:	d0cc      	beq.n	8009568 <_malloc_r+0x20>
 80095ce:	1a1b      	subs	r3, r3, r0
 80095d0:	50a3      	str	r3, [r4, r2]
 80095d2:	e7c9      	b.n	8009568 <_malloc_r+0x20>
 80095d4:	4622      	mov	r2, r4
 80095d6:	6864      	ldr	r4, [r4, #4]
 80095d8:	e7cc      	b.n	8009574 <_malloc_r+0x2c>
 80095da:	1cc4      	adds	r4, r0, #3
 80095dc:	f024 0403 	bic.w	r4, r4, #3
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d0e3      	beq.n	80095ac <_malloc_r+0x64>
 80095e4:	1a21      	subs	r1, r4, r0
 80095e6:	4630      	mov	r0, r6
 80095e8:	f000 fc8a 	bl	8009f00 <_sbrk_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	d1dd      	bne.n	80095ac <_malloc_r+0x64>
 80095f0:	e7cf      	b.n	8009592 <_malloc_r+0x4a>
 80095f2:	bf00      	nop
 80095f4:	20000230 	.word	0x20000230
 80095f8:	20000234 	.word	0x20000234

080095fc <__cvt>:
 80095fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009600:	ec55 4b10 	vmov	r4, r5, d0
 8009604:	2d00      	cmp	r5, #0
 8009606:	460e      	mov	r6, r1
 8009608:	4619      	mov	r1, r3
 800960a:	462b      	mov	r3, r5
 800960c:	bfbb      	ittet	lt
 800960e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009612:	461d      	movlt	r5, r3
 8009614:	2300      	movge	r3, #0
 8009616:	232d      	movlt	r3, #45	; 0x2d
 8009618:	700b      	strb	r3, [r1, #0]
 800961a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009620:	4691      	mov	r9, r2
 8009622:	f023 0820 	bic.w	r8, r3, #32
 8009626:	bfbc      	itt	lt
 8009628:	4622      	movlt	r2, r4
 800962a:	4614      	movlt	r4, r2
 800962c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009630:	d005      	beq.n	800963e <__cvt+0x42>
 8009632:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009636:	d100      	bne.n	800963a <__cvt+0x3e>
 8009638:	3601      	adds	r6, #1
 800963a:	2102      	movs	r1, #2
 800963c:	e000      	b.n	8009640 <__cvt+0x44>
 800963e:	2103      	movs	r1, #3
 8009640:	ab03      	add	r3, sp, #12
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	ab02      	add	r3, sp, #8
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	ec45 4b10 	vmov	d0, r4, r5
 800964c:	4653      	mov	r3, sl
 800964e:	4632      	mov	r2, r6
 8009650:	f000 fcf2 	bl	800a038 <_dtoa_r>
 8009654:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009658:	4607      	mov	r7, r0
 800965a:	d102      	bne.n	8009662 <__cvt+0x66>
 800965c:	f019 0f01 	tst.w	r9, #1
 8009660:	d022      	beq.n	80096a8 <__cvt+0xac>
 8009662:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009666:	eb07 0906 	add.w	r9, r7, r6
 800966a:	d110      	bne.n	800968e <__cvt+0x92>
 800966c:	783b      	ldrb	r3, [r7, #0]
 800966e:	2b30      	cmp	r3, #48	; 0x30
 8009670:	d10a      	bne.n	8009688 <__cvt+0x8c>
 8009672:	2200      	movs	r2, #0
 8009674:	2300      	movs	r3, #0
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	f7f7 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800967e:	b918      	cbnz	r0, 8009688 <__cvt+0x8c>
 8009680:	f1c6 0601 	rsb	r6, r6, #1
 8009684:	f8ca 6000 	str.w	r6, [sl]
 8009688:	f8da 3000 	ldr.w	r3, [sl]
 800968c:	4499      	add	r9, r3
 800968e:	2200      	movs	r2, #0
 8009690:	2300      	movs	r3, #0
 8009692:	4620      	mov	r0, r4
 8009694:	4629      	mov	r1, r5
 8009696:	f7f7 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800969a:	b108      	cbz	r0, 80096a0 <__cvt+0xa4>
 800969c:	f8cd 900c 	str.w	r9, [sp, #12]
 80096a0:	2230      	movs	r2, #48	; 0x30
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	454b      	cmp	r3, r9
 80096a6:	d307      	bcc.n	80096b8 <__cvt+0xbc>
 80096a8:	9b03      	ldr	r3, [sp, #12]
 80096aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096ac:	1bdb      	subs	r3, r3, r7
 80096ae:	4638      	mov	r0, r7
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	b004      	add	sp, #16
 80096b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b8:	1c59      	adds	r1, r3, #1
 80096ba:	9103      	str	r1, [sp, #12]
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e7f0      	b.n	80096a2 <__cvt+0xa6>

080096c0 <__exponent>:
 80096c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096c2:	4603      	mov	r3, r0
 80096c4:	2900      	cmp	r1, #0
 80096c6:	bfb8      	it	lt
 80096c8:	4249      	neglt	r1, r1
 80096ca:	f803 2b02 	strb.w	r2, [r3], #2
 80096ce:	bfb4      	ite	lt
 80096d0:	222d      	movlt	r2, #45	; 0x2d
 80096d2:	222b      	movge	r2, #43	; 0x2b
 80096d4:	2909      	cmp	r1, #9
 80096d6:	7042      	strb	r2, [r0, #1]
 80096d8:	dd2a      	ble.n	8009730 <__exponent+0x70>
 80096da:	f10d 0407 	add.w	r4, sp, #7
 80096de:	46a4      	mov	ip, r4
 80096e0:	270a      	movs	r7, #10
 80096e2:	46a6      	mov	lr, r4
 80096e4:	460a      	mov	r2, r1
 80096e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80096ea:	fb07 1516 	mls	r5, r7, r6, r1
 80096ee:	3530      	adds	r5, #48	; 0x30
 80096f0:	2a63      	cmp	r2, #99	; 0x63
 80096f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80096f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80096fa:	4631      	mov	r1, r6
 80096fc:	dcf1      	bgt.n	80096e2 <__exponent+0x22>
 80096fe:	3130      	adds	r1, #48	; 0x30
 8009700:	f1ae 0502 	sub.w	r5, lr, #2
 8009704:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009708:	1c44      	adds	r4, r0, #1
 800970a:	4629      	mov	r1, r5
 800970c:	4561      	cmp	r1, ip
 800970e:	d30a      	bcc.n	8009726 <__exponent+0x66>
 8009710:	f10d 0209 	add.w	r2, sp, #9
 8009714:	eba2 020e 	sub.w	r2, r2, lr
 8009718:	4565      	cmp	r5, ip
 800971a:	bf88      	it	hi
 800971c:	2200      	movhi	r2, #0
 800971e:	4413      	add	r3, r2
 8009720:	1a18      	subs	r0, r3, r0
 8009722:	b003      	add	sp, #12
 8009724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009726:	f811 2b01 	ldrb.w	r2, [r1], #1
 800972a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800972e:	e7ed      	b.n	800970c <__exponent+0x4c>
 8009730:	2330      	movs	r3, #48	; 0x30
 8009732:	3130      	adds	r1, #48	; 0x30
 8009734:	7083      	strb	r3, [r0, #2]
 8009736:	70c1      	strb	r1, [r0, #3]
 8009738:	1d03      	adds	r3, r0, #4
 800973a:	e7f1      	b.n	8009720 <__exponent+0x60>

0800973c <_printf_float>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	ed2d 8b02 	vpush	{d8}
 8009744:	b08d      	sub	sp, #52	; 0x34
 8009746:	460c      	mov	r4, r1
 8009748:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800974c:	4616      	mov	r6, r2
 800974e:	461f      	mov	r7, r3
 8009750:	4605      	mov	r5, r0
 8009752:	f001 fb53 	bl	800adfc <_localeconv_r>
 8009756:	f8d0 a000 	ldr.w	sl, [r0]
 800975a:	4650      	mov	r0, sl
 800975c:	f7f6 fd38 	bl	80001d0 <strlen>
 8009760:	2300      	movs	r3, #0
 8009762:	930a      	str	r3, [sp, #40]	; 0x28
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	9305      	str	r3, [sp, #20]
 8009768:	f8d8 3000 	ldr.w	r3, [r8]
 800976c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009770:	3307      	adds	r3, #7
 8009772:	f023 0307 	bic.w	r3, r3, #7
 8009776:	f103 0208 	add.w	r2, r3, #8
 800977a:	f8c8 2000 	str.w	r2, [r8]
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009786:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800978a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	f8cd 8018 	str.w	r8, [sp, #24]
 8009794:	ee08 0a10 	vmov	s16, r0
 8009798:	4b9f      	ldr	r3, [pc, #636]	; (8009a18 <_printf_float+0x2dc>)
 800979a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800979e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097a2:	f7f7 f9c3 	bl	8000b2c <__aeabi_dcmpun>
 80097a6:	bb88      	cbnz	r0, 800980c <_printf_float+0xd0>
 80097a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097ac:	4b9a      	ldr	r3, [pc, #616]	; (8009a18 <_printf_float+0x2dc>)
 80097ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b2:	f7f7 f99d 	bl	8000af0 <__aeabi_dcmple>
 80097b6:	bb48      	cbnz	r0, 800980c <_printf_float+0xd0>
 80097b8:	2200      	movs	r2, #0
 80097ba:	2300      	movs	r3, #0
 80097bc:	4640      	mov	r0, r8
 80097be:	4649      	mov	r1, r9
 80097c0:	f7f7 f98c 	bl	8000adc <__aeabi_dcmplt>
 80097c4:	b110      	cbz	r0, 80097cc <_printf_float+0x90>
 80097c6:	232d      	movs	r3, #45	; 0x2d
 80097c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097cc:	4b93      	ldr	r3, [pc, #588]	; (8009a1c <_printf_float+0x2e0>)
 80097ce:	4894      	ldr	r0, [pc, #592]	; (8009a20 <_printf_float+0x2e4>)
 80097d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80097d4:	bf94      	ite	ls
 80097d6:	4698      	movls	r8, r3
 80097d8:	4680      	movhi	r8, r0
 80097da:	2303      	movs	r3, #3
 80097dc:	6123      	str	r3, [r4, #16]
 80097de:	9b05      	ldr	r3, [sp, #20]
 80097e0:	f023 0204 	bic.w	r2, r3, #4
 80097e4:	6022      	str	r2, [r4, #0]
 80097e6:	f04f 0900 	mov.w	r9, #0
 80097ea:	9700      	str	r7, [sp, #0]
 80097ec:	4633      	mov	r3, r6
 80097ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80097f0:	4621      	mov	r1, r4
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f9d8 	bl	8009ba8 <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	f040 8090 	bne.w	800991e <_printf_float+0x1e2>
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009802:	b00d      	add	sp, #52	; 0x34
 8009804:	ecbd 8b02 	vpop	{d8}
 8009808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980c:	4642      	mov	r2, r8
 800980e:	464b      	mov	r3, r9
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f7 f98a 	bl	8000b2c <__aeabi_dcmpun>
 8009818:	b140      	cbz	r0, 800982c <_printf_float+0xf0>
 800981a:	464b      	mov	r3, r9
 800981c:	2b00      	cmp	r3, #0
 800981e:	bfbc      	itt	lt
 8009820:	232d      	movlt	r3, #45	; 0x2d
 8009822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009826:	487f      	ldr	r0, [pc, #508]	; (8009a24 <_printf_float+0x2e8>)
 8009828:	4b7f      	ldr	r3, [pc, #508]	; (8009a28 <_printf_float+0x2ec>)
 800982a:	e7d1      	b.n	80097d0 <_printf_float+0x94>
 800982c:	6863      	ldr	r3, [r4, #4]
 800982e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009832:	9206      	str	r2, [sp, #24]
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	d13f      	bne.n	80098b8 <_printf_float+0x17c>
 8009838:	2306      	movs	r3, #6
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	9b05      	ldr	r3, [sp, #20]
 800983e:	6861      	ldr	r1, [r4, #4]
 8009840:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009844:	2300      	movs	r3, #0
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	ab0a      	add	r3, sp, #40	; 0x28
 800984a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800984e:	ab09      	add	r3, sp, #36	; 0x24
 8009850:	ec49 8b10 	vmov	d0, r8, r9
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	6022      	str	r2, [r4, #0]
 8009858:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800985c:	4628      	mov	r0, r5
 800985e:	f7ff fecd 	bl	80095fc <__cvt>
 8009862:	9b06      	ldr	r3, [sp, #24]
 8009864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009866:	2b47      	cmp	r3, #71	; 0x47
 8009868:	4680      	mov	r8, r0
 800986a:	d108      	bne.n	800987e <_printf_float+0x142>
 800986c:	1cc8      	adds	r0, r1, #3
 800986e:	db02      	blt.n	8009876 <_printf_float+0x13a>
 8009870:	6863      	ldr	r3, [r4, #4]
 8009872:	4299      	cmp	r1, r3
 8009874:	dd41      	ble.n	80098fa <_printf_float+0x1be>
 8009876:	f1ab 0b02 	sub.w	fp, fp, #2
 800987a:	fa5f fb8b 	uxtb.w	fp, fp
 800987e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009882:	d820      	bhi.n	80098c6 <_printf_float+0x18a>
 8009884:	3901      	subs	r1, #1
 8009886:	465a      	mov	r2, fp
 8009888:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800988c:	9109      	str	r1, [sp, #36]	; 0x24
 800988e:	f7ff ff17 	bl	80096c0 <__exponent>
 8009892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009894:	1813      	adds	r3, r2, r0
 8009896:	2a01      	cmp	r2, #1
 8009898:	4681      	mov	r9, r0
 800989a:	6123      	str	r3, [r4, #16]
 800989c:	dc02      	bgt.n	80098a4 <_printf_float+0x168>
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	07d2      	lsls	r2, r2, #31
 80098a2:	d501      	bpl.n	80098a8 <_printf_float+0x16c>
 80098a4:	3301      	adds	r3, #1
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d09c      	beq.n	80097ea <_printf_float+0xae>
 80098b0:	232d      	movs	r3, #45	; 0x2d
 80098b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b6:	e798      	b.n	80097ea <_printf_float+0xae>
 80098b8:	9a06      	ldr	r2, [sp, #24]
 80098ba:	2a47      	cmp	r2, #71	; 0x47
 80098bc:	d1be      	bne.n	800983c <_printf_float+0x100>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1bc      	bne.n	800983c <_printf_float+0x100>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e7b9      	b.n	800983a <_printf_float+0xfe>
 80098c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80098ca:	d118      	bne.n	80098fe <_printf_float+0x1c2>
 80098cc:	2900      	cmp	r1, #0
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	dd0b      	ble.n	80098ea <_printf_float+0x1ae>
 80098d2:	6121      	str	r1, [r4, #16]
 80098d4:	b913      	cbnz	r3, 80098dc <_printf_float+0x1a0>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	07d0      	lsls	r0, r2, #31
 80098da:	d502      	bpl.n	80098e2 <_printf_float+0x1a6>
 80098dc:	3301      	adds	r3, #1
 80098de:	440b      	add	r3, r1
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80098e4:	f04f 0900 	mov.w	r9, #0
 80098e8:	e7de      	b.n	80098a8 <_printf_float+0x16c>
 80098ea:	b913      	cbnz	r3, 80098f2 <_printf_float+0x1b6>
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	07d2      	lsls	r2, r2, #31
 80098f0:	d501      	bpl.n	80098f6 <_printf_float+0x1ba>
 80098f2:	3302      	adds	r3, #2
 80098f4:	e7f4      	b.n	80098e0 <_printf_float+0x1a4>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e7f2      	b.n	80098e0 <_printf_float+0x1a4>
 80098fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80098fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009900:	4299      	cmp	r1, r3
 8009902:	db05      	blt.n	8009910 <_printf_float+0x1d4>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	6121      	str	r1, [r4, #16]
 8009908:	07d8      	lsls	r0, r3, #31
 800990a:	d5ea      	bpl.n	80098e2 <_printf_float+0x1a6>
 800990c:	1c4b      	adds	r3, r1, #1
 800990e:	e7e7      	b.n	80098e0 <_printf_float+0x1a4>
 8009910:	2900      	cmp	r1, #0
 8009912:	bfd4      	ite	le
 8009914:	f1c1 0202 	rsble	r2, r1, #2
 8009918:	2201      	movgt	r2, #1
 800991a:	4413      	add	r3, r2
 800991c:	e7e0      	b.n	80098e0 <_printf_float+0x1a4>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	055a      	lsls	r2, r3, #21
 8009922:	d407      	bmi.n	8009934 <_printf_float+0x1f8>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	4642      	mov	r2, r8
 8009928:	4631      	mov	r1, r6
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	d12c      	bne.n	800998c <_printf_float+0x250>
 8009932:	e764      	b.n	80097fe <_printf_float+0xc2>
 8009934:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009938:	f240 80e0 	bls.w	8009afc <_printf_float+0x3c0>
 800993c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009940:	2200      	movs	r2, #0
 8009942:	2300      	movs	r3, #0
 8009944:	f7f7 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009948:	2800      	cmp	r0, #0
 800994a:	d034      	beq.n	80099b6 <_printf_float+0x27a>
 800994c:	4a37      	ldr	r2, [pc, #220]	; (8009a2c <_printf_float+0x2f0>)
 800994e:	2301      	movs	r3, #1
 8009950:	4631      	mov	r1, r6
 8009952:	4628      	mov	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af51 	beq.w	80097fe <_printf_float+0xc2>
 800995c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009960:	429a      	cmp	r2, r3
 8009962:	db02      	blt.n	800996a <_printf_float+0x22e>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	07d8      	lsls	r0, r3, #31
 8009968:	d510      	bpl.n	800998c <_printf_float+0x250>
 800996a:	ee18 3a10 	vmov	r3, s16
 800996e:	4652      	mov	r2, sl
 8009970:	4631      	mov	r1, r6
 8009972:	4628      	mov	r0, r5
 8009974:	47b8      	blx	r7
 8009976:	3001      	adds	r0, #1
 8009978:	f43f af41 	beq.w	80097fe <_printf_float+0xc2>
 800997c:	f04f 0800 	mov.w	r8, #0
 8009980:	f104 091a 	add.w	r9, r4, #26
 8009984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009986:	3b01      	subs	r3, #1
 8009988:	4543      	cmp	r3, r8
 800998a:	dc09      	bgt.n	80099a0 <_printf_float+0x264>
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	079b      	lsls	r3, r3, #30
 8009990:	f100 8105 	bmi.w	8009b9e <_printf_float+0x462>
 8009994:	68e0      	ldr	r0, [r4, #12]
 8009996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009998:	4298      	cmp	r0, r3
 800999a:	bfb8      	it	lt
 800999c:	4618      	movlt	r0, r3
 800999e:	e730      	b.n	8009802 <_printf_float+0xc6>
 80099a0:	2301      	movs	r3, #1
 80099a2:	464a      	mov	r2, r9
 80099a4:	4631      	mov	r1, r6
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f af27 	beq.w	80097fe <_printf_float+0xc2>
 80099b0:	f108 0801 	add.w	r8, r8, #1
 80099b4:	e7e6      	b.n	8009984 <_printf_float+0x248>
 80099b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dc39      	bgt.n	8009a30 <_printf_float+0x2f4>
 80099bc:	4a1b      	ldr	r2, [pc, #108]	; (8009a2c <_printf_float+0x2f0>)
 80099be:	2301      	movs	r3, #1
 80099c0:	4631      	mov	r1, r6
 80099c2:	4628      	mov	r0, r5
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	f43f af19 	beq.w	80097fe <_printf_float+0xc2>
 80099cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d0:	4313      	orrs	r3, r2
 80099d2:	d102      	bne.n	80099da <_printf_float+0x29e>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	07d9      	lsls	r1, r3, #31
 80099d8:	d5d8      	bpl.n	800998c <_printf_float+0x250>
 80099da:	ee18 3a10 	vmov	r3, s16
 80099de:	4652      	mov	r2, sl
 80099e0:	4631      	mov	r1, r6
 80099e2:	4628      	mov	r0, r5
 80099e4:	47b8      	blx	r7
 80099e6:	3001      	adds	r0, #1
 80099e8:	f43f af09 	beq.w	80097fe <_printf_float+0xc2>
 80099ec:	f04f 0900 	mov.w	r9, #0
 80099f0:	f104 0a1a 	add.w	sl, r4, #26
 80099f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f6:	425b      	negs	r3, r3
 80099f8:	454b      	cmp	r3, r9
 80099fa:	dc01      	bgt.n	8009a00 <_printf_float+0x2c4>
 80099fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099fe:	e792      	b.n	8009926 <_printf_float+0x1ea>
 8009a00:	2301      	movs	r3, #1
 8009a02:	4652      	mov	r2, sl
 8009a04:	4631      	mov	r1, r6
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b8      	blx	r7
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	f43f aef7 	beq.w	80097fe <_printf_float+0xc2>
 8009a10:	f109 0901 	add.w	r9, r9, #1
 8009a14:	e7ee      	b.n	80099f4 <_printf_float+0x2b8>
 8009a16:	bf00      	nop
 8009a18:	7fefffff 	.word	0x7fefffff
 8009a1c:	0800beec 	.word	0x0800beec
 8009a20:	0800bef0 	.word	0x0800bef0
 8009a24:	0800bef8 	.word	0x0800bef8
 8009a28:	0800bef4 	.word	0x0800bef4
 8009a2c:	0800befc 	.word	0x0800befc
 8009a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a34:	429a      	cmp	r2, r3
 8009a36:	bfa8      	it	ge
 8009a38:	461a      	movge	r2, r3
 8009a3a:	2a00      	cmp	r2, #0
 8009a3c:	4691      	mov	r9, r2
 8009a3e:	dc37      	bgt.n	8009ab0 <_printf_float+0x374>
 8009a40:	f04f 0b00 	mov.w	fp, #0
 8009a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a48:	f104 021a 	add.w	r2, r4, #26
 8009a4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	eba3 0309 	sub.w	r3, r3, r9
 8009a54:	455b      	cmp	r3, fp
 8009a56:	dc33      	bgt.n	8009ac0 <_printf_float+0x384>
 8009a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	db3b      	blt.n	8009ad8 <_printf_float+0x39c>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	07da      	lsls	r2, r3, #31
 8009a64:	d438      	bmi.n	8009ad8 <_printf_float+0x39c>
 8009a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a68:	9b05      	ldr	r3, [sp, #20]
 8009a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	eba2 0901 	sub.w	r9, r2, r1
 8009a72:	4599      	cmp	r9, r3
 8009a74:	bfa8      	it	ge
 8009a76:	4699      	movge	r9, r3
 8009a78:	f1b9 0f00 	cmp.w	r9, #0
 8009a7c:	dc35      	bgt.n	8009aea <_printf_float+0x3ae>
 8009a7e:	f04f 0800 	mov.w	r8, #0
 8009a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a86:	f104 0a1a 	add.w	sl, r4, #26
 8009a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	eba3 0309 	sub.w	r3, r3, r9
 8009a94:	4543      	cmp	r3, r8
 8009a96:	f77f af79 	ble.w	800998c <_printf_float+0x250>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4652      	mov	r2, sl
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	47b8      	blx	r7
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	f43f aeaa 	beq.w	80097fe <_printf_float+0xc2>
 8009aaa:	f108 0801 	add.w	r8, r8, #1
 8009aae:	e7ec      	b.n	8009a8a <_printf_float+0x34e>
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	d1c0      	bne.n	8009a40 <_printf_float+0x304>
 8009abe:	e69e      	b.n	80097fe <_printf_float+0xc2>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	9205      	str	r2, [sp, #20]
 8009ac8:	47b8      	blx	r7
 8009aca:	3001      	adds	r0, #1
 8009acc:	f43f ae97 	beq.w	80097fe <_printf_float+0xc2>
 8009ad0:	9a05      	ldr	r2, [sp, #20]
 8009ad2:	f10b 0b01 	add.w	fp, fp, #1
 8009ad6:	e7b9      	b.n	8009a4c <_printf_float+0x310>
 8009ad8:	ee18 3a10 	vmov	r3, s16
 8009adc:	4652      	mov	r2, sl
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	47b8      	blx	r7
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d1be      	bne.n	8009a66 <_printf_float+0x32a>
 8009ae8:	e689      	b.n	80097fe <_printf_float+0xc2>
 8009aea:	9a05      	ldr	r2, [sp, #20]
 8009aec:	464b      	mov	r3, r9
 8009aee:	4442      	add	r2, r8
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	d1c1      	bne.n	8009a7e <_printf_float+0x342>
 8009afa:	e680      	b.n	80097fe <_printf_float+0xc2>
 8009afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009afe:	2a01      	cmp	r2, #1
 8009b00:	dc01      	bgt.n	8009b06 <_printf_float+0x3ca>
 8009b02:	07db      	lsls	r3, r3, #31
 8009b04:	d538      	bpl.n	8009b78 <_printf_float+0x43c>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4642      	mov	r2, r8
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	47b8      	blx	r7
 8009b10:	3001      	adds	r0, #1
 8009b12:	f43f ae74 	beq.w	80097fe <_printf_float+0xc2>
 8009b16:	ee18 3a10 	vmov	r3, s16
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f ae6b 	beq.w	80097fe <_printf_float+0xc2>
 8009b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f7f6 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b34:	b9d8      	cbnz	r0, 8009b6e <_printf_float+0x432>
 8009b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b38:	f108 0201 	add.w	r2, r8, #1
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b8      	blx	r7
 8009b44:	3001      	adds	r0, #1
 8009b46:	d10e      	bne.n	8009b66 <_printf_float+0x42a>
 8009b48:	e659      	b.n	80097fe <_printf_float+0xc2>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4652      	mov	r2, sl
 8009b4e:	4631      	mov	r1, r6
 8009b50:	4628      	mov	r0, r5
 8009b52:	47b8      	blx	r7
 8009b54:	3001      	adds	r0, #1
 8009b56:	f43f ae52 	beq.w	80097fe <_printf_float+0xc2>
 8009b5a:	f108 0801 	add.w	r8, r8, #1
 8009b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b60:	3b01      	subs	r3, #1
 8009b62:	4543      	cmp	r3, r8
 8009b64:	dcf1      	bgt.n	8009b4a <_printf_float+0x40e>
 8009b66:	464b      	mov	r3, r9
 8009b68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b6c:	e6dc      	b.n	8009928 <_printf_float+0x1ec>
 8009b6e:	f04f 0800 	mov.w	r8, #0
 8009b72:	f104 0a1a 	add.w	sl, r4, #26
 8009b76:	e7f2      	b.n	8009b5e <_printf_float+0x422>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4642      	mov	r2, r8
 8009b7c:	e7df      	b.n	8009b3e <_printf_float+0x402>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	464a      	mov	r2, r9
 8009b82:	4631      	mov	r1, r6
 8009b84:	4628      	mov	r0, r5
 8009b86:	47b8      	blx	r7
 8009b88:	3001      	adds	r0, #1
 8009b8a:	f43f ae38 	beq.w	80097fe <_printf_float+0xc2>
 8009b8e:	f108 0801 	add.w	r8, r8, #1
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b96:	1a5b      	subs	r3, r3, r1
 8009b98:	4543      	cmp	r3, r8
 8009b9a:	dcf0      	bgt.n	8009b7e <_printf_float+0x442>
 8009b9c:	e6fa      	b.n	8009994 <_printf_float+0x258>
 8009b9e:	f04f 0800 	mov.w	r8, #0
 8009ba2:	f104 0919 	add.w	r9, r4, #25
 8009ba6:	e7f4      	b.n	8009b92 <_printf_float+0x456>

08009ba8 <_printf_common>:
 8009ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	4616      	mov	r6, r2
 8009bae:	4699      	mov	r9, r3
 8009bb0:	688a      	ldr	r2, [r1, #8]
 8009bb2:	690b      	ldr	r3, [r1, #16]
 8009bb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	bfb8      	it	lt
 8009bbc:	4613      	movlt	r3, r2
 8009bbe:	6033      	str	r3, [r6, #0]
 8009bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	b10a      	cbz	r2, 8009bce <_printf_common+0x26>
 8009bca:	3301      	adds	r3, #1
 8009bcc:	6033      	str	r3, [r6, #0]
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	0699      	lsls	r1, r3, #26
 8009bd2:	bf42      	ittt	mi
 8009bd4:	6833      	ldrmi	r3, [r6, #0]
 8009bd6:	3302      	addmi	r3, #2
 8009bd8:	6033      	strmi	r3, [r6, #0]
 8009bda:	6825      	ldr	r5, [r4, #0]
 8009bdc:	f015 0506 	ands.w	r5, r5, #6
 8009be0:	d106      	bne.n	8009bf0 <_printf_common+0x48>
 8009be2:	f104 0a19 	add.w	sl, r4, #25
 8009be6:	68e3      	ldr	r3, [r4, #12]
 8009be8:	6832      	ldr	r2, [r6, #0]
 8009bea:	1a9b      	subs	r3, r3, r2
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	dc26      	bgt.n	8009c3e <_printf_common+0x96>
 8009bf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bf4:	1e13      	subs	r3, r2, #0
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	bf18      	it	ne
 8009bfa:	2301      	movne	r3, #1
 8009bfc:	0692      	lsls	r2, r2, #26
 8009bfe:	d42b      	bmi.n	8009c58 <_printf_common+0xb0>
 8009c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c04:	4649      	mov	r1, r9
 8009c06:	4638      	mov	r0, r7
 8009c08:	47c0      	blx	r8
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	d01e      	beq.n	8009c4c <_printf_common+0xa4>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	68e5      	ldr	r5, [r4, #12]
 8009c12:	6832      	ldr	r2, [r6, #0]
 8009c14:	f003 0306 	and.w	r3, r3, #6
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	bf08      	it	eq
 8009c1c:	1aad      	subeq	r5, r5, r2
 8009c1e:	68a3      	ldr	r3, [r4, #8]
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	bf0c      	ite	eq
 8009c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c28:	2500      	movne	r5, #0
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	bfc4      	itt	gt
 8009c2e:	1a9b      	subgt	r3, r3, r2
 8009c30:	18ed      	addgt	r5, r5, r3
 8009c32:	2600      	movs	r6, #0
 8009c34:	341a      	adds	r4, #26
 8009c36:	42b5      	cmp	r5, r6
 8009c38:	d11a      	bne.n	8009c70 <_printf_common+0xc8>
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	e008      	b.n	8009c50 <_printf_common+0xa8>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4652      	mov	r2, sl
 8009c42:	4649      	mov	r1, r9
 8009c44:	4638      	mov	r0, r7
 8009c46:	47c0      	blx	r8
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d103      	bne.n	8009c54 <_printf_common+0xac>
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c54:	3501      	adds	r5, #1
 8009c56:	e7c6      	b.n	8009be6 <_printf_common+0x3e>
 8009c58:	18e1      	adds	r1, r4, r3
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	2030      	movs	r0, #48	; 0x30
 8009c5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c62:	4422      	add	r2, r4
 8009c64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	e7c7      	b.n	8009c00 <_printf_common+0x58>
 8009c70:	2301      	movs	r3, #1
 8009c72:	4622      	mov	r2, r4
 8009c74:	4649      	mov	r1, r9
 8009c76:	4638      	mov	r0, r7
 8009c78:	47c0      	blx	r8
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	d0e6      	beq.n	8009c4c <_printf_common+0xa4>
 8009c7e:	3601      	adds	r6, #1
 8009c80:	e7d9      	b.n	8009c36 <_printf_common+0x8e>
	...

08009c84 <_printf_i>:
 8009c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c88:	460c      	mov	r4, r1
 8009c8a:	4691      	mov	r9, r2
 8009c8c:	7e27      	ldrb	r7, [r4, #24]
 8009c8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c90:	2f78      	cmp	r7, #120	; 0x78
 8009c92:	4680      	mov	r8, r0
 8009c94:	469a      	mov	sl, r3
 8009c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c9a:	d807      	bhi.n	8009cac <_printf_i+0x28>
 8009c9c:	2f62      	cmp	r7, #98	; 0x62
 8009c9e:	d80a      	bhi.n	8009cb6 <_printf_i+0x32>
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	f000 80d8 	beq.w	8009e56 <_printf_i+0x1d2>
 8009ca6:	2f58      	cmp	r7, #88	; 0x58
 8009ca8:	f000 80a3 	beq.w	8009df2 <_printf_i+0x16e>
 8009cac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb4:	e03a      	b.n	8009d2c <_printf_i+0xa8>
 8009cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cba:	2b15      	cmp	r3, #21
 8009cbc:	d8f6      	bhi.n	8009cac <_printf_i+0x28>
 8009cbe:	a001      	add	r0, pc, #4	; (adr r0, 8009cc4 <_printf_i+0x40>)
 8009cc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009cc4:	08009d1d 	.word	0x08009d1d
 8009cc8:	08009d31 	.word	0x08009d31
 8009ccc:	08009cad 	.word	0x08009cad
 8009cd0:	08009cad 	.word	0x08009cad
 8009cd4:	08009cad 	.word	0x08009cad
 8009cd8:	08009cad 	.word	0x08009cad
 8009cdc:	08009d31 	.word	0x08009d31
 8009ce0:	08009cad 	.word	0x08009cad
 8009ce4:	08009cad 	.word	0x08009cad
 8009ce8:	08009cad 	.word	0x08009cad
 8009cec:	08009cad 	.word	0x08009cad
 8009cf0:	08009e3d 	.word	0x08009e3d
 8009cf4:	08009d61 	.word	0x08009d61
 8009cf8:	08009e1f 	.word	0x08009e1f
 8009cfc:	08009cad 	.word	0x08009cad
 8009d00:	08009cad 	.word	0x08009cad
 8009d04:	08009e5f 	.word	0x08009e5f
 8009d08:	08009cad 	.word	0x08009cad
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009cad 	.word	0x08009cad
 8009d14:	08009cad 	.word	0x08009cad
 8009d18:	08009e27 	.word	0x08009e27
 8009d1c:	680b      	ldr	r3, [r1, #0]
 8009d1e:	1d1a      	adds	r2, r3, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	600a      	str	r2, [r1, #0]
 8009d24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e0a3      	b.n	8009e78 <_printf_i+0x1f4>
 8009d30:	6825      	ldr	r5, [r4, #0]
 8009d32:	6808      	ldr	r0, [r1, #0]
 8009d34:	062e      	lsls	r6, r5, #24
 8009d36:	f100 0304 	add.w	r3, r0, #4
 8009d3a:	d50a      	bpl.n	8009d52 <_printf_i+0xce>
 8009d3c:	6805      	ldr	r5, [r0, #0]
 8009d3e:	600b      	str	r3, [r1, #0]
 8009d40:	2d00      	cmp	r5, #0
 8009d42:	da03      	bge.n	8009d4c <_printf_i+0xc8>
 8009d44:	232d      	movs	r3, #45	; 0x2d
 8009d46:	426d      	negs	r5, r5
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	485e      	ldr	r0, [pc, #376]	; (8009ec8 <_printf_i+0x244>)
 8009d4e:	230a      	movs	r3, #10
 8009d50:	e019      	b.n	8009d86 <_printf_i+0x102>
 8009d52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d56:	6805      	ldr	r5, [r0, #0]
 8009d58:	600b      	str	r3, [r1, #0]
 8009d5a:	bf18      	it	ne
 8009d5c:	b22d      	sxthne	r5, r5
 8009d5e:	e7ef      	b.n	8009d40 <_printf_i+0xbc>
 8009d60:	680b      	ldr	r3, [r1, #0]
 8009d62:	6825      	ldr	r5, [r4, #0]
 8009d64:	1d18      	adds	r0, r3, #4
 8009d66:	6008      	str	r0, [r1, #0]
 8009d68:	0628      	lsls	r0, r5, #24
 8009d6a:	d501      	bpl.n	8009d70 <_printf_i+0xec>
 8009d6c:	681d      	ldr	r5, [r3, #0]
 8009d6e:	e002      	b.n	8009d76 <_printf_i+0xf2>
 8009d70:	0669      	lsls	r1, r5, #25
 8009d72:	d5fb      	bpl.n	8009d6c <_printf_i+0xe8>
 8009d74:	881d      	ldrh	r5, [r3, #0]
 8009d76:	4854      	ldr	r0, [pc, #336]	; (8009ec8 <_printf_i+0x244>)
 8009d78:	2f6f      	cmp	r7, #111	; 0x6f
 8009d7a:	bf0c      	ite	eq
 8009d7c:	2308      	moveq	r3, #8
 8009d7e:	230a      	movne	r3, #10
 8009d80:	2100      	movs	r1, #0
 8009d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d86:	6866      	ldr	r6, [r4, #4]
 8009d88:	60a6      	str	r6, [r4, #8]
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	bfa2      	ittt	ge
 8009d8e:	6821      	ldrge	r1, [r4, #0]
 8009d90:	f021 0104 	bicge.w	r1, r1, #4
 8009d94:	6021      	strge	r1, [r4, #0]
 8009d96:	b90d      	cbnz	r5, 8009d9c <_printf_i+0x118>
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	d04d      	beq.n	8009e38 <_printf_i+0x1b4>
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009da2:	fb03 5711 	mls	r7, r3, r1, r5
 8009da6:	5dc7      	ldrb	r7, [r0, r7]
 8009da8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dac:	462f      	mov	r7, r5
 8009dae:	42bb      	cmp	r3, r7
 8009db0:	460d      	mov	r5, r1
 8009db2:	d9f4      	bls.n	8009d9e <_printf_i+0x11a>
 8009db4:	2b08      	cmp	r3, #8
 8009db6:	d10b      	bne.n	8009dd0 <_printf_i+0x14c>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	07df      	lsls	r7, r3, #31
 8009dbc:	d508      	bpl.n	8009dd0 <_printf_i+0x14c>
 8009dbe:	6923      	ldr	r3, [r4, #16]
 8009dc0:	6861      	ldr	r1, [r4, #4]
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	bfde      	ittt	le
 8009dc6:	2330      	movle	r3, #48	; 0x30
 8009dc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dcc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009dd0:	1b92      	subs	r2, r2, r6
 8009dd2:	6122      	str	r2, [r4, #16]
 8009dd4:	f8cd a000 	str.w	sl, [sp]
 8009dd8:	464b      	mov	r3, r9
 8009dda:	aa03      	add	r2, sp, #12
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4640      	mov	r0, r8
 8009de0:	f7ff fee2 	bl	8009ba8 <_printf_common>
 8009de4:	3001      	adds	r0, #1
 8009de6:	d14c      	bne.n	8009e82 <_printf_i+0x1fe>
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dec:	b004      	add	sp, #16
 8009dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df2:	4835      	ldr	r0, [pc, #212]	; (8009ec8 <_printf_i+0x244>)
 8009df4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	680e      	ldr	r6, [r1, #0]
 8009dfc:	061f      	lsls	r7, r3, #24
 8009dfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e02:	600e      	str	r6, [r1, #0]
 8009e04:	d514      	bpl.n	8009e30 <_printf_i+0x1ac>
 8009e06:	07d9      	lsls	r1, r3, #31
 8009e08:	bf44      	itt	mi
 8009e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0e:	6023      	strmi	r3, [r4, #0]
 8009e10:	b91d      	cbnz	r5, 8009e1a <_printf_i+0x196>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	f023 0320 	bic.w	r3, r3, #32
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	2310      	movs	r3, #16
 8009e1c:	e7b0      	b.n	8009d80 <_printf_i+0xfc>
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	f043 0320 	orr.w	r3, r3, #32
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	2378      	movs	r3, #120	; 0x78
 8009e28:	4828      	ldr	r0, [pc, #160]	; (8009ecc <_printf_i+0x248>)
 8009e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e2e:	e7e3      	b.n	8009df8 <_printf_i+0x174>
 8009e30:	065e      	lsls	r6, r3, #25
 8009e32:	bf48      	it	mi
 8009e34:	b2ad      	uxthmi	r5, r5
 8009e36:	e7e6      	b.n	8009e06 <_printf_i+0x182>
 8009e38:	4616      	mov	r6, r2
 8009e3a:	e7bb      	b.n	8009db4 <_printf_i+0x130>
 8009e3c:	680b      	ldr	r3, [r1, #0]
 8009e3e:	6826      	ldr	r6, [r4, #0]
 8009e40:	6960      	ldr	r0, [r4, #20]
 8009e42:	1d1d      	adds	r5, r3, #4
 8009e44:	600d      	str	r5, [r1, #0]
 8009e46:	0635      	lsls	r5, r6, #24
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	d501      	bpl.n	8009e50 <_printf_i+0x1cc>
 8009e4c:	6018      	str	r0, [r3, #0]
 8009e4e:	e002      	b.n	8009e56 <_printf_i+0x1d2>
 8009e50:	0671      	lsls	r1, r6, #25
 8009e52:	d5fb      	bpl.n	8009e4c <_printf_i+0x1c8>
 8009e54:	8018      	strh	r0, [r3, #0]
 8009e56:	2300      	movs	r3, #0
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	4616      	mov	r6, r2
 8009e5c:	e7ba      	b.n	8009dd4 <_printf_i+0x150>
 8009e5e:	680b      	ldr	r3, [r1, #0]
 8009e60:	1d1a      	adds	r2, r3, #4
 8009e62:	600a      	str	r2, [r1, #0]
 8009e64:	681e      	ldr	r6, [r3, #0]
 8009e66:	6862      	ldr	r2, [r4, #4]
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7f6 f9b8 	bl	80001e0 <memchr>
 8009e70:	b108      	cbz	r0, 8009e76 <_printf_i+0x1f2>
 8009e72:	1b80      	subs	r0, r0, r6
 8009e74:	6060      	str	r0, [r4, #4]
 8009e76:	6863      	ldr	r3, [r4, #4]
 8009e78:	6123      	str	r3, [r4, #16]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e80:	e7a8      	b.n	8009dd4 <_printf_i+0x150>
 8009e82:	6923      	ldr	r3, [r4, #16]
 8009e84:	4632      	mov	r2, r6
 8009e86:	4649      	mov	r1, r9
 8009e88:	4640      	mov	r0, r8
 8009e8a:	47d0      	blx	sl
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	d0ab      	beq.n	8009de8 <_printf_i+0x164>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	079b      	lsls	r3, r3, #30
 8009e94:	d413      	bmi.n	8009ebe <_printf_i+0x23a>
 8009e96:	68e0      	ldr	r0, [r4, #12]
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	4298      	cmp	r0, r3
 8009e9c:	bfb8      	it	lt
 8009e9e:	4618      	movlt	r0, r3
 8009ea0:	e7a4      	b.n	8009dec <_printf_i+0x168>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4632      	mov	r2, r6
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	47d0      	blx	sl
 8009eac:	3001      	adds	r0, #1
 8009eae:	d09b      	beq.n	8009de8 <_printf_i+0x164>
 8009eb0:	3501      	adds	r5, #1
 8009eb2:	68e3      	ldr	r3, [r4, #12]
 8009eb4:	9903      	ldr	r1, [sp, #12]
 8009eb6:	1a5b      	subs	r3, r3, r1
 8009eb8:	42ab      	cmp	r3, r5
 8009eba:	dcf2      	bgt.n	8009ea2 <_printf_i+0x21e>
 8009ebc:	e7eb      	b.n	8009e96 <_printf_i+0x212>
 8009ebe:	2500      	movs	r5, #0
 8009ec0:	f104 0619 	add.w	r6, r4, #25
 8009ec4:	e7f5      	b.n	8009eb2 <_printf_i+0x22e>
 8009ec6:	bf00      	nop
 8009ec8:	0800befe 	.word	0x0800befe
 8009ecc:	0800bf0f 	.word	0x0800bf0f

08009ed0 <iprintf>:
 8009ed0:	b40f      	push	{r0, r1, r2, r3}
 8009ed2:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <iprintf+0x2c>)
 8009ed4:	b513      	push	{r0, r1, r4, lr}
 8009ed6:	681c      	ldr	r4, [r3, #0]
 8009ed8:	b124      	cbz	r4, 8009ee4 <iprintf+0x14>
 8009eda:	69a3      	ldr	r3, [r4, #24]
 8009edc:	b913      	cbnz	r3, 8009ee4 <iprintf+0x14>
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f000 feee 	bl	800acc0 <__sinit>
 8009ee4:	ab05      	add	r3, sp, #20
 8009ee6:	9a04      	ldr	r2, [sp, #16]
 8009ee8:	68a1      	ldr	r1, [r4, #8]
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	4620      	mov	r0, r4
 8009eee:	f001 fb5d 	bl	800b5ac <_vfiprintf_r>
 8009ef2:	b002      	add	sp, #8
 8009ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef8:	b004      	add	sp, #16
 8009efa:	4770      	bx	lr
 8009efc:	2000002c 	.word	0x2000002c

08009f00 <_sbrk_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_sbrk_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f7 fec4 	bl	8001c98 <_sbrk>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_sbrk_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_sbrk_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20000b28 	.word	0x20000b28

08009f20 <quorem>:
 8009f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	6903      	ldr	r3, [r0, #16]
 8009f26:	690c      	ldr	r4, [r1, #16]
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	f2c0 8081 	blt.w	800a032 <quorem+0x112>
 8009f30:	3c01      	subs	r4, #1
 8009f32:	f101 0814 	add.w	r8, r1, #20
 8009f36:	f100 0514 	add.w	r5, r0, #20
 8009f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f54:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f58:	d331      	bcc.n	8009fbe <quorem+0x9e>
 8009f5a:	f04f 0e00 	mov.w	lr, #0
 8009f5e:	4640      	mov	r0, r8
 8009f60:	46ac      	mov	ip, r5
 8009f62:	46f2      	mov	sl, lr
 8009f64:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f68:	b293      	uxth	r3, r2
 8009f6a:	fb06 e303 	mla	r3, r6, r3, lr
 8009f6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	ebaa 0303 	sub.w	r3, sl, r3
 8009f78:	0c12      	lsrs	r2, r2, #16
 8009f7a:	f8dc a000 	ldr.w	sl, [ip]
 8009f7e:	fb06 e202 	mla	r2, r6, r2, lr
 8009f82:	fa13 f38a 	uxtah	r3, r3, sl
 8009f86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f8a:	fa1f fa82 	uxth.w	sl, r2
 8009f8e:	f8dc 2000 	ldr.w	r2, [ip]
 8009f92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fa0:	4581      	cmp	r9, r0
 8009fa2:	f84c 3b04 	str.w	r3, [ip], #4
 8009fa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009faa:	d2db      	bcs.n	8009f64 <quorem+0x44>
 8009fac:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fb0:	b92b      	cbnz	r3, 8009fbe <quorem+0x9e>
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	3b04      	subs	r3, #4
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	461a      	mov	r2, r3
 8009fba:	d32e      	bcc.n	800a01a <quorem+0xfa>
 8009fbc:	613c      	str	r4, [r7, #16]
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	f001 f9bc 	bl	800b33c <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	db24      	blt.n	800a012 <quorem+0xf2>
 8009fc8:	3601      	adds	r6, #1
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f04f 0c00 	mov.w	ip, #0
 8009fd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fd4:	f8d0 e000 	ldr.w	lr, [r0]
 8009fd8:	b293      	uxth	r3, r2
 8009fda:	ebac 0303 	sub.w	r3, ip, r3
 8009fde:	0c12      	lsrs	r2, r2, #16
 8009fe0:	fa13 f38e 	uxtah	r3, r3, lr
 8009fe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff2:	45c1      	cmp	r9, r8
 8009ff4:	f840 3b04 	str.w	r3, [r0], #4
 8009ff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ffc:	d2e8      	bcs.n	8009fd0 <quorem+0xb0>
 8009ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a006:	b922      	cbnz	r2, 800a012 <quorem+0xf2>
 800a008:	3b04      	subs	r3, #4
 800a00a:	429d      	cmp	r5, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	d30a      	bcc.n	800a026 <quorem+0x106>
 800a010:	613c      	str	r4, [r7, #16]
 800a012:	4630      	mov	r0, r6
 800a014:	b003      	add	sp, #12
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	3b04      	subs	r3, #4
 800a01e:	2a00      	cmp	r2, #0
 800a020:	d1cc      	bne.n	8009fbc <quorem+0x9c>
 800a022:	3c01      	subs	r4, #1
 800a024:	e7c7      	b.n	8009fb6 <quorem+0x96>
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	3b04      	subs	r3, #4
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d1f0      	bne.n	800a010 <quorem+0xf0>
 800a02e:	3c01      	subs	r4, #1
 800a030:	e7eb      	b.n	800a00a <quorem+0xea>
 800a032:	2000      	movs	r0, #0
 800a034:	e7ee      	b.n	800a014 <quorem+0xf4>
	...

0800a038 <_dtoa_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	ed2d 8b02 	vpush	{d8}
 800a040:	ec57 6b10 	vmov	r6, r7, d0
 800a044:	b095      	sub	sp, #84	; 0x54
 800a046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a04c:	9105      	str	r1, [sp, #20]
 800a04e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a052:	4604      	mov	r4, r0
 800a054:	9209      	str	r2, [sp, #36]	; 0x24
 800a056:	930f      	str	r3, [sp, #60]	; 0x3c
 800a058:	b975      	cbnz	r5, 800a078 <_dtoa_r+0x40>
 800a05a:	2010      	movs	r0, #16
 800a05c:	f7ff fa0c 	bl	8009478 <malloc>
 800a060:	4602      	mov	r2, r0
 800a062:	6260      	str	r0, [r4, #36]	; 0x24
 800a064:	b920      	cbnz	r0, 800a070 <_dtoa_r+0x38>
 800a066:	4bb2      	ldr	r3, [pc, #712]	; (800a330 <_dtoa_r+0x2f8>)
 800a068:	21ea      	movs	r1, #234	; 0xea
 800a06a:	48b2      	ldr	r0, [pc, #712]	; (800a334 <_dtoa_r+0x2fc>)
 800a06c:	f001 fce4 	bl	800ba38 <__assert_func>
 800a070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a074:	6005      	str	r5, [r0, #0]
 800a076:	60c5      	str	r5, [r0, #12]
 800a078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07a:	6819      	ldr	r1, [r3, #0]
 800a07c:	b151      	cbz	r1, 800a094 <_dtoa_r+0x5c>
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	604a      	str	r2, [r1, #4]
 800a082:	2301      	movs	r3, #1
 800a084:	4093      	lsls	r3, r2
 800a086:	608b      	str	r3, [r1, #8]
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 ff19 	bl	800aec0 <_Bfree>
 800a08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	1e3b      	subs	r3, r7, #0
 800a096:	bfb9      	ittee	lt
 800a098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a09c:	9303      	strlt	r3, [sp, #12]
 800a09e:	2300      	movge	r3, #0
 800a0a0:	f8c8 3000 	strge.w	r3, [r8]
 800a0a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a0a8:	4ba3      	ldr	r3, [pc, #652]	; (800a338 <_dtoa_r+0x300>)
 800a0aa:	bfbc      	itt	lt
 800a0ac:	2201      	movlt	r2, #1
 800a0ae:	f8c8 2000 	strlt.w	r2, [r8]
 800a0b2:	ea33 0309 	bics.w	r3, r3, r9
 800a0b6:	d11b      	bne.n	800a0f0 <_dtoa_r+0xb8>
 800a0b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0c4:	4333      	orrs	r3, r6
 800a0c6:	f000 857a 	beq.w	800abbe <_dtoa_r+0xb86>
 800a0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0cc:	b963      	cbnz	r3, 800a0e8 <_dtoa_r+0xb0>
 800a0ce:	4b9b      	ldr	r3, [pc, #620]	; (800a33c <_dtoa_r+0x304>)
 800a0d0:	e024      	b.n	800a11c <_dtoa_r+0xe4>
 800a0d2:	4b9b      	ldr	r3, [pc, #620]	; (800a340 <_dtoa_r+0x308>)
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	9800      	ldr	r0, [sp, #0]
 800a0de:	b015      	add	sp, #84	; 0x54
 800a0e0:	ecbd 8b02 	vpop	{d8}
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	4b94      	ldr	r3, [pc, #592]	; (800a33c <_dtoa_r+0x304>)
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	3303      	adds	r3, #3
 800a0ee:	e7f3      	b.n	800a0d8 <_dtoa_r+0xa0>
 800a0f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	ec51 0b17 	vmov	r0, r1, d7
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a100:	f7f6 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a104:	4680      	mov	r8, r0
 800a106:	b158      	cbz	r0, 800a120 <_dtoa_r+0xe8>
 800a108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a10a:	2301      	movs	r3, #1
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 8551 	beq.w	800abb8 <_dtoa_r+0xb80>
 800a116:	488b      	ldr	r0, [pc, #556]	; (800a344 <_dtoa_r+0x30c>)
 800a118:	6018      	str	r0, [r3, #0]
 800a11a:	1e43      	subs	r3, r0, #1
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	e7dd      	b.n	800a0dc <_dtoa_r+0xa4>
 800a120:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a124:	aa12      	add	r2, sp, #72	; 0x48
 800a126:	a913      	add	r1, sp, #76	; 0x4c
 800a128:	4620      	mov	r0, r4
 800a12a:	f001 f9ab 	bl	800b484 <__d2b>
 800a12e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a132:	4683      	mov	fp, r0
 800a134:	2d00      	cmp	r5, #0
 800a136:	d07c      	beq.n	800a232 <_dtoa_r+0x1fa>
 800a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a13e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a142:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a146:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a14a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a14e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a152:	4b7d      	ldr	r3, [pc, #500]	; (800a348 <_dtoa_r+0x310>)
 800a154:	2200      	movs	r2, #0
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	a36e      	add	r3, pc, #440	; (adr r3, 800a318 <_dtoa_r+0x2e0>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f7f6 fa48 	bl	80005f8 <__aeabi_dmul>
 800a168:	a36d      	add	r3, pc, #436	; (adr r3, 800a320 <_dtoa_r+0x2e8>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 f88d 	bl	800028c <__adddf3>
 800a172:	4606      	mov	r6, r0
 800a174:	4628      	mov	r0, r5
 800a176:	460f      	mov	r7, r1
 800a178:	f7f6 f9d4 	bl	8000524 <__aeabi_i2d>
 800a17c:	a36a      	add	r3, pc, #424	; (adr r3, 800a328 <_dtoa_r+0x2f0>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 fa39 	bl	80005f8 <__aeabi_dmul>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 f87d 	bl	800028c <__adddf3>
 800a192:	4606      	mov	r6, r0
 800a194:	460f      	mov	r7, r1
 800a196:	f7f6 fcdf 	bl	8000b58 <__aeabi_d2iz>
 800a19a:	2200      	movs	r2, #0
 800a19c:	4682      	mov	sl, r0
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 fc9a 	bl	8000adc <__aeabi_dcmplt>
 800a1a8:	b148      	cbz	r0, 800a1be <_dtoa_r+0x186>
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	f7f6 f9ba 	bl	8000524 <__aeabi_i2d>
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	f7f6 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b8:	b908      	cbnz	r0, 800a1be <_dtoa_r+0x186>
 800a1ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a1be:	f1ba 0f16 	cmp.w	sl, #22
 800a1c2:	d854      	bhi.n	800a26e <_dtoa_r+0x236>
 800a1c4:	4b61      	ldr	r3, [pc, #388]	; (800a34c <_dtoa_r+0x314>)
 800a1c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1d2:	f7f6 fc83 	bl	8000adc <__aeabi_dcmplt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d04b      	beq.n	800a272 <_dtoa_r+0x23a>
 800a1da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a1de:	2300      	movs	r3, #0
 800a1e0:	930e      	str	r3, [sp, #56]	; 0x38
 800a1e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1e4:	1b5d      	subs	r5, r3, r5
 800a1e6:	1e6b      	subs	r3, r5, #1
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	bf43      	ittte	mi
 800a1ec:	2300      	movmi	r3, #0
 800a1ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800a1f2:	9304      	strmi	r3, [sp, #16]
 800a1f4:	f04f 0800 	movpl.w	r8, #0
 800a1f8:	f1ba 0f00 	cmp.w	sl, #0
 800a1fc:	db3b      	blt.n	800a276 <_dtoa_r+0x23e>
 800a1fe:	9b04      	ldr	r3, [sp, #16]
 800a200:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a204:	4453      	add	r3, sl
 800a206:	9304      	str	r3, [sp, #16]
 800a208:	2300      	movs	r3, #0
 800a20a:	9306      	str	r3, [sp, #24]
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	2b09      	cmp	r3, #9
 800a210:	d869      	bhi.n	800a2e6 <_dtoa_r+0x2ae>
 800a212:	2b05      	cmp	r3, #5
 800a214:	bfc4      	itt	gt
 800a216:	3b04      	subgt	r3, #4
 800a218:	9305      	strgt	r3, [sp, #20]
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	f1a3 0302 	sub.w	r3, r3, #2
 800a220:	bfcc      	ite	gt
 800a222:	2500      	movgt	r5, #0
 800a224:	2501      	movle	r5, #1
 800a226:	2b03      	cmp	r3, #3
 800a228:	d869      	bhi.n	800a2fe <_dtoa_r+0x2c6>
 800a22a:	e8df f003 	tbb	[pc, r3]
 800a22e:	4e2c      	.short	0x4e2c
 800a230:	5a4c      	.short	0x5a4c
 800a232:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a236:	441d      	add	r5, r3
 800a238:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a23c:	2b20      	cmp	r3, #32
 800a23e:	bfc1      	itttt	gt
 800a240:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a244:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a248:	fa09 f303 	lslgt.w	r3, r9, r3
 800a24c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a250:	bfda      	itte	le
 800a252:	f1c3 0320 	rsble	r3, r3, #32
 800a256:	fa06 f003 	lslle.w	r0, r6, r3
 800a25a:	4318      	orrgt	r0, r3
 800a25c:	f7f6 f952 	bl	8000504 <__aeabi_ui2d>
 800a260:	2301      	movs	r3, #1
 800a262:	4606      	mov	r6, r0
 800a264:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a268:	3d01      	subs	r5, #1
 800a26a:	9310      	str	r3, [sp, #64]	; 0x40
 800a26c:	e771      	b.n	800a152 <_dtoa_r+0x11a>
 800a26e:	2301      	movs	r3, #1
 800a270:	e7b6      	b.n	800a1e0 <_dtoa_r+0x1a8>
 800a272:	900e      	str	r0, [sp, #56]	; 0x38
 800a274:	e7b5      	b.n	800a1e2 <_dtoa_r+0x1aa>
 800a276:	f1ca 0300 	rsb	r3, sl, #0
 800a27a:	9306      	str	r3, [sp, #24]
 800a27c:	2300      	movs	r3, #0
 800a27e:	eba8 080a 	sub.w	r8, r8, sl
 800a282:	930d      	str	r3, [sp, #52]	; 0x34
 800a284:	e7c2      	b.n	800a20c <_dtoa_r+0x1d4>
 800a286:	2300      	movs	r3, #0
 800a288:	9308      	str	r3, [sp, #32]
 800a28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dc39      	bgt.n	800a304 <_dtoa_r+0x2cc>
 800a290:	f04f 0901 	mov.w	r9, #1
 800a294:	f8cd 9004 	str.w	r9, [sp, #4]
 800a298:	464b      	mov	r3, r9
 800a29a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a29e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	6042      	str	r2, [r0, #4]
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	f102 0614 	add.w	r6, r2, #20
 800a2aa:	429e      	cmp	r6, r3
 800a2ac:	6841      	ldr	r1, [r0, #4]
 800a2ae:	d92f      	bls.n	800a310 <_dtoa_r+0x2d8>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fdc5 	bl	800ae40 <_Balloc>
 800a2b6:	9000      	str	r0, [sp, #0]
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d14b      	bne.n	800a354 <_dtoa_r+0x31c>
 800a2bc:	4b24      	ldr	r3, [pc, #144]	; (800a350 <_dtoa_r+0x318>)
 800a2be:	4602      	mov	r2, r0
 800a2c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2c4:	e6d1      	b.n	800a06a <_dtoa_r+0x32>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e7de      	b.n	800a288 <_dtoa_r+0x250>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9308      	str	r3, [sp, #32]
 800a2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d0:	eb0a 0903 	add.w	r9, sl, r3
 800a2d4:	f109 0301 	add.w	r3, r9, #1
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	bfb8      	it	lt
 800a2de:	2301      	movlt	r3, #1
 800a2e0:	e7dd      	b.n	800a29e <_dtoa_r+0x266>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e7f2      	b.n	800a2cc <_dtoa_r+0x294>
 800a2e6:	2501      	movs	r5, #1
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	9508      	str	r5, [sp, #32]
 800a2ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2f8:	2312      	movs	r3, #18
 800a2fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a2fc:	e7cf      	b.n	800a29e <_dtoa_r+0x266>
 800a2fe:	2301      	movs	r3, #1
 800a300:	9308      	str	r3, [sp, #32]
 800a302:	e7f4      	b.n	800a2ee <_dtoa_r+0x2b6>
 800a304:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a308:	f8cd 9004 	str.w	r9, [sp, #4]
 800a30c:	464b      	mov	r3, r9
 800a30e:	e7c6      	b.n	800a29e <_dtoa_r+0x266>
 800a310:	3101      	adds	r1, #1
 800a312:	6041      	str	r1, [r0, #4]
 800a314:	0052      	lsls	r2, r2, #1
 800a316:	e7c6      	b.n	800a2a6 <_dtoa_r+0x26e>
 800a318:	636f4361 	.word	0x636f4361
 800a31c:	3fd287a7 	.word	0x3fd287a7
 800a320:	8b60c8b3 	.word	0x8b60c8b3
 800a324:	3fc68a28 	.word	0x3fc68a28
 800a328:	509f79fb 	.word	0x509f79fb
 800a32c:	3fd34413 	.word	0x3fd34413
 800a330:	0800bf2d 	.word	0x0800bf2d
 800a334:	0800bf44 	.word	0x0800bf44
 800a338:	7ff00000 	.word	0x7ff00000
 800a33c:	0800bf29 	.word	0x0800bf29
 800a340:	0800bf20 	.word	0x0800bf20
 800a344:	0800befd 	.word	0x0800befd
 800a348:	3ff80000 	.word	0x3ff80000
 800a34c:	0800c0a0 	.word	0x0800c0a0
 800a350:	0800bfa3 	.word	0x0800bfa3
 800a354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a356:	9a00      	ldr	r2, [sp, #0]
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	2b0e      	cmp	r3, #14
 800a35e:	f200 80ad 	bhi.w	800a4bc <_dtoa_r+0x484>
 800a362:	2d00      	cmp	r5, #0
 800a364:	f000 80aa 	beq.w	800a4bc <_dtoa_r+0x484>
 800a368:	f1ba 0f00 	cmp.w	sl, #0
 800a36c:	dd36      	ble.n	800a3dc <_dtoa_r+0x3a4>
 800a36e:	4ac3      	ldr	r2, [pc, #780]	; (800a67c <_dtoa_r+0x644>)
 800a370:	f00a 030f 	and.w	r3, sl, #15
 800a374:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a378:	ed93 7b00 	vldr	d7, [r3]
 800a37c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a380:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a384:	eeb0 8a47 	vmov.f32	s16, s14
 800a388:	eef0 8a67 	vmov.f32	s17, s15
 800a38c:	d016      	beq.n	800a3bc <_dtoa_r+0x384>
 800a38e:	4bbc      	ldr	r3, [pc, #752]	; (800a680 <_dtoa_r+0x648>)
 800a390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a398:	f7f6 fa58 	bl	800084c <__aeabi_ddiv>
 800a39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a0:	f007 070f 	and.w	r7, r7, #15
 800a3a4:	2503      	movs	r5, #3
 800a3a6:	4eb6      	ldr	r6, [pc, #728]	; (800a680 <_dtoa_r+0x648>)
 800a3a8:	b957      	cbnz	r7, 800a3c0 <_dtoa_r+0x388>
 800a3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ae:	ec53 2b18 	vmov	r2, r3, d8
 800a3b2:	f7f6 fa4b 	bl	800084c <__aeabi_ddiv>
 800a3b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3ba:	e029      	b.n	800a410 <_dtoa_r+0x3d8>
 800a3bc:	2502      	movs	r5, #2
 800a3be:	e7f2      	b.n	800a3a6 <_dtoa_r+0x36e>
 800a3c0:	07f9      	lsls	r1, r7, #31
 800a3c2:	d508      	bpl.n	800a3d6 <_dtoa_r+0x39e>
 800a3c4:	ec51 0b18 	vmov	r0, r1, d8
 800a3c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3cc:	f7f6 f914 	bl	80005f8 <__aeabi_dmul>
 800a3d0:	ec41 0b18 	vmov	d8, r0, r1
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	107f      	asrs	r7, r7, #1
 800a3d8:	3608      	adds	r6, #8
 800a3da:	e7e5      	b.n	800a3a8 <_dtoa_r+0x370>
 800a3dc:	f000 80a6 	beq.w	800a52c <_dtoa_r+0x4f4>
 800a3e0:	f1ca 0600 	rsb	r6, sl, #0
 800a3e4:	4ba5      	ldr	r3, [pc, #660]	; (800a67c <_dtoa_r+0x644>)
 800a3e6:	4fa6      	ldr	r7, [pc, #664]	; (800a680 <_dtoa_r+0x648>)
 800a3e8:	f006 020f 	and.w	r2, r6, #15
 800a3ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a400:	1136      	asrs	r6, r6, #4
 800a402:	2300      	movs	r3, #0
 800a404:	2502      	movs	r5, #2
 800a406:	2e00      	cmp	r6, #0
 800a408:	f040 8085 	bne.w	800a516 <_dtoa_r+0x4de>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1d2      	bne.n	800a3b6 <_dtoa_r+0x37e>
 800a410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 808c 	beq.w	800a530 <_dtoa_r+0x4f8>
 800a418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a41c:	4b99      	ldr	r3, [pc, #612]	; (800a684 <_dtoa_r+0x64c>)
 800a41e:	2200      	movs	r2, #0
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 fb5a 	bl	8000adc <__aeabi_dcmplt>
 800a428:	2800      	cmp	r0, #0
 800a42a:	f000 8081 	beq.w	800a530 <_dtoa_r+0x4f8>
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d07d      	beq.n	800a530 <_dtoa_r+0x4f8>
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	dd3c      	ble.n	800a4b4 <_dtoa_r+0x47c>
 800a43a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	2200      	movs	r2, #0
 800a442:	4b91      	ldr	r3, [pc, #580]	; (800a688 <_dtoa_r+0x650>)
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	f7f6 f8d6 	bl	80005f8 <__aeabi_dmul>
 800a44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a450:	3501      	adds	r5, #1
 800a452:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a456:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7f6 f862 	bl	8000524 <__aeabi_i2d>
 800a460:	4632      	mov	r2, r6
 800a462:	463b      	mov	r3, r7
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4b88      	ldr	r3, [pc, #544]	; (800a68c <_dtoa_r+0x654>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	f7f5 ff0e 	bl	800028c <__adddf3>
 800a470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d15c      	bne.n	800a53a <_dtoa_r+0x502>
 800a480:	4b83      	ldr	r3, [pc, #524]	; (800a690 <_dtoa_r+0x658>)
 800a482:	2200      	movs	r2, #0
 800a484:	4630      	mov	r0, r6
 800a486:	4639      	mov	r1, r7
 800a488:	f7f5 fefe 	bl	8000288 <__aeabi_dsub>
 800a48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a490:	4606      	mov	r6, r0
 800a492:	460f      	mov	r7, r1
 800a494:	f7f6 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f040 8296 	bne.w	800a9ca <_dtoa_r+0x992>
 800a49e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	f7f6 fb17 	bl	8000adc <__aeabi_dcmplt>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f040 8288 	bne.w	800a9c4 <_dtoa_r+0x98c>
 800a4b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a4b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f2c0 8158 	blt.w	800a774 <_dtoa_r+0x73c>
 800a4c4:	f1ba 0f0e 	cmp.w	sl, #14
 800a4c8:	f300 8154 	bgt.w	800a774 <_dtoa_r+0x73c>
 800a4cc:	4b6b      	ldr	r3, [pc, #428]	; (800a67c <_dtoa_r+0x644>)
 800a4ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f280 80e3 	bge.w	800a6a4 <_dtoa_r+0x66c>
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f300 80df 	bgt.w	800a6a4 <_dtoa_r+0x66c>
 800a4e6:	f040 826d 	bne.w	800a9c4 <_dtoa_r+0x98c>
 800a4ea:	4b69      	ldr	r3, [pc, #420]	; (800a690 <_dtoa_r+0x658>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	f7f6 f881 	bl	80005f8 <__aeabi_dmul>
 800a4f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4fa:	f7f6 fb03 	bl	8000b04 <__aeabi_dcmpge>
 800a4fe:	9e01      	ldr	r6, [sp, #4]
 800a500:	4637      	mov	r7, r6
 800a502:	2800      	cmp	r0, #0
 800a504:	f040 8243 	bne.w	800a98e <_dtoa_r+0x956>
 800a508:	9d00      	ldr	r5, [sp, #0]
 800a50a:	2331      	movs	r3, #49	; 0x31
 800a50c:	f805 3b01 	strb.w	r3, [r5], #1
 800a510:	f10a 0a01 	add.w	sl, sl, #1
 800a514:	e23f      	b.n	800a996 <_dtoa_r+0x95e>
 800a516:	07f2      	lsls	r2, r6, #31
 800a518:	d505      	bpl.n	800a526 <_dtoa_r+0x4ee>
 800a51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	3501      	adds	r5, #1
 800a524:	2301      	movs	r3, #1
 800a526:	1076      	asrs	r6, r6, #1
 800a528:	3708      	adds	r7, #8
 800a52a:	e76c      	b.n	800a406 <_dtoa_r+0x3ce>
 800a52c:	2502      	movs	r5, #2
 800a52e:	e76f      	b.n	800a410 <_dtoa_r+0x3d8>
 800a530:	9b01      	ldr	r3, [sp, #4]
 800a532:	f8cd a01c 	str.w	sl, [sp, #28]
 800a536:	930c      	str	r3, [sp, #48]	; 0x30
 800a538:	e78d      	b.n	800a456 <_dtoa_r+0x41e>
 800a53a:	9900      	ldr	r1, [sp, #0]
 800a53c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a540:	4b4e      	ldr	r3, [pc, #312]	; (800a67c <_dtoa_r+0x644>)
 800a542:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a546:	4401      	add	r1, r0
 800a548:	9102      	str	r1, [sp, #8]
 800a54a:	9908      	ldr	r1, [sp, #32]
 800a54c:	eeb0 8a47 	vmov.f32	s16, s14
 800a550:	eef0 8a67 	vmov.f32	s17, s15
 800a554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a55c:	2900      	cmp	r1, #0
 800a55e:	d045      	beq.n	800a5ec <_dtoa_r+0x5b4>
 800a560:	494c      	ldr	r1, [pc, #304]	; (800a694 <_dtoa_r+0x65c>)
 800a562:	2000      	movs	r0, #0
 800a564:	f7f6 f972 	bl	800084c <__aeabi_ddiv>
 800a568:	ec53 2b18 	vmov	r2, r3, d8
 800a56c:	f7f5 fe8c 	bl	8000288 <__aeabi_dsub>
 800a570:	9d00      	ldr	r5, [sp, #0]
 800a572:	ec41 0b18 	vmov	d8, r0, r1
 800a576:	4639      	mov	r1, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	f7f6 faed 	bl	8000b58 <__aeabi_d2iz>
 800a57e:	900c      	str	r0, [sp, #48]	; 0x30
 800a580:	f7f5 ffd0 	bl	8000524 <__aeabi_i2d>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f5 fe7c 	bl	8000288 <__aeabi_dsub>
 800a590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a592:	3330      	adds	r3, #48	; 0x30
 800a594:	f805 3b01 	strb.w	r3, [r5], #1
 800a598:	ec53 2b18 	vmov	r2, r3, d8
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	f7f6 fa9c 	bl	8000adc <__aeabi_dcmplt>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d165      	bne.n	800a674 <_dtoa_r+0x63c>
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4935      	ldr	r1, [pc, #212]	; (800a684 <_dtoa_r+0x64c>)
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	f7f5 fe6a 	bl	8000288 <__aeabi_dsub>
 800a5b4:	ec53 2b18 	vmov	r2, r3, d8
 800a5b8:	f7f6 fa90 	bl	8000adc <__aeabi_dcmplt>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f040 80b9 	bne.w	800a734 <_dtoa_r+0x6fc>
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	429d      	cmp	r5, r3
 800a5c6:	f43f af75 	beq.w	800a4b4 <_dtoa_r+0x47c>
 800a5ca:	4b2f      	ldr	r3, [pc, #188]	; (800a688 <_dtoa_r+0x650>)
 800a5cc:	ec51 0b18 	vmov	r0, r1, d8
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f7f6 f811 	bl	80005f8 <__aeabi_dmul>
 800a5d6:	4b2c      	ldr	r3, [pc, #176]	; (800a688 <_dtoa_r+0x650>)
 800a5d8:	ec41 0b18 	vmov	d8, r0, r1
 800a5dc:	2200      	movs	r2, #0
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f6 f809 	bl	80005f8 <__aeabi_dmul>
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	e7c4      	b.n	800a576 <_dtoa_r+0x53e>
 800a5ec:	ec51 0b17 	vmov	r0, r1, d7
 800a5f0:	f7f6 f802 	bl	80005f8 <__aeabi_dmul>
 800a5f4:	9b02      	ldr	r3, [sp, #8]
 800a5f6:	9d00      	ldr	r5, [sp, #0]
 800a5f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a5fa:	ec41 0b18 	vmov	d8, r0, r1
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7f6 faa9 	bl	8000b58 <__aeabi_d2iz>
 800a606:	9011      	str	r0, [sp, #68]	; 0x44
 800a608:	f7f5 ff8c 	bl	8000524 <__aeabi_i2d>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4630      	mov	r0, r6
 800a612:	4639      	mov	r1, r7
 800a614:	f7f5 fe38 	bl	8000288 <__aeabi_dsub>
 800a618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a61a:	3330      	adds	r3, #48	; 0x30
 800a61c:	f805 3b01 	strb.w	r3, [r5], #1
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	429d      	cmp	r5, r3
 800a624:	4606      	mov	r6, r0
 800a626:	460f      	mov	r7, r1
 800a628:	f04f 0200 	mov.w	r2, #0
 800a62c:	d134      	bne.n	800a698 <_dtoa_r+0x660>
 800a62e:	4b19      	ldr	r3, [pc, #100]	; (800a694 <_dtoa_r+0x65c>)
 800a630:	ec51 0b18 	vmov	r0, r1, d8
 800a634:	f7f5 fe2a 	bl	800028c <__adddf3>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4630      	mov	r0, r6
 800a63e:	4639      	mov	r1, r7
 800a640:	f7f6 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 800a644:	2800      	cmp	r0, #0
 800a646:	d175      	bne.n	800a734 <_dtoa_r+0x6fc>
 800a648:	ec53 2b18 	vmov	r2, r3, d8
 800a64c:	4911      	ldr	r1, [pc, #68]	; (800a694 <_dtoa_r+0x65c>)
 800a64e:	2000      	movs	r0, #0
 800a650:	f7f5 fe1a 	bl	8000288 <__aeabi_dsub>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f6 fa3e 	bl	8000adc <__aeabi_dcmplt>
 800a660:	2800      	cmp	r0, #0
 800a662:	f43f af27 	beq.w	800a4b4 <_dtoa_r+0x47c>
 800a666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a668:	1e6b      	subs	r3, r5, #1
 800a66a:	930c      	str	r3, [sp, #48]	; 0x30
 800a66c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a670:	2b30      	cmp	r3, #48	; 0x30
 800a672:	d0f8      	beq.n	800a666 <_dtoa_r+0x62e>
 800a674:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a678:	e04a      	b.n	800a710 <_dtoa_r+0x6d8>
 800a67a:	bf00      	nop
 800a67c:	0800c0a0 	.word	0x0800c0a0
 800a680:	0800c078 	.word	0x0800c078
 800a684:	3ff00000 	.word	0x3ff00000
 800a688:	40240000 	.word	0x40240000
 800a68c:	401c0000 	.word	0x401c0000
 800a690:	40140000 	.word	0x40140000
 800a694:	3fe00000 	.word	0x3fe00000
 800a698:	4baf      	ldr	r3, [pc, #700]	; (800a958 <_dtoa_r+0x920>)
 800a69a:	f7f5 ffad 	bl	80005f8 <__aeabi_dmul>
 800a69e:	4606      	mov	r6, r0
 800a6a0:	460f      	mov	r7, r1
 800a6a2:	e7ac      	b.n	800a5fe <_dtoa_r+0x5c6>
 800a6a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6a8:	9d00      	ldr	r5, [sp, #0]
 800a6aa:	4642      	mov	r2, r8
 800a6ac:	464b      	mov	r3, r9
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f6 f8cb 	bl	800084c <__aeabi_ddiv>
 800a6b6:	f7f6 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800a6ba:	9002      	str	r0, [sp, #8]
 800a6bc:	f7f5 ff32 	bl	8000524 <__aeabi_i2d>
 800a6c0:	4642      	mov	r2, r8
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	f7f5 ff98 	bl	80005f8 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f5 fdda 	bl	8000288 <__aeabi_dsub>
 800a6d4:	9e02      	ldr	r6, [sp, #8]
 800a6d6:	9f01      	ldr	r7, [sp, #4]
 800a6d8:	3630      	adds	r6, #48	; 0x30
 800a6da:	f805 6b01 	strb.w	r6, [r5], #1
 800a6de:	9e00      	ldr	r6, [sp, #0]
 800a6e0:	1bae      	subs	r6, r5, r6
 800a6e2:	42b7      	cmp	r7, r6
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	d137      	bne.n	800a75a <_dtoa_r+0x722>
 800a6ea:	f7f5 fdcf 	bl	800028c <__adddf3>
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	f7f6 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 800a6fa:	b9c8      	cbnz	r0, 800a730 <_dtoa_r+0x6f8>
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	464b      	mov	r3, r9
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f6 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a708:	b110      	cbz	r0, 800a710 <_dtoa_r+0x6d8>
 800a70a:	9b02      	ldr	r3, [sp, #8]
 800a70c:	07d9      	lsls	r1, r3, #31
 800a70e:	d40f      	bmi.n	800a730 <_dtoa_r+0x6f8>
 800a710:	4620      	mov	r0, r4
 800a712:	4659      	mov	r1, fp
 800a714:	f000 fbd4 	bl	800aec0 <_Bfree>
 800a718:	2300      	movs	r3, #0
 800a71a:	702b      	strb	r3, [r5, #0]
 800a71c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a71e:	f10a 0001 	add.w	r0, sl, #1
 800a722:	6018      	str	r0, [r3, #0]
 800a724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a726:	2b00      	cmp	r3, #0
 800a728:	f43f acd8 	beq.w	800a0dc <_dtoa_r+0xa4>
 800a72c:	601d      	str	r5, [r3, #0]
 800a72e:	e4d5      	b.n	800a0dc <_dtoa_r+0xa4>
 800a730:	f8cd a01c 	str.w	sl, [sp, #28]
 800a734:	462b      	mov	r3, r5
 800a736:	461d      	mov	r5, r3
 800a738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a73c:	2a39      	cmp	r2, #57	; 0x39
 800a73e:	d108      	bne.n	800a752 <_dtoa_r+0x71a>
 800a740:	9a00      	ldr	r2, [sp, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d1f7      	bne.n	800a736 <_dtoa_r+0x6fe>
 800a746:	9a07      	ldr	r2, [sp, #28]
 800a748:	9900      	ldr	r1, [sp, #0]
 800a74a:	3201      	adds	r2, #1
 800a74c:	9207      	str	r2, [sp, #28]
 800a74e:	2230      	movs	r2, #48	; 0x30
 800a750:	700a      	strb	r2, [r1, #0]
 800a752:	781a      	ldrb	r2, [r3, #0]
 800a754:	3201      	adds	r2, #1
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	e78c      	b.n	800a674 <_dtoa_r+0x63c>
 800a75a:	4b7f      	ldr	r3, [pc, #508]	; (800a958 <_dtoa_r+0x920>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	f7f5 ff4b 	bl	80005f8 <__aeabi_dmul>
 800a762:	2200      	movs	r2, #0
 800a764:	2300      	movs	r3, #0
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	f7f6 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a76e:	2800      	cmp	r0, #0
 800a770:	d09b      	beq.n	800a6aa <_dtoa_r+0x672>
 800a772:	e7cd      	b.n	800a710 <_dtoa_r+0x6d8>
 800a774:	9a08      	ldr	r2, [sp, #32]
 800a776:	2a00      	cmp	r2, #0
 800a778:	f000 80c4 	beq.w	800a904 <_dtoa_r+0x8cc>
 800a77c:	9a05      	ldr	r2, [sp, #20]
 800a77e:	2a01      	cmp	r2, #1
 800a780:	f300 80a8 	bgt.w	800a8d4 <_dtoa_r+0x89c>
 800a784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a786:	2a00      	cmp	r2, #0
 800a788:	f000 80a0 	beq.w	800a8cc <_dtoa_r+0x894>
 800a78c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a790:	9e06      	ldr	r6, [sp, #24]
 800a792:	4645      	mov	r5, r8
 800a794:	9a04      	ldr	r2, [sp, #16]
 800a796:	2101      	movs	r1, #1
 800a798:	441a      	add	r2, r3
 800a79a:	4620      	mov	r0, r4
 800a79c:	4498      	add	r8, r3
 800a79e:	9204      	str	r2, [sp, #16]
 800a7a0:	f000 fc4a 	bl	800b038 <__i2b>
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	dd0b      	ble.n	800a7c2 <_dtoa_r+0x78a>
 800a7aa:	9b04      	ldr	r3, [sp, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dd08      	ble.n	800a7c2 <_dtoa_r+0x78a>
 800a7b0:	42ab      	cmp	r3, r5
 800a7b2:	9a04      	ldr	r2, [sp, #16]
 800a7b4:	bfa8      	it	ge
 800a7b6:	462b      	movge	r3, r5
 800a7b8:	eba8 0803 	sub.w	r8, r8, r3
 800a7bc:	1aed      	subs	r5, r5, r3
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	9b06      	ldr	r3, [sp, #24]
 800a7c4:	b1fb      	cbz	r3, 800a806 <_dtoa_r+0x7ce>
 800a7c6:	9b08      	ldr	r3, [sp, #32]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 809f 	beq.w	800a90c <_dtoa_r+0x8d4>
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	dd11      	ble.n	800a7f6 <_dtoa_r+0x7be>
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	4632      	mov	r2, r6
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 fcea 	bl	800b1b0 <__pow5mult>
 800a7dc:	465a      	mov	r2, fp
 800a7de:	4601      	mov	r1, r0
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fc3e 	bl	800b064 <__multiply>
 800a7e8:	4659      	mov	r1, fp
 800a7ea:	9007      	str	r0, [sp, #28]
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fb67 	bl	800aec0 <_Bfree>
 800a7f2:	9b07      	ldr	r3, [sp, #28]
 800a7f4:	469b      	mov	fp, r3
 800a7f6:	9b06      	ldr	r3, [sp, #24]
 800a7f8:	1b9a      	subs	r2, r3, r6
 800a7fa:	d004      	beq.n	800a806 <_dtoa_r+0x7ce>
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 fcd6 	bl	800b1b0 <__pow5mult>
 800a804:	4683      	mov	fp, r0
 800a806:	2101      	movs	r1, #1
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 fc15 	bl	800b038 <__i2b>
 800a80e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a810:	2b00      	cmp	r3, #0
 800a812:	4606      	mov	r6, r0
 800a814:	dd7c      	ble.n	800a910 <_dtoa_r+0x8d8>
 800a816:	461a      	mov	r2, r3
 800a818:	4601      	mov	r1, r0
 800a81a:	4620      	mov	r0, r4
 800a81c:	f000 fcc8 	bl	800b1b0 <__pow5mult>
 800a820:	9b05      	ldr	r3, [sp, #20]
 800a822:	2b01      	cmp	r3, #1
 800a824:	4606      	mov	r6, r0
 800a826:	dd76      	ble.n	800a916 <_dtoa_r+0x8de>
 800a828:	2300      	movs	r3, #0
 800a82a:	9306      	str	r3, [sp, #24]
 800a82c:	6933      	ldr	r3, [r6, #16]
 800a82e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a832:	6918      	ldr	r0, [r3, #16]
 800a834:	f000 fbb0 	bl	800af98 <__hi0bits>
 800a838:	f1c0 0020 	rsb	r0, r0, #32
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	4418      	add	r0, r3
 800a840:	f010 001f 	ands.w	r0, r0, #31
 800a844:	f000 8086 	beq.w	800a954 <_dtoa_r+0x91c>
 800a848:	f1c0 0320 	rsb	r3, r0, #32
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	dd7f      	ble.n	800a950 <_dtoa_r+0x918>
 800a850:	f1c0 001c 	rsb	r0, r0, #28
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	4403      	add	r3, r0
 800a858:	4480      	add	r8, r0
 800a85a:	4405      	add	r5, r0
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	f1b8 0f00 	cmp.w	r8, #0
 800a862:	dd05      	ble.n	800a870 <_dtoa_r+0x838>
 800a864:	4659      	mov	r1, fp
 800a866:	4642      	mov	r2, r8
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fcfb 	bl	800b264 <__lshift>
 800a86e:	4683      	mov	fp, r0
 800a870:	9b04      	ldr	r3, [sp, #16]
 800a872:	2b00      	cmp	r3, #0
 800a874:	dd05      	ble.n	800a882 <_dtoa_r+0x84a>
 800a876:	4631      	mov	r1, r6
 800a878:	461a      	mov	r2, r3
 800a87a:	4620      	mov	r0, r4
 800a87c:	f000 fcf2 	bl	800b264 <__lshift>
 800a880:	4606      	mov	r6, r0
 800a882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	d069      	beq.n	800a95c <_dtoa_r+0x924>
 800a888:	4631      	mov	r1, r6
 800a88a:	4658      	mov	r0, fp
 800a88c:	f000 fd56 	bl	800b33c <__mcmp>
 800a890:	2800      	cmp	r0, #0
 800a892:	da63      	bge.n	800a95c <_dtoa_r+0x924>
 800a894:	2300      	movs	r3, #0
 800a896:	4659      	mov	r1, fp
 800a898:	220a      	movs	r2, #10
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fb32 	bl	800af04 <__multadd>
 800a8a0:	9b08      	ldr	r3, [sp, #32]
 800a8a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a8a6:	4683      	mov	fp, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 818f 	beq.w	800abcc <_dtoa_r+0xb94>
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	220a      	movs	r2, #10
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fb25 	bl	800af04 <__multadd>
 800a8ba:	f1b9 0f00 	cmp.w	r9, #0
 800a8be:	4607      	mov	r7, r0
 800a8c0:	f300 808e 	bgt.w	800a9e0 <_dtoa_r+0x9a8>
 800a8c4:	9b05      	ldr	r3, [sp, #20]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	dc50      	bgt.n	800a96c <_dtoa_r+0x934>
 800a8ca:	e089      	b.n	800a9e0 <_dtoa_r+0x9a8>
 800a8cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8d2:	e75d      	b.n	800a790 <_dtoa_r+0x758>
 800a8d4:	9b01      	ldr	r3, [sp, #4]
 800a8d6:	1e5e      	subs	r6, r3, #1
 800a8d8:	9b06      	ldr	r3, [sp, #24]
 800a8da:	42b3      	cmp	r3, r6
 800a8dc:	bfbf      	itttt	lt
 800a8de:	9b06      	ldrlt	r3, [sp, #24]
 800a8e0:	9606      	strlt	r6, [sp, #24]
 800a8e2:	1af2      	sublt	r2, r6, r3
 800a8e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a8e6:	bfb6      	itet	lt
 800a8e8:	189b      	addlt	r3, r3, r2
 800a8ea:	1b9e      	subge	r6, r3, r6
 800a8ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	bfb8      	it	lt
 800a8f2:	2600      	movlt	r6, #0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	bfb5      	itete	lt
 800a8f8:	eba8 0503 	sublt.w	r5, r8, r3
 800a8fc:	9b01      	ldrge	r3, [sp, #4]
 800a8fe:	2300      	movlt	r3, #0
 800a900:	4645      	movge	r5, r8
 800a902:	e747      	b.n	800a794 <_dtoa_r+0x75c>
 800a904:	9e06      	ldr	r6, [sp, #24]
 800a906:	9f08      	ldr	r7, [sp, #32]
 800a908:	4645      	mov	r5, r8
 800a90a:	e74c      	b.n	800a7a6 <_dtoa_r+0x76e>
 800a90c:	9a06      	ldr	r2, [sp, #24]
 800a90e:	e775      	b.n	800a7fc <_dtoa_r+0x7c4>
 800a910:	9b05      	ldr	r3, [sp, #20]
 800a912:	2b01      	cmp	r3, #1
 800a914:	dc18      	bgt.n	800a948 <_dtoa_r+0x910>
 800a916:	9b02      	ldr	r3, [sp, #8]
 800a918:	b9b3      	cbnz	r3, 800a948 <_dtoa_r+0x910>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a920:	b9a3      	cbnz	r3, 800a94c <_dtoa_r+0x914>
 800a922:	9b03      	ldr	r3, [sp, #12]
 800a924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a928:	0d1b      	lsrs	r3, r3, #20
 800a92a:	051b      	lsls	r3, r3, #20
 800a92c:	b12b      	cbz	r3, 800a93a <_dtoa_r+0x902>
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	3301      	adds	r3, #1
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	f108 0801 	add.w	r8, r8, #1
 800a938:	2301      	movs	r3, #1
 800a93a:	9306      	str	r3, [sp, #24]
 800a93c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f47f af74 	bne.w	800a82c <_dtoa_r+0x7f4>
 800a944:	2001      	movs	r0, #1
 800a946:	e779      	b.n	800a83c <_dtoa_r+0x804>
 800a948:	2300      	movs	r3, #0
 800a94a:	e7f6      	b.n	800a93a <_dtoa_r+0x902>
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	e7f4      	b.n	800a93a <_dtoa_r+0x902>
 800a950:	d085      	beq.n	800a85e <_dtoa_r+0x826>
 800a952:	4618      	mov	r0, r3
 800a954:	301c      	adds	r0, #28
 800a956:	e77d      	b.n	800a854 <_dtoa_r+0x81c>
 800a958:	40240000 	.word	0x40240000
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dc38      	bgt.n	800a9d4 <_dtoa_r+0x99c>
 800a962:	9b05      	ldr	r3, [sp, #20]
 800a964:	2b02      	cmp	r3, #2
 800a966:	dd35      	ble.n	800a9d4 <_dtoa_r+0x99c>
 800a968:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a96c:	f1b9 0f00 	cmp.w	r9, #0
 800a970:	d10d      	bne.n	800a98e <_dtoa_r+0x956>
 800a972:	4631      	mov	r1, r6
 800a974:	464b      	mov	r3, r9
 800a976:	2205      	movs	r2, #5
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fac3 	bl	800af04 <__multadd>
 800a97e:	4601      	mov	r1, r0
 800a980:	4606      	mov	r6, r0
 800a982:	4658      	mov	r0, fp
 800a984:	f000 fcda 	bl	800b33c <__mcmp>
 800a988:	2800      	cmp	r0, #0
 800a98a:	f73f adbd 	bgt.w	800a508 <_dtoa_r+0x4d0>
 800a98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a990:	9d00      	ldr	r5, [sp, #0]
 800a992:	ea6f 0a03 	mvn.w	sl, r3
 800a996:	f04f 0800 	mov.w	r8, #0
 800a99a:	4631      	mov	r1, r6
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 fa8f 	bl	800aec0 <_Bfree>
 800a9a2:	2f00      	cmp	r7, #0
 800a9a4:	f43f aeb4 	beq.w	800a710 <_dtoa_r+0x6d8>
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	d005      	beq.n	800a9ba <_dtoa_r+0x982>
 800a9ae:	45b8      	cmp	r8, r7
 800a9b0:	d003      	beq.n	800a9ba <_dtoa_r+0x982>
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 fa83 	bl	800aec0 <_Bfree>
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 fa7f 	bl	800aec0 <_Bfree>
 800a9c2:	e6a5      	b.n	800a710 <_dtoa_r+0x6d8>
 800a9c4:	2600      	movs	r6, #0
 800a9c6:	4637      	mov	r7, r6
 800a9c8:	e7e1      	b.n	800a98e <_dtoa_r+0x956>
 800a9ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a9cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a9d0:	4637      	mov	r7, r6
 800a9d2:	e599      	b.n	800a508 <_dtoa_r+0x4d0>
 800a9d4:	9b08      	ldr	r3, [sp, #32]
 800a9d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80fd 	beq.w	800abda <_dtoa_r+0xba2>
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	dd05      	ble.n	800a9f0 <_dtoa_r+0x9b8>
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	462a      	mov	r2, r5
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fc3b 	bl	800b264 <__lshift>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d05c      	beq.n	800aab0 <_dtoa_r+0xa78>
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 fa21 	bl	800ae40 <_Balloc>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b928      	cbnz	r0, 800aa0e <_dtoa_r+0x9d6>
 800aa02:	4b80      	ldr	r3, [pc, #512]	; (800ac04 <_dtoa_r+0xbcc>)
 800aa04:	4602      	mov	r2, r0
 800aa06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aa0a:	f7ff bb2e 	b.w	800a06a <_dtoa_r+0x32>
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	3202      	adds	r2, #2
 800aa12:	0092      	lsls	r2, r2, #2
 800aa14:	f107 010c 	add.w	r1, r7, #12
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f000 f9f6 	bl	800ae0a <memcpy>
 800aa1e:	2201      	movs	r2, #1
 800aa20:	4629      	mov	r1, r5
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 fc1e 	bl	800b264 <__lshift>
 800aa28:	9b00      	ldr	r3, [sp, #0]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	9b00      	ldr	r3, [sp, #0]
 800aa30:	444b      	add	r3, r9
 800aa32:	9307      	str	r3, [sp, #28]
 800aa34:	9b02      	ldr	r3, [sp, #8]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	46b8      	mov	r8, r7
 800aa3c:	9306      	str	r3, [sp, #24]
 800aa3e:	4607      	mov	r7, r0
 800aa40:	9b01      	ldr	r3, [sp, #4]
 800aa42:	4631      	mov	r1, r6
 800aa44:	3b01      	subs	r3, #1
 800aa46:	4658      	mov	r0, fp
 800aa48:	9302      	str	r3, [sp, #8]
 800aa4a:	f7ff fa69 	bl	8009f20 <quorem>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	3330      	adds	r3, #48	; 0x30
 800aa52:	9004      	str	r0, [sp, #16]
 800aa54:	4641      	mov	r1, r8
 800aa56:	4658      	mov	r0, fp
 800aa58:	9308      	str	r3, [sp, #32]
 800aa5a:	f000 fc6f 	bl	800b33c <__mcmp>
 800aa5e:	463a      	mov	r2, r7
 800aa60:	4681      	mov	r9, r0
 800aa62:	4631      	mov	r1, r6
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fc85 	bl	800b374 <__mdiff>
 800aa6a:	68c2      	ldr	r2, [r0, #12]
 800aa6c:	9b08      	ldr	r3, [sp, #32]
 800aa6e:	4605      	mov	r5, r0
 800aa70:	bb02      	cbnz	r2, 800aab4 <_dtoa_r+0xa7c>
 800aa72:	4601      	mov	r1, r0
 800aa74:	4658      	mov	r0, fp
 800aa76:	f000 fc61 	bl	800b33c <__mcmp>
 800aa7a:	9b08      	ldr	r3, [sp, #32]
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4620      	mov	r0, r4
 800aa82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aa86:	f000 fa1b 	bl	800aec0 <_Bfree>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa8e:	9d01      	ldr	r5, [sp, #4]
 800aa90:	ea43 0102 	orr.w	r1, r3, r2
 800aa94:	9b06      	ldr	r3, [sp, #24]
 800aa96:	430b      	orrs	r3, r1
 800aa98:	9b08      	ldr	r3, [sp, #32]
 800aa9a:	d10d      	bne.n	800aab8 <_dtoa_r+0xa80>
 800aa9c:	2b39      	cmp	r3, #57	; 0x39
 800aa9e:	d029      	beq.n	800aaf4 <_dtoa_r+0xabc>
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	dd01      	ble.n	800aaaa <_dtoa_r+0xa72>
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	3331      	adds	r3, #49	; 0x31
 800aaaa:	9a02      	ldr	r2, [sp, #8]
 800aaac:	7013      	strb	r3, [r2, #0]
 800aaae:	e774      	b.n	800a99a <_dtoa_r+0x962>
 800aab0:	4638      	mov	r0, r7
 800aab2:	e7b9      	b.n	800aa28 <_dtoa_r+0x9f0>
 800aab4:	2201      	movs	r2, #1
 800aab6:	e7e2      	b.n	800aa7e <_dtoa_r+0xa46>
 800aab8:	f1b9 0f00 	cmp.w	r9, #0
 800aabc:	db06      	blt.n	800aacc <_dtoa_r+0xa94>
 800aabe:	9905      	ldr	r1, [sp, #20]
 800aac0:	ea41 0909 	orr.w	r9, r1, r9
 800aac4:	9906      	ldr	r1, [sp, #24]
 800aac6:	ea59 0101 	orrs.w	r1, r9, r1
 800aaca:	d120      	bne.n	800ab0e <_dtoa_r+0xad6>
 800aacc:	2a00      	cmp	r2, #0
 800aace:	ddec      	ble.n	800aaaa <_dtoa_r+0xa72>
 800aad0:	4659      	mov	r1, fp
 800aad2:	2201      	movs	r2, #1
 800aad4:	4620      	mov	r0, r4
 800aad6:	9301      	str	r3, [sp, #4]
 800aad8:	f000 fbc4 	bl	800b264 <__lshift>
 800aadc:	4631      	mov	r1, r6
 800aade:	4683      	mov	fp, r0
 800aae0:	f000 fc2c 	bl	800b33c <__mcmp>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	9b01      	ldr	r3, [sp, #4]
 800aae8:	dc02      	bgt.n	800aaf0 <_dtoa_r+0xab8>
 800aaea:	d1de      	bne.n	800aaaa <_dtoa_r+0xa72>
 800aaec:	07da      	lsls	r2, r3, #31
 800aaee:	d5dc      	bpl.n	800aaaa <_dtoa_r+0xa72>
 800aaf0:	2b39      	cmp	r3, #57	; 0x39
 800aaf2:	d1d8      	bne.n	800aaa6 <_dtoa_r+0xa6e>
 800aaf4:	9a02      	ldr	r2, [sp, #8]
 800aaf6:	2339      	movs	r3, #57	; 0x39
 800aaf8:	7013      	strb	r3, [r2, #0]
 800aafa:	462b      	mov	r3, r5
 800aafc:	461d      	mov	r5, r3
 800aafe:	3b01      	subs	r3, #1
 800ab00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab04:	2a39      	cmp	r2, #57	; 0x39
 800ab06:	d050      	beq.n	800abaa <_dtoa_r+0xb72>
 800ab08:	3201      	adds	r2, #1
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e745      	b.n	800a99a <_dtoa_r+0x962>
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	dd03      	ble.n	800ab1a <_dtoa_r+0xae2>
 800ab12:	2b39      	cmp	r3, #57	; 0x39
 800ab14:	d0ee      	beq.n	800aaf4 <_dtoa_r+0xabc>
 800ab16:	3301      	adds	r3, #1
 800ab18:	e7c7      	b.n	800aaaa <_dtoa_r+0xa72>
 800ab1a:	9a01      	ldr	r2, [sp, #4]
 800ab1c:	9907      	ldr	r1, [sp, #28]
 800ab1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab22:	428a      	cmp	r2, r1
 800ab24:	d02a      	beq.n	800ab7c <_dtoa_r+0xb44>
 800ab26:	4659      	mov	r1, fp
 800ab28:	2300      	movs	r3, #0
 800ab2a:	220a      	movs	r2, #10
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f000 f9e9 	bl	800af04 <__multadd>
 800ab32:	45b8      	cmp	r8, r7
 800ab34:	4683      	mov	fp, r0
 800ab36:	f04f 0300 	mov.w	r3, #0
 800ab3a:	f04f 020a 	mov.w	r2, #10
 800ab3e:	4641      	mov	r1, r8
 800ab40:	4620      	mov	r0, r4
 800ab42:	d107      	bne.n	800ab54 <_dtoa_r+0xb1c>
 800ab44:	f000 f9de 	bl	800af04 <__multadd>
 800ab48:	4680      	mov	r8, r0
 800ab4a:	4607      	mov	r7, r0
 800ab4c:	9b01      	ldr	r3, [sp, #4]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	e775      	b.n	800aa40 <_dtoa_r+0xa08>
 800ab54:	f000 f9d6 	bl	800af04 <__multadd>
 800ab58:	4639      	mov	r1, r7
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	220a      	movs	r2, #10
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 f9cf 	bl	800af04 <__multadd>
 800ab66:	4607      	mov	r7, r0
 800ab68:	e7f0      	b.n	800ab4c <_dtoa_r+0xb14>
 800ab6a:	f1b9 0f00 	cmp.w	r9, #0
 800ab6e:	9a00      	ldr	r2, [sp, #0]
 800ab70:	bfcc      	ite	gt
 800ab72:	464d      	movgt	r5, r9
 800ab74:	2501      	movle	r5, #1
 800ab76:	4415      	add	r5, r2
 800ab78:	f04f 0800 	mov.w	r8, #0
 800ab7c:	4659      	mov	r1, fp
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4620      	mov	r0, r4
 800ab82:	9301      	str	r3, [sp, #4]
 800ab84:	f000 fb6e 	bl	800b264 <__lshift>
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4683      	mov	fp, r0
 800ab8c:	f000 fbd6 	bl	800b33c <__mcmp>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	dcb2      	bgt.n	800aafa <_dtoa_r+0xac2>
 800ab94:	d102      	bne.n	800ab9c <_dtoa_r+0xb64>
 800ab96:	9b01      	ldr	r3, [sp, #4]
 800ab98:	07db      	lsls	r3, r3, #31
 800ab9a:	d4ae      	bmi.n	800aafa <_dtoa_r+0xac2>
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	461d      	mov	r5, r3
 800aba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aba4:	2a30      	cmp	r2, #48	; 0x30
 800aba6:	d0fa      	beq.n	800ab9e <_dtoa_r+0xb66>
 800aba8:	e6f7      	b.n	800a99a <_dtoa_r+0x962>
 800abaa:	9a00      	ldr	r2, [sp, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d1a5      	bne.n	800aafc <_dtoa_r+0xac4>
 800abb0:	f10a 0a01 	add.w	sl, sl, #1
 800abb4:	2331      	movs	r3, #49	; 0x31
 800abb6:	e779      	b.n	800aaac <_dtoa_r+0xa74>
 800abb8:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <_dtoa_r+0xbd0>)
 800abba:	f7ff baaf 	b.w	800a11c <_dtoa_r+0xe4>
 800abbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f47f aa86 	bne.w	800a0d2 <_dtoa_r+0x9a>
 800abc6:	4b11      	ldr	r3, [pc, #68]	; (800ac0c <_dtoa_r+0xbd4>)
 800abc8:	f7ff baa8 	b.w	800a11c <_dtoa_r+0xe4>
 800abcc:	f1b9 0f00 	cmp.w	r9, #0
 800abd0:	dc03      	bgt.n	800abda <_dtoa_r+0xba2>
 800abd2:	9b05      	ldr	r3, [sp, #20]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	f73f aec9 	bgt.w	800a96c <_dtoa_r+0x934>
 800abda:	9d00      	ldr	r5, [sp, #0]
 800abdc:	4631      	mov	r1, r6
 800abde:	4658      	mov	r0, fp
 800abe0:	f7ff f99e 	bl	8009f20 <quorem>
 800abe4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abe8:	f805 3b01 	strb.w	r3, [r5], #1
 800abec:	9a00      	ldr	r2, [sp, #0]
 800abee:	1aaa      	subs	r2, r5, r2
 800abf0:	4591      	cmp	r9, r2
 800abf2:	ddba      	ble.n	800ab6a <_dtoa_r+0xb32>
 800abf4:	4659      	mov	r1, fp
 800abf6:	2300      	movs	r3, #0
 800abf8:	220a      	movs	r2, #10
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 f982 	bl	800af04 <__multadd>
 800ac00:	4683      	mov	fp, r0
 800ac02:	e7eb      	b.n	800abdc <_dtoa_r+0xba4>
 800ac04:	0800bfa3 	.word	0x0800bfa3
 800ac08:	0800befc 	.word	0x0800befc
 800ac0c:	0800bf20 	.word	0x0800bf20

0800ac10 <std>:
 800ac10:	2300      	movs	r3, #0
 800ac12:	b510      	push	{r4, lr}
 800ac14:	4604      	mov	r4, r0
 800ac16:	e9c0 3300 	strd	r3, r3, [r0]
 800ac1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1e:	6083      	str	r3, [r0, #8]
 800ac20:	8181      	strh	r1, [r0, #12]
 800ac22:	6643      	str	r3, [r0, #100]	; 0x64
 800ac24:	81c2      	strh	r2, [r0, #14]
 800ac26:	6183      	str	r3, [r0, #24]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	305c      	adds	r0, #92	; 0x5c
 800ac2e:	f7fe fc33 	bl	8009498 <memset>
 800ac32:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <std+0x38>)
 800ac34:	6263      	str	r3, [r4, #36]	; 0x24
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <std+0x3c>)
 800ac38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x40>)
 800ac3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <std+0x44>)
 800ac40:	6224      	str	r4, [r4, #32]
 800ac42:	6323      	str	r3, [r4, #48]	; 0x30
 800ac44:	bd10      	pop	{r4, pc}
 800ac46:	bf00      	nop
 800ac48:	0800b80d 	.word	0x0800b80d
 800ac4c:	0800b82f 	.word	0x0800b82f
 800ac50:	0800b867 	.word	0x0800b867
 800ac54:	0800b88b 	.word	0x0800b88b

0800ac58 <_cleanup_r>:
 800ac58:	4901      	ldr	r1, [pc, #4]	; (800ac60 <_cleanup_r+0x8>)
 800ac5a:	f000 b8af 	b.w	800adbc <_fwalk_reent>
 800ac5e:	bf00      	nop
 800ac60:	0800bba1 	.word	0x0800bba1

0800ac64 <__sfmoreglue>:
 800ac64:	b570      	push	{r4, r5, r6, lr}
 800ac66:	1e4a      	subs	r2, r1, #1
 800ac68:	2568      	movs	r5, #104	; 0x68
 800ac6a:	4355      	muls	r5, r2
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac72:	f7fe fc69 	bl	8009548 <_malloc_r>
 800ac76:	4604      	mov	r4, r0
 800ac78:	b140      	cbz	r0, 800ac8c <__sfmoreglue+0x28>
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ac80:	300c      	adds	r0, #12
 800ac82:	60a0      	str	r0, [r4, #8]
 800ac84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac88:	f7fe fc06 	bl	8009498 <memset>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}

0800ac90 <__sfp_lock_acquire>:
 800ac90:	4801      	ldr	r0, [pc, #4]	; (800ac98 <__sfp_lock_acquire+0x8>)
 800ac92:	f000 b8b8 	b.w	800ae06 <__retarget_lock_acquire_recursive>
 800ac96:	bf00      	nop
 800ac98:	20000b24 	.word	0x20000b24

0800ac9c <__sfp_lock_release>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__sfp_lock_release+0x8>)
 800ac9e:	f000 b8b3 	b.w	800ae08 <__retarget_lock_release_recursive>
 800aca2:	bf00      	nop
 800aca4:	20000b24 	.word	0x20000b24

0800aca8 <__sinit_lock_acquire>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__sinit_lock_acquire+0x8>)
 800acaa:	f000 b8ac 	b.w	800ae06 <__retarget_lock_acquire_recursive>
 800acae:	bf00      	nop
 800acb0:	20000b1f 	.word	0x20000b1f

0800acb4 <__sinit_lock_release>:
 800acb4:	4801      	ldr	r0, [pc, #4]	; (800acbc <__sinit_lock_release+0x8>)
 800acb6:	f000 b8a7 	b.w	800ae08 <__retarget_lock_release_recursive>
 800acba:	bf00      	nop
 800acbc:	20000b1f 	.word	0x20000b1f

0800acc0 <__sinit>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4604      	mov	r4, r0
 800acc4:	f7ff fff0 	bl	800aca8 <__sinit_lock_acquire>
 800acc8:	69a3      	ldr	r3, [r4, #24]
 800acca:	b11b      	cbz	r3, 800acd4 <__sinit+0x14>
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f7ff bff0 	b.w	800acb4 <__sinit_lock_release>
 800acd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acd8:	6523      	str	r3, [r4, #80]	; 0x50
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <__sinit+0x68>)
 800acdc:	4a13      	ldr	r2, [pc, #76]	; (800ad2c <__sinit+0x6c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ace2:	42a3      	cmp	r3, r4
 800ace4:	bf04      	itt	eq
 800ace6:	2301      	moveq	r3, #1
 800ace8:	61a3      	streq	r3, [r4, #24]
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f820 	bl	800ad30 <__sfp>
 800acf0:	6060      	str	r0, [r4, #4]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f81c 	bl	800ad30 <__sfp>
 800acf8:	60a0      	str	r0, [r4, #8]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f818 	bl	800ad30 <__sfp>
 800ad00:	2200      	movs	r2, #0
 800ad02:	60e0      	str	r0, [r4, #12]
 800ad04:	2104      	movs	r1, #4
 800ad06:	6860      	ldr	r0, [r4, #4]
 800ad08:	f7ff ff82 	bl	800ac10 <std>
 800ad0c:	68a0      	ldr	r0, [r4, #8]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	2109      	movs	r1, #9
 800ad12:	f7ff ff7d 	bl	800ac10 <std>
 800ad16:	68e0      	ldr	r0, [r4, #12]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	2112      	movs	r1, #18
 800ad1c:	f7ff ff78 	bl	800ac10 <std>
 800ad20:	2301      	movs	r3, #1
 800ad22:	61a3      	str	r3, [r4, #24]
 800ad24:	e7d2      	b.n	800accc <__sinit+0xc>
 800ad26:	bf00      	nop
 800ad28:	0800bee8 	.word	0x0800bee8
 800ad2c:	0800ac59 	.word	0x0800ac59

0800ad30 <__sfp>:
 800ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad32:	4607      	mov	r7, r0
 800ad34:	f7ff ffac 	bl	800ac90 <__sfp_lock_acquire>
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <__sfp+0x84>)
 800ad3a:	681e      	ldr	r6, [r3, #0]
 800ad3c:	69b3      	ldr	r3, [r6, #24]
 800ad3e:	b913      	cbnz	r3, 800ad46 <__sfp+0x16>
 800ad40:	4630      	mov	r0, r6
 800ad42:	f7ff ffbd 	bl	800acc0 <__sinit>
 800ad46:	3648      	adds	r6, #72	; 0x48
 800ad48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	d503      	bpl.n	800ad58 <__sfp+0x28>
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	b30b      	cbz	r3, 800ad98 <__sfp+0x68>
 800ad54:	6836      	ldr	r6, [r6, #0]
 800ad56:	e7f7      	b.n	800ad48 <__sfp+0x18>
 800ad58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad5c:	b9d5      	cbnz	r5, 800ad94 <__sfp+0x64>
 800ad5e:	4b16      	ldr	r3, [pc, #88]	; (800adb8 <__sfp+0x88>)
 800ad60:	60e3      	str	r3, [r4, #12]
 800ad62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad66:	6665      	str	r5, [r4, #100]	; 0x64
 800ad68:	f000 f84c 	bl	800ae04 <__retarget_lock_init_recursive>
 800ad6c:	f7ff ff96 	bl	800ac9c <__sfp_lock_release>
 800ad70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad78:	6025      	str	r5, [r4, #0]
 800ad7a:	61a5      	str	r5, [r4, #24]
 800ad7c:	2208      	movs	r2, #8
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad84:	f7fe fb88 	bl	8009498 <memset>
 800ad88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad90:	4620      	mov	r0, r4
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	3468      	adds	r4, #104	; 0x68
 800ad96:	e7d9      	b.n	800ad4c <__sfp+0x1c>
 800ad98:	2104      	movs	r1, #4
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f7ff ff62 	bl	800ac64 <__sfmoreglue>
 800ada0:	4604      	mov	r4, r0
 800ada2:	6030      	str	r0, [r6, #0]
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1d5      	bne.n	800ad54 <__sfp+0x24>
 800ada8:	f7ff ff78 	bl	800ac9c <__sfp_lock_release>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	e7ee      	b.n	800ad90 <__sfp+0x60>
 800adb2:	bf00      	nop
 800adb4:	0800bee8 	.word	0x0800bee8
 800adb8:	ffff0001 	.word	0xffff0001

0800adbc <_fwalk_reent>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	4606      	mov	r6, r0
 800adc2:	4688      	mov	r8, r1
 800adc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adc8:	2700      	movs	r7, #0
 800adca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adce:	f1b9 0901 	subs.w	r9, r9, #1
 800add2:	d505      	bpl.n	800ade0 <_fwalk_reent+0x24>
 800add4:	6824      	ldr	r4, [r4, #0]
 800add6:	2c00      	cmp	r4, #0
 800add8:	d1f7      	bne.n	800adca <_fwalk_reent+0xe>
 800adda:	4638      	mov	r0, r7
 800addc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade0:	89ab      	ldrh	r3, [r5, #12]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d907      	bls.n	800adf6 <_fwalk_reent+0x3a>
 800ade6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adea:	3301      	adds	r3, #1
 800adec:	d003      	beq.n	800adf6 <_fwalk_reent+0x3a>
 800adee:	4629      	mov	r1, r5
 800adf0:	4630      	mov	r0, r6
 800adf2:	47c0      	blx	r8
 800adf4:	4307      	orrs	r7, r0
 800adf6:	3568      	adds	r5, #104	; 0x68
 800adf8:	e7e9      	b.n	800adce <_fwalk_reent+0x12>
	...

0800adfc <_localeconv_r>:
 800adfc:	4800      	ldr	r0, [pc, #0]	; (800ae00 <_localeconv_r+0x4>)
 800adfe:	4770      	bx	lr
 800ae00:	20000180 	.word	0x20000180

0800ae04 <__retarget_lock_init_recursive>:
 800ae04:	4770      	bx	lr

0800ae06 <__retarget_lock_acquire_recursive>:
 800ae06:	4770      	bx	lr

0800ae08 <__retarget_lock_release_recursive>:
 800ae08:	4770      	bx	lr

0800ae0a <memcpy>:
 800ae0a:	440a      	add	r2, r1
 800ae0c:	4291      	cmp	r1, r2
 800ae0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae12:	d100      	bne.n	800ae16 <memcpy+0xc>
 800ae14:	4770      	bx	lr
 800ae16:	b510      	push	{r4, lr}
 800ae18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae20:	4291      	cmp	r1, r2
 800ae22:	d1f9      	bne.n	800ae18 <memcpy+0xe>
 800ae24:	bd10      	pop	{r4, pc}
	...

0800ae28 <__malloc_lock>:
 800ae28:	4801      	ldr	r0, [pc, #4]	; (800ae30 <__malloc_lock+0x8>)
 800ae2a:	f7ff bfec 	b.w	800ae06 <__retarget_lock_acquire_recursive>
 800ae2e:	bf00      	nop
 800ae30:	20000b20 	.word	0x20000b20

0800ae34 <__malloc_unlock>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__malloc_unlock+0x8>)
 800ae36:	f7ff bfe7 	b.w	800ae08 <__retarget_lock_release_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000b20 	.word	0x20000b20

0800ae40 <_Balloc>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae44:	4604      	mov	r4, r0
 800ae46:	460d      	mov	r5, r1
 800ae48:	b976      	cbnz	r6, 800ae68 <_Balloc+0x28>
 800ae4a:	2010      	movs	r0, #16
 800ae4c:	f7fe fb14 	bl	8009478 <malloc>
 800ae50:	4602      	mov	r2, r0
 800ae52:	6260      	str	r0, [r4, #36]	; 0x24
 800ae54:	b920      	cbnz	r0, 800ae60 <_Balloc+0x20>
 800ae56:	4b18      	ldr	r3, [pc, #96]	; (800aeb8 <_Balloc+0x78>)
 800ae58:	4818      	ldr	r0, [pc, #96]	; (800aebc <_Balloc+0x7c>)
 800ae5a:	2166      	movs	r1, #102	; 0x66
 800ae5c:	f000 fdec 	bl	800ba38 <__assert_func>
 800ae60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae64:	6006      	str	r6, [r0, #0]
 800ae66:	60c6      	str	r6, [r0, #12]
 800ae68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae6a:	68f3      	ldr	r3, [r6, #12]
 800ae6c:	b183      	cbz	r3, 800ae90 <_Balloc+0x50>
 800ae6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae76:	b9b8      	cbnz	r0, 800aea8 <_Balloc+0x68>
 800ae78:	2101      	movs	r1, #1
 800ae7a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae7e:	1d72      	adds	r2, r6, #5
 800ae80:	0092      	lsls	r2, r2, #2
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 fb5a 	bl	800b53c <_calloc_r>
 800ae88:	b160      	cbz	r0, 800aea4 <_Balloc+0x64>
 800ae8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae8e:	e00e      	b.n	800aeae <_Balloc+0x6e>
 800ae90:	2221      	movs	r2, #33	; 0x21
 800ae92:	2104      	movs	r1, #4
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fb51 	bl	800b53c <_calloc_r>
 800ae9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae9c:	60f0      	str	r0, [r6, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e4      	bne.n	800ae6e <_Balloc+0x2e>
 800aea4:	2000      	movs	r0, #0
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	6802      	ldr	r2, [r0, #0]
 800aeaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aeb4:	e7f7      	b.n	800aea6 <_Balloc+0x66>
 800aeb6:	bf00      	nop
 800aeb8:	0800bf2d 	.word	0x0800bf2d
 800aebc:	0800c014 	.word	0x0800c014

0800aec0 <_Bfree>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aec4:	4605      	mov	r5, r0
 800aec6:	460c      	mov	r4, r1
 800aec8:	b976      	cbnz	r6, 800aee8 <_Bfree+0x28>
 800aeca:	2010      	movs	r0, #16
 800aecc:	f7fe fad4 	bl	8009478 <malloc>
 800aed0:	4602      	mov	r2, r0
 800aed2:	6268      	str	r0, [r5, #36]	; 0x24
 800aed4:	b920      	cbnz	r0, 800aee0 <_Bfree+0x20>
 800aed6:	4b09      	ldr	r3, [pc, #36]	; (800aefc <_Bfree+0x3c>)
 800aed8:	4809      	ldr	r0, [pc, #36]	; (800af00 <_Bfree+0x40>)
 800aeda:	218a      	movs	r1, #138	; 0x8a
 800aedc:	f000 fdac 	bl	800ba38 <__assert_func>
 800aee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aee4:	6006      	str	r6, [r0, #0]
 800aee6:	60c6      	str	r6, [r0, #12]
 800aee8:	b13c      	cbz	r4, 800aefa <_Bfree+0x3a>
 800aeea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aeec:	6862      	ldr	r2, [r4, #4]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aef4:	6021      	str	r1, [r4, #0]
 800aef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	0800bf2d 	.word	0x0800bf2d
 800af00:	0800c014 	.word	0x0800c014

0800af04 <__multadd>:
 800af04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af08:	690e      	ldr	r6, [r1, #16]
 800af0a:	4607      	mov	r7, r0
 800af0c:	4698      	mov	r8, r3
 800af0e:	460c      	mov	r4, r1
 800af10:	f101 0014 	add.w	r0, r1, #20
 800af14:	2300      	movs	r3, #0
 800af16:	6805      	ldr	r5, [r0, #0]
 800af18:	b2a9      	uxth	r1, r5
 800af1a:	fb02 8101 	mla	r1, r2, r1, r8
 800af1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af22:	0c2d      	lsrs	r5, r5, #16
 800af24:	fb02 c505 	mla	r5, r2, r5, ip
 800af28:	b289      	uxth	r1, r1
 800af2a:	3301      	adds	r3, #1
 800af2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af30:	429e      	cmp	r6, r3
 800af32:	f840 1b04 	str.w	r1, [r0], #4
 800af36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af3a:	dcec      	bgt.n	800af16 <__multadd+0x12>
 800af3c:	f1b8 0f00 	cmp.w	r8, #0
 800af40:	d022      	beq.n	800af88 <__multadd+0x84>
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	42b3      	cmp	r3, r6
 800af46:	dc19      	bgt.n	800af7c <__multadd+0x78>
 800af48:	6861      	ldr	r1, [r4, #4]
 800af4a:	4638      	mov	r0, r7
 800af4c:	3101      	adds	r1, #1
 800af4e:	f7ff ff77 	bl	800ae40 <_Balloc>
 800af52:	4605      	mov	r5, r0
 800af54:	b928      	cbnz	r0, 800af62 <__multadd+0x5e>
 800af56:	4602      	mov	r2, r0
 800af58:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <__multadd+0x8c>)
 800af5a:	480e      	ldr	r0, [pc, #56]	; (800af94 <__multadd+0x90>)
 800af5c:	21b5      	movs	r1, #181	; 0xb5
 800af5e:	f000 fd6b 	bl	800ba38 <__assert_func>
 800af62:	6922      	ldr	r2, [r4, #16]
 800af64:	3202      	adds	r2, #2
 800af66:	f104 010c 	add.w	r1, r4, #12
 800af6a:	0092      	lsls	r2, r2, #2
 800af6c:	300c      	adds	r0, #12
 800af6e:	f7ff ff4c 	bl	800ae0a <memcpy>
 800af72:	4621      	mov	r1, r4
 800af74:	4638      	mov	r0, r7
 800af76:	f7ff ffa3 	bl	800aec0 <_Bfree>
 800af7a:	462c      	mov	r4, r5
 800af7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af80:	3601      	adds	r6, #1
 800af82:	f8c3 8014 	str.w	r8, [r3, #20]
 800af86:	6126      	str	r6, [r4, #16]
 800af88:	4620      	mov	r0, r4
 800af8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8e:	bf00      	nop
 800af90:	0800bfa3 	.word	0x0800bfa3
 800af94:	0800c014 	.word	0x0800c014

0800af98 <__hi0bits>:
 800af98:	0c03      	lsrs	r3, r0, #16
 800af9a:	041b      	lsls	r3, r3, #16
 800af9c:	b9d3      	cbnz	r3, 800afd4 <__hi0bits+0x3c>
 800af9e:	0400      	lsls	r0, r0, #16
 800afa0:	2310      	movs	r3, #16
 800afa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afa6:	bf04      	itt	eq
 800afa8:	0200      	lsleq	r0, r0, #8
 800afaa:	3308      	addeq	r3, #8
 800afac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afb0:	bf04      	itt	eq
 800afb2:	0100      	lsleq	r0, r0, #4
 800afb4:	3304      	addeq	r3, #4
 800afb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afba:	bf04      	itt	eq
 800afbc:	0080      	lsleq	r0, r0, #2
 800afbe:	3302      	addeq	r3, #2
 800afc0:	2800      	cmp	r0, #0
 800afc2:	db05      	blt.n	800afd0 <__hi0bits+0x38>
 800afc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afc8:	f103 0301 	add.w	r3, r3, #1
 800afcc:	bf08      	it	eq
 800afce:	2320      	moveq	r3, #32
 800afd0:	4618      	mov	r0, r3
 800afd2:	4770      	bx	lr
 800afd4:	2300      	movs	r3, #0
 800afd6:	e7e4      	b.n	800afa2 <__hi0bits+0xa>

0800afd8 <__lo0bits>:
 800afd8:	6803      	ldr	r3, [r0, #0]
 800afda:	f013 0207 	ands.w	r2, r3, #7
 800afde:	4601      	mov	r1, r0
 800afe0:	d00b      	beq.n	800affa <__lo0bits+0x22>
 800afe2:	07da      	lsls	r2, r3, #31
 800afe4:	d424      	bmi.n	800b030 <__lo0bits+0x58>
 800afe6:	0798      	lsls	r0, r3, #30
 800afe8:	bf49      	itett	mi
 800afea:	085b      	lsrmi	r3, r3, #1
 800afec:	089b      	lsrpl	r3, r3, #2
 800afee:	2001      	movmi	r0, #1
 800aff0:	600b      	strmi	r3, [r1, #0]
 800aff2:	bf5c      	itt	pl
 800aff4:	600b      	strpl	r3, [r1, #0]
 800aff6:	2002      	movpl	r0, #2
 800aff8:	4770      	bx	lr
 800affa:	b298      	uxth	r0, r3
 800affc:	b9b0      	cbnz	r0, 800b02c <__lo0bits+0x54>
 800affe:	0c1b      	lsrs	r3, r3, #16
 800b000:	2010      	movs	r0, #16
 800b002:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b006:	bf04      	itt	eq
 800b008:	0a1b      	lsreq	r3, r3, #8
 800b00a:	3008      	addeq	r0, #8
 800b00c:	071a      	lsls	r2, r3, #28
 800b00e:	bf04      	itt	eq
 800b010:	091b      	lsreq	r3, r3, #4
 800b012:	3004      	addeq	r0, #4
 800b014:	079a      	lsls	r2, r3, #30
 800b016:	bf04      	itt	eq
 800b018:	089b      	lsreq	r3, r3, #2
 800b01a:	3002      	addeq	r0, #2
 800b01c:	07da      	lsls	r2, r3, #31
 800b01e:	d403      	bmi.n	800b028 <__lo0bits+0x50>
 800b020:	085b      	lsrs	r3, r3, #1
 800b022:	f100 0001 	add.w	r0, r0, #1
 800b026:	d005      	beq.n	800b034 <__lo0bits+0x5c>
 800b028:	600b      	str	r3, [r1, #0]
 800b02a:	4770      	bx	lr
 800b02c:	4610      	mov	r0, r2
 800b02e:	e7e8      	b.n	800b002 <__lo0bits+0x2a>
 800b030:	2000      	movs	r0, #0
 800b032:	4770      	bx	lr
 800b034:	2020      	movs	r0, #32
 800b036:	4770      	bx	lr

0800b038 <__i2b>:
 800b038:	b510      	push	{r4, lr}
 800b03a:	460c      	mov	r4, r1
 800b03c:	2101      	movs	r1, #1
 800b03e:	f7ff feff 	bl	800ae40 <_Balloc>
 800b042:	4602      	mov	r2, r0
 800b044:	b928      	cbnz	r0, 800b052 <__i2b+0x1a>
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <__i2b+0x24>)
 800b048:	4805      	ldr	r0, [pc, #20]	; (800b060 <__i2b+0x28>)
 800b04a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b04e:	f000 fcf3 	bl	800ba38 <__assert_func>
 800b052:	2301      	movs	r3, #1
 800b054:	6144      	str	r4, [r0, #20]
 800b056:	6103      	str	r3, [r0, #16]
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop
 800b05c:	0800bfa3 	.word	0x0800bfa3
 800b060:	0800c014 	.word	0x0800c014

0800b064 <__multiply>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	4614      	mov	r4, r2
 800b06a:	690a      	ldr	r2, [r1, #16]
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	429a      	cmp	r2, r3
 800b070:	bfb8      	it	lt
 800b072:	460b      	movlt	r3, r1
 800b074:	460d      	mov	r5, r1
 800b076:	bfbc      	itt	lt
 800b078:	4625      	movlt	r5, r4
 800b07a:	461c      	movlt	r4, r3
 800b07c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b080:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b084:	68ab      	ldr	r3, [r5, #8]
 800b086:	6869      	ldr	r1, [r5, #4]
 800b088:	eb0a 0709 	add.w	r7, sl, r9
 800b08c:	42bb      	cmp	r3, r7
 800b08e:	b085      	sub	sp, #20
 800b090:	bfb8      	it	lt
 800b092:	3101      	addlt	r1, #1
 800b094:	f7ff fed4 	bl	800ae40 <_Balloc>
 800b098:	b930      	cbnz	r0, 800b0a8 <__multiply+0x44>
 800b09a:	4602      	mov	r2, r0
 800b09c:	4b42      	ldr	r3, [pc, #264]	; (800b1a8 <__multiply+0x144>)
 800b09e:	4843      	ldr	r0, [pc, #268]	; (800b1ac <__multiply+0x148>)
 800b0a0:	f240 115d 	movw	r1, #349	; 0x15d
 800b0a4:	f000 fcc8 	bl	800ba38 <__assert_func>
 800b0a8:	f100 0614 	add.w	r6, r0, #20
 800b0ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b0b0:	4633      	mov	r3, r6
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	4543      	cmp	r3, r8
 800b0b6:	d31e      	bcc.n	800b0f6 <__multiply+0x92>
 800b0b8:	f105 0c14 	add.w	ip, r5, #20
 800b0bc:	f104 0314 	add.w	r3, r4, #20
 800b0c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b0c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b0c8:	9202      	str	r2, [sp, #8]
 800b0ca:	ebac 0205 	sub.w	r2, ip, r5
 800b0ce:	3a15      	subs	r2, #21
 800b0d0:	f022 0203 	bic.w	r2, r2, #3
 800b0d4:	3204      	adds	r2, #4
 800b0d6:	f105 0115 	add.w	r1, r5, #21
 800b0da:	458c      	cmp	ip, r1
 800b0dc:	bf38      	it	cc
 800b0de:	2204      	movcc	r2, #4
 800b0e0:	9201      	str	r2, [sp, #4]
 800b0e2:	9a02      	ldr	r2, [sp, #8]
 800b0e4:	9303      	str	r3, [sp, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d808      	bhi.n	800b0fc <__multiply+0x98>
 800b0ea:	2f00      	cmp	r7, #0
 800b0ec:	dc55      	bgt.n	800b19a <__multiply+0x136>
 800b0ee:	6107      	str	r7, [r0, #16]
 800b0f0:	b005      	add	sp, #20
 800b0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f6:	f843 2b04 	str.w	r2, [r3], #4
 800b0fa:	e7db      	b.n	800b0b4 <__multiply+0x50>
 800b0fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b100:	f1ba 0f00 	cmp.w	sl, #0
 800b104:	d020      	beq.n	800b148 <__multiply+0xe4>
 800b106:	f105 0e14 	add.w	lr, r5, #20
 800b10a:	46b1      	mov	r9, r6
 800b10c:	2200      	movs	r2, #0
 800b10e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b112:	f8d9 b000 	ldr.w	fp, [r9]
 800b116:	b2a1      	uxth	r1, r4
 800b118:	fa1f fb8b 	uxth.w	fp, fp
 800b11c:	fb0a b101 	mla	r1, sl, r1, fp
 800b120:	4411      	add	r1, r2
 800b122:	f8d9 2000 	ldr.w	r2, [r9]
 800b126:	0c24      	lsrs	r4, r4, #16
 800b128:	0c12      	lsrs	r2, r2, #16
 800b12a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b12e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b132:	b289      	uxth	r1, r1
 800b134:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b138:	45f4      	cmp	ip, lr
 800b13a:	f849 1b04 	str.w	r1, [r9], #4
 800b13e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b142:	d8e4      	bhi.n	800b10e <__multiply+0xaa>
 800b144:	9901      	ldr	r1, [sp, #4]
 800b146:	5072      	str	r2, [r6, r1]
 800b148:	9a03      	ldr	r2, [sp, #12]
 800b14a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b14e:	3304      	adds	r3, #4
 800b150:	f1b9 0f00 	cmp.w	r9, #0
 800b154:	d01f      	beq.n	800b196 <__multiply+0x132>
 800b156:	6834      	ldr	r4, [r6, #0]
 800b158:	f105 0114 	add.w	r1, r5, #20
 800b15c:	46b6      	mov	lr, r6
 800b15e:	f04f 0a00 	mov.w	sl, #0
 800b162:	880a      	ldrh	r2, [r1, #0]
 800b164:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b168:	fb09 b202 	mla	r2, r9, r2, fp
 800b16c:	4492      	add	sl, r2
 800b16e:	b2a4      	uxth	r4, r4
 800b170:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b174:	f84e 4b04 	str.w	r4, [lr], #4
 800b178:	f851 4b04 	ldr.w	r4, [r1], #4
 800b17c:	f8be 2000 	ldrh.w	r2, [lr]
 800b180:	0c24      	lsrs	r4, r4, #16
 800b182:	fb09 2404 	mla	r4, r9, r4, r2
 800b186:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b18a:	458c      	cmp	ip, r1
 800b18c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b190:	d8e7      	bhi.n	800b162 <__multiply+0xfe>
 800b192:	9a01      	ldr	r2, [sp, #4]
 800b194:	50b4      	str	r4, [r6, r2]
 800b196:	3604      	adds	r6, #4
 800b198:	e7a3      	b.n	800b0e2 <__multiply+0x7e>
 800b19a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1a5      	bne.n	800b0ee <__multiply+0x8a>
 800b1a2:	3f01      	subs	r7, #1
 800b1a4:	e7a1      	b.n	800b0ea <__multiply+0x86>
 800b1a6:	bf00      	nop
 800b1a8:	0800bfa3 	.word	0x0800bfa3
 800b1ac:	0800c014 	.word	0x0800c014

0800b1b0 <__pow5mult>:
 800b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b4:	4615      	mov	r5, r2
 800b1b6:	f012 0203 	ands.w	r2, r2, #3
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	460f      	mov	r7, r1
 800b1be:	d007      	beq.n	800b1d0 <__pow5mult+0x20>
 800b1c0:	4c25      	ldr	r4, [pc, #148]	; (800b258 <__pow5mult+0xa8>)
 800b1c2:	3a01      	subs	r2, #1
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ca:	f7ff fe9b 	bl	800af04 <__multadd>
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	10ad      	asrs	r5, r5, #2
 800b1d2:	d03d      	beq.n	800b250 <__pow5mult+0xa0>
 800b1d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1d6:	b97c      	cbnz	r4, 800b1f8 <__pow5mult+0x48>
 800b1d8:	2010      	movs	r0, #16
 800b1da:	f7fe f94d 	bl	8009478 <malloc>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	6270      	str	r0, [r6, #36]	; 0x24
 800b1e2:	b928      	cbnz	r0, 800b1f0 <__pow5mult+0x40>
 800b1e4:	4b1d      	ldr	r3, [pc, #116]	; (800b25c <__pow5mult+0xac>)
 800b1e6:	481e      	ldr	r0, [pc, #120]	; (800b260 <__pow5mult+0xb0>)
 800b1e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1ec:	f000 fc24 	bl	800ba38 <__assert_func>
 800b1f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1f4:	6004      	str	r4, [r0, #0]
 800b1f6:	60c4      	str	r4, [r0, #12]
 800b1f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b200:	b94c      	cbnz	r4, 800b216 <__pow5mult+0x66>
 800b202:	f240 2171 	movw	r1, #625	; 0x271
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff ff16 	bl	800b038 <__i2b>
 800b20c:	2300      	movs	r3, #0
 800b20e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b212:	4604      	mov	r4, r0
 800b214:	6003      	str	r3, [r0, #0]
 800b216:	f04f 0900 	mov.w	r9, #0
 800b21a:	07eb      	lsls	r3, r5, #31
 800b21c:	d50a      	bpl.n	800b234 <__pow5mult+0x84>
 800b21e:	4639      	mov	r1, r7
 800b220:	4622      	mov	r2, r4
 800b222:	4630      	mov	r0, r6
 800b224:	f7ff ff1e 	bl	800b064 <__multiply>
 800b228:	4639      	mov	r1, r7
 800b22a:	4680      	mov	r8, r0
 800b22c:	4630      	mov	r0, r6
 800b22e:	f7ff fe47 	bl	800aec0 <_Bfree>
 800b232:	4647      	mov	r7, r8
 800b234:	106d      	asrs	r5, r5, #1
 800b236:	d00b      	beq.n	800b250 <__pow5mult+0xa0>
 800b238:	6820      	ldr	r0, [r4, #0]
 800b23a:	b938      	cbnz	r0, 800b24c <__pow5mult+0x9c>
 800b23c:	4622      	mov	r2, r4
 800b23e:	4621      	mov	r1, r4
 800b240:	4630      	mov	r0, r6
 800b242:	f7ff ff0f 	bl	800b064 <__multiply>
 800b246:	6020      	str	r0, [r4, #0]
 800b248:	f8c0 9000 	str.w	r9, [r0]
 800b24c:	4604      	mov	r4, r0
 800b24e:	e7e4      	b.n	800b21a <__pow5mult+0x6a>
 800b250:	4638      	mov	r0, r7
 800b252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b256:	bf00      	nop
 800b258:	0800c168 	.word	0x0800c168
 800b25c:	0800bf2d 	.word	0x0800bf2d
 800b260:	0800c014 	.word	0x0800c014

0800b264 <__lshift>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	460c      	mov	r4, r1
 800b26a:	6849      	ldr	r1, [r1, #4]
 800b26c:	6923      	ldr	r3, [r4, #16]
 800b26e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	4607      	mov	r7, r0
 800b276:	4691      	mov	r9, r2
 800b278:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b27c:	f108 0601 	add.w	r6, r8, #1
 800b280:	42b3      	cmp	r3, r6
 800b282:	db0b      	blt.n	800b29c <__lshift+0x38>
 800b284:	4638      	mov	r0, r7
 800b286:	f7ff fddb 	bl	800ae40 <_Balloc>
 800b28a:	4605      	mov	r5, r0
 800b28c:	b948      	cbnz	r0, 800b2a2 <__lshift+0x3e>
 800b28e:	4602      	mov	r2, r0
 800b290:	4b28      	ldr	r3, [pc, #160]	; (800b334 <__lshift+0xd0>)
 800b292:	4829      	ldr	r0, [pc, #164]	; (800b338 <__lshift+0xd4>)
 800b294:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b298:	f000 fbce 	bl	800ba38 <__assert_func>
 800b29c:	3101      	adds	r1, #1
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	e7ee      	b.n	800b280 <__lshift+0x1c>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f100 0114 	add.w	r1, r0, #20
 800b2a8:	f100 0210 	add.w	r2, r0, #16
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	4553      	cmp	r3, sl
 800b2b0:	db33      	blt.n	800b31a <__lshift+0xb6>
 800b2b2:	6920      	ldr	r0, [r4, #16]
 800b2b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2b8:	f104 0314 	add.w	r3, r4, #20
 800b2bc:	f019 091f 	ands.w	r9, r9, #31
 800b2c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2c8:	d02b      	beq.n	800b322 <__lshift+0xbe>
 800b2ca:	f1c9 0e20 	rsb	lr, r9, #32
 800b2ce:	468a      	mov	sl, r1
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	6818      	ldr	r0, [r3, #0]
 800b2d4:	fa00 f009 	lsl.w	r0, r0, r9
 800b2d8:	4302      	orrs	r2, r0
 800b2da:	f84a 2b04 	str.w	r2, [sl], #4
 800b2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e2:	459c      	cmp	ip, r3
 800b2e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2e8:	d8f3      	bhi.n	800b2d2 <__lshift+0x6e>
 800b2ea:	ebac 0304 	sub.w	r3, ip, r4
 800b2ee:	3b15      	subs	r3, #21
 800b2f0:	f023 0303 	bic.w	r3, r3, #3
 800b2f4:	3304      	adds	r3, #4
 800b2f6:	f104 0015 	add.w	r0, r4, #21
 800b2fa:	4584      	cmp	ip, r0
 800b2fc:	bf38      	it	cc
 800b2fe:	2304      	movcc	r3, #4
 800b300:	50ca      	str	r2, [r1, r3]
 800b302:	b10a      	cbz	r2, 800b308 <__lshift+0xa4>
 800b304:	f108 0602 	add.w	r6, r8, #2
 800b308:	3e01      	subs	r6, #1
 800b30a:	4638      	mov	r0, r7
 800b30c:	612e      	str	r6, [r5, #16]
 800b30e:	4621      	mov	r1, r4
 800b310:	f7ff fdd6 	bl	800aec0 <_Bfree>
 800b314:	4628      	mov	r0, r5
 800b316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b31e:	3301      	adds	r3, #1
 800b320:	e7c5      	b.n	800b2ae <__lshift+0x4a>
 800b322:	3904      	subs	r1, #4
 800b324:	f853 2b04 	ldr.w	r2, [r3], #4
 800b328:	f841 2f04 	str.w	r2, [r1, #4]!
 800b32c:	459c      	cmp	ip, r3
 800b32e:	d8f9      	bhi.n	800b324 <__lshift+0xc0>
 800b330:	e7ea      	b.n	800b308 <__lshift+0xa4>
 800b332:	bf00      	nop
 800b334:	0800bfa3 	.word	0x0800bfa3
 800b338:	0800c014 	.word	0x0800c014

0800b33c <__mcmp>:
 800b33c:	b530      	push	{r4, r5, lr}
 800b33e:	6902      	ldr	r2, [r0, #16]
 800b340:	690c      	ldr	r4, [r1, #16]
 800b342:	1b12      	subs	r2, r2, r4
 800b344:	d10e      	bne.n	800b364 <__mcmp+0x28>
 800b346:	f100 0314 	add.w	r3, r0, #20
 800b34a:	3114      	adds	r1, #20
 800b34c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b350:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b354:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b358:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b35c:	42a5      	cmp	r5, r4
 800b35e:	d003      	beq.n	800b368 <__mcmp+0x2c>
 800b360:	d305      	bcc.n	800b36e <__mcmp+0x32>
 800b362:	2201      	movs	r2, #1
 800b364:	4610      	mov	r0, r2
 800b366:	bd30      	pop	{r4, r5, pc}
 800b368:	4283      	cmp	r3, r0
 800b36a:	d3f3      	bcc.n	800b354 <__mcmp+0x18>
 800b36c:	e7fa      	b.n	800b364 <__mcmp+0x28>
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b372:	e7f7      	b.n	800b364 <__mcmp+0x28>

0800b374 <__mdiff>:
 800b374:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	460c      	mov	r4, r1
 800b37a:	4606      	mov	r6, r0
 800b37c:	4611      	mov	r1, r2
 800b37e:	4620      	mov	r0, r4
 800b380:	4617      	mov	r7, r2
 800b382:	f7ff ffdb 	bl	800b33c <__mcmp>
 800b386:	1e05      	subs	r5, r0, #0
 800b388:	d110      	bne.n	800b3ac <__mdiff+0x38>
 800b38a:	4629      	mov	r1, r5
 800b38c:	4630      	mov	r0, r6
 800b38e:	f7ff fd57 	bl	800ae40 <_Balloc>
 800b392:	b930      	cbnz	r0, 800b3a2 <__mdiff+0x2e>
 800b394:	4b39      	ldr	r3, [pc, #228]	; (800b47c <__mdiff+0x108>)
 800b396:	4602      	mov	r2, r0
 800b398:	f240 2132 	movw	r1, #562	; 0x232
 800b39c:	4838      	ldr	r0, [pc, #224]	; (800b480 <__mdiff+0x10c>)
 800b39e:	f000 fb4b 	bl	800ba38 <__assert_func>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	bfa4      	itt	ge
 800b3ae:	463b      	movge	r3, r7
 800b3b0:	4627      	movge	r7, r4
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	6879      	ldr	r1, [r7, #4]
 800b3b6:	bfa6      	itte	ge
 800b3b8:	461c      	movge	r4, r3
 800b3ba:	2500      	movge	r5, #0
 800b3bc:	2501      	movlt	r5, #1
 800b3be:	f7ff fd3f 	bl	800ae40 <_Balloc>
 800b3c2:	b920      	cbnz	r0, 800b3ce <__mdiff+0x5a>
 800b3c4:	4b2d      	ldr	r3, [pc, #180]	; (800b47c <__mdiff+0x108>)
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3cc:	e7e6      	b.n	800b39c <__mdiff+0x28>
 800b3ce:	693e      	ldr	r6, [r7, #16]
 800b3d0:	60c5      	str	r5, [r0, #12]
 800b3d2:	6925      	ldr	r5, [r4, #16]
 800b3d4:	f107 0114 	add.w	r1, r7, #20
 800b3d8:	f104 0914 	add.w	r9, r4, #20
 800b3dc:	f100 0e14 	add.w	lr, r0, #20
 800b3e0:	f107 0210 	add.w	r2, r7, #16
 800b3e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b3e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b3ec:	46f2      	mov	sl, lr
 800b3ee:	2700      	movs	r7, #0
 800b3f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3f8:	fa1f f883 	uxth.w	r8, r3
 800b3fc:	fa17 f78b 	uxtah	r7, r7, fp
 800b400:	0c1b      	lsrs	r3, r3, #16
 800b402:	eba7 0808 	sub.w	r8, r7, r8
 800b406:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b40a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b40e:	fa1f f888 	uxth.w	r8, r8
 800b412:	141f      	asrs	r7, r3, #16
 800b414:	454d      	cmp	r5, r9
 800b416:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b41a:	f84a 3b04 	str.w	r3, [sl], #4
 800b41e:	d8e7      	bhi.n	800b3f0 <__mdiff+0x7c>
 800b420:	1b2b      	subs	r3, r5, r4
 800b422:	3b15      	subs	r3, #21
 800b424:	f023 0303 	bic.w	r3, r3, #3
 800b428:	3304      	adds	r3, #4
 800b42a:	3415      	adds	r4, #21
 800b42c:	42a5      	cmp	r5, r4
 800b42e:	bf38      	it	cc
 800b430:	2304      	movcc	r3, #4
 800b432:	4419      	add	r1, r3
 800b434:	4473      	add	r3, lr
 800b436:	469e      	mov	lr, r3
 800b438:	460d      	mov	r5, r1
 800b43a:	4565      	cmp	r5, ip
 800b43c:	d30e      	bcc.n	800b45c <__mdiff+0xe8>
 800b43e:	f10c 0203 	add.w	r2, ip, #3
 800b442:	1a52      	subs	r2, r2, r1
 800b444:	f022 0203 	bic.w	r2, r2, #3
 800b448:	3903      	subs	r1, #3
 800b44a:	458c      	cmp	ip, r1
 800b44c:	bf38      	it	cc
 800b44e:	2200      	movcc	r2, #0
 800b450:	441a      	add	r2, r3
 800b452:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b456:	b17b      	cbz	r3, 800b478 <__mdiff+0x104>
 800b458:	6106      	str	r6, [r0, #16]
 800b45a:	e7a5      	b.n	800b3a8 <__mdiff+0x34>
 800b45c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b460:	fa17 f488 	uxtah	r4, r7, r8
 800b464:	1422      	asrs	r2, r4, #16
 800b466:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b46a:	b2a4      	uxth	r4, r4
 800b46c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b470:	f84e 4b04 	str.w	r4, [lr], #4
 800b474:	1417      	asrs	r7, r2, #16
 800b476:	e7e0      	b.n	800b43a <__mdiff+0xc6>
 800b478:	3e01      	subs	r6, #1
 800b47a:	e7ea      	b.n	800b452 <__mdiff+0xde>
 800b47c:	0800bfa3 	.word	0x0800bfa3
 800b480:	0800c014 	.word	0x0800c014

0800b484 <__d2b>:
 800b484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b488:	4689      	mov	r9, r1
 800b48a:	2101      	movs	r1, #1
 800b48c:	ec57 6b10 	vmov	r6, r7, d0
 800b490:	4690      	mov	r8, r2
 800b492:	f7ff fcd5 	bl	800ae40 <_Balloc>
 800b496:	4604      	mov	r4, r0
 800b498:	b930      	cbnz	r0, 800b4a8 <__d2b+0x24>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4b25      	ldr	r3, [pc, #148]	; (800b534 <__d2b+0xb0>)
 800b49e:	4826      	ldr	r0, [pc, #152]	; (800b538 <__d2b+0xb4>)
 800b4a0:	f240 310a 	movw	r1, #778	; 0x30a
 800b4a4:	f000 fac8 	bl	800ba38 <__assert_func>
 800b4a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4b0:	bb35      	cbnz	r5, 800b500 <__d2b+0x7c>
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	d028      	beq.n	800b50a <__d2b+0x86>
 800b4b8:	4668      	mov	r0, sp
 800b4ba:	9600      	str	r6, [sp, #0]
 800b4bc:	f7ff fd8c 	bl	800afd8 <__lo0bits>
 800b4c0:	9900      	ldr	r1, [sp, #0]
 800b4c2:	b300      	cbz	r0, 800b506 <__d2b+0x82>
 800b4c4:	9a01      	ldr	r2, [sp, #4]
 800b4c6:	f1c0 0320 	rsb	r3, r0, #32
 800b4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	40c2      	lsrs	r2, r0
 800b4d2:	6163      	str	r3, [r4, #20]
 800b4d4:	9201      	str	r2, [sp, #4]
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	61a3      	str	r3, [r4, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bf14      	ite	ne
 800b4de:	2202      	movne	r2, #2
 800b4e0:	2201      	moveq	r2, #1
 800b4e2:	6122      	str	r2, [r4, #16]
 800b4e4:	b1d5      	cbz	r5, 800b51c <__d2b+0x98>
 800b4e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ea:	4405      	add	r5, r0
 800b4ec:	f8c9 5000 	str.w	r5, [r9]
 800b4f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4f4:	f8c8 0000 	str.w	r0, [r8]
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	b003      	add	sp, #12
 800b4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b504:	e7d5      	b.n	800b4b2 <__d2b+0x2e>
 800b506:	6161      	str	r1, [r4, #20]
 800b508:	e7e5      	b.n	800b4d6 <__d2b+0x52>
 800b50a:	a801      	add	r0, sp, #4
 800b50c:	f7ff fd64 	bl	800afd8 <__lo0bits>
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	6163      	str	r3, [r4, #20]
 800b514:	2201      	movs	r2, #1
 800b516:	6122      	str	r2, [r4, #16]
 800b518:	3020      	adds	r0, #32
 800b51a:	e7e3      	b.n	800b4e4 <__d2b+0x60>
 800b51c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b524:	f8c9 0000 	str.w	r0, [r9]
 800b528:	6918      	ldr	r0, [r3, #16]
 800b52a:	f7ff fd35 	bl	800af98 <__hi0bits>
 800b52e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b532:	e7df      	b.n	800b4f4 <__d2b+0x70>
 800b534:	0800bfa3 	.word	0x0800bfa3
 800b538:	0800c014 	.word	0x0800c014

0800b53c <_calloc_r>:
 800b53c:	b513      	push	{r0, r1, r4, lr}
 800b53e:	434a      	muls	r2, r1
 800b540:	4611      	mov	r1, r2
 800b542:	9201      	str	r2, [sp, #4]
 800b544:	f7fe f800 	bl	8009548 <_malloc_r>
 800b548:	4604      	mov	r4, r0
 800b54a:	b118      	cbz	r0, 800b554 <_calloc_r+0x18>
 800b54c:	9a01      	ldr	r2, [sp, #4]
 800b54e:	2100      	movs	r1, #0
 800b550:	f7fd ffa2 	bl	8009498 <memset>
 800b554:	4620      	mov	r0, r4
 800b556:	b002      	add	sp, #8
 800b558:	bd10      	pop	{r4, pc}

0800b55a <__sfputc_r>:
 800b55a:	6893      	ldr	r3, [r2, #8]
 800b55c:	3b01      	subs	r3, #1
 800b55e:	2b00      	cmp	r3, #0
 800b560:	b410      	push	{r4}
 800b562:	6093      	str	r3, [r2, #8]
 800b564:	da08      	bge.n	800b578 <__sfputc_r+0x1e>
 800b566:	6994      	ldr	r4, [r2, #24]
 800b568:	42a3      	cmp	r3, r4
 800b56a:	db01      	blt.n	800b570 <__sfputc_r+0x16>
 800b56c:	290a      	cmp	r1, #10
 800b56e:	d103      	bne.n	800b578 <__sfputc_r+0x1e>
 800b570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b574:	f000 b98e 	b.w	800b894 <__swbuf_r>
 800b578:	6813      	ldr	r3, [r2, #0]
 800b57a:	1c58      	adds	r0, r3, #1
 800b57c:	6010      	str	r0, [r2, #0]
 800b57e:	7019      	strb	r1, [r3, #0]
 800b580:	4608      	mov	r0, r1
 800b582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <__sfputs_r>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	4606      	mov	r6, r0
 800b58c:	460f      	mov	r7, r1
 800b58e:	4614      	mov	r4, r2
 800b590:	18d5      	adds	r5, r2, r3
 800b592:	42ac      	cmp	r4, r5
 800b594:	d101      	bne.n	800b59a <__sfputs_r+0x12>
 800b596:	2000      	movs	r0, #0
 800b598:	e007      	b.n	800b5aa <__sfputs_r+0x22>
 800b59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59e:	463a      	mov	r2, r7
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7ff ffda 	bl	800b55a <__sfputc_r>
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	d1f3      	bne.n	800b592 <__sfputs_r+0xa>
 800b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5ac <_vfiprintf_r>:
 800b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	b09d      	sub	sp, #116	; 0x74
 800b5b4:	4614      	mov	r4, r2
 800b5b6:	4698      	mov	r8, r3
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	b118      	cbz	r0, 800b5c4 <_vfiprintf_r+0x18>
 800b5bc:	6983      	ldr	r3, [r0, #24]
 800b5be:	b90b      	cbnz	r3, 800b5c4 <_vfiprintf_r+0x18>
 800b5c0:	f7ff fb7e 	bl	800acc0 <__sinit>
 800b5c4:	4b89      	ldr	r3, [pc, #548]	; (800b7ec <_vfiprintf_r+0x240>)
 800b5c6:	429d      	cmp	r5, r3
 800b5c8:	d11b      	bne.n	800b602 <_vfiprintf_r+0x56>
 800b5ca:	6875      	ldr	r5, [r6, #4]
 800b5cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5ce:	07d9      	lsls	r1, r3, #31
 800b5d0:	d405      	bmi.n	800b5de <_vfiprintf_r+0x32>
 800b5d2:	89ab      	ldrh	r3, [r5, #12]
 800b5d4:	059a      	lsls	r2, r3, #22
 800b5d6:	d402      	bmi.n	800b5de <_vfiprintf_r+0x32>
 800b5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5da:	f7ff fc14 	bl	800ae06 <__retarget_lock_acquire_recursive>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	071b      	lsls	r3, r3, #28
 800b5e2:	d501      	bpl.n	800b5e8 <_vfiprintf_r+0x3c>
 800b5e4:	692b      	ldr	r3, [r5, #16]
 800b5e6:	b9eb      	cbnz	r3, 800b624 <_vfiprintf_r+0x78>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f000 f9b6 	bl	800b95c <__swsetup_r>
 800b5f0:	b1c0      	cbz	r0, 800b624 <_vfiprintf_r+0x78>
 800b5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5f4:	07dc      	lsls	r4, r3, #31
 800b5f6:	d50e      	bpl.n	800b616 <_vfiprintf_r+0x6a>
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5fc:	b01d      	add	sp, #116	; 0x74
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	4b7b      	ldr	r3, [pc, #492]	; (800b7f0 <_vfiprintf_r+0x244>)
 800b604:	429d      	cmp	r5, r3
 800b606:	d101      	bne.n	800b60c <_vfiprintf_r+0x60>
 800b608:	68b5      	ldr	r5, [r6, #8]
 800b60a:	e7df      	b.n	800b5cc <_vfiprintf_r+0x20>
 800b60c:	4b79      	ldr	r3, [pc, #484]	; (800b7f4 <_vfiprintf_r+0x248>)
 800b60e:	429d      	cmp	r5, r3
 800b610:	bf08      	it	eq
 800b612:	68f5      	ldreq	r5, [r6, #12]
 800b614:	e7da      	b.n	800b5cc <_vfiprintf_r+0x20>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	0598      	lsls	r0, r3, #22
 800b61a:	d4ed      	bmi.n	800b5f8 <_vfiprintf_r+0x4c>
 800b61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b61e:	f7ff fbf3 	bl	800ae08 <__retarget_lock_release_recursive>
 800b622:	e7e9      	b.n	800b5f8 <_vfiprintf_r+0x4c>
 800b624:	2300      	movs	r3, #0
 800b626:	9309      	str	r3, [sp, #36]	; 0x24
 800b628:	2320      	movs	r3, #32
 800b62a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b62e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b632:	2330      	movs	r3, #48	; 0x30
 800b634:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7f8 <_vfiprintf_r+0x24c>
 800b638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b63c:	f04f 0901 	mov.w	r9, #1
 800b640:	4623      	mov	r3, r4
 800b642:	469a      	mov	sl, r3
 800b644:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b648:	b10a      	cbz	r2, 800b64e <_vfiprintf_r+0xa2>
 800b64a:	2a25      	cmp	r2, #37	; 0x25
 800b64c:	d1f9      	bne.n	800b642 <_vfiprintf_r+0x96>
 800b64e:	ebba 0b04 	subs.w	fp, sl, r4
 800b652:	d00b      	beq.n	800b66c <_vfiprintf_r+0xc0>
 800b654:	465b      	mov	r3, fp
 800b656:	4622      	mov	r2, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	4630      	mov	r0, r6
 800b65c:	f7ff ff94 	bl	800b588 <__sfputs_r>
 800b660:	3001      	adds	r0, #1
 800b662:	f000 80aa 	beq.w	800b7ba <_vfiprintf_r+0x20e>
 800b666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b668:	445a      	add	r2, fp
 800b66a:	9209      	str	r2, [sp, #36]	; 0x24
 800b66c:	f89a 3000 	ldrb.w	r3, [sl]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80a2 	beq.w	800b7ba <_vfiprintf_r+0x20e>
 800b676:	2300      	movs	r3, #0
 800b678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b67c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b680:	f10a 0a01 	add.w	sl, sl, #1
 800b684:	9304      	str	r3, [sp, #16]
 800b686:	9307      	str	r3, [sp, #28]
 800b688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b68c:	931a      	str	r3, [sp, #104]	; 0x68
 800b68e:	4654      	mov	r4, sl
 800b690:	2205      	movs	r2, #5
 800b692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b696:	4858      	ldr	r0, [pc, #352]	; (800b7f8 <_vfiprintf_r+0x24c>)
 800b698:	f7f4 fda2 	bl	80001e0 <memchr>
 800b69c:	9a04      	ldr	r2, [sp, #16]
 800b69e:	b9d8      	cbnz	r0, 800b6d8 <_vfiprintf_r+0x12c>
 800b6a0:	06d1      	lsls	r1, r2, #27
 800b6a2:	bf44      	itt	mi
 800b6a4:	2320      	movmi	r3, #32
 800b6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6aa:	0713      	lsls	r3, r2, #28
 800b6ac:	bf44      	itt	mi
 800b6ae:	232b      	movmi	r3, #43	; 0x2b
 800b6b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ba:	d015      	beq.n	800b6e8 <_vfiprintf_r+0x13c>
 800b6bc:	9a07      	ldr	r2, [sp, #28]
 800b6be:	4654      	mov	r4, sl
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f04f 0c0a 	mov.w	ip, #10
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6cc:	3b30      	subs	r3, #48	; 0x30
 800b6ce:	2b09      	cmp	r3, #9
 800b6d0:	d94e      	bls.n	800b770 <_vfiprintf_r+0x1c4>
 800b6d2:	b1b0      	cbz	r0, 800b702 <_vfiprintf_r+0x156>
 800b6d4:	9207      	str	r2, [sp, #28]
 800b6d6:	e014      	b.n	800b702 <_vfiprintf_r+0x156>
 800b6d8:	eba0 0308 	sub.w	r3, r0, r8
 800b6dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	46a2      	mov	sl, r4
 800b6e6:	e7d2      	b.n	800b68e <_vfiprintf_r+0xe2>
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	1d19      	adds	r1, r3, #4
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	9103      	str	r1, [sp, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	bfbb      	ittet	lt
 800b6f4:	425b      	neglt	r3, r3
 800b6f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6fa:	9307      	strge	r3, [sp, #28]
 800b6fc:	9307      	strlt	r3, [sp, #28]
 800b6fe:	bfb8      	it	lt
 800b700:	9204      	strlt	r2, [sp, #16]
 800b702:	7823      	ldrb	r3, [r4, #0]
 800b704:	2b2e      	cmp	r3, #46	; 0x2e
 800b706:	d10c      	bne.n	800b722 <_vfiprintf_r+0x176>
 800b708:	7863      	ldrb	r3, [r4, #1]
 800b70a:	2b2a      	cmp	r3, #42	; 0x2a
 800b70c:	d135      	bne.n	800b77a <_vfiprintf_r+0x1ce>
 800b70e:	9b03      	ldr	r3, [sp, #12]
 800b710:	1d1a      	adds	r2, r3, #4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	9203      	str	r2, [sp, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	bfb8      	it	lt
 800b71a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b71e:	3402      	adds	r4, #2
 800b720:	9305      	str	r3, [sp, #20]
 800b722:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b808 <_vfiprintf_r+0x25c>
 800b726:	7821      	ldrb	r1, [r4, #0]
 800b728:	2203      	movs	r2, #3
 800b72a:	4650      	mov	r0, sl
 800b72c:	f7f4 fd58 	bl	80001e0 <memchr>
 800b730:	b140      	cbz	r0, 800b744 <_vfiprintf_r+0x198>
 800b732:	2340      	movs	r3, #64	; 0x40
 800b734:	eba0 000a 	sub.w	r0, r0, sl
 800b738:	fa03 f000 	lsl.w	r0, r3, r0
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	4303      	orrs	r3, r0
 800b740:	3401      	adds	r4, #1
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b748:	482c      	ldr	r0, [pc, #176]	; (800b7fc <_vfiprintf_r+0x250>)
 800b74a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b74e:	2206      	movs	r2, #6
 800b750:	f7f4 fd46 	bl	80001e0 <memchr>
 800b754:	2800      	cmp	r0, #0
 800b756:	d03f      	beq.n	800b7d8 <_vfiprintf_r+0x22c>
 800b758:	4b29      	ldr	r3, [pc, #164]	; (800b800 <_vfiprintf_r+0x254>)
 800b75a:	bb1b      	cbnz	r3, 800b7a4 <_vfiprintf_r+0x1f8>
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	3307      	adds	r3, #7
 800b760:	f023 0307 	bic.w	r3, r3, #7
 800b764:	3308      	adds	r3, #8
 800b766:	9303      	str	r3, [sp, #12]
 800b768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76a:	443b      	add	r3, r7
 800b76c:	9309      	str	r3, [sp, #36]	; 0x24
 800b76e:	e767      	b.n	800b640 <_vfiprintf_r+0x94>
 800b770:	fb0c 3202 	mla	r2, ip, r2, r3
 800b774:	460c      	mov	r4, r1
 800b776:	2001      	movs	r0, #1
 800b778:	e7a5      	b.n	800b6c6 <_vfiprintf_r+0x11a>
 800b77a:	2300      	movs	r3, #0
 800b77c:	3401      	adds	r4, #1
 800b77e:	9305      	str	r3, [sp, #20]
 800b780:	4619      	mov	r1, r3
 800b782:	f04f 0c0a 	mov.w	ip, #10
 800b786:	4620      	mov	r0, r4
 800b788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b78c:	3a30      	subs	r2, #48	; 0x30
 800b78e:	2a09      	cmp	r2, #9
 800b790:	d903      	bls.n	800b79a <_vfiprintf_r+0x1ee>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d0c5      	beq.n	800b722 <_vfiprintf_r+0x176>
 800b796:	9105      	str	r1, [sp, #20]
 800b798:	e7c3      	b.n	800b722 <_vfiprintf_r+0x176>
 800b79a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b79e:	4604      	mov	r4, r0
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e7f0      	b.n	800b786 <_vfiprintf_r+0x1da>
 800b7a4:	ab03      	add	r3, sp, #12
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	462a      	mov	r2, r5
 800b7aa:	4b16      	ldr	r3, [pc, #88]	; (800b804 <_vfiprintf_r+0x258>)
 800b7ac:	a904      	add	r1, sp, #16
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f7fd ffc4 	bl	800973c <_printf_float>
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	1c78      	adds	r0, r7, #1
 800b7b8:	d1d6      	bne.n	800b768 <_vfiprintf_r+0x1bc>
 800b7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7bc:	07d9      	lsls	r1, r3, #31
 800b7be:	d405      	bmi.n	800b7cc <_vfiprintf_r+0x220>
 800b7c0:	89ab      	ldrh	r3, [r5, #12]
 800b7c2:	059a      	lsls	r2, r3, #22
 800b7c4:	d402      	bmi.n	800b7cc <_vfiprintf_r+0x220>
 800b7c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7c8:	f7ff fb1e 	bl	800ae08 <__retarget_lock_release_recursive>
 800b7cc:	89ab      	ldrh	r3, [r5, #12]
 800b7ce:	065b      	lsls	r3, r3, #25
 800b7d0:	f53f af12 	bmi.w	800b5f8 <_vfiprintf_r+0x4c>
 800b7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7d6:	e711      	b.n	800b5fc <_vfiprintf_r+0x50>
 800b7d8:	ab03      	add	r3, sp, #12
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	462a      	mov	r2, r5
 800b7de:	4b09      	ldr	r3, [pc, #36]	; (800b804 <_vfiprintf_r+0x258>)
 800b7e0:	a904      	add	r1, sp, #16
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7fe fa4e 	bl	8009c84 <_printf_i>
 800b7e8:	e7e4      	b.n	800b7b4 <_vfiprintf_r+0x208>
 800b7ea:	bf00      	nop
 800b7ec:	0800bfd4 	.word	0x0800bfd4
 800b7f0:	0800bff4 	.word	0x0800bff4
 800b7f4:	0800bfb4 	.word	0x0800bfb4
 800b7f8:	0800c174 	.word	0x0800c174
 800b7fc:	0800c17e 	.word	0x0800c17e
 800b800:	0800973d 	.word	0x0800973d
 800b804:	0800b589 	.word	0x0800b589
 800b808:	0800c17a 	.word	0x0800c17a

0800b80c <__sread>:
 800b80c:	b510      	push	{r4, lr}
 800b80e:	460c      	mov	r4, r1
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	f000 fa9a 	bl	800bd4c <_read_r>
 800b818:	2800      	cmp	r0, #0
 800b81a:	bfab      	itete	ge
 800b81c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b81e:	89a3      	ldrhlt	r3, [r4, #12]
 800b820:	181b      	addge	r3, r3, r0
 800b822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b826:	bfac      	ite	ge
 800b828:	6563      	strge	r3, [r4, #84]	; 0x54
 800b82a:	81a3      	strhlt	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__swrite>:
 800b82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	461f      	mov	r7, r3
 800b834:	898b      	ldrh	r3, [r1, #12]
 800b836:	05db      	lsls	r3, r3, #23
 800b838:	4605      	mov	r5, r0
 800b83a:	460c      	mov	r4, r1
 800b83c:	4616      	mov	r6, r2
 800b83e:	d505      	bpl.n	800b84c <__swrite+0x1e>
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	2302      	movs	r3, #2
 800b846:	2200      	movs	r2, #0
 800b848:	f000 f9f8 	bl	800bc3c <_lseek_r>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	4632      	mov	r2, r6
 800b85a:	463b      	mov	r3, r7
 800b85c:	4628      	mov	r0, r5
 800b85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b862:	f000 b869 	b.w	800b938 <_write_r>

0800b866 <__sseek>:
 800b866:	b510      	push	{r4, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b86e:	f000 f9e5 	bl	800bc3c <_lseek_r>
 800b872:	1c43      	adds	r3, r0, #1
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	bf15      	itete	ne
 800b878:	6560      	strne	r0, [r4, #84]	; 0x54
 800b87a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b87e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b882:	81a3      	strheq	r3, [r4, #12]
 800b884:	bf18      	it	ne
 800b886:	81a3      	strhne	r3, [r4, #12]
 800b888:	bd10      	pop	{r4, pc}

0800b88a <__sclose>:
 800b88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88e:	f000 b8f1 	b.w	800ba74 <_close_r>
	...

0800b894 <__swbuf_r>:
 800b894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b896:	460e      	mov	r6, r1
 800b898:	4614      	mov	r4, r2
 800b89a:	4605      	mov	r5, r0
 800b89c:	b118      	cbz	r0, 800b8a6 <__swbuf_r+0x12>
 800b89e:	6983      	ldr	r3, [r0, #24]
 800b8a0:	b90b      	cbnz	r3, 800b8a6 <__swbuf_r+0x12>
 800b8a2:	f7ff fa0d 	bl	800acc0 <__sinit>
 800b8a6:	4b21      	ldr	r3, [pc, #132]	; (800b92c <__swbuf_r+0x98>)
 800b8a8:	429c      	cmp	r4, r3
 800b8aa:	d12b      	bne.n	800b904 <__swbuf_r+0x70>
 800b8ac:	686c      	ldr	r4, [r5, #4]
 800b8ae:	69a3      	ldr	r3, [r4, #24]
 800b8b0:	60a3      	str	r3, [r4, #8]
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	071a      	lsls	r2, r3, #28
 800b8b6:	d52f      	bpl.n	800b918 <__swbuf_r+0x84>
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	b36b      	cbz	r3, 800b918 <__swbuf_r+0x84>
 800b8bc:	6923      	ldr	r3, [r4, #16]
 800b8be:	6820      	ldr	r0, [r4, #0]
 800b8c0:	1ac0      	subs	r0, r0, r3
 800b8c2:	6963      	ldr	r3, [r4, #20]
 800b8c4:	b2f6      	uxtb	r6, r6
 800b8c6:	4283      	cmp	r3, r0
 800b8c8:	4637      	mov	r7, r6
 800b8ca:	dc04      	bgt.n	800b8d6 <__swbuf_r+0x42>
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	f000 f966 	bl	800bba0 <_fflush_r>
 800b8d4:	bb30      	cbnz	r0, 800b924 <__swbuf_r+0x90>
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	60a3      	str	r3, [r4, #8]
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	6022      	str	r2, [r4, #0]
 800b8e2:	701e      	strb	r6, [r3, #0]
 800b8e4:	6963      	ldr	r3, [r4, #20]
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	4283      	cmp	r3, r0
 800b8ea:	d004      	beq.n	800b8f6 <__swbuf_r+0x62>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	07db      	lsls	r3, r3, #31
 800b8f0:	d506      	bpl.n	800b900 <__swbuf_r+0x6c>
 800b8f2:	2e0a      	cmp	r6, #10
 800b8f4:	d104      	bne.n	800b900 <__swbuf_r+0x6c>
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f000 f951 	bl	800bba0 <_fflush_r>
 800b8fe:	b988      	cbnz	r0, 800b924 <__swbuf_r+0x90>
 800b900:	4638      	mov	r0, r7
 800b902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b904:	4b0a      	ldr	r3, [pc, #40]	; (800b930 <__swbuf_r+0x9c>)
 800b906:	429c      	cmp	r4, r3
 800b908:	d101      	bne.n	800b90e <__swbuf_r+0x7a>
 800b90a:	68ac      	ldr	r4, [r5, #8]
 800b90c:	e7cf      	b.n	800b8ae <__swbuf_r+0x1a>
 800b90e:	4b09      	ldr	r3, [pc, #36]	; (800b934 <__swbuf_r+0xa0>)
 800b910:	429c      	cmp	r4, r3
 800b912:	bf08      	it	eq
 800b914:	68ec      	ldreq	r4, [r5, #12]
 800b916:	e7ca      	b.n	800b8ae <__swbuf_r+0x1a>
 800b918:	4621      	mov	r1, r4
 800b91a:	4628      	mov	r0, r5
 800b91c:	f000 f81e 	bl	800b95c <__swsetup_r>
 800b920:	2800      	cmp	r0, #0
 800b922:	d0cb      	beq.n	800b8bc <__swbuf_r+0x28>
 800b924:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b928:	e7ea      	b.n	800b900 <__swbuf_r+0x6c>
 800b92a:	bf00      	nop
 800b92c:	0800bfd4 	.word	0x0800bfd4
 800b930:	0800bff4 	.word	0x0800bff4
 800b934:	0800bfb4 	.word	0x0800bfb4

0800b938 <_write_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4d07      	ldr	r5, [pc, #28]	; (800b958 <_write_r+0x20>)
 800b93c:	4604      	mov	r4, r0
 800b93e:	4608      	mov	r0, r1
 800b940:	4611      	mov	r1, r2
 800b942:	2200      	movs	r2, #0
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	461a      	mov	r2, r3
 800b948:	f7f6 f955 	bl	8001bf6 <_write>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_write_r+0x1e>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_write_r+0x1e>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20000b28 	.word	0x20000b28

0800b95c <__swsetup_r>:
 800b95c:	4b32      	ldr	r3, [pc, #200]	; (800ba28 <__swsetup_r+0xcc>)
 800b95e:	b570      	push	{r4, r5, r6, lr}
 800b960:	681d      	ldr	r5, [r3, #0]
 800b962:	4606      	mov	r6, r0
 800b964:	460c      	mov	r4, r1
 800b966:	b125      	cbz	r5, 800b972 <__swsetup_r+0x16>
 800b968:	69ab      	ldr	r3, [r5, #24]
 800b96a:	b913      	cbnz	r3, 800b972 <__swsetup_r+0x16>
 800b96c:	4628      	mov	r0, r5
 800b96e:	f7ff f9a7 	bl	800acc0 <__sinit>
 800b972:	4b2e      	ldr	r3, [pc, #184]	; (800ba2c <__swsetup_r+0xd0>)
 800b974:	429c      	cmp	r4, r3
 800b976:	d10f      	bne.n	800b998 <__swsetup_r+0x3c>
 800b978:	686c      	ldr	r4, [r5, #4]
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b980:	0719      	lsls	r1, r3, #28
 800b982:	d42c      	bmi.n	800b9de <__swsetup_r+0x82>
 800b984:	06dd      	lsls	r5, r3, #27
 800b986:	d411      	bmi.n	800b9ac <__swsetup_r+0x50>
 800b988:	2309      	movs	r3, #9
 800b98a:	6033      	str	r3, [r6, #0]
 800b98c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b990:	81a3      	strh	r3, [r4, #12]
 800b992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b996:	e03e      	b.n	800ba16 <__swsetup_r+0xba>
 800b998:	4b25      	ldr	r3, [pc, #148]	; (800ba30 <__swsetup_r+0xd4>)
 800b99a:	429c      	cmp	r4, r3
 800b99c:	d101      	bne.n	800b9a2 <__swsetup_r+0x46>
 800b99e:	68ac      	ldr	r4, [r5, #8]
 800b9a0:	e7eb      	b.n	800b97a <__swsetup_r+0x1e>
 800b9a2:	4b24      	ldr	r3, [pc, #144]	; (800ba34 <__swsetup_r+0xd8>)
 800b9a4:	429c      	cmp	r4, r3
 800b9a6:	bf08      	it	eq
 800b9a8:	68ec      	ldreq	r4, [r5, #12]
 800b9aa:	e7e6      	b.n	800b97a <__swsetup_r+0x1e>
 800b9ac:	0758      	lsls	r0, r3, #29
 800b9ae:	d512      	bpl.n	800b9d6 <__swsetup_r+0x7a>
 800b9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b2:	b141      	cbz	r1, 800b9c6 <__swsetup_r+0x6a>
 800b9b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9b8:	4299      	cmp	r1, r3
 800b9ba:	d002      	beq.n	800b9c2 <__swsetup_r+0x66>
 800b9bc:	4630      	mov	r0, r6
 800b9be:	f7fd fd73 	bl	80094a8 <_free_r>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9cc:	81a3      	strh	r3, [r4, #12]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	6063      	str	r3, [r4, #4]
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	f043 0308 	orr.w	r3, r3, #8
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	b94b      	cbnz	r3, 800b9f6 <__swsetup_r+0x9a>
 800b9e2:	89a3      	ldrh	r3, [r4, #12]
 800b9e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9ec:	d003      	beq.n	800b9f6 <__swsetup_r+0x9a>
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f000 f959 	bl	800bca8 <__smakebuf_r>
 800b9f6:	89a0      	ldrh	r0, [r4, #12]
 800b9f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9fc:	f010 0301 	ands.w	r3, r0, #1
 800ba00:	d00a      	beq.n	800ba18 <__swsetup_r+0xbc>
 800ba02:	2300      	movs	r3, #0
 800ba04:	60a3      	str	r3, [r4, #8]
 800ba06:	6963      	ldr	r3, [r4, #20]
 800ba08:	425b      	negs	r3, r3
 800ba0a:	61a3      	str	r3, [r4, #24]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	b943      	cbnz	r3, 800ba22 <__swsetup_r+0xc6>
 800ba10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba14:	d1ba      	bne.n	800b98c <__swsetup_r+0x30>
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	0781      	lsls	r1, r0, #30
 800ba1a:	bf58      	it	pl
 800ba1c:	6963      	ldrpl	r3, [r4, #20]
 800ba1e:	60a3      	str	r3, [r4, #8]
 800ba20:	e7f4      	b.n	800ba0c <__swsetup_r+0xb0>
 800ba22:	2000      	movs	r0, #0
 800ba24:	e7f7      	b.n	800ba16 <__swsetup_r+0xba>
 800ba26:	bf00      	nop
 800ba28:	2000002c 	.word	0x2000002c
 800ba2c:	0800bfd4 	.word	0x0800bfd4
 800ba30:	0800bff4 	.word	0x0800bff4
 800ba34:	0800bfb4 	.word	0x0800bfb4

0800ba38 <__assert_func>:
 800ba38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba3a:	4614      	mov	r4, r2
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <__assert_func+0x2c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4605      	mov	r5, r0
 800ba44:	68d8      	ldr	r0, [r3, #12]
 800ba46:	b14c      	cbz	r4, 800ba5c <__assert_func+0x24>
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <__assert_func+0x30>)
 800ba4a:	9100      	str	r1, [sp, #0]
 800ba4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba50:	4906      	ldr	r1, [pc, #24]	; (800ba6c <__assert_func+0x34>)
 800ba52:	462b      	mov	r3, r5
 800ba54:	f000 f8e0 	bl	800bc18 <fiprintf>
 800ba58:	f000 f997 	bl	800bd8a <abort>
 800ba5c:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <__assert_func+0x38>)
 800ba5e:	461c      	mov	r4, r3
 800ba60:	e7f3      	b.n	800ba4a <__assert_func+0x12>
 800ba62:	bf00      	nop
 800ba64:	2000002c 	.word	0x2000002c
 800ba68:	0800c185 	.word	0x0800c185
 800ba6c:	0800c192 	.word	0x0800c192
 800ba70:	0800c1c0 	.word	0x0800c1c0

0800ba74 <_close_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4d06      	ldr	r5, [pc, #24]	; (800ba90 <_close_r+0x1c>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	602b      	str	r3, [r5, #0]
 800ba80:	f7f6 f8d5 	bl	8001c2e <_close>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_close_r+0x1a>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_close_r+0x1a>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20000b28 	.word	0x20000b28

0800ba94 <__sflush_r>:
 800ba94:	898a      	ldrh	r2, [r1, #12]
 800ba96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	0710      	lsls	r0, r2, #28
 800ba9e:	460c      	mov	r4, r1
 800baa0:	d458      	bmi.n	800bb54 <__sflush_r+0xc0>
 800baa2:	684b      	ldr	r3, [r1, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	dc05      	bgt.n	800bab4 <__sflush_r+0x20>
 800baa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	dc02      	bgt.n	800bab4 <__sflush_r+0x20>
 800baae:	2000      	movs	r0, #0
 800bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	d0f9      	beq.n	800baae <__sflush_r+0x1a>
 800baba:	2300      	movs	r3, #0
 800babc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bac0:	682f      	ldr	r7, [r5, #0]
 800bac2:	602b      	str	r3, [r5, #0]
 800bac4:	d032      	beq.n	800bb2c <__sflush_r+0x98>
 800bac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	075a      	lsls	r2, r3, #29
 800bacc:	d505      	bpl.n	800bada <__sflush_r+0x46>
 800bace:	6863      	ldr	r3, [r4, #4]
 800bad0:	1ac0      	subs	r0, r0, r3
 800bad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bad4:	b10b      	cbz	r3, 800bada <__sflush_r+0x46>
 800bad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bad8:	1ac0      	subs	r0, r0, r3
 800bada:	2300      	movs	r3, #0
 800badc:	4602      	mov	r2, r0
 800bade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bae0:	6a21      	ldr	r1, [r4, #32]
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b0      	blx	r6
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	d106      	bne.n	800bafa <__sflush_r+0x66>
 800baec:	6829      	ldr	r1, [r5, #0]
 800baee:	291d      	cmp	r1, #29
 800baf0:	d82c      	bhi.n	800bb4c <__sflush_r+0xb8>
 800baf2:	4a2a      	ldr	r2, [pc, #168]	; (800bb9c <__sflush_r+0x108>)
 800baf4:	40ca      	lsrs	r2, r1
 800baf6:	07d6      	lsls	r6, r2, #31
 800baf8:	d528      	bpl.n	800bb4c <__sflush_r+0xb8>
 800bafa:	2200      	movs	r2, #0
 800bafc:	6062      	str	r2, [r4, #4]
 800bafe:	04d9      	lsls	r1, r3, #19
 800bb00:	6922      	ldr	r2, [r4, #16]
 800bb02:	6022      	str	r2, [r4, #0]
 800bb04:	d504      	bpl.n	800bb10 <__sflush_r+0x7c>
 800bb06:	1c42      	adds	r2, r0, #1
 800bb08:	d101      	bne.n	800bb0e <__sflush_r+0x7a>
 800bb0a:	682b      	ldr	r3, [r5, #0]
 800bb0c:	b903      	cbnz	r3, 800bb10 <__sflush_r+0x7c>
 800bb0e:	6560      	str	r0, [r4, #84]	; 0x54
 800bb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb12:	602f      	str	r7, [r5, #0]
 800bb14:	2900      	cmp	r1, #0
 800bb16:	d0ca      	beq.n	800baae <__sflush_r+0x1a>
 800bb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	d002      	beq.n	800bb26 <__sflush_r+0x92>
 800bb20:	4628      	mov	r0, r5
 800bb22:	f7fd fcc1 	bl	80094a8 <_free_r>
 800bb26:	2000      	movs	r0, #0
 800bb28:	6360      	str	r0, [r4, #52]	; 0x34
 800bb2a:	e7c1      	b.n	800bab0 <__sflush_r+0x1c>
 800bb2c:	6a21      	ldr	r1, [r4, #32]
 800bb2e:	2301      	movs	r3, #1
 800bb30:	4628      	mov	r0, r5
 800bb32:	47b0      	blx	r6
 800bb34:	1c41      	adds	r1, r0, #1
 800bb36:	d1c7      	bne.n	800bac8 <__sflush_r+0x34>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d0c4      	beq.n	800bac8 <__sflush_r+0x34>
 800bb3e:	2b1d      	cmp	r3, #29
 800bb40:	d001      	beq.n	800bb46 <__sflush_r+0xb2>
 800bb42:	2b16      	cmp	r3, #22
 800bb44:	d101      	bne.n	800bb4a <__sflush_r+0xb6>
 800bb46:	602f      	str	r7, [r5, #0]
 800bb48:	e7b1      	b.n	800baae <__sflush_r+0x1a>
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb50:	81a3      	strh	r3, [r4, #12]
 800bb52:	e7ad      	b.n	800bab0 <__sflush_r+0x1c>
 800bb54:	690f      	ldr	r7, [r1, #16]
 800bb56:	2f00      	cmp	r7, #0
 800bb58:	d0a9      	beq.n	800baae <__sflush_r+0x1a>
 800bb5a:	0793      	lsls	r3, r2, #30
 800bb5c:	680e      	ldr	r6, [r1, #0]
 800bb5e:	bf08      	it	eq
 800bb60:	694b      	ldreq	r3, [r1, #20]
 800bb62:	600f      	str	r7, [r1, #0]
 800bb64:	bf18      	it	ne
 800bb66:	2300      	movne	r3, #0
 800bb68:	eba6 0807 	sub.w	r8, r6, r7
 800bb6c:	608b      	str	r3, [r1, #8]
 800bb6e:	f1b8 0f00 	cmp.w	r8, #0
 800bb72:	dd9c      	ble.n	800baae <__sflush_r+0x1a>
 800bb74:	6a21      	ldr	r1, [r4, #32]
 800bb76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb78:	4643      	mov	r3, r8
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	47b0      	blx	r6
 800bb80:	2800      	cmp	r0, #0
 800bb82:	dc06      	bgt.n	800bb92 <__sflush_r+0xfe>
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb90:	e78e      	b.n	800bab0 <__sflush_r+0x1c>
 800bb92:	4407      	add	r7, r0
 800bb94:	eba8 0800 	sub.w	r8, r8, r0
 800bb98:	e7e9      	b.n	800bb6e <__sflush_r+0xda>
 800bb9a:	bf00      	nop
 800bb9c:	20400001 	.word	0x20400001

0800bba0 <_fflush_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	690b      	ldr	r3, [r1, #16]
 800bba4:	4605      	mov	r5, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	b913      	cbnz	r3, 800bbb0 <_fflush_r+0x10>
 800bbaa:	2500      	movs	r5, #0
 800bbac:	4628      	mov	r0, r5
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
 800bbb0:	b118      	cbz	r0, 800bbba <_fflush_r+0x1a>
 800bbb2:	6983      	ldr	r3, [r0, #24]
 800bbb4:	b90b      	cbnz	r3, 800bbba <_fflush_r+0x1a>
 800bbb6:	f7ff f883 	bl	800acc0 <__sinit>
 800bbba:	4b14      	ldr	r3, [pc, #80]	; (800bc0c <_fflush_r+0x6c>)
 800bbbc:	429c      	cmp	r4, r3
 800bbbe:	d11b      	bne.n	800bbf8 <_fflush_r+0x58>
 800bbc0:	686c      	ldr	r4, [r5, #4]
 800bbc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d0ef      	beq.n	800bbaa <_fflush_r+0xa>
 800bbca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbcc:	07d0      	lsls	r0, r2, #31
 800bbce:	d404      	bmi.n	800bbda <_fflush_r+0x3a>
 800bbd0:	0599      	lsls	r1, r3, #22
 800bbd2:	d402      	bmi.n	800bbda <_fflush_r+0x3a>
 800bbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbd6:	f7ff f916 	bl	800ae06 <__retarget_lock_acquire_recursive>
 800bbda:	4628      	mov	r0, r5
 800bbdc:	4621      	mov	r1, r4
 800bbde:	f7ff ff59 	bl	800ba94 <__sflush_r>
 800bbe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbe4:	07da      	lsls	r2, r3, #31
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	d4e0      	bmi.n	800bbac <_fflush_r+0xc>
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	059b      	lsls	r3, r3, #22
 800bbee:	d4dd      	bmi.n	800bbac <_fflush_r+0xc>
 800bbf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbf2:	f7ff f909 	bl	800ae08 <__retarget_lock_release_recursive>
 800bbf6:	e7d9      	b.n	800bbac <_fflush_r+0xc>
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <_fflush_r+0x70>)
 800bbfa:	429c      	cmp	r4, r3
 800bbfc:	d101      	bne.n	800bc02 <_fflush_r+0x62>
 800bbfe:	68ac      	ldr	r4, [r5, #8]
 800bc00:	e7df      	b.n	800bbc2 <_fflush_r+0x22>
 800bc02:	4b04      	ldr	r3, [pc, #16]	; (800bc14 <_fflush_r+0x74>)
 800bc04:	429c      	cmp	r4, r3
 800bc06:	bf08      	it	eq
 800bc08:	68ec      	ldreq	r4, [r5, #12]
 800bc0a:	e7da      	b.n	800bbc2 <_fflush_r+0x22>
 800bc0c:	0800bfd4 	.word	0x0800bfd4
 800bc10:	0800bff4 	.word	0x0800bff4
 800bc14:	0800bfb4 	.word	0x0800bfb4

0800bc18 <fiprintf>:
 800bc18:	b40e      	push	{r1, r2, r3}
 800bc1a:	b503      	push	{r0, r1, lr}
 800bc1c:	4601      	mov	r1, r0
 800bc1e:	ab03      	add	r3, sp, #12
 800bc20:	4805      	ldr	r0, [pc, #20]	; (800bc38 <fiprintf+0x20>)
 800bc22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc26:	6800      	ldr	r0, [r0, #0]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	f7ff fcbf 	bl	800b5ac <_vfiprintf_r>
 800bc2e:	b002      	add	sp, #8
 800bc30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc34:	b003      	add	sp, #12
 800bc36:	4770      	bx	lr
 800bc38:	2000002c 	.word	0x2000002c

0800bc3c <_lseek_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d07      	ldr	r5, [pc, #28]	; (800bc5c <_lseek_r+0x20>)
 800bc40:	4604      	mov	r4, r0
 800bc42:	4608      	mov	r0, r1
 800bc44:	4611      	mov	r1, r2
 800bc46:	2200      	movs	r2, #0
 800bc48:	602a      	str	r2, [r5, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f7f6 f816 	bl	8001c7c <_lseek>
 800bc50:	1c43      	adds	r3, r0, #1
 800bc52:	d102      	bne.n	800bc5a <_lseek_r+0x1e>
 800bc54:	682b      	ldr	r3, [r5, #0]
 800bc56:	b103      	cbz	r3, 800bc5a <_lseek_r+0x1e>
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	20000b28 	.word	0x20000b28

0800bc60 <__swhatbuf_r>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	460e      	mov	r6, r1
 800bc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc68:	2900      	cmp	r1, #0
 800bc6a:	b096      	sub	sp, #88	; 0x58
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	461d      	mov	r5, r3
 800bc70:	da07      	bge.n	800bc82 <__swhatbuf_r+0x22>
 800bc72:	2300      	movs	r3, #0
 800bc74:	602b      	str	r3, [r5, #0]
 800bc76:	89b3      	ldrh	r3, [r6, #12]
 800bc78:	061a      	lsls	r2, r3, #24
 800bc7a:	d410      	bmi.n	800bc9e <__swhatbuf_r+0x3e>
 800bc7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc80:	e00e      	b.n	800bca0 <__swhatbuf_r+0x40>
 800bc82:	466a      	mov	r2, sp
 800bc84:	f000 f888 	bl	800bd98 <_fstat_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	dbf2      	blt.n	800bc72 <__swhatbuf_r+0x12>
 800bc8c:	9a01      	ldr	r2, [sp, #4]
 800bc8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc96:	425a      	negs	r2, r3
 800bc98:	415a      	adcs	r2, r3
 800bc9a:	602a      	str	r2, [r5, #0]
 800bc9c:	e7ee      	b.n	800bc7c <__swhatbuf_r+0x1c>
 800bc9e:	2340      	movs	r3, #64	; 0x40
 800bca0:	2000      	movs	r0, #0
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	b016      	add	sp, #88	; 0x58
 800bca6:	bd70      	pop	{r4, r5, r6, pc}

0800bca8 <__smakebuf_r>:
 800bca8:	898b      	ldrh	r3, [r1, #12]
 800bcaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcac:	079d      	lsls	r5, r3, #30
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	d507      	bpl.n	800bcc4 <__smakebuf_r+0x1c>
 800bcb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	6123      	str	r3, [r4, #16]
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	6163      	str	r3, [r4, #20]
 800bcc0:	b002      	add	sp, #8
 800bcc2:	bd70      	pop	{r4, r5, r6, pc}
 800bcc4:	ab01      	add	r3, sp, #4
 800bcc6:	466a      	mov	r2, sp
 800bcc8:	f7ff ffca 	bl	800bc60 <__swhatbuf_r>
 800bccc:	9900      	ldr	r1, [sp, #0]
 800bcce:	4605      	mov	r5, r0
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7fd fc39 	bl	8009548 <_malloc_r>
 800bcd6:	b948      	cbnz	r0, 800bcec <__smakebuf_r+0x44>
 800bcd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcdc:	059a      	lsls	r2, r3, #22
 800bcde:	d4ef      	bmi.n	800bcc0 <__smakebuf_r+0x18>
 800bce0:	f023 0303 	bic.w	r3, r3, #3
 800bce4:	f043 0302 	orr.w	r3, r3, #2
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	e7e3      	b.n	800bcb4 <__smakebuf_r+0xc>
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <__smakebuf_r+0x7c>)
 800bcee:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcf0:	89a3      	ldrh	r3, [r4, #12]
 800bcf2:	6020      	str	r0, [r4, #0]
 800bcf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	9b00      	ldr	r3, [sp, #0]
 800bcfc:	6163      	str	r3, [r4, #20]
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	6120      	str	r0, [r4, #16]
 800bd02:	b15b      	cbz	r3, 800bd1c <__smakebuf_r+0x74>
 800bd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f000 f857 	bl	800bdbc <_isatty_r>
 800bd0e:	b128      	cbz	r0, 800bd1c <__smakebuf_r+0x74>
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	f023 0303 	bic.w	r3, r3, #3
 800bd16:	f043 0301 	orr.w	r3, r3, #1
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	89a0      	ldrh	r0, [r4, #12]
 800bd1e:	4305      	orrs	r5, r0
 800bd20:	81a5      	strh	r5, [r4, #12]
 800bd22:	e7cd      	b.n	800bcc0 <__smakebuf_r+0x18>
 800bd24:	0800ac59 	.word	0x0800ac59

0800bd28 <__ascii_mbtowc>:
 800bd28:	b082      	sub	sp, #8
 800bd2a:	b901      	cbnz	r1, 800bd2e <__ascii_mbtowc+0x6>
 800bd2c:	a901      	add	r1, sp, #4
 800bd2e:	b142      	cbz	r2, 800bd42 <__ascii_mbtowc+0x1a>
 800bd30:	b14b      	cbz	r3, 800bd46 <__ascii_mbtowc+0x1e>
 800bd32:	7813      	ldrb	r3, [r2, #0]
 800bd34:	600b      	str	r3, [r1, #0]
 800bd36:	7812      	ldrb	r2, [r2, #0]
 800bd38:	1e10      	subs	r0, r2, #0
 800bd3a:	bf18      	it	ne
 800bd3c:	2001      	movne	r0, #1
 800bd3e:	b002      	add	sp, #8
 800bd40:	4770      	bx	lr
 800bd42:	4610      	mov	r0, r2
 800bd44:	e7fb      	b.n	800bd3e <__ascii_mbtowc+0x16>
 800bd46:	f06f 0001 	mvn.w	r0, #1
 800bd4a:	e7f8      	b.n	800bd3e <__ascii_mbtowc+0x16>

0800bd4c <_read_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_read_r+0x20>)
 800bd50:	4604      	mov	r4, r0
 800bd52:	4608      	mov	r0, r1
 800bd54:	4611      	mov	r1, r2
 800bd56:	2200      	movs	r2, #0
 800bd58:	602a      	str	r2, [r5, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f7f5 ff2e 	bl	8001bbc <_read>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_read_r+0x1e>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_read_r+0x1e>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20000b28 	.word	0x20000b28

0800bd70 <__ascii_wctomb>:
 800bd70:	b149      	cbz	r1, 800bd86 <__ascii_wctomb+0x16>
 800bd72:	2aff      	cmp	r2, #255	; 0xff
 800bd74:	bf85      	ittet	hi
 800bd76:	238a      	movhi	r3, #138	; 0x8a
 800bd78:	6003      	strhi	r3, [r0, #0]
 800bd7a:	700a      	strbls	r2, [r1, #0]
 800bd7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd80:	bf98      	it	ls
 800bd82:	2001      	movls	r0, #1
 800bd84:	4770      	bx	lr
 800bd86:	4608      	mov	r0, r1
 800bd88:	4770      	bx	lr

0800bd8a <abort>:
 800bd8a:	b508      	push	{r3, lr}
 800bd8c:	2006      	movs	r0, #6
 800bd8e:	f000 f84d 	bl	800be2c <raise>
 800bd92:	2001      	movs	r0, #1
 800bd94:	f7f5 ff08 	bl	8001ba8 <_exit>

0800bd98 <_fstat_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d07      	ldr	r5, [pc, #28]	; (800bdb8 <_fstat_r+0x20>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	4611      	mov	r1, r2
 800bda4:	602b      	str	r3, [r5, #0]
 800bda6:	f7f5 ff4e 	bl	8001c46 <_fstat>
 800bdaa:	1c43      	adds	r3, r0, #1
 800bdac:	d102      	bne.n	800bdb4 <_fstat_r+0x1c>
 800bdae:	682b      	ldr	r3, [r5, #0]
 800bdb0:	b103      	cbz	r3, 800bdb4 <_fstat_r+0x1c>
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	bd38      	pop	{r3, r4, r5, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000b28 	.word	0x20000b28

0800bdbc <_isatty_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d06      	ldr	r5, [pc, #24]	; (800bdd8 <_isatty_r+0x1c>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	602b      	str	r3, [r5, #0]
 800bdc8:	f7f5 ff4d 	bl	8001c66 <_isatty>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_isatty_r+0x1a>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_isatty_r+0x1a>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	20000b28 	.word	0x20000b28

0800bddc <_raise_r>:
 800bddc:	291f      	cmp	r1, #31
 800bdde:	b538      	push	{r3, r4, r5, lr}
 800bde0:	4604      	mov	r4, r0
 800bde2:	460d      	mov	r5, r1
 800bde4:	d904      	bls.n	800bdf0 <_raise_r+0x14>
 800bde6:	2316      	movs	r3, #22
 800bde8:	6003      	str	r3, [r0, #0]
 800bdea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdf2:	b112      	cbz	r2, 800bdfa <_raise_r+0x1e>
 800bdf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdf8:	b94b      	cbnz	r3, 800be0e <_raise_r+0x32>
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 f830 	bl	800be60 <_getpid_r>
 800be00:	462a      	mov	r2, r5
 800be02:	4601      	mov	r1, r0
 800be04:	4620      	mov	r0, r4
 800be06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be0a:	f000 b817 	b.w	800be3c <_kill_r>
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d00a      	beq.n	800be28 <_raise_r+0x4c>
 800be12:	1c59      	adds	r1, r3, #1
 800be14:	d103      	bne.n	800be1e <_raise_r+0x42>
 800be16:	2316      	movs	r3, #22
 800be18:	6003      	str	r3, [r0, #0]
 800be1a:	2001      	movs	r0, #1
 800be1c:	e7e7      	b.n	800bdee <_raise_r+0x12>
 800be1e:	2400      	movs	r4, #0
 800be20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be24:	4628      	mov	r0, r5
 800be26:	4798      	blx	r3
 800be28:	2000      	movs	r0, #0
 800be2a:	e7e0      	b.n	800bdee <_raise_r+0x12>

0800be2c <raise>:
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <raise+0xc>)
 800be2e:	4601      	mov	r1, r0
 800be30:	6818      	ldr	r0, [r3, #0]
 800be32:	f7ff bfd3 	b.w	800bddc <_raise_r>
 800be36:	bf00      	nop
 800be38:	2000002c 	.word	0x2000002c

0800be3c <_kill_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d07      	ldr	r5, [pc, #28]	; (800be5c <_kill_r+0x20>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	4611      	mov	r1, r2
 800be48:	602b      	str	r3, [r5, #0]
 800be4a:	f7f5 fe9d 	bl	8001b88 <_kill>
 800be4e:	1c43      	adds	r3, r0, #1
 800be50:	d102      	bne.n	800be58 <_kill_r+0x1c>
 800be52:	682b      	ldr	r3, [r5, #0]
 800be54:	b103      	cbz	r3, 800be58 <_kill_r+0x1c>
 800be56:	6023      	str	r3, [r4, #0]
 800be58:	bd38      	pop	{r3, r4, r5, pc}
 800be5a:	bf00      	nop
 800be5c:	20000b28 	.word	0x20000b28

0800be60 <_getpid_r>:
 800be60:	f7f5 be8a 	b.w	8001b78 <_getpid>

0800be64 <_init>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr

0800be70 <_fini>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	bf00      	nop
 800be74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be76:	bc08      	pop	{r3}
 800be78:	469e      	mov	lr, r3
 800be7a:	4770      	bx	lr
